
from __future__ import annotations

import dataclasses
from typing import List, Dict, Optional, overload, Union, Callable, Tuple
from typing_extensions import Literal

from woke.development.core import Contract, Library, Address, Account, Chain, RequestType
from woke.development.primitive_types import *
from woke.development.transactions import TransactionAbc, TransactionRevertedError

from enum import IntEnum



class UniswapV2Router02(Contract):
    """
    [Source code](file:///Users/dteiml/p/hacker-dom/woke-uniswap-v2/src/UniswapV2Router02.sol#13)
    """
    _abi = {'constructor': {'inputs': [{'internalType': 'address', 'name': '_factory', 'type': 'address'}, {'internalType': 'address', 'name': '_WETH', 'type': 'address'}], 'stateMutability': 'nonpayable', 'type': 'constructor'}, b'\xad\\FH': {'inputs': [], 'name': 'WETH', 'outputs': [{'internalType': 'address', 'name': '', 'type': 'address'}], 'stateMutability': 'view', 'type': 'function'}, b'\xe8\xe37\x00': {'inputs': [{'internalType': 'address', 'name': 'tokenA', 'type': 'address'}, {'internalType': 'address', 'name': 'tokenB', 'type': 'address'}, {'internalType': 'uint256', 'name': 'amountADesired', 'type': 'uint256'}, {'internalType': 'uint256', 'name': 'amountBDesired', 'type': 'uint256'}, {'internalType': 'uint256', 'name': 'amountAMin', 'type': 'uint256'}, {'internalType': 'uint256', 'name': 'amountBMin', 'type': 'uint256'}, {'internalType': 'address', 'name': 'to', 'type': 'address'}, {'internalType': 'uint256', 'name': 'deadline', 'type': 'uint256'}], 'name': 'addLiquidity', 'outputs': [{'internalType': 'uint256', 'name': 'amountA', 'type': 'uint256'}, {'internalType': 'uint256', 'name': 'amountB', 'type': 'uint256'}, {'internalType': 'uint256', 'name': 'liquidity', 'type': 'uint256'}], 'stateMutability': 'nonpayable', 'type': 'function'}, b'\xf3\x05\xd7\x19': {'inputs': [{'internalType': 'address', 'name': 'token', 'type': 'address'}, {'internalType': 'uint256', 'name': 'amountTokenDesired', 'type': 'uint256'}, {'internalType': 'uint256', 'name': 'amountTokenMin', 'type': 'uint256'}, {'internalType': 'uint256', 'name': 'amountETHMin', 'type': 'uint256'}, {'internalType': 'address', 'name': 'to', 'type': 'address'}, {'internalType': 'uint256', 'name': 'deadline', 'type': 'uint256'}], 'name': 'addLiquidityETH', 'outputs': [{'internalType': 'uint256', 'name': 'amountToken', 'type': 'uint256'}, {'internalType': 'uint256', 'name': 'amountETH', 'type': 'uint256'}, {'internalType': 'uint256', 'name': 'liquidity', 'type': 'uint256'}], 'stateMutability': 'payable', 'type': 'function'}, b'\xc4Z\x01U': {'inputs': [], 'name': 'factory', 'outputs': [{'internalType': 'address', 'name': '', 'type': 'address'}], 'stateMutability': 'view', 'type': 'function'}, b'\x85\xf8\xc2Y': {'inputs': [{'internalType': 'uint256', 'name': 'amountOut', 'type': 'uint256'}, {'internalType': 'uint256', 'name': 'reserveIn', 'type': 'uint256'}, {'internalType': 'uint256', 'name': 'reserveOut', 'type': 'uint256'}], 'name': 'getAmountIn', 'outputs': [{'internalType': 'uint256', 'name': 'amountIn', 'type': 'uint256'}], 'stateMutability': 'view', 'type': 'function'}, b'\x05MP\xd4': {'inputs': [{'internalType': 'uint256', 'name': 'amountIn', 'type': 'uint256'}, {'internalType': 'uint256', 'name': 'reserveIn', 'type': 'uint256'}, {'internalType': 'uint256', 'name': 'reserveOut', 'type': 'uint256'}], 'name': 'getAmountOut', 'outputs': [{'internalType': 'uint256', 'name': 'amountOut', 'type': 'uint256'}], 'stateMutability': 'view', 'type': 'function'}, b'\x1f\x00\xcat': {'inputs': [{'internalType': 'uint256', 'name': 'amountOut', 'type': 'uint256'}, {'internalType': 'address[]', 'name': 'path', 'type': 'address[]'}], 'name': 'getAmountsIn', 'outputs': [{'internalType': 'uint256[]', 'name': 'amounts', 'type': 'uint256[]'}], 'stateMutability': 'view', 'type': 'function'}, b'\xd0l\xa6\x1f': {'inputs': [{'internalType': 'uint256', 'name': 'amountIn', 'type': 'uint256'}, {'internalType': 'address[]', 'name': 'path', 'type': 'address[]'}], 'name': 'getAmountsOut', 'outputs': [{'internalType': 'uint256[]', 'name': 'amounts', 'type': 'uint256[]'}], 'stateMutability': 'view', 'type': 'function'}, b'\xada]\xec': {'inputs': [{'internalType': 'uint256', 'name': 'amountA', 'type': 'uint256'}, {'internalType': 'uint256', 'name': 'reserveA', 'type': 'uint256'}, {'internalType': 'uint256', 'name': 'reserveB', 'type': 'uint256'}], 'name': 'quote', 'outputs': [{'internalType': 'uint256', 'name': 'amountB', 'type': 'uint256'}], 'stateMutability': 'pure', 'type': 'function'}, b'\xba\xa2\xab\xde': {'inputs': [{'internalType': 'address', 'name': 'tokenA', 'type': 'address'}, {'internalType': 'address', 'name': 'tokenB', 'type': 'address'}, {'internalType': 'uint256', 'name': 'liquidity', 'type': 'uint256'}, {'internalType': 'uint256', 'name': 'amountAMin', 'type': 'uint256'}, {'internalType': 'uint256', 'name': 'amountBMin', 'type': 'uint256'}, {'internalType': 'address', 'name': 'to', 'type': 'address'}, {'internalType': 'uint256', 'name': 'deadline', 'type': 'uint256'}], 'name': 'removeLiquidity', 'outputs': [{'internalType': 'uint256', 'name': 'amountA', 'type': 'uint256'}, {'internalType': 'uint256', 'name': 'amountB', 'type': 'uint256'}], 'stateMutability': 'nonpayable', 'type': 'function'}, b'\x02u\x1c\xec': {'inputs': [{'internalType': 'address', 'name': 'token', 'type': 'address'}, {'internalType': 'uint256', 'name': 'liquidity', 'type': 'uint256'}, {'internalType': 'uint256', 'name': 'amountTokenMin', 'type': 'uint256'}, {'internalType': 'uint256', 'name': 'amountETHMin', 'type': 'uint256'}, {'internalType': 'address', 'name': 'to', 'type': 'address'}, {'internalType': 'uint256', 'name': 'deadline', 'type': 'uint256'}], 'name': 'removeLiquidityETH', 'outputs': [{'internalType': 'uint256', 'name': 'amountToken', 'type': 'uint256'}, {'internalType': 'uint256', 'name': 'amountETH', 'type': 'uint256'}], 'stateMutability': 'nonpayable', 'type': 'function'}, b'\xaf)y\xeb': {'inputs': [{'internalType': 'address', 'name': 'token', 'type': 'address'}, {'internalType': 'uint256', 'name': 'liquidity', 'type': 'uint256'}, {'internalType': 'uint256', 'name': 'amountTokenMin', 'type': 'uint256'}, {'internalType': 'uint256', 'name': 'amountETHMin', 'type': 'uint256'}, {'internalType': 'address', 'name': 'to', 'type': 'address'}, {'internalType': 'uint256', 'name': 'deadline', 'type': 'uint256'}], 'name': 'removeLiquidityETHSupportingFeeOnTransferTokens', 'outputs': [{'internalType': 'uint256', 'name': 'amountETH', 'type': 'uint256'}], 'stateMutability': 'nonpayable', 'type': 'function'}, b'\xde\xd98*': {'inputs': [{'internalType': 'address', 'name': 'token', 'type': 'address'}, {'internalType': 'uint256', 'name': 'liquidity', 'type': 'uint256'}, {'internalType': 'uint256', 'name': 'amountTokenMin', 'type': 'uint256'}, {'internalType': 'uint256', 'name': 'amountETHMin', 'type': 'uint256'}, {'internalType': 'address', 'name': 'to', 'type': 'address'}, {'internalType': 'uint256', 'name': 'deadline', 'type': 'uint256'}, {'internalType': 'bool', 'name': 'approveMax', 'type': 'bool'}, {'internalType': 'uint8', 'name': 'v', 'type': 'uint8'}, {'internalType': 'bytes32', 'name': 'r', 'type': 'bytes32'}, {'internalType': 'bytes32', 'name': 's', 'type': 'bytes32'}], 'name': 'removeLiquidityETHWithPermit', 'outputs': [{'internalType': 'uint256', 'name': 'amountToken', 'type': 'uint256'}, {'internalType': 'uint256', 'name': 'amountETH', 'type': 'uint256'}], 'stateMutability': 'nonpayable', 'type': 'function'}, b'[\rY\x84': {'inputs': [{'internalType': 'address', 'name': 'token', 'type': 'address'}, {'internalType': 'uint256', 'name': 'liquidity', 'type': 'uint256'}, {'internalType': 'uint256', 'name': 'amountTokenMin', 'type': 'uint256'}, {'internalType': 'uint256', 'name': 'amountETHMin', 'type': 'uint256'}, {'internalType': 'address', 'name': 'to', 'type': 'address'}, {'internalType': 'uint256', 'name': 'deadline', 'type': 'uint256'}, {'internalType': 'bool', 'name': 'approveMax', 'type': 'bool'}, {'internalType': 'uint8', 'name': 'v', 'type': 'uint8'}, {'internalType': 'bytes32', 'name': 'r', 'type': 'bytes32'}, {'internalType': 'bytes32', 'name': 's', 'type': 'bytes32'}], 'name': 'removeLiquidityETHWithPermitSupportingFeeOnTransferTokens', 'outputs': [{'internalType': 'uint256', 'name': 'amountETH', 'type': 'uint256'}], 'stateMutability': 'nonpayable', 'type': 'function'}, b'!\x95\x99\\': {'inputs': [{'internalType': 'address', 'name': 'tokenA', 'type': 'address'}, {'internalType': 'address', 'name': 'tokenB', 'type': 'address'}, {'internalType': 'uint256', 'name': 'liquidity', 'type': 'uint256'}, {'internalType': 'uint256', 'name': 'amountAMin', 'type': 'uint256'}, {'internalType': 'uint256', 'name': 'amountBMin', 'type': 'uint256'}, {'internalType': 'address', 'name': 'to', 'type': 'address'}, {'internalType': 'uint256', 'name': 'deadline', 'type': 'uint256'}, {'internalType': 'bool', 'name': 'approveMax', 'type': 'bool'}, {'internalType': 'uint8', 'name': 'v', 'type': 'uint8'}, {'internalType': 'bytes32', 'name': 'r', 'type': 'bytes32'}, {'internalType': 'bytes32', 'name': 's', 'type': 'bytes32'}], 'name': 'removeLiquidityWithPermit', 'outputs': [{'internalType': 'uint256', 'name': 'amountA', 'type': 'uint256'}, {'internalType': 'uint256', 'name': 'amountB', 'type': 'uint256'}], 'stateMutability': 'nonpayable', 'type': 'function'}, b'\xfb;\xdbA': {'inputs': [{'internalType': 'uint256', 'name': 'amountOut', 'type': 'uint256'}, {'internalType': 'address[]', 'name': 'path', 'type': 'address[]'}, {'internalType': 'address', 'name': 'to', 'type': 'address'}, {'internalType': 'uint256', 'name': 'deadline', 'type': 'uint256'}], 'name': 'swapETHForExactTokens', 'outputs': [{'internalType': 'uint256[]', 'name': 'amounts', 'type': 'uint256[]'}], 'stateMutability': 'payable', 'type': 'function'}, b'\x7f\xf3j\xb5': {'inputs': [{'internalType': 'uint256', 'name': 'amountOutMin', 'type': 'uint256'}, {'internalType': 'address[]', 'name': 'path', 'type': 'address[]'}, {'internalType': 'address', 'name': 'to', 'type': 'address'}, {'internalType': 'uint256', 'name': 'deadline', 'type': 'uint256'}], 'name': 'swapExactETHForTokens', 'outputs': [{'internalType': 'uint256[]', 'name': 'amounts', 'type': 'uint256[]'}], 'stateMutability': 'payable', 'type': 'function'}, b'\xb6\xf9\xde\x95': {'inputs': [{'internalType': 'uint256', 'name': 'amountOutMin', 'type': 'uint256'}, {'internalType': 'address[]', 'name': 'path', 'type': 'address[]'}, {'internalType': 'address', 'name': 'to', 'type': 'address'}, {'internalType': 'uint256', 'name': 'deadline', 'type': 'uint256'}], 'name': 'swapExactETHForTokensSupportingFeeOnTransferTokens', 'outputs': [], 'stateMutability': 'payable', 'type': 'function'}, b'\x18\xcb\xaf\xe5': {'inputs': [{'internalType': 'uint256', 'name': 'amountIn', 'type': 'uint256'}, {'internalType': 'uint256', 'name': 'amountOutMin', 'type': 'uint256'}, {'internalType': 'address[]', 'name': 'path', 'type': 'address[]'}, {'internalType': 'address', 'name': 'to', 'type': 'address'}, {'internalType': 'uint256', 'name': 'deadline', 'type': 'uint256'}], 'name': 'swapExactTokensForETH', 'outputs': [{'internalType': 'uint256[]', 'name': 'amounts', 'type': 'uint256[]'}], 'stateMutability': 'nonpayable', 'type': 'function'}, b'y\x1a\xc9G': {'inputs': [{'internalType': 'uint256', 'name': 'amountIn', 'type': 'uint256'}, {'internalType': 'uint256', 'name': 'amountOutMin', 'type': 'uint256'}, {'internalType': 'address[]', 'name': 'path', 'type': 'address[]'}, {'internalType': 'address', 'name': 'to', 'type': 'address'}, {'internalType': 'uint256', 'name': 'deadline', 'type': 'uint256'}], 'name': 'swapExactTokensForETHSupportingFeeOnTransferTokens', 'outputs': [], 'stateMutability': 'nonpayable', 'type': 'function'}, b'8\xed\x179': {'inputs': [{'internalType': 'uint256', 'name': 'amountIn', 'type': 'uint256'}, {'internalType': 'uint256', 'name': 'amountOutMin', 'type': 'uint256'}, {'internalType': 'address[]', 'name': 'path', 'type': 'address[]'}, {'internalType': 'address', 'name': 'to', 'type': 'address'}, {'internalType': 'uint256', 'name': 'deadline', 'type': 'uint256'}], 'name': 'swapExactTokensForTokens', 'outputs': [{'internalType': 'uint256[]', 'name': 'amounts', 'type': 'uint256[]'}], 'stateMutability': 'nonpayable', 'type': 'function'}, b'\\\x11\xd7\x95': {'inputs': [{'internalType': 'uint256', 'name': 'amountIn', 'type': 'uint256'}, {'internalType': 'uint256', 'name': 'amountOutMin', 'type': 'uint256'}, {'internalType': 'address[]', 'name': 'path', 'type': 'address[]'}, {'internalType': 'address', 'name': 'to', 'type': 'address'}, {'internalType': 'uint256', 'name': 'deadline', 'type': 'uint256'}], 'name': 'swapExactTokensForTokensSupportingFeeOnTransferTokens', 'outputs': [], 'stateMutability': 'nonpayable', 'type': 'function'}, b'\x959\xca\xb8': {'inputs': [{'internalType': 'uint256', 'name': 'amountIn', 'type': 'uint256'}, {'internalType': 'uint256', 'name': 'amountOutMin', 'type': 'uint256'}, {'internalType': 'address[]', 'name': 'path', 'type': 'address[]'}, {'internalType': 'address', 'name': 'to', 'type': 'address'}, {'internalType': 'uint256', 'name': 'deadline', 'type': 'uint256'}], 'name': 'swapExactTokensForTokens_noFee', 'outputs': [{'internalType': 'uint256[]', 'name': 'amounts', 'type': 'uint256[]'}], 'stateMutability': 'nonpayable', 'type': 'function'}, b'J%\xd9J': {'inputs': [{'internalType': 'uint256', 'name': 'amountOut', 'type': 'uint256'}, {'internalType': 'uint256', 'name': 'amountInMax', 'type': 'uint256'}, {'internalType': 'address[]', 'name': 'path', 'type': 'address[]'}, {'internalType': 'address', 'name': 'to', 'type': 'address'}, {'internalType': 'uint256', 'name': 'deadline', 'type': 'uint256'}], 'name': 'swapTokensForExactETH', 'outputs': [{'internalType': 'uint256[]', 'name': 'amounts', 'type': 'uint256[]'}], 'stateMutability': 'nonpayable', 'type': 'function'}, b'\x88\x03\xdb\xee': {'inputs': [{'internalType': 'uint256', 'name': 'amountOut', 'type': 'uint256'}, {'internalType': 'uint256', 'name': 'amountInMax', 'type': 'uint256'}, {'internalType': 'address[]', 'name': 'path', 'type': 'address[]'}, {'internalType': 'address', 'name': 'to', 'type': 'address'}, {'internalType': 'uint256', 'name': 'deadline', 'type': 'uint256'}], 'name': 'swapTokensForExactTokens', 'outputs': [{'internalType': 'uint256[]', 'name': 'amounts', 'type': 'uint256[]'}], 'stateMutability': 'nonpayable', 'type': 'function'}, 'receive': {'stateMutability': 'payable', 'type': 'receive'}}
    _creation_code = "60c060405234801562000010575f80fd5b5060405162004ec438038062004ec4833981016040819052620000339162000067565b6001600160a01b039182166080521660a0526200009d565b80516001600160a01b038116811462000062575f80fd5b919050565b5f806040838503121562000079575f80fd5b62000084836200004b565b915062000094602084016200004b565b90509250929050565b60805160a051614c84620002405f395f818161017401528181610393015281816105400152818161058f015281816106450152818161086301528181610bdc01528181610d140152818161105501528181611135015281816111de0152818161126c01528181611388015281816114110152818161179c01528181611852015281816118de01528181611959015281816119c901528181611dfc01528181611fde0152818161203301528181612067015281816120f80152818161222b0152818161233a01526123c301525f818161044e015281816106c101528181610791015281816109440152818161097b01528181610a8c01528181610c5801528181610cf201528181610e21015281816112e6015281816114430152818161158701528181611663015281816119fb01528181611c1001528181611dac01528181611dda01528181611ef901528181612011015281816122a5015281816123f501528181612d8f01528181612ddf0152818161312601528181613285015281816137330152818161376601528181613a2201528181613ac20152613b350152614c845ff3fe608060405260043610610164575f3560e01c80638803dbee116100cd578063baa2abde11610087578063ded9382a11610062578063ded9382a1461048f578063e8e33700146104ae578063f305d719146104e8578063fb3bdb41146104fb575f80fd5b8063baa2abde1461041e578063c45a01551461043d578063d06ca61f14610470575f80fd5b80638803dbee146103445780639539cab814610363578063ad5c464814610382578063ad615dec146103cd578063af2979eb146103ec578063b6f9de951461040b575f80fd5b80634a25d94a1161011e5780634a25d94a146102965780635b0d5984146102b55780635c11d795146102d4578063791ac947146102f35780637ff36ab51461031257806385f8c25914610325575f80fd5b806302751cec146101a7578063054d50d4146101e057806318cbafe51461020d5780631f00ca74146102395780632195995c1461025857806338ed173914610277575f80fd5b366101a357336001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016146101a1576101a16140b1565b005b5f80fd5b3480156101b2575f80fd5b506101c66101c13660046140e9565b61050e565b604080519283526020830191909152015b60405180910390f35b3480156101eb575f80fd5b506101ff6101fa366004614143565b610604565b6040519081526020016101d7565b348015610218575f80fd5b5061022c6102273660046141ad565b610618565b6040516101d7919061421b565b348015610244575f80fd5b5061022c610253366004614272565b61093d565b348015610263575f80fd5b506101c661027236600461435b565b610973565b348015610282575f80fd5b5061022c6102913660046141ad565b610a43565b3480156102a1575f80fd5b5061022c6102b03660046141ad565b610baf565b3480156102c0575f80fd5b506101ff6102cf3660046143fe565b610ceb565b3480156102df575f80fd5b506101a16102ee3660046141ad565b610dd0565b3480156102fe575f80fd5b506101a161030d3660046141ad565b61102a565b61022c61032036600461448e565b611247565b348015610330575f80fd5b506101ff61033f366004614143565b611553565b34801561034f575f80fd5b5061022c61035e3660046141ad565b61155f565b34801561036e575f80fd5b5061022c61037d3660046141ad565b61161a565b34801561038d575f80fd5b506103b57f000000000000000000000000000000000000000000000000000000000000000081565b6040516001600160a01b0390911681526020016101d7565b3480156103d8575f80fd5b506101ff6103e7366004614143565b611768565b3480156103f7575f80fd5b506101ff6104063660046140e9565b611774565b6101a161041936600461448e565b6118bb565b348015610429575f80fd5b506101c66104383660046144f0565b611be7565b348015610448575f80fd5b506103b57f000000000000000000000000000000000000000000000000000000000000000081565b34801561047b575f80fd5b5061022c61048a366004614272565b611da5565b34801561049a575f80fd5b506101c66104a93660046143fe565b611dd2565b3480156104b9575f80fd5b506104cd6104c836600461455d565b611ebc565b604080519384526020840192909252908201526060016101d7565b6104cd6104f63660046140e9565b611fb4565b61022c61050936600461448e565b612206565b5f80824281101561053a5760405162461bcd60e51b8152600401610531906145d4565b60405180910390fd5b610569897f00000000000000000000000000000000000000000000000000000000000000008a8a8a308a611be7565b9093509150610579898685612545565b604051632e1a7d4d60e01b8152600481018390527f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031690632e1a7d4d906024015f604051808303815f87803b1580156105d8575f80fd5b505af11580156105ea573d5f803e3d5ffd5b505050506105f88583612671565b50965096945050505050565b5f61061084848461274c565b949350505050565b6060814281101561063b5760405162461bcd60e51b8152600401610531906145d4565b6001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016868661067260018261461f565b81811061068157610681614632565b90506020020160208101906106969190614646565b6001600160a01b0316146106bc5760405162461bcd60e51b815260040161053190614668565b6107197f0000000000000000000000000000000000000000000000000000000000000000898888808060200260200160405190810160405280939291908181526020018383602002808284375f9201919091525061281092505050565b915086826001845161072b919061461f565b8151811061073b5761073b614632565b602002602001015110156107615760405162461bcd60e51b81526004016105319061469f565b61082386865f81811061077657610776614632565b905060200201602081019061078b9190614646565b336108047f00000000000000000000000000000000000000000000000000000000000000008a8a5f8181106107c2576107c2614632565b90506020020160208101906107d79190614646565b8b8b60018181106107ea576107ea614632565b90506020020160208101906107ff9190614646565b612998565b855f8151811061081657610816614632565b6020026020010151612a8f565b610861828787808060200260200160405190810160405280939291908181526020018383602002808284375f92019190915250309250612c48915050565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316632e1a7d4d836001855161089f919061461f565b815181106108af576108af614632565b60200260200101516040518263ffffffff1660e01b81526004016108d591815260200190565b5f604051808303815f87803b1580156108ec575f80fd5b505af11580156108fe573d5f803e3d5ffd5b50505050610932848360018551610915919061461f565b8151811061092557610925614632565b6020026020010151612671565b509695505050505050565b606061096a7f00000000000000000000000000000000000000000000000000000000000000008484612ed5565b90505b92915050565b5f805f6109a17f00000000000000000000000000000000000000000000000000000000000000008f8f612998565b90505f876109af578c6109b2565b5f195b60405163d505accf60e01b81529091506001600160a01b0383169063d505accf906109ed903390309086908f908e908e908e906004016146ea565b5f604051808303815f87803b158015610a04575f80fd5b505af1158015610a16573d5f803e3d5ffd5b50505050610a298f8f8f8f8f8f8f611be7565b809450819550505050509b509b9950505050505050505050565b60608142811015610a665760405162461bcd60e51b8152600401610531906145d4565b610a87604051806060016040528060228152602001614c2d60229139613024565b610ae47f0000000000000000000000000000000000000000000000000000000000000000898888808060200260200160405190810160405280939291908181526020018383602002808284375f9201919091525061281092505050565b9150610b168260018451610af8919061461f565b81518110610b0857610b08614632565b60200260200101518861306a565b868260018451610b26919061461f565b81518110610b3657610b36614632565b60200260200101511015610b5c5760405162461bcd60e51b81526004016105319061469f565b610b7186865f81811061077657610776614632565b610932828787808060200260200160405190810160405280939291908181526020018383602002808284375f92019190915250899250612c48915050565b60608142811015610bd25760405162461bcd60e51b8152600401610531906145d4565b6001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000168686610c0960018261461f565b818110610c1857610c18614632565b9050602002016020810190610c2d9190614646565b6001600160a01b031614610c535760405162461bcd60e51b815260040161053190614668565b610cb07f0000000000000000000000000000000000000000000000000000000000000000898888808060200260200160405190810160405280939291908181526020018383602002808284375f92019190915250612ed592505050565b915086825f81518110610cc557610cc5614632565b602002602001015111156107615760405162461bcd60e51b81526004016105319061472b565b5f80610d387f00000000000000000000000000000000000000000000000000000000000000008d7f0000000000000000000000000000000000000000000000000000000000000000612998565b90505f86610d46578b610d49565b5f195b60405163d505accf60e01b81529091506001600160a01b0383169063d505accf90610d84903390309086908e908d908d908d906004016146ea565b5f604051808303815f87803b158015610d9b575f80fd5b505af1158015610dad573d5f803e3d5ffd5b50505050610dbf8d8d8d8d8d8d611774565b9d9c50505050505050505050505050565b8042811015610df15760405162461bcd60e51b8152600401610531906145d4565b610e8085855f818110610e0657610e06614632565b9050602002016020810190610e1b9190614646565b33610e7a7f000000000000000000000000000000000000000000000000000000000000000089895f818110610e5257610e52614632565b9050602002016020810190610e679190614646565b8a8a60018181106107ea576107ea614632565b8a612a8f565b5f8585610e8e60018261461f565b818110610e9d57610e9d614632565b9050602002016020810190610eb29190614646565b6040516370a0823160e01b81526001600160a01b03868116600483015291909116906370a0823190602401602060405180830381865afa158015610ef8573d5f803e3d5ffd5b505050506040513d601f19601f82011682018060405250810190610f1c9190614772565b9050610f5b8686808060200260200160405190810160405280939291908181526020018383602002808284375f920191909152508892506130b5915050565b86611002828888610f6d60018261461f565b818110610f7c57610f7c614632565b9050602002016020810190610f919190614646565b6040516370a0823160e01b81526001600160a01b03898116600483015291909116906370a08231906024015b602060405180830381865afa158015610fd8573d5f803e3d5ffd5b505050506040513d601f19601f82011682018060405250810190610ffc9190614772565b9061333b565b10156110205760405162461bcd60e51b81526004016105319061469f565b5050505050505050565b804281101561104b5760405162461bcd60e51b8152600401610531906145d4565b6001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016858561108260018261461f565b81811061109157611091614632565b90506020020160208101906110a69190614646565b6001600160a01b0316146110cc5760405162461bcd60e51b815260040161053190614668565b6110e185855f818110610e0657610e06614632565b61111e8585808060200260200160405190810160405280939291908181526020018383602002808284375f920191909152503092506130b5915050565b6040516370a0823160e01b81523060048201525f907f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316906370a0823190602401602060405180830381865afa158015611182573d5f803e3d5ffd5b505050506040513d601f19601f820116820180604052508101906111a69190614772565b9050868110156111c85760405162461bcd60e51b81526004016105319061469f565b604051632e1a7d4d60e01b8152600481018290527f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031690632e1a7d4d906024015f604051808303815f87803b158015611227575f80fd5b505af1158015611239573d5f803e3d5ffd5b505050506110208482612671565b6060814281101561126a5760405162461bcd60e51b8152600401610531906145d4565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031686865f8181106112a6576112a6614632565b90506020020160208101906112bb9190614646565b6001600160a01b0316146112e15760405162461bcd60e51b815260040161053190614668565b61133e7f0000000000000000000000000000000000000000000000000000000000000000348888808060200260200160405190810160405280939291908181526020018383602002808284375f9201919091525061281092505050565b9150868260018451611350919061461f565b8151811061136057611360614632565b602002602001015110156113865760405162461bcd60e51b81526004016105319061469f565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663d0e30db0835f815181106113c7576113c7614632565b60200260200101516040518263ffffffff1660e01b81526004015f604051808303818588803b1580156113f8575f80fd5b505af115801561140a573d5f803e3d5ffd5b50505050507f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663a9059cbb6114747f000000000000000000000000000000000000000000000000000000000000000089895f818110610e5257610e52614632565b845f8151811061148657611486614632565b60200260200101516040518363ffffffff1660e01b81526004016114bf9291906001600160a01b03929092168252602082015260400190565b6020604051808303815f875af11580156114db573d5f803e3d5ffd5b505050506040513d601f19601f820116820180604052508101906114ff9190614789565b61150b5761150b6140b1565b611549828787808060200260200160405190810160405280939291908181526020018383602002808284375f92019190915250899250612c48915050565b5095945050505050565b5f610610848484613390565b606081428110156115825760405162461bcd60e51b8152600401610531906145d4565b6115df7f0000000000000000000000000000000000000000000000000000000000000000898888808060200260200160405190810160405280939291908181526020018383602002808284375f92019190915250612ed592505050565b915086825f815181106115f4576115f4614632565b60200260200101511115610b5c5760405162461bcd60e51b81526004016105319061472b565b6060814281101561163d5760405162461bcd60e51b8152600401610531906145d4565b61165e604051806060016040528060288152602001614c0560289139613024565b6116bb7f0000000000000000000000000000000000000000000000000000000000000000898888808060200260200160405190810160405280939291908181526020018383602002808284375f9201919091525061349392505050565b91506116cf8260018451610af8919061461f565b8682600184516116df919061461f565b815181106116ef576116ef614632565b602002602001015110156117155760405162461bcd60e51b81526004016105319061469f565b61172a86865f81811061077657610776614632565b610932828787808060200260200160405190810160405280939291908181526020018383602002808284375f920191909152508992506135e6915050565b5f610610848484613862565b5f81428110156117965760405162461bcd60e51b8152600401610531906145d4565b6117c5887f00000000000000000000000000000000000000000000000000000000000000008989893089611be7565b6040516370a0823160e01b815230600482015290935061183c9150899086906001600160a01b038316906370a0823190602401602060405180830381865afa158015611813573d5f803e3d5ffd5b505050506040513d601f19601f820116820180604052508101906118379190614772565b612545565b604051632e1a7d4d60e01b8152600481018390527f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031690632e1a7d4d906024015f604051808303815f87803b15801561189b575f80fd5b505af11580156118ad573d5f803e3d5ffd5b505050506109328483612671565b80428110156118dc5760405162461bcd60e51b8152600401610531906145d4565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031685855f81811061191857611918614632565b905060200201602081019061192d9190614646565b6001600160a01b0316146119535760405162461bcd60e51b815260040161053190614668565b5f3490507f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663d0e30db0826040518263ffffffff1660e01b81526004015f604051808303818588803b1580156119b0575f80fd5b505af11580156119c2573d5f803e3d5ffd5b50505050507f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663a9059cbb611a2c7f000000000000000000000000000000000000000000000000000000000000000089895f818110610e5257610e52614632565b6040516001600160e01b031960e084901b1681526001600160a01b039091166004820152602481018490526044016020604051808303815f875af1158015611a76573d5f803e3d5ffd5b505050506040513d601f19601f82011682018060405250810190611a9a9190614789565b611aa657611aa66140b1565b5f8686611ab460018261461f565b818110611ac357611ac3614632565b9050602002016020810190611ad89190614646565b6040516370a0823160e01b81526001600160a01b03878116600483015291909116906370a0823190602401602060405180830381865afa158015611b1e573d5f803e3d5ffd5b505050506040513d601f19601f82011682018060405250810190611b429190614772565b9050611b818787808060200260200160405190810160405280939291908181526020018383602002808284375f920191909152508992506130b5915050565b87611002828989611b9360018261461f565b818110611ba257611ba2614632565b9050602002016020810190611bb79190614646565b6040516370a0823160e01b81526001600160a01b038a8116600483015291909116906370a0823190602401610fbd565b5f808242811015611c0a5760405162461bcd60e51b8152600401610531906145d4565b5f611c367f00000000000000000000000000000000000000000000000000000000000000008c8c612998565b6040516323b872dd60e01b81523360048201526001600160a01b03821660248201819052604482018c90529192506323b872dd906064016020604051808303815f875af1158015611c89573d5f803e3d5ffd5b505050506040513d601f19601f82011682018060405250810190611cad9190614789565b5060405163226bf2d160e21b81526001600160a01b0387811660048301525f9182918416906389afcb449060240160408051808303815f875af1158015611cf6573d5f803e3d5ffd5b505050506040513d601f19601f82011682018060405250810190611d1a91906147a4565b915091505f611d298e8e6138ff565b509050806001600160a01b03168e6001600160a01b031614611d4c578183611d4f565b82825b90975095508a871015611d745760405162461bcd60e51b8152600401610531906147c6565b89861015611d945760405162461bcd60e51b81526004016105319061480c565b505050505097509795505050505050565b606061096a7f00000000000000000000000000000000000000000000000000000000000000008484612810565b5f805f611e207f00000000000000000000000000000000000000000000000000000000000000008e7f0000000000000000000000000000000000000000000000000000000000000000612998565b90505f87611e2e578c611e31565b5f195b60405163d505accf60e01b81529091506001600160a01b0383169063d505accf90611e6c903390309086908f908e908e908e906004016146ea565b5f604051808303815f87803b158015611e83575f80fd5b505af1158015611e95573d5f803e3d5ffd5b50505050611ea78e8e8e8e8e8e61050e565b909f909e509c50505050505050505050505050565b5f805f8342811015611ee05760405162461bcd60e51b8152600401610531906145d4565b611eee8c8c8c8c8c8c6139f5565b90945092505f611f1f7f00000000000000000000000000000000000000000000000000000000000000008e8e612998565b9050611f2d8d338388612a8f565b611f398c338387612a8f565b6040516335313c2160e11b81526001600160a01b038881166004830152821690636a627842906024016020604051808303815f875af1158015611f7e573d5f803e3d5ffd5b505050506040513d601f19601f82011682018060405250810190611fa29190614772565b92505050985098509895505050505050565b5f805f8342811015611fd85760405162461bcd60e51b8152600401610531906145d4565b6120068a7f00000000000000000000000000000000000000000000000000000000000000008b348c8c6139f5565b90945092505f6120577f00000000000000000000000000000000000000000000000000000000000000008c7f0000000000000000000000000000000000000000000000000000000000000000612998565b90506120658b338388612a8f565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663d0e30db0856040518263ffffffff1660e01b81526004015f604051808303818588803b1580156120be575f80fd5b505af11580156120d0573d5f803e3d5ffd5b505060405163a9059cbb60e01b81526001600160a01b038581166004830152602482018990527f000000000000000000000000000000000000000000000000000000000000000016935063a9059cbb925060440190506020604051808303815f875af1158015612142573d5f803e3d5ffd5b505050506040513d601f19601f820116820180604052508101906121669190614789565b612172576121726140b1565b6040516335313c2160e11b81526001600160a01b038881166004830152821690636a627842906024016020604051808303815f875af11580156121b7573d5f803e3d5ffd5b505050506040513d601f19601f820116820180604052508101906121db9190614772565b9250833411156121f8576121f8336121f3863461461f565b612671565b505096509650969350505050565b606081428110156122295760405162461bcd60e51b8152600401610531906145d4565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031686865f81811061226557612265614632565b905060200201602081019061227a9190614646565b6001600160a01b0316146122a05760405162461bcd60e51b815260040161053190614668565b6122fd7f0000000000000000000000000000000000000000000000000000000000000000888888808060200260200160405190810160405280939291908181526020018383602002808284375f92019190915250612ed592505050565b915034825f8151811061231257612312614632565b602002602001015111156123385760405162461bcd60e51b81526004016105319061472b565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663d0e30db0835f8151811061237957612379614632565b60200260200101516040518263ffffffff1660e01b81526004015f604051808303818588803b1580156123aa575f80fd5b505af11580156123bc573d5f803e3d5ffd5b50505050507f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663a9059cbb6124267f000000000000000000000000000000000000000000000000000000000000000089895f818110610e5257610e52614632565b845f8151811061243857612438614632565b60200260200101516040518363ffffffff1660e01b81526004016124719291906001600160a01b03929092168252602082015260400190565b6020604051808303815f875af115801561248d573d5f803e3d5ffd5b505050506040513d601f19601f820116820180604052508101906124b19190614789565b6124bd576124bd6140b1565b6124fb828787808060200260200160405190810160405280939291908181526020018383602002808284375f92019190915250899250612c48915050565b815f8151811061250d5761250d614632565b60200260200101513411156115495761154933835f8151811061253257612532614632565b6020026020010151346121f3919061461f565b604080516001600160a01b038481166024830152604480830185905283518084039091018152606490920183526020820180516001600160e01b031663a9059cbb60e01b17905291515f928392908716916125a09190614874565b5f604051808303815f865af19150503d805f81146125d9576040519150601f19603f3d011682016040523d82523d5f602084013e6125de565b606091505b50915091508180156126085750805115806126085750808060200190518101906126089190614789565b61266a5760405162461bcd60e51b815260206004820152602d60248201527f5472616e7366657248656c7065723a3a736166655472616e736665723a20747260448201526c185b9cd9995c8819985a5b1959609a1b6064820152608401610531565b5050505050565b604080515f808252602082019092526001600160a01b03841690839060405161269a9190614874565b5f6040518083038185875af1925050503d805f81146126d4576040519150601f19603f3d011682016040523d82523d5f602084013e6126d9565b606091505b50509050806127475760405162461bcd60e51b815260206004820152603460248201527f5472616e7366657248656c7065723a3a736166655472616e736665724554483a60448201527308115512081d1c985b9cd9995c8819985a5b195960621b6064820152608401610531565b505050565b5f61277d6040518060400160405280600c81526020016b19d95d105b5bdd5b9d13dd5d60a21b815250858585613c0f565b5f841161279c5760405162461bcd60e51b81526004016105319061488f565b5f831180156127aa57505f82115b6127c65760405162461bcd60e51b8152600401610531906148da565b5f6127d3856103e5613c5e565b90505f6127e08285613c5e565b90505f6127f9836127f3886103e8613c5e565b90613cc4565b90506128058183614922565b979650505050505050565b60606128426040518060400160405280600d81526020016c19d95d105b5bdd5b9d1cd3dd5d609a1b8152508585613d18565b6002825110156128645760405162461bcd60e51b815260040161053190614941565b815167ffffffffffffffff81111561287e5761287e61425e565b6040519080825280602002602001820160405280156128a7578160200160208202803683370190505b50905082815f815181106128bd576128bd614632565b6020026020010181815250505f5b600183516128d9919061461f565b811015612990575f8061292b878685815181106128f8576128f8614632565b60200260200101518786600161290e9190614978565b8151811061291e5761291e614632565b6020026020010151613d5f565b9150915061295384848151811061294457612944614632565b6020026020010151838361274c565b8461295f856001614978565b8151811061296f5761296f614632565b602002602001018181525050505080806129889061498b565b9150506128cb565b509392505050565b5f6129ce6040518060400160405280601181526020017070616972466f7220626567696e6e696e6760781b815250858585613ea5565b5f806129da85856138ff565b60405163e6a4390560e01b81526001600160a01b03808416600483015280831660248301529294509092509087169063e6a4390590604401602060405180830381865afa158015612a2d573d5f803e3d5ffd5b505050506040513d601f19601f82011682018060405250810190612a5191906149a3565b9250612a866040518060400160405280601181526020017070616972466f722072657475726e696e6760781b81525084613eee565b50509392505050565b612ad06040518060400160405280601a81526020017f736166655472616e7366657246726f6d20626567696e6e696e67000000000000815250858585613ea5565b604080516001600160a01b0385811660248301528481166044830152606480830185905283518084039091018152608490920183526020820180516001600160e01b03166323b872dd60e01b17905291515f92839290881691612b339190614874565b5f604051808303815f865af19150503d805f8114612b6c576040519150601f19603f3d011682016040523d82523d5f602084013e612b71565b606091505b5091509150818015612b9b575080511580612b9b575080806020019051810190612b9b9190614789565b612c015760405162461bcd60e51b815260206004820152603160248201527f5472616e7366657248656c7065723a3a7472616e7366657246726f6d3a207472604482015270185b9cd9995c919c9bdb4819985a5b1959607a1b6064820152608401610531565b612c406040518060400160405280602081526020017f736166655472616e7366657246726f6d20656e64696e673b207375636365737381525083613f33565b505050505050565b612c6d604051806040016040528060048152602001630737761760e41b815250613024565b5f5b60018351612c7d919061461f565b811015612ea8575f80848381518110612c9857612c98614632565b602002602001015185846001612cae9190614978565b81518110612cbe57612cbe614632565b602002602001015191509150612d11604051806040016040528060058152602001641a5b9c1d5d60da1b81525083604051806040016040528060068152602001651bdd5d1c1d5d60d21b81525084613f78565b5f612d1c83836138ff565b5090505f87612d2c866001614978565b81518110612d3c57612d3c614632565b602002602001015190505f80836001600160a01b0316866001600160a01b031614612d6857825f612d6b565b5f835b915091505f60028a51612d7e919061461f565b8810612d8a5788612dd8565b612dd87f0000000000000000000000000000000000000000000000000000000000000000878c612dbb8c6002614978565b81518110612dcb57612dcb614632565b6020026020010151612998565b9050612e057f00000000000000000000000000000000000000000000000000000000000000008888612998565b6001600160a01b031663022c0d9f8484845f6040519080825280601f01601f191660200182016040528015612e41576020820181803683370190505b506040518563ffffffff1660e01b8152600401612e6194939291906149e9565b5f604051808303815f87803b158015612e78575f80fd5b505af1158015612e8a573d5f803e3d5ffd5b50505050505050505050508080612ea09061498b565b915050612c6f565b506127476040518060400160405280600b81526020016a7377617020656e64696e6760a81b815250613024565b6060600282511015612ef95760405162461bcd60e51b815260040161053190614941565b815167ffffffffffffffff811115612f1357612f1361425e565b604051908082528060200260200182016040528015612f3c578160200160208202803683370190505b509050828160018351612f4f919061461f565b81518110612f5f57612f5f614632565b6020026020010181815250505f60018351612f7a919061461f565b90505b8015612990575f80612fbf8786612f9560018761461f565b81518110612fa557612fa5614632565b602002602001015187868151811061291e5761291e614632565b91509150612fe7848481518110612fd857612fd8614632565b60200260200101518383613390565b84612ff360018661461f565b8151811061300357613003614632565b6020026020010181815250505050808061301c90614a15565b915050612f7d565b613067816040516024016130389190614a2a565b60408051601f198184030181529190526020810180516001600160e01b031663104c13eb60e21b179052613fbd565b50565b60405160248101839052604481018290526130b19060640160408051601f198184030181529190526020810180516001600160e01b0316637b3338ad60e11b179052613fbd565b5050565b5f5b600183516130c5919061461f565b811015612747575f808483815181106130e0576130e0614632565b6020026020010151858460016130f69190614978565b8151811061310657613106614632565b6020026020010151915091505f61311d83836138ff565b5090505f61314c7f00000000000000000000000000000000000000000000000000000000000000008585612998565b90505f805f80846001600160a01b0316630902f1ac6040518163ffffffff1660e01b8152600401606060405180830381865afa15801561318e573d5f803e3d5ffd5b505050506040513d601f19601f820116820180604052508101906131b29190614a52565b506001600160701b031691506001600160701b031691505f80876001600160a01b03168a6001600160a01b0316146131eb5782846131ee565b83835b6040516370a0823160e01b81526001600160a01b038a81166004830152929450909250613229918491908d16906370a0823190602401610fbd565b955061323686838361274c565b9450505050505f80856001600160a01b0316886001600160a01b03161461325e57825f613261565b5f835b915091505f60028c51613274919061461f565b8a10613280578a6132b1565b6132b17f0000000000000000000000000000000000000000000000000000000000000000898e612dbb8e6002614978565b604080515f8152602081019182905263022c0d9f60e01b9091529091506001600160a01b0387169063022c0d9f906132f290869086908690602481016149e9565b5f604051808303815f87803b158015613309575f80fd5b505af115801561331b573d5f803e3d5ffd5b5050505050505050505050505080806133339061498b565b9150506130b7565b5f82613347838261461f565b915081111561096d5760405162461bcd60e51b815260206004820152601560248201527464732d6d6174682d7375622d756e646572666c6f7760581b6044820152606401610531565b5f8084116133f55760405162461bcd60e51b815260206004820152602c60248201527f556e697377617056324c6962726172793a20494e53554646494349454e545f4f60448201526b155514155517d05353d5539560a21b6064820152608401610531565b5f8311801561340357505f82115b61341f5760405162461bcd60e51b8152600401610531906148da565b61344e6040518060400160405280600b81526020016a33b2ba20b6b7bab73a24b760a91b815250858585613c0f565b5f6134656103e861345f8688613c5e565b90613c5e565b90505f6134786103e561345f868961333b565b905061348960016127f38385614922565b9695505050505050565b60606134cb60405180604001604052806013815260200172676574416d6f756e74734f75745f6e6f46656560681b8152508585613d18565b6002825110156134ed5760405162461bcd60e51b815260040161053190614941565b815167ffffffffffffffff8111156135075761350761425e565b604051908082528060200260200182016040528015613530578160200160208202803683370190505b50905082815f8151811061354657613546614632565b6020026020010181815250505f5b60018351613562919061461f565b811015612990575f80613581878685815181106128f8576128f8614632565b915091506135a984848151811061359a5761359a614632565b60200260200101518383613fdd565b846135b5856001614978565b815181106135c5576135c5614632565b602002602001018181525050505080806135de9061498b565b915050613554565b6136116040518060400160405280600a815260200169737761705f6e6f46656560b01b815250613024565b5f5b60018351613621919061461f565b81101561382f575f8084838151811061363c5761363c614632565b6020026020010151858460016136529190614978565b8151811061366257613662614632565b6020026020010151915091506136b5604051806040016040528060058152602001641a5b9c1d5d60da1b81525083604051806040016040528060068152602001651bdd5d1c1d5d60d21b81525084613f78565b5f6136c083836138ff565b5090505f876136d0866001614978565b815181106136e0576136e0614632565b602002602001015190505f80836001600160a01b0316866001600160a01b03161461370c57825f61370f565b5f835b915091505f60028a51613722919061461f565b881061372e578861375f565b61375f7f0000000000000000000000000000000000000000000000000000000000000000878c612dbb8c6002614978565b905061378c7f00000000000000000000000000000000000000000000000000000000000000008888612998565b6001600160a01b031663cab1e0f28484845f6040519080825280601f01601f1916602001820160405280156137c8576020820181803683370190505b506040518563ffffffff1660e01b81526004016137e894939291906149e9565b5f604051808303815f87803b1580156137ff575f80fd5b505af1158015613811573d5f803e3d5ffd5b505050505050505050505080806138279061498b565b915050613613565b5061274760405180604001604052806011815260200170737761705f6e6f46656520656e64696e6760781b815250613024565b5f8084116138c05760405162461bcd60e51b815260206004820152602560248201527f556e697377617056324c6962726172793a20494e53554646494349454e545f416044820152641353d5539560da1b6064820152608401610531565b5f831180156138ce57505f82115b6138ea5760405162461bcd60e51b8152600401610531906148da565b826138f58584613c5e565b6106109190614922565b5f80826001600160a01b0316846001600160a01b0316036139705760405162461bcd60e51b815260206004820152602560248201527f556e697377617056324c6962726172793a204944454e544943414c5f41444452604482015264455353455360d81b6064820152608401610531565b826001600160a01b0316846001600160a01b031610613990578284613993565b83835b90925090506001600160a01b0382166139ee5760405162461bcd60e51b815260206004820152601e60248201527f556e697377617056324c6962726172793a205a45524f5f4144445245535300006044820152606401610531565b9250929050565b60405163e6a4390560e01b81526001600160a01b03878116600483015286811660248301525f91829182917f00000000000000000000000000000000000000000000000000000000000000009091169063e6a4390590604401602060405180830381865afa158015613a69573d5f803e3d5ffd5b505050506040513d601f19601f82011682018060405250810190613a8d91906149a3565b6001600160a01b031603613b2e576040516364e329cb60e11b81526001600160a01b03898116600483015288811660248301527f0000000000000000000000000000000000000000000000000000000000000000169063c9c65396906044016020604051808303815f875af1158015613b08573d5f803e3d5ffd5b505050506040513d601f19601f82011682018060405250810190613b2c91906149a3565b505b5f80613b5b7f00000000000000000000000000000000000000000000000000000000000000008b8b613d5f565b91509150815f148015613b6c575080155b15613b7c57879350869250613c02565b5f613b88898484613862565b9050878111613bbc5785811015613bb15760405162461bcd60e51b81526004016105319061480c565b889450925082613c00565b5f613bc8898486613862565b905089811115613bda57613bda6140b1565b87811015613bfa5760405162461bcd60e51b8152600401610531906147c6565b94508793505b505b5050965096945050505050565b613c5884848484604051602401613c299493929190614a9e565b60408051601f198184030181529190526020810180516001600160e01b031663a7a8785360e01b179052613fbd565b50505050565b5f811580613c8157508282613c738183614acc565b9250613c7f9083614922565b145b61096d5760405162461bcd60e51b815260206004820152601460248201527364732d6d6174682d6d756c2d6f766572666c6f7760601b6044820152606401610531565b5f82613cd08382614978565b915081101561096d5760405162461bcd60e51b815260206004820152601460248201527364732d6d6174682d6164642d6f766572666c6f7760601b6044820152606401610531565b612747838383604051602401613d3093929190614ae3565b60408051601f198184030181529190526020810180516001600160e01b0316630d26b92560e01b179052613fbd565b5f80613da26040518060400160405280601e81526020017f4c6962726172793a20676574526573657276657320626567696e6e696e670000815250868686613ea5565b5f613dad85856138ff565b5090505f80613dbd888888612998565b6001600160a01b0316630902f1ac6040518163ffffffff1660e01b8152600401606060405180830381865afa158015613df8573d5f803e3d5ffd5b505050506040513d601f19601f82011682018060405250810190613e1c9190614a52565b506001600160701b031691506001600160701b03169150826001600160a01b0316876001600160a01b031614613e53578082613e56565b81815b60408051808201909152601e81527f4c6962726172793a2067657452657365727665732072657475726e696e67000060208201529196509450613e9a90868661406a565b505050935093915050565b613c5884848484604051602401613ebf9493929190614b10565b60408051601f198184030181529190526020810180516001600160e01b03166376c7947b60e11b179052613fbd565b6130b18282604051602401613f04929190614b4b565b60408051601f198184030181529190526020810180516001600160e01b031663319af33360e01b179052613fbd565b6130b18282604051602401613f49929190614b74565b60408051601f198184030181529190526020810180516001600160e01b031663c3b5563560e01b179052613fbd565b613c5884848484604051602401613f929493929190614b97565b60408051601f198184030181529190526020810180516001600160e01b031663aabc9a3160e01b1790525b80516a636f6e736f6c652e6c6f67602083015f808483855afa5050505050565b5f61401460405180604001604052806012815260200171676574416d6f756e744f75745f6e6f46656560701b815250858585613c0f565b5f84116140335760405162461bcd60e51b81526004016105319061488f565b5f8311801561404157505f82115b61405d5760405162461bcd60e51b8152600401610531906148da565b5f6127d3856103e8613c5e565b61274783838360405160240161408293929190614be0565b60408051601f198184030181529190526020810180516001600160e01b031663ca47c4eb60e01b179052613fbd565b634e487b7160e01b5f52600160045260245ffd5b6001600160a01b0381168114613067575f80fd5b80356140e4816140c5565b919050565b5f805f805f8060c087890312156140fe575f80fd5b8635614109816140c5565b9550602087013594506040870135935060608701359250608087013561412e816140c5565b8092505060a087013590509295509295509295565b5f805f60608486031215614155575f80fd5b505081359360208301359350604090920135919050565b5f8083601f84011261417c575f80fd5b50813567ffffffffffffffff811115614193575f80fd5b6020830191508360208260051b85010111156139ee575f80fd5b5f805f805f8060a087890312156141c2575f80fd5b8635955060208701359450604087013567ffffffffffffffff8111156141e6575f80fd5b6141f289828a0161416c565b9095509350506060870135614206816140c5565b80925050608087013590509295509295509295565b602080825282518282018190525f9190848201906040850190845b8181101561425257835183529284019291840191600101614236565b50909695505050505050565b634e487b7160e01b5f52604160045260245ffd5b5f8060408385031215614283575f80fd5b8235915060208084013567ffffffffffffffff808211156142a2575f80fd5b818601915086601f8301126142b5575f80fd5b8135818111156142c7576142c761425e565b8060051b604051601f19603f830116810181811085821117156142ec576142ec61425e565b604052918252848201925083810185019189831115614309575f80fd5b938501935b8285101561432e5761431f856140d9565b8452938501939285019261430e565b8096505050505050509250929050565b8015158114613067575f80fd5b803560ff811681146140e4575f80fd5b5f805f805f805f805f805f6101608c8e031215614376575f80fd5b8b35614381816140c5565b9a5060208c0135614391816140c5565b995060408c0135985060608c0135975060808c0135965060a08c01356143b6816140c5565b955060c08c0135945060e08c01356143cd8161433e565b93506143dc6101008d0161434b565b92506101208c013591506101408c013590509295989b509295989b9093969950565b5f805f805f805f805f806101408b8d031215614418575f80fd5b8a35614423816140c5565b995060208b0135985060408b0135975060608b0135965060808b0135614448816140c5565b955060a08b0135945060c08b013561445f8161433e565b935061446d60e08c0161434b565b92506101008b013591506101208b013590509295989b9194979a5092959850565b5f805f805f608086880312156144a2575f80fd5b85359450602086013567ffffffffffffffff8111156144bf575f80fd5b6144cb8882890161416c565b90955093505060408601356144df816140c5565b949793965091946060013592915050565b5f805f805f805f60e0888a031215614506575f80fd5b8735614511816140c5565b96506020880135614521816140c5565b955060408801359450606088013593506080880135925060a0880135614546816140c5565b8092505060c0880135905092959891949750929550565b5f805f805f805f80610100898b031215614575575f80fd5b8835614580816140c5565b97506020890135614590816140c5565b965060408901359550606089013594506080890135935060a0890135925060c08901356145bc816140c5565b8092505060e089013590509295985092959890939650565b60208082526018908201527f556e69737761705632526f757465723a20455850495245440000000000000000604082015260600190565b634e487b7160e01b5f52601160045260245ffd5b8181038181111561096d5761096d61460b565b634e487b7160e01b5f52603260045260245ffd5b5f60208284031215614656575f80fd5b8135614661816140c5565b9392505050565b6020808252601d908201527f556e69737761705632526f757465723a20494e56414c49445f50415448000000604082015260600190565b6020808252602b908201527f556e69737761705632526f757465723a20494e53554646494349454e545f4f5560408201526a1514155517d05353d5539560aa1b606082015260800190565b6001600160a01b0397881681529590961660208601526040850193909352606084019190915260ff16608083015260a082015260c081019190915260e00190565b60208082526027908201527f556e69737761705632526f757465723a204558434553534956455f494e50555460408201526617d05353d5539560ca1b606082015260800190565b5f60208284031215614782575f80fd5b5051919050565b5f60208284031215614799575f80fd5b81516146618161433e565b5f80604083850312156147b5575f80fd5b505080516020909101519092909150565b60208082526026908201527f556e69737761705632526f757465723a20494e53554646494349454e545f415f604082015265105353d5539560d21b606082015260800190565b60208082526026908201527f556e69737761705632526f757465723a20494e53554646494349454e545f425f604082015265105353d5539560d21b606082015260800190565b5f5b8381101561486c578181015183820152602001614854565b50505f910152565b5f8251614885818460208701614852565b9190910192915050565b6020808252602b908201527f556e697377617056324c6962726172793a20494e53554646494349454e545f4960408201526a1394155517d05353d5539560aa1b606082015260800190565b60208082526028908201527f556e697377617056324c6962726172793a20494e53554646494349454e545f4c604082015267495155494449545960c01b606082015260800190565b5f8261493c57634e487b7160e01b5f52601260045260245ffd5b500490565b6020808252601e908201527f556e697377617056324c6962726172793a20494e56414c49445f504154480000604082015260600190565b8082018082111561096d5761096d61460b565b5f6001820161499c5761499c61460b565b5060010190565b5f602082840312156149b3575f80fd5b8151614661816140c5565b5f81518084526149d5816020860160208601614852565b601f01601f19169290920160200192915050565b84815283602082015260018060a01b0383166040820152608060608201525f61348960808301846149be565b5f81614a2357614a2361460b565b505f190190565b602081525f61096a60208301846149be565b80516001600160701b03811681146140e4575f80fd5b5f805f60608486031215614a64575f80fd5b614a6d84614a3c565b9250614a7b60208501614a3c565b9150604084015163ffffffff81168114614a93575f80fd5b809150509250925092565b608081525f614ab060808301876149be565b6020830195909552506040810192909252606090910152919050565b808202811582820484141761096d5761096d61460b565b606081525f614af560608301866149be565b6001600160a01b039490941660208301525060400152919050565b608081525f614b2260808301876149be565b6001600160a01b0395861660208401529385166040830152509216606090920191909152919050565b604081525f614b5d60408301856149be565b905060018060a01b03831660208301529392505050565b604081525f614b8660408301856149be565b905082151560208301529392505050565b608081525f614ba960808301876149be565b6001600160a01b0386811660208501528382036040850152614bcb82876149be565b92508085166060850152505095945050505050565b606081525f614bf260608301866149be565b6020830194909452506040015291905056fe737761704578616374546f6b656e73466f72546f6b656e735f6e6f46656520626567696e6e696e67737761704578616374546f6b656e73466f72546f6b656e7320626567696e6e696e67a2646970667358221220074419f6ab26a1331dab75769045e5b8cc1a4305d8bdeb66ad9c940909cdd08864736f6c63430008140033"

    @overload
    @classmethod
    def deploy(cls, _factory: Union[Account, Address], _WETH: Union[Account, Address], *, from_: Optional[Union[Account, Address, str]] = None, value: Union[int, str] = 0, gas_limit: Optional[Union[int, Literal["max"], Literal["auto"]]] = None, return_tx: Literal[False] = False, request_type: Literal["call"], chain: Optional[Chain] = None, gas_price: Optional[Union[int, str]] = None, max_fee_per_gas: Optional[Union[int, str]] = None, max_priority_fee_per_gas: Optional[Union[int, str]] = None, access_list: Optional[Union[Dict[Union[Account, Address, str], List[int]], Literal["auto"]]] = None, type: Optional[int] = None, block: Optional[Union[int, Literal["latest"], Literal["pending"], Literal["earliest"], Literal["safe"], Literal["finalized"]]] = None, confirmations: Optional[int] = None) -> bytearray:
        """
        [Source code](file:///Users/dteiml/p/hacker-dom/woke-uniswap-v2/src/UniswapV2Router02.sol#24)

        Args:
            _factory: address
            _WETH: address
        """
        ...

    @overload
    @classmethod
    def deploy(cls, _factory: Union[Account, Address], _WETH: Union[Account, Address], *, from_: Optional[Union[Account, Address, str]] = None, value: Union[int, str] = 0, gas_limit: Optional[Union[int, Literal["max"], Literal["auto"]]] = None, return_tx: Literal[False] = False, request_type: Literal["tx"] = "tx", chain: Optional[Chain] = None, gas_price: Optional[Union[int, str]] = None, max_fee_per_gas: Optional[Union[int, str]] = None, max_priority_fee_per_gas: Optional[Union[int, str]] = None, access_list: Optional[Union[Dict[Union[Account, Address, str], List[int]], Literal["auto"]]] = None, type: Optional[int] = None, block: Optional[Union[int, Literal["latest"], Literal["pending"], Literal["earliest"], Literal["safe"], Literal["finalized"]]] = None, confirmations: Optional[int] = None) -> UniswapV2Router02:
        """
        [Source code](file:///Users/dteiml/p/hacker-dom/woke-uniswap-v2/src/UniswapV2Router02.sol#24)

        Args:
            _factory: address
            _WETH: address
        """
        ...

    @overload
    @classmethod
    def deploy(cls, _factory: Union[Account, Address], _WETH: Union[Account, Address], *, from_: Optional[Union[Account, Address, str]] = None, value: Union[int, str] = 0, gas_limit: Optional[Union[int, Literal["max"], Literal["auto"]]] = None, return_tx: Literal[False] = False, request_type: Literal["estimate"], chain: Optional[Chain] = None, gas_price: Optional[Union[int, str]] = None, max_fee_per_gas: Optional[Union[int, str]] = None, max_priority_fee_per_gas: Optional[Union[int, str]] = None, access_list: Optional[Union[Dict[Union[Account, Address, str], List[int]], Literal["auto"]]] = None, type: Optional[int] = None, block: Optional[Union[int, Literal["latest"], Literal["pending"], Literal["earliest"], Literal["safe"], Literal["finalized"]]] = None, confirmations: Optional[int] = None) -> int:
        """
        [Source code](file:///Users/dteiml/p/hacker-dom/woke-uniswap-v2/src/UniswapV2Router02.sol#24)

        Args:
            _factory: address
            _WETH: address
        """
        ...

    @overload
    @classmethod
    def deploy(cls, _factory: Union[Account, Address], _WETH: Union[Account, Address], *, from_: Optional[Union[Account, Address, str]] = None, value: Union[int, str] = 0, gas_limit: Optional[Union[int, Literal["max"], Literal["auto"]]] = None, return_tx: Literal[False] = False, request_type: Literal["access_list"], chain: Optional[Chain] = None, gas_price: Optional[Union[int, str]] = None, max_fee_per_gas: Optional[Union[int, str]] = None, max_priority_fee_per_gas: Optional[Union[int, str]] = None, access_list: Optional[Union[Dict[Union[Account, Address, str], List[int]], Literal["auto"]]] = None, type: Optional[int] = None, block: Optional[Union[int, Literal["latest"], Literal["pending"], Literal["earliest"], Literal["safe"], Literal["finalized"]]] = None, confirmations: Optional[int] = None) -> Tuple[Dict[Address, List[int]], int]:
        """
        [Source code](file:///Users/dteiml/p/hacker-dom/woke-uniswap-v2/src/UniswapV2Router02.sol#24)

        Args:
            _factory: address
            _WETH: address
        """
        ...

    @overload
    @classmethod
    def deploy(cls, _factory: Union[Account, Address], _WETH: Union[Account, Address], *, from_: Optional[Union[Account, Address, str]] = None, value: Union[int, str] = 0, gas_limit: Optional[Union[int, Literal["max"], Literal["auto"]]] = None, return_tx: Literal[True], request_type: Literal["tx"] = "tx", chain: Optional[Chain] = None, gas_price: Optional[Union[int, str]] = None, max_fee_per_gas: Optional[Union[int, str]] = None, max_priority_fee_per_gas: Optional[Union[int, str]] = None, access_list: Optional[Union[Dict[Union[Account, Address, str], List[int]], Literal["auto"]]] = None, type: Optional[int] = None, block: Optional[Union[int, Literal["latest"], Literal["pending"], Literal["earliest"], Literal["safe"], Literal["finalized"]]] = None, confirmations: Optional[int] = None) -> TransactionAbc[UniswapV2Router02]:
        """
        [Source code](file:///Users/dteiml/p/hacker-dom/woke-uniswap-v2/src/UniswapV2Router02.sol#24)

        Args:
            _factory: address
            _WETH: address
        """
        ...

    @classmethod
    def deploy(cls, _factory: Union[Account, Address], _WETH: Union[Account, Address], *, from_: Optional[Union[Account, Address, str]] = None, value: Union[int, str] = 0, gas_limit: Optional[Union[int, Literal["max"], Literal["auto"]]] = None, return_tx: bool = False, request_type: RequestType = "tx", chain: Optional[Chain] = None, gas_price: Optional[Union[int, str]] = None, max_fee_per_gas: Optional[Union[int, str]] = None, max_priority_fee_per_gas: Optional[Union[int, str]] = None, access_list: Optional[Union[Dict[Union[Account, Address, str], List[int]], Literal["auto"]]] = None, type: Optional[int] = None, block: Optional[Union[int, Literal["latest"], Literal["pending"], Literal["earliest"], Literal["safe"], Literal["finalized"]]] = None, confirmations: Optional[int] = None) -> Union[bytearray, UniswapV2Router02, int, Tuple[Dict[Address, List[int]], int], TransactionAbc[UniswapV2Router02]]:
        """
        [Source code](file:///Users/dteiml/p/hacker-dom/woke-uniswap-v2/src/UniswapV2Router02.sol#24)

        Args:
            _factory: address
            _WETH: address
        """
        return cls._deploy(request_type, [_factory, _WETH], return_tx, UniswapV2Router02, from_, value, gas_limit, {}, chain, gas_price, max_fee_per_gas, max_priority_fee_per_gas, access_list, type, block, confirmations)

    @classmethod
    def get_creation_code(cls) -> bytes:
        return cls._get_creation_code({})

    @overload
    def factory(self, *, from_: Optional[Union[Account, Address, str]] = None, to: Optional[Union[Account, Address, str]] = None, value: Union[int, str] = 0, gas_limit: Optional[Union[int, Literal["max"], Literal["auto"]]] = None, request_type: Literal["call"] = "call", gas_price: Optional[Union[int, str]] = None, max_fee_per_gas: Optional[Union[int, str]] = None, max_priority_fee_per_gas: Optional[Union[int, str]] = None, access_list: Optional[Union[Dict[Union[Account, Address, str], List[int]], Literal["auto"]]] = None, type: Optional[int] = None, block: Optional[Union[int, Literal["latest"], Literal["pending"], Literal["earliest"], Literal["safe"], Literal["finalized"]]] = None, confirmations: Optional[int] = None) -> Address:
        """
        [Source code](file:///Users/dteiml/p/hacker-dom/woke-uniswap-v2/src/UniswapV2Router02.sol#16)

        Returns:
            address
        """
        ...

    @overload
    def factory(self, *, from_: Optional[Union[Account, Address, str]] = None, to: Optional[Union[Account, Address, str]] = None, value: Union[int, str] = 0, gas_limit: Optional[Union[int, Literal["max"], Literal["auto"]]] = None, request_type: Literal["estimate"], gas_price: Optional[Union[int, str]] = None, max_fee_per_gas: Optional[Union[int, str]] = None, max_priority_fee_per_gas: Optional[Union[int, str]] = None, access_list: Optional[Union[Dict[Union[Account, Address, str], List[int]], Literal["auto"]]] = None, type: Optional[int] = None, block: Optional[Union[int, Literal["latest"], Literal["pending"], Literal["earliest"], Literal["safe"], Literal["finalized"]]] = None, confirmations: Optional[int] = None) -> int:
        """
        [Source code](file:///Users/dteiml/p/hacker-dom/woke-uniswap-v2/src/UniswapV2Router02.sol#16)

        Returns:
            address
        """
        ...

    @overload
    def factory(self, *, from_: Optional[Union[Account, Address, str]] = None, to: Optional[Union[Account, Address, str]] = None, value: Union[int, str] = 0, gas_limit: Optional[Union[int, Literal["max"], Literal["auto"]]] = None, request_type: Literal["access_list"], gas_price: Optional[Union[int, str]] = None, max_fee_per_gas: Optional[Union[int, str]] = None, max_priority_fee_per_gas: Optional[Union[int, str]] = None, access_list: Optional[Union[Dict[Union[Account, Address, str], List[int]], Literal["auto"]]] = None, type: Optional[int] = None, block: Optional[Union[int, Literal["latest"], Literal["pending"], Literal["earliest"], Literal["safe"], Literal["finalized"]]] = None, confirmations: Optional[int] = None) -> Tuple[Dict[Address, List[int]], int]:
        """
        [Source code](file:///Users/dteiml/p/hacker-dom/woke-uniswap-v2/src/UniswapV2Router02.sol#16)

        Returns:
            address
        """
        ...

    @overload
    def factory(self, *, from_: Optional[Union[Account, Address, str]] = None, to: Optional[Union[Account, Address, str]] = None, value: Union[int, str] = 0, gas_limit: Optional[Union[int, Literal["max"], Literal["auto"]]] = None, request_type: Literal["tx"], gas_price: Optional[Union[int, str]] = None, max_fee_per_gas: Optional[Union[int, str]] = None, max_priority_fee_per_gas: Optional[Union[int, str]] = None, access_list: Optional[Union[Dict[Union[Account, Address, str], List[int]], Literal["auto"]]] = None, type: Optional[int] = None, block: Optional[Union[int, Literal["latest"], Literal["pending"], Literal["earliest"], Literal["safe"], Literal["finalized"]]] = None, confirmations: Optional[int] = None) -> TransactionAbc[Address]:
        """
        [Source code](file:///Users/dteiml/p/hacker-dom/woke-uniswap-v2/src/UniswapV2Router02.sol#16)

        Returns:
            address
        """
        ...

    def factory(self, *, from_: Optional[Union[Account, Address, str]] = None, to: Optional[Union[Account, Address, str]] = None, value: Union[int, str] = 0, gas_limit: Optional[Union[int, Literal["max"], Literal["auto"]]] = None, request_type: RequestType = 'call', gas_price: Optional[Union[int, str]] = None, max_fee_per_gas: Optional[Union[int, str]] = None, max_priority_fee_per_gas: Optional[Union[int, str]] = None, access_list: Optional[Union[Dict[Union[Account, Address, str], List[int]], Literal["auto"]]] = None, type: Optional[int] = None, block: Optional[Union[int, Literal["latest"], Literal["pending"], Literal["earliest"], Literal["safe"], Literal["finalized"]]] = None, confirmations: Optional[int] = None) -> Union[Address, TransactionAbc[Address], int, Tuple[Dict[Address, List[int]], int]]:
        """
        [Source code](file:///Users/dteiml/p/hacker-dom/woke-uniswap-v2/src/UniswapV2Router02.sol#16)

        Returns:
            address
        """
        return self._execute(self.chain, request_type, "c45a0155", [], True if request_type == "tx" else False, Address, from_, to if to is not None else str(self.address), value, gas_limit, gas_price, max_fee_per_gas, max_priority_fee_per_gas, access_list, type, block, confirmations)

    @overload
    def WETH(self, *, from_: Optional[Union[Account, Address, str]] = None, to: Optional[Union[Account, Address, str]] = None, value: Union[int, str] = 0, gas_limit: Optional[Union[int, Literal["max"], Literal["auto"]]] = None, request_type: Literal["call"] = "call", gas_price: Optional[Union[int, str]] = None, max_fee_per_gas: Optional[Union[int, str]] = None, max_priority_fee_per_gas: Optional[Union[int, str]] = None, access_list: Optional[Union[Dict[Union[Account, Address, str], List[int]], Literal["auto"]]] = None, type: Optional[int] = None, block: Optional[Union[int, Literal["latest"], Literal["pending"], Literal["earliest"], Literal["safe"], Literal["finalized"]]] = None, confirmations: Optional[int] = None) -> Address:
        """
        [Source code](file:///Users/dteiml/p/hacker-dom/woke-uniswap-v2/src/UniswapV2Router02.sol#17)

        Returns:
            address
        """
        ...

    @overload
    def WETH(self, *, from_: Optional[Union[Account, Address, str]] = None, to: Optional[Union[Account, Address, str]] = None, value: Union[int, str] = 0, gas_limit: Optional[Union[int, Literal["max"], Literal["auto"]]] = None, request_type: Literal["estimate"], gas_price: Optional[Union[int, str]] = None, max_fee_per_gas: Optional[Union[int, str]] = None, max_priority_fee_per_gas: Optional[Union[int, str]] = None, access_list: Optional[Union[Dict[Union[Account, Address, str], List[int]], Literal["auto"]]] = None, type: Optional[int] = None, block: Optional[Union[int, Literal["latest"], Literal["pending"], Literal["earliest"], Literal["safe"], Literal["finalized"]]] = None, confirmations: Optional[int] = None) -> int:
        """
        [Source code](file:///Users/dteiml/p/hacker-dom/woke-uniswap-v2/src/UniswapV2Router02.sol#17)

        Returns:
            address
        """
        ...

    @overload
    def WETH(self, *, from_: Optional[Union[Account, Address, str]] = None, to: Optional[Union[Account, Address, str]] = None, value: Union[int, str] = 0, gas_limit: Optional[Union[int, Literal["max"], Literal["auto"]]] = None, request_type: Literal["access_list"], gas_price: Optional[Union[int, str]] = None, max_fee_per_gas: Optional[Union[int, str]] = None, max_priority_fee_per_gas: Optional[Union[int, str]] = None, access_list: Optional[Union[Dict[Union[Account, Address, str], List[int]], Literal["auto"]]] = None, type: Optional[int] = None, block: Optional[Union[int, Literal["latest"], Literal["pending"], Literal["earliest"], Literal["safe"], Literal["finalized"]]] = None, confirmations: Optional[int] = None) -> Tuple[Dict[Address, List[int]], int]:
        """
        [Source code](file:///Users/dteiml/p/hacker-dom/woke-uniswap-v2/src/UniswapV2Router02.sol#17)

        Returns:
            address
        """
        ...

    @overload
    def WETH(self, *, from_: Optional[Union[Account, Address, str]] = None, to: Optional[Union[Account, Address, str]] = None, value: Union[int, str] = 0, gas_limit: Optional[Union[int, Literal["max"], Literal["auto"]]] = None, request_type: Literal["tx"], gas_price: Optional[Union[int, str]] = None, max_fee_per_gas: Optional[Union[int, str]] = None, max_priority_fee_per_gas: Optional[Union[int, str]] = None, access_list: Optional[Union[Dict[Union[Account, Address, str], List[int]], Literal["auto"]]] = None, type: Optional[int] = None, block: Optional[Union[int, Literal["latest"], Literal["pending"], Literal["earliest"], Literal["safe"], Literal["finalized"]]] = None, confirmations: Optional[int] = None) -> TransactionAbc[Address]:
        """
        [Source code](file:///Users/dteiml/p/hacker-dom/woke-uniswap-v2/src/UniswapV2Router02.sol#17)

        Returns:
            address
        """
        ...

    def WETH(self, *, from_: Optional[Union[Account, Address, str]] = None, to: Optional[Union[Account, Address, str]] = None, value: Union[int, str] = 0, gas_limit: Optional[Union[int, Literal["max"], Literal["auto"]]] = None, request_type: RequestType = 'call', gas_price: Optional[Union[int, str]] = None, max_fee_per_gas: Optional[Union[int, str]] = None, max_priority_fee_per_gas: Optional[Union[int, str]] = None, access_list: Optional[Union[Dict[Union[Account, Address, str], List[int]], Literal["auto"]]] = None, type: Optional[int] = None, block: Optional[Union[int, Literal["latest"], Literal["pending"], Literal["earliest"], Literal["safe"], Literal["finalized"]]] = None, confirmations: Optional[int] = None) -> Union[Address, TransactionAbc[Address], int, Tuple[Dict[Address, List[int]], int]]:
        """
        [Source code](file:///Users/dteiml/p/hacker-dom/woke-uniswap-v2/src/UniswapV2Router02.sol#17)

        Returns:
            address
        """
        return self._execute(self.chain, request_type, "ad5c4648", [], True if request_type == "tx" else False, Address, from_, to if to is not None else str(self.address), value, gas_limit, gas_price, max_fee_per_gas, max_priority_fee_per_gas, access_list, type, block, confirmations)

    @overload
    def addLiquidity(self, tokenA: Union[Account, Address], tokenB: Union[Account, Address], amountADesired: uint256, amountBDesired: uint256, amountAMin: uint256, amountBMin: uint256, to_: Union[Account, Address], deadline: uint256, *, from_: Optional[Union[Account, Address, str]] = None, to: Optional[Union[Account, Address, str]] = None, value: Union[int, str] = 0, gas_limit: Optional[Union[int, Literal["max"], Literal["auto"]]] = None, request_type: Literal["call"], gas_price: Optional[Union[int, str]] = None, max_fee_per_gas: Optional[Union[int, str]] = None, max_priority_fee_per_gas: Optional[Union[int, str]] = None, access_list: Optional[Union[Dict[Union[Account, Address, str], List[int]], Literal["auto"]]] = None, type: Optional[int] = None, block: Optional[Union[int, Literal["latest"], Literal["pending"], Literal["earliest"], Literal["safe"], Literal["finalized"]]] = None, confirmations: Optional[int] = None) -> Tuple[uint256, uint256, uint256]:
        """
        [Source code](file:///Users/dteiml/p/hacker-dom/woke-uniswap-v2/src/UniswapV2Router02.sol#62)

        Args:
            tokenA: address
            tokenB: address
            amountADesired: uint256
            amountBDesired: uint256
            amountAMin: uint256
            amountBMin: uint256
            to_: address
            deadline: uint256
        Returns:
            (uint256, uint256, uint256)
        """
        ...

    @overload
    def addLiquidity(self, tokenA: Union[Account, Address], tokenB: Union[Account, Address], amountADesired: uint256, amountBDesired: uint256, amountAMin: uint256, amountBMin: uint256, to_: Union[Account, Address], deadline: uint256, *, from_: Optional[Union[Account, Address, str]] = None, to: Optional[Union[Account, Address, str]] = None, value: Union[int, str] = 0, gas_limit: Optional[Union[int, Literal["max"], Literal["auto"]]] = None, request_type: Literal["estimate"], gas_price: Optional[Union[int, str]] = None, max_fee_per_gas: Optional[Union[int, str]] = None, max_priority_fee_per_gas: Optional[Union[int, str]] = None, access_list: Optional[Union[Dict[Union[Account, Address, str], List[int]], Literal["auto"]]] = None, type: Optional[int] = None, block: Optional[Union[int, Literal["latest"], Literal["pending"], Literal["earliest"], Literal["safe"], Literal["finalized"]]] = None, confirmations: Optional[int] = None) -> int:
        """
        [Source code](file:///Users/dteiml/p/hacker-dom/woke-uniswap-v2/src/UniswapV2Router02.sol#62)

        Args:
            tokenA: address
            tokenB: address
            amountADesired: uint256
            amountBDesired: uint256
            amountAMin: uint256
            amountBMin: uint256
            to_: address
            deadline: uint256
        Returns:
            (uint256, uint256, uint256)
        """
        ...

    @overload
    def addLiquidity(self, tokenA: Union[Account, Address], tokenB: Union[Account, Address], amountADesired: uint256, amountBDesired: uint256, amountAMin: uint256, amountBMin: uint256, to_: Union[Account, Address], deadline: uint256, *, from_: Optional[Union[Account, Address, str]] = None, to: Optional[Union[Account, Address, str]] = None, value: Union[int, str] = 0, gas_limit: Optional[Union[int, Literal["max"], Literal["auto"]]] = None, request_type: Literal["access_list"], gas_price: Optional[Union[int, str]] = None, max_fee_per_gas: Optional[Union[int, str]] = None, max_priority_fee_per_gas: Optional[Union[int, str]] = None, access_list: Optional[Union[Dict[Union[Account, Address, str], List[int]], Literal["auto"]]] = None, type: Optional[int] = None, block: Optional[Union[int, Literal["latest"], Literal["pending"], Literal["earliest"], Literal["safe"], Literal["finalized"]]] = None, confirmations: Optional[int] = None) -> Tuple[Dict[Address, List[int]], int]:
        """
        [Source code](file:///Users/dteiml/p/hacker-dom/woke-uniswap-v2/src/UniswapV2Router02.sol#62)

        Args:
            tokenA: address
            tokenB: address
            amountADesired: uint256
            amountBDesired: uint256
            amountAMin: uint256
            amountBMin: uint256
            to_: address
            deadline: uint256
        Returns:
            (uint256, uint256, uint256)
        """
        ...

    @overload
    def addLiquidity(self, tokenA: Union[Account, Address], tokenB: Union[Account, Address], amountADesired: uint256, amountBDesired: uint256, amountAMin: uint256, amountBMin: uint256, to_: Union[Account, Address], deadline: uint256, *, from_: Optional[Union[Account, Address, str]] = None, to: Optional[Union[Account, Address, str]] = None, value: Union[int, str] = 0, gas_limit: Optional[Union[int, Literal["max"], Literal["auto"]]] = None, request_type: Literal["tx"] = "tx", gas_price: Optional[Union[int, str]] = None, max_fee_per_gas: Optional[Union[int, str]] = None, max_priority_fee_per_gas: Optional[Union[int, str]] = None, access_list: Optional[Union[Dict[Union[Account, Address, str], List[int]], Literal["auto"]]] = None, type: Optional[int] = None, block: Optional[Union[int, Literal["latest"], Literal["pending"], Literal["earliest"], Literal["safe"], Literal["finalized"]]] = None, confirmations: Optional[int] = None) -> TransactionAbc[Tuple[uint256, uint256, uint256]]:
        """
        [Source code](file:///Users/dteiml/p/hacker-dom/woke-uniswap-v2/src/UniswapV2Router02.sol#62)

        Args:
            tokenA: address
            tokenB: address
            amountADesired: uint256
            amountBDesired: uint256
            amountAMin: uint256
            amountBMin: uint256
            to_: address
            deadline: uint256
        Returns:
            (uint256, uint256, uint256)
        """
        ...

    def addLiquidity(self, tokenA: Union[Account, Address], tokenB: Union[Account, Address], amountADesired: uint256, amountBDesired: uint256, amountAMin: uint256, amountBMin: uint256, to_: Union[Account, Address], deadline: uint256, *, from_: Optional[Union[Account, Address, str]] = None, to: Optional[Union[Account, Address, str]] = None, value: Union[int, str] = 0, gas_limit: Optional[Union[int, Literal["max"], Literal["auto"]]] = None, request_type: RequestType = 'tx', gas_price: Optional[Union[int, str]] = None, max_fee_per_gas: Optional[Union[int, str]] = None, max_priority_fee_per_gas: Optional[Union[int, str]] = None, access_list: Optional[Union[Dict[Union[Account, Address, str], List[int]], Literal["auto"]]] = None, type: Optional[int] = None, block: Optional[Union[int, Literal["latest"], Literal["pending"], Literal["earliest"], Literal["safe"], Literal["finalized"]]] = None, confirmations: Optional[int] = None) -> Union[Tuple[uint256, uint256, uint256], TransactionAbc[Tuple[uint256, uint256, uint256]], int, Tuple[Dict[Address, List[int]], int]]:
        """
        [Source code](file:///Users/dteiml/p/hacker-dom/woke-uniswap-v2/src/UniswapV2Router02.sol#62)

        Args:
            tokenA: address
            tokenB: address
            amountADesired: uint256
            amountBDesired: uint256
            amountAMin: uint256
            amountBMin: uint256
            to_: address
            deadline: uint256
        Returns:
            (uint256, uint256, uint256)
        """
        return self._execute(self.chain, request_type, "e8e33700", [tokenA, tokenB, amountADesired, amountBDesired, amountAMin, amountBMin, to_, deadline], True if request_type == "tx" else False, Tuple[uint256, uint256, uint256], from_, to if to is not None else str(self.address), value, gas_limit, gas_price, max_fee_per_gas, max_priority_fee_per_gas, access_list, type, block, confirmations)

    @overload
    def addLiquidityETH(self, token: Union[Account, Address], amountTokenDesired: uint256, amountTokenMin: uint256, amountETHMin: uint256, to_: Union[Account, Address], deadline: uint256, *, from_: Optional[Union[Account, Address, str]] = None, to: Optional[Union[Account, Address, str]] = None, value: Union[int, str] = 0, gas_limit: Optional[Union[int, Literal["max"], Literal["auto"]]] = None, request_type: Literal["call"], gas_price: Optional[Union[int, str]] = None, max_fee_per_gas: Optional[Union[int, str]] = None, max_priority_fee_per_gas: Optional[Union[int, str]] = None, access_list: Optional[Union[Dict[Union[Account, Address, str], List[int]], Literal["auto"]]] = None, type: Optional[int] = None, block: Optional[Union[int, Literal["latest"], Literal["pending"], Literal["earliest"], Literal["safe"], Literal["finalized"]]] = None, confirmations: Optional[int] = None) -> Tuple[uint256, uint256, uint256]:
        """
        [Source code](file:///Users/dteiml/p/hacker-dom/woke-uniswap-v2/src/UniswapV2Router02.sol#78)

        Args:
            token: address
            amountTokenDesired: uint256
            amountTokenMin: uint256
            amountETHMin: uint256
            to_: address
            deadline: uint256
        Returns:
            (uint256, uint256, uint256)
        """
        ...

    @overload
    def addLiquidityETH(self, token: Union[Account, Address], amountTokenDesired: uint256, amountTokenMin: uint256, amountETHMin: uint256, to_: Union[Account, Address], deadline: uint256, *, from_: Optional[Union[Account, Address, str]] = None, to: Optional[Union[Account, Address, str]] = None, value: Union[int, str] = 0, gas_limit: Optional[Union[int, Literal["max"], Literal["auto"]]] = None, request_type: Literal["estimate"], gas_price: Optional[Union[int, str]] = None, max_fee_per_gas: Optional[Union[int, str]] = None, max_priority_fee_per_gas: Optional[Union[int, str]] = None, access_list: Optional[Union[Dict[Union[Account, Address, str], List[int]], Literal["auto"]]] = None, type: Optional[int] = None, block: Optional[Union[int, Literal["latest"], Literal["pending"], Literal["earliest"], Literal["safe"], Literal["finalized"]]] = None, confirmations: Optional[int] = None) -> int:
        """
        [Source code](file:///Users/dteiml/p/hacker-dom/woke-uniswap-v2/src/UniswapV2Router02.sol#78)

        Args:
            token: address
            amountTokenDesired: uint256
            amountTokenMin: uint256
            amountETHMin: uint256
            to_: address
            deadline: uint256
        Returns:
            (uint256, uint256, uint256)
        """
        ...

    @overload
    def addLiquidityETH(self, token: Union[Account, Address], amountTokenDesired: uint256, amountTokenMin: uint256, amountETHMin: uint256, to_: Union[Account, Address], deadline: uint256, *, from_: Optional[Union[Account, Address, str]] = None, to: Optional[Union[Account, Address, str]] = None, value: Union[int, str] = 0, gas_limit: Optional[Union[int, Literal["max"], Literal["auto"]]] = None, request_type: Literal["access_list"], gas_price: Optional[Union[int, str]] = None, max_fee_per_gas: Optional[Union[int, str]] = None, max_priority_fee_per_gas: Optional[Union[int, str]] = None, access_list: Optional[Union[Dict[Union[Account, Address, str], List[int]], Literal["auto"]]] = None, type: Optional[int] = None, block: Optional[Union[int, Literal["latest"], Literal["pending"], Literal["earliest"], Literal["safe"], Literal["finalized"]]] = None, confirmations: Optional[int] = None) -> Tuple[Dict[Address, List[int]], int]:
        """
        [Source code](file:///Users/dteiml/p/hacker-dom/woke-uniswap-v2/src/UniswapV2Router02.sol#78)

        Args:
            token: address
            amountTokenDesired: uint256
            amountTokenMin: uint256
            amountETHMin: uint256
            to_: address
            deadline: uint256
        Returns:
            (uint256, uint256, uint256)
        """
        ...

    @overload
    def addLiquidityETH(self, token: Union[Account, Address], amountTokenDesired: uint256, amountTokenMin: uint256, amountETHMin: uint256, to_: Union[Account, Address], deadline: uint256, *, from_: Optional[Union[Account, Address, str]] = None, to: Optional[Union[Account, Address, str]] = None, value: Union[int, str] = 0, gas_limit: Optional[Union[int, Literal["max"], Literal["auto"]]] = None, request_type: Literal["tx"] = "tx", gas_price: Optional[Union[int, str]] = None, max_fee_per_gas: Optional[Union[int, str]] = None, max_priority_fee_per_gas: Optional[Union[int, str]] = None, access_list: Optional[Union[Dict[Union[Account, Address, str], List[int]], Literal["auto"]]] = None, type: Optional[int] = None, block: Optional[Union[int, Literal["latest"], Literal["pending"], Literal["earliest"], Literal["safe"], Literal["finalized"]]] = None, confirmations: Optional[int] = None) -> TransactionAbc[Tuple[uint256, uint256, uint256]]:
        """
        [Source code](file:///Users/dteiml/p/hacker-dom/woke-uniswap-v2/src/UniswapV2Router02.sol#78)

        Args:
            token: address
            amountTokenDesired: uint256
            amountTokenMin: uint256
            amountETHMin: uint256
            to_: address
            deadline: uint256
        Returns:
            (uint256, uint256, uint256)
        """
        ...

    def addLiquidityETH(self, token: Union[Account, Address], amountTokenDesired: uint256, amountTokenMin: uint256, amountETHMin: uint256, to_: Union[Account, Address], deadline: uint256, *, from_: Optional[Union[Account, Address, str]] = None, to: Optional[Union[Account, Address, str]] = None, value: Union[int, str] = 0, gas_limit: Optional[Union[int, Literal["max"], Literal["auto"]]] = None, request_type: RequestType = 'tx', gas_price: Optional[Union[int, str]] = None, max_fee_per_gas: Optional[Union[int, str]] = None, max_priority_fee_per_gas: Optional[Union[int, str]] = None, access_list: Optional[Union[Dict[Union[Account, Address, str], List[int]], Literal["auto"]]] = None, type: Optional[int] = None, block: Optional[Union[int, Literal["latest"], Literal["pending"], Literal["earliest"], Literal["safe"], Literal["finalized"]]] = None, confirmations: Optional[int] = None) -> Union[Tuple[uint256, uint256, uint256], TransactionAbc[Tuple[uint256, uint256, uint256]], int, Tuple[Dict[Address, List[int]], int]]:
        """
        [Source code](file:///Users/dteiml/p/hacker-dom/woke-uniswap-v2/src/UniswapV2Router02.sol#78)

        Args:
            token: address
            amountTokenDesired: uint256
            amountTokenMin: uint256
            amountETHMin: uint256
            to_: address
            deadline: uint256
        Returns:
            (uint256, uint256, uint256)
        """
        return self._execute(self.chain, request_type, "f305d719", [token, amountTokenDesired, amountTokenMin, amountETHMin, to_, deadline], True if request_type == "tx" else False, Tuple[uint256, uint256, uint256], from_, to if to is not None else str(self.address), value, gas_limit, gas_price, max_fee_per_gas, max_priority_fee_per_gas, access_list, type, block, confirmations)

    @overload
    def removeLiquidity(self, tokenA: Union[Account, Address], tokenB: Union[Account, Address], liquidity: uint256, amountAMin: uint256, amountBMin: uint256, to_: Union[Account, Address], deadline: uint256, *, from_: Optional[Union[Account, Address, str]] = None, to: Optional[Union[Account, Address, str]] = None, value: Union[int, str] = 0, gas_limit: Optional[Union[int, Literal["max"], Literal["auto"]]] = None, request_type: Literal["call"], gas_price: Optional[Union[int, str]] = None, max_fee_per_gas: Optional[Union[int, str]] = None, max_priority_fee_per_gas: Optional[Union[int, str]] = None, access_list: Optional[Union[Dict[Union[Account, Address, str], List[int]], Literal["auto"]]] = None, type: Optional[int] = None, block: Optional[Union[int, Literal["latest"], Literal["pending"], Literal["earliest"], Literal["safe"], Literal["finalized"]]] = None, confirmations: Optional[int] = None) -> Tuple[uint256, uint256]:
        """
        [Source code](file:///Users/dteiml/p/hacker-dom/woke-uniswap-v2/src/UniswapV2Router02.sol#104)

        Args:
            tokenA: address
            tokenB: address
            liquidity: uint256
            amountAMin: uint256
            amountBMin: uint256
            to_: address
            deadline: uint256
        Returns:
            (uint256, uint256)
        """
        ...

    @overload
    def removeLiquidity(self, tokenA: Union[Account, Address], tokenB: Union[Account, Address], liquidity: uint256, amountAMin: uint256, amountBMin: uint256, to_: Union[Account, Address], deadline: uint256, *, from_: Optional[Union[Account, Address, str]] = None, to: Optional[Union[Account, Address, str]] = None, value: Union[int, str] = 0, gas_limit: Optional[Union[int, Literal["max"], Literal["auto"]]] = None, request_type: Literal["estimate"], gas_price: Optional[Union[int, str]] = None, max_fee_per_gas: Optional[Union[int, str]] = None, max_priority_fee_per_gas: Optional[Union[int, str]] = None, access_list: Optional[Union[Dict[Union[Account, Address, str], List[int]], Literal["auto"]]] = None, type: Optional[int] = None, block: Optional[Union[int, Literal["latest"], Literal["pending"], Literal["earliest"], Literal["safe"], Literal["finalized"]]] = None, confirmations: Optional[int] = None) -> int:
        """
        [Source code](file:///Users/dteiml/p/hacker-dom/woke-uniswap-v2/src/UniswapV2Router02.sol#104)

        Args:
            tokenA: address
            tokenB: address
            liquidity: uint256
            amountAMin: uint256
            amountBMin: uint256
            to_: address
            deadline: uint256
        Returns:
            (uint256, uint256)
        """
        ...

    @overload
    def removeLiquidity(self, tokenA: Union[Account, Address], tokenB: Union[Account, Address], liquidity: uint256, amountAMin: uint256, amountBMin: uint256, to_: Union[Account, Address], deadline: uint256, *, from_: Optional[Union[Account, Address, str]] = None, to: Optional[Union[Account, Address, str]] = None, value: Union[int, str] = 0, gas_limit: Optional[Union[int, Literal["max"], Literal["auto"]]] = None, request_type: Literal["access_list"], gas_price: Optional[Union[int, str]] = None, max_fee_per_gas: Optional[Union[int, str]] = None, max_priority_fee_per_gas: Optional[Union[int, str]] = None, access_list: Optional[Union[Dict[Union[Account, Address, str], List[int]], Literal["auto"]]] = None, type: Optional[int] = None, block: Optional[Union[int, Literal["latest"], Literal["pending"], Literal["earliest"], Literal["safe"], Literal["finalized"]]] = None, confirmations: Optional[int] = None) -> Tuple[Dict[Address, List[int]], int]:
        """
        [Source code](file:///Users/dteiml/p/hacker-dom/woke-uniswap-v2/src/UniswapV2Router02.sol#104)

        Args:
            tokenA: address
            tokenB: address
            liquidity: uint256
            amountAMin: uint256
            amountBMin: uint256
            to_: address
            deadline: uint256
        Returns:
            (uint256, uint256)
        """
        ...

    @overload
    def removeLiquidity(self, tokenA: Union[Account, Address], tokenB: Union[Account, Address], liquidity: uint256, amountAMin: uint256, amountBMin: uint256, to_: Union[Account, Address], deadline: uint256, *, from_: Optional[Union[Account, Address, str]] = None, to: Optional[Union[Account, Address, str]] = None, value: Union[int, str] = 0, gas_limit: Optional[Union[int, Literal["max"], Literal["auto"]]] = None, request_type: Literal["tx"] = "tx", gas_price: Optional[Union[int, str]] = None, max_fee_per_gas: Optional[Union[int, str]] = None, max_priority_fee_per_gas: Optional[Union[int, str]] = None, access_list: Optional[Union[Dict[Union[Account, Address, str], List[int]], Literal["auto"]]] = None, type: Optional[int] = None, block: Optional[Union[int, Literal["latest"], Literal["pending"], Literal["earliest"], Literal["safe"], Literal["finalized"]]] = None, confirmations: Optional[int] = None) -> TransactionAbc[Tuple[uint256, uint256]]:
        """
        [Source code](file:///Users/dteiml/p/hacker-dom/woke-uniswap-v2/src/UniswapV2Router02.sol#104)

        Args:
            tokenA: address
            tokenB: address
            liquidity: uint256
            amountAMin: uint256
            amountBMin: uint256
            to_: address
            deadline: uint256
        Returns:
            (uint256, uint256)
        """
        ...

    def removeLiquidity(self, tokenA: Union[Account, Address], tokenB: Union[Account, Address], liquidity: uint256, amountAMin: uint256, amountBMin: uint256, to_: Union[Account, Address], deadline: uint256, *, from_: Optional[Union[Account, Address, str]] = None, to: Optional[Union[Account, Address, str]] = None, value: Union[int, str] = 0, gas_limit: Optional[Union[int, Literal["max"], Literal["auto"]]] = None, request_type: RequestType = 'tx', gas_price: Optional[Union[int, str]] = None, max_fee_per_gas: Optional[Union[int, str]] = None, max_priority_fee_per_gas: Optional[Union[int, str]] = None, access_list: Optional[Union[Dict[Union[Account, Address, str], List[int]], Literal["auto"]]] = None, type: Optional[int] = None, block: Optional[Union[int, Literal["latest"], Literal["pending"], Literal["earliest"], Literal["safe"], Literal["finalized"]]] = None, confirmations: Optional[int] = None) -> Union[Tuple[uint256, uint256], TransactionAbc[Tuple[uint256, uint256]], int, Tuple[Dict[Address, List[int]], int]]:
        """
        [Source code](file:///Users/dteiml/p/hacker-dom/woke-uniswap-v2/src/UniswapV2Router02.sol#104)

        Args:
            tokenA: address
            tokenB: address
            liquidity: uint256
            amountAMin: uint256
            amountBMin: uint256
            to_: address
            deadline: uint256
        Returns:
            (uint256, uint256)
        """
        return self._execute(self.chain, request_type, "baa2abde", [tokenA, tokenB, liquidity, amountAMin, amountBMin, to_, deadline], True if request_type == "tx" else False, Tuple[uint256, uint256], from_, to if to is not None else str(self.address), value, gas_limit, gas_price, max_fee_per_gas, max_priority_fee_per_gas, access_list, type, block, confirmations)

    @overload
    def removeLiquidityETH(self, token: Union[Account, Address], liquidity: uint256, amountTokenMin: uint256, amountETHMin: uint256, to_: Union[Account, Address], deadline: uint256, *, from_: Optional[Union[Account, Address, str]] = None, to: Optional[Union[Account, Address, str]] = None, value: Union[int, str] = 0, gas_limit: Optional[Union[int, Literal["max"], Literal["auto"]]] = None, request_type: Literal["call"], gas_price: Optional[Union[int, str]] = None, max_fee_per_gas: Optional[Union[int, str]] = None, max_priority_fee_per_gas: Optional[Union[int, str]] = None, access_list: Optional[Union[Dict[Union[Account, Address, str], List[int]], Literal["auto"]]] = None, type: Optional[int] = None, block: Optional[Union[int, Literal["latest"], Literal["pending"], Literal["earliest"], Literal["safe"], Literal["finalized"]]] = None, confirmations: Optional[int] = None) -> Tuple[uint256, uint256]:
        """
        [Source code](file:///Users/dteiml/p/hacker-dom/woke-uniswap-v2/src/UniswapV2Router02.sol#121)

        Args:
            token: address
            liquidity: uint256
            amountTokenMin: uint256
            amountETHMin: uint256
            to_: address
            deadline: uint256
        Returns:
            (uint256, uint256)
        """
        ...

    @overload
    def removeLiquidityETH(self, token: Union[Account, Address], liquidity: uint256, amountTokenMin: uint256, amountETHMin: uint256, to_: Union[Account, Address], deadline: uint256, *, from_: Optional[Union[Account, Address, str]] = None, to: Optional[Union[Account, Address, str]] = None, value: Union[int, str] = 0, gas_limit: Optional[Union[int, Literal["max"], Literal["auto"]]] = None, request_type: Literal["estimate"], gas_price: Optional[Union[int, str]] = None, max_fee_per_gas: Optional[Union[int, str]] = None, max_priority_fee_per_gas: Optional[Union[int, str]] = None, access_list: Optional[Union[Dict[Union[Account, Address, str], List[int]], Literal["auto"]]] = None, type: Optional[int] = None, block: Optional[Union[int, Literal["latest"], Literal["pending"], Literal["earliest"], Literal["safe"], Literal["finalized"]]] = None, confirmations: Optional[int] = None) -> int:
        """
        [Source code](file:///Users/dteiml/p/hacker-dom/woke-uniswap-v2/src/UniswapV2Router02.sol#121)

        Args:
            token: address
            liquidity: uint256
            amountTokenMin: uint256
            amountETHMin: uint256
            to_: address
            deadline: uint256
        Returns:
            (uint256, uint256)
        """
        ...

    @overload
    def removeLiquidityETH(self, token: Union[Account, Address], liquidity: uint256, amountTokenMin: uint256, amountETHMin: uint256, to_: Union[Account, Address], deadline: uint256, *, from_: Optional[Union[Account, Address, str]] = None, to: Optional[Union[Account, Address, str]] = None, value: Union[int, str] = 0, gas_limit: Optional[Union[int, Literal["max"], Literal["auto"]]] = None, request_type: Literal["access_list"], gas_price: Optional[Union[int, str]] = None, max_fee_per_gas: Optional[Union[int, str]] = None, max_priority_fee_per_gas: Optional[Union[int, str]] = None, access_list: Optional[Union[Dict[Union[Account, Address, str], List[int]], Literal["auto"]]] = None, type: Optional[int] = None, block: Optional[Union[int, Literal["latest"], Literal["pending"], Literal["earliest"], Literal["safe"], Literal["finalized"]]] = None, confirmations: Optional[int] = None) -> Tuple[Dict[Address, List[int]], int]:
        """
        [Source code](file:///Users/dteiml/p/hacker-dom/woke-uniswap-v2/src/UniswapV2Router02.sol#121)

        Args:
            token: address
            liquidity: uint256
            amountTokenMin: uint256
            amountETHMin: uint256
            to_: address
            deadline: uint256
        Returns:
            (uint256, uint256)
        """
        ...

    @overload
    def removeLiquidityETH(self, token: Union[Account, Address], liquidity: uint256, amountTokenMin: uint256, amountETHMin: uint256, to_: Union[Account, Address], deadline: uint256, *, from_: Optional[Union[Account, Address, str]] = None, to: Optional[Union[Account, Address, str]] = None, value: Union[int, str] = 0, gas_limit: Optional[Union[int, Literal["max"], Literal["auto"]]] = None, request_type: Literal["tx"] = "tx", gas_price: Optional[Union[int, str]] = None, max_fee_per_gas: Optional[Union[int, str]] = None, max_priority_fee_per_gas: Optional[Union[int, str]] = None, access_list: Optional[Union[Dict[Union[Account, Address, str], List[int]], Literal["auto"]]] = None, type: Optional[int] = None, block: Optional[Union[int, Literal["latest"], Literal["pending"], Literal["earliest"], Literal["safe"], Literal["finalized"]]] = None, confirmations: Optional[int] = None) -> TransactionAbc[Tuple[uint256, uint256]]:
        """
        [Source code](file:///Users/dteiml/p/hacker-dom/woke-uniswap-v2/src/UniswapV2Router02.sol#121)

        Args:
            token: address
            liquidity: uint256
            amountTokenMin: uint256
            amountETHMin: uint256
            to_: address
            deadline: uint256
        Returns:
            (uint256, uint256)
        """
        ...

    def removeLiquidityETH(self, token: Union[Account, Address], liquidity: uint256, amountTokenMin: uint256, amountETHMin: uint256, to_: Union[Account, Address], deadline: uint256, *, from_: Optional[Union[Account, Address, str]] = None, to: Optional[Union[Account, Address, str]] = None, value: Union[int, str] = 0, gas_limit: Optional[Union[int, Literal["max"], Literal["auto"]]] = None, request_type: RequestType = 'tx', gas_price: Optional[Union[int, str]] = None, max_fee_per_gas: Optional[Union[int, str]] = None, max_priority_fee_per_gas: Optional[Union[int, str]] = None, access_list: Optional[Union[Dict[Union[Account, Address, str], List[int]], Literal["auto"]]] = None, type: Optional[int] = None, block: Optional[Union[int, Literal["latest"], Literal["pending"], Literal["earliest"], Literal["safe"], Literal["finalized"]]] = None, confirmations: Optional[int] = None) -> Union[Tuple[uint256, uint256], TransactionAbc[Tuple[uint256, uint256]], int, Tuple[Dict[Address, List[int]], int]]:
        """
        [Source code](file:///Users/dteiml/p/hacker-dom/woke-uniswap-v2/src/UniswapV2Router02.sol#121)

        Args:
            token: address
            liquidity: uint256
            amountTokenMin: uint256
            amountETHMin: uint256
            to_: address
            deadline: uint256
        Returns:
            (uint256, uint256)
        """
        return self._execute(self.chain, request_type, "02751cec", [token, liquidity, amountTokenMin, amountETHMin, to_, deadline], True if request_type == "tx" else False, Tuple[uint256, uint256], from_, to if to is not None else str(self.address), value, gas_limit, gas_price, max_fee_per_gas, max_priority_fee_per_gas, access_list, type, block, confirmations)

    @overload
    def removeLiquidityWithPermit(self, tokenA: Union[Account, Address], tokenB: Union[Account, Address], liquidity: uint256, amountAMin: uint256, amountBMin: uint256, to_: Union[Account, Address], deadline: uint256, approveMax: bool, v: uint8, r: bytes32, s: bytes32, *, from_: Optional[Union[Account, Address, str]] = None, to: Optional[Union[Account, Address, str]] = None, value: Union[int, str] = 0, gas_limit: Optional[Union[int, Literal["max"], Literal["auto"]]] = None, request_type: Literal["call"], gas_price: Optional[Union[int, str]] = None, max_fee_per_gas: Optional[Union[int, str]] = None, max_priority_fee_per_gas: Optional[Union[int, str]] = None, access_list: Optional[Union[Dict[Union[Account, Address, str], List[int]], Literal["auto"]]] = None, type: Optional[int] = None, block: Optional[Union[int, Literal["latest"], Literal["pending"], Literal["earliest"], Literal["safe"], Literal["finalized"]]] = None, confirmations: Optional[int] = None) -> Tuple[uint256, uint256]:
        """
        [Source code](file:///Users/dteiml/p/hacker-dom/woke-uniswap-v2/src/UniswapV2Router02.sol#142)

        Args:
            tokenA: address
            tokenB: address
            liquidity: uint256
            amountAMin: uint256
            amountBMin: uint256
            to_: address
            deadline: uint256
            approveMax: bool
            v: uint8
            r: bytes32
            s: bytes32
        Returns:
            (uint256, uint256)
        """
        ...

    @overload
    def removeLiquidityWithPermit(self, tokenA: Union[Account, Address], tokenB: Union[Account, Address], liquidity: uint256, amountAMin: uint256, amountBMin: uint256, to_: Union[Account, Address], deadline: uint256, approveMax: bool, v: uint8, r: bytes32, s: bytes32, *, from_: Optional[Union[Account, Address, str]] = None, to: Optional[Union[Account, Address, str]] = None, value: Union[int, str] = 0, gas_limit: Optional[Union[int, Literal["max"], Literal["auto"]]] = None, request_type: Literal["estimate"], gas_price: Optional[Union[int, str]] = None, max_fee_per_gas: Optional[Union[int, str]] = None, max_priority_fee_per_gas: Optional[Union[int, str]] = None, access_list: Optional[Union[Dict[Union[Account, Address, str], List[int]], Literal["auto"]]] = None, type: Optional[int] = None, block: Optional[Union[int, Literal["latest"], Literal["pending"], Literal["earliest"], Literal["safe"], Literal["finalized"]]] = None, confirmations: Optional[int] = None) -> int:
        """
        [Source code](file:///Users/dteiml/p/hacker-dom/woke-uniswap-v2/src/UniswapV2Router02.sol#142)

        Args:
            tokenA: address
            tokenB: address
            liquidity: uint256
            amountAMin: uint256
            amountBMin: uint256
            to_: address
            deadline: uint256
            approveMax: bool
            v: uint8
            r: bytes32
            s: bytes32
        Returns:
            (uint256, uint256)
        """
        ...

    @overload
    def removeLiquidityWithPermit(self, tokenA: Union[Account, Address], tokenB: Union[Account, Address], liquidity: uint256, amountAMin: uint256, amountBMin: uint256, to_: Union[Account, Address], deadline: uint256, approveMax: bool, v: uint8, r: bytes32, s: bytes32, *, from_: Optional[Union[Account, Address, str]] = None, to: Optional[Union[Account, Address, str]] = None, value: Union[int, str] = 0, gas_limit: Optional[Union[int, Literal["max"], Literal["auto"]]] = None, request_type: Literal["access_list"], gas_price: Optional[Union[int, str]] = None, max_fee_per_gas: Optional[Union[int, str]] = None, max_priority_fee_per_gas: Optional[Union[int, str]] = None, access_list: Optional[Union[Dict[Union[Account, Address, str], List[int]], Literal["auto"]]] = None, type: Optional[int] = None, block: Optional[Union[int, Literal["latest"], Literal["pending"], Literal["earliest"], Literal["safe"], Literal["finalized"]]] = None, confirmations: Optional[int] = None) -> Tuple[Dict[Address, List[int]], int]:
        """
        [Source code](file:///Users/dteiml/p/hacker-dom/woke-uniswap-v2/src/UniswapV2Router02.sol#142)

        Args:
            tokenA: address
            tokenB: address
            liquidity: uint256
            amountAMin: uint256
            amountBMin: uint256
            to_: address
            deadline: uint256
            approveMax: bool
            v: uint8
            r: bytes32
            s: bytes32
        Returns:
            (uint256, uint256)
        """
        ...

    @overload
    def removeLiquidityWithPermit(self, tokenA: Union[Account, Address], tokenB: Union[Account, Address], liquidity: uint256, amountAMin: uint256, amountBMin: uint256, to_: Union[Account, Address], deadline: uint256, approveMax: bool, v: uint8, r: bytes32, s: bytes32, *, from_: Optional[Union[Account, Address, str]] = None, to: Optional[Union[Account, Address, str]] = None, value: Union[int, str] = 0, gas_limit: Optional[Union[int, Literal["max"], Literal["auto"]]] = None, request_type: Literal["tx"] = "tx", gas_price: Optional[Union[int, str]] = None, max_fee_per_gas: Optional[Union[int, str]] = None, max_priority_fee_per_gas: Optional[Union[int, str]] = None, access_list: Optional[Union[Dict[Union[Account, Address, str], List[int]], Literal["auto"]]] = None, type: Optional[int] = None, block: Optional[Union[int, Literal["latest"], Literal["pending"], Literal["earliest"], Literal["safe"], Literal["finalized"]]] = None, confirmations: Optional[int] = None) -> TransactionAbc[Tuple[uint256, uint256]]:
        """
        [Source code](file:///Users/dteiml/p/hacker-dom/woke-uniswap-v2/src/UniswapV2Router02.sol#142)

        Args:
            tokenA: address
            tokenB: address
            liquidity: uint256
            amountAMin: uint256
            amountBMin: uint256
            to_: address
            deadline: uint256
            approveMax: bool
            v: uint8
            r: bytes32
            s: bytes32
        Returns:
            (uint256, uint256)
        """
        ...

    def removeLiquidityWithPermit(self, tokenA: Union[Account, Address], tokenB: Union[Account, Address], liquidity: uint256, amountAMin: uint256, amountBMin: uint256, to_: Union[Account, Address], deadline: uint256, approveMax: bool, v: uint8, r: bytes32, s: bytes32, *, from_: Optional[Union[Account, Address, str]] = None, to: Optional[Union[Account, Address, str]] = None, value: Union[int, str] = 0, gas_limit: Optional[Union[int, Literal["max"], Literal["auto"]]] = None, request_type: RequestType = 'tx', gas_price: Optional[Union[int, str]] = None, max_fee_per_gas: Optional[Union[int, str]] = None, max_priority_fee_per_gas: Optional[Union[int, str]] = None, access_list: Optional[Union[Dict[Union[Account, Address, str], List[int]], Literal["auto"]]] = None, type: Optional[int] = None, block: Optional[Union[int, Literal["latest"], Literal["pending"], Literal["earliest"], Literal["safe"], Literal["finalized"]]] = None, confirmations: Optional[int] = None) -> Union[Tuple[uint256, uint256], TransactionAbc[Tuple[uint256, uint256]], int, Tuple[Dict[Address, List[int]], int]]:
        """
        [Source code](file:///Users/dteiml/p/hacker-dom/woke-uniswap-v2/src/UniswapV2Router02.sol#142)

        Args:
            tokenA: address
            tokenB: address
            liquidity: uint256
            amountAMin: uint256
            amountBMin: uint256
            to_: address
            deadline: uint256
            approveMax: bool
            v: uint8
            r: bytes32
            s: bytes32
        Returns:
            (uint256, uint256)
        """
        return self._execute(self.chain, request_type, "2195995c", [tokenA, tokenB, liquidity, amountAMin, amountBMin, to_, deadline, approveMax, v, r, s], True if request_type == "tx" else False, Tuple[uint256, uint256], from_, to if to is not None else str(self.address), value, gas_limit, gas_price, max_fee_per_gas, max_priority_fee_per_gas, access_list, type, block, confirmations)

    @overload
    def removeLiquidityETHWithPermit(self, token: Union[Account, Address], liquidity: uint256, amountTokenMin: uint256, amountETHMin: uint256, to_: Union[Account, Address], deadline: uint256, approveMax: bool, v: uint8, r: bytes32, s: bytes32, *, from_: Optional[Union[Account, Address, str]] = None, to: Optional[Union[Account, Address, str]] = None, value: Union[int, str] = 0, gas_limit: Optional[Union[int, Literal["max"], Literal["auto"]]] = None, request_type: Literal["call"], gas_price: Optional[Union[int, str]] = None, max_fee_per_gas: Optional[Union[int, str]] = None, max_priority_fee_per_gas: Optional[Union[int, str]] = None, access_list: Optional[Union[Dict[Union[Account, Address, str], List[int]], Literal["auto"]]] = None, type: Optional[int] = None, block: Optional[Union[int, Literal["latest"], Literal["pending"], Literal["earliest"], Literal["safe"], Literal["finalized"]]] = None, confirmations: Optional[int] = None) -> Tuple[uint256, uint256]:
        """
        [Source code](file:///Users/dteiml/p/hacker-dom/woke-uniswap-v2/src/UniswapV2Router02.sol#157)

        Args:
            token: address
            liquidity: uint256
            amountTokenMin: uint256
            amountETHMin: uint256
            to_: address
            deadline: uint256
            approveMax: bool
            v: uint8
            r: bytes32
            s: bytes32
        Returns:
            (uint256, uint256)
        """
        ...

    @overload
    def removeLiquidityETHWithPermit(self, token: Union[Account, Address], liquidity: uint256, amountTokenMin: uint256, amountETHMin: uint256, to_: Union[Account, Address], deadline: uint256, approveMax: bool, v: uint8, r: bytes32, s: bytes32, *, from_: Optional[Union[Account, Address, str]] = None, to: Optional[Union[Account, Address, str]] = None, value: Union[int, str] = 0, gas_limit: Optional[Union[int, Literal["max"], Literal["auto"]]] = None, request_type: Literal["estimate"], gas_price: Optional[Union[int, str]] = None, max_fee_per_gas: Optional[Union[int, str]] = None, max_priority_fee_per_gas: Optional[Union[int, str]] = None, access_list: Optional[Union[Dict[Union[Account, Address, str], List[int]], Literal["auto"]]] = None, type: Optional[int] = None, block: Optional[Union[int, Literal["latest"], Literal["pending"], Literal["earliest"], Literal["safe"], Literal["finalized"]]] = None, confirmations: Optional[int] = None) -> int:
        """
        [Source code](file:///Users/dteiml/p/hacker-dom/woke-uniswap-v2/src/UniswapV2Router02.sol#157)

        Args:
            token: address
            liquidity: uint256
            amountTokenMin: uint256
            amountETHMin: uint256
            to_: address
            deadline: uint256
            approveMax: bool
            v: uint8
            r: bytes32
            s: bytes32
        Returns:
            (uint256, uint256)
        """
        ...

    @overload
    def removeLiquidityETHWithPermit(self, token: Union[Account, Address], liquidity: uint256, amountTokenMin: uint256, amountETHMin: uint256, to_: Union[Account, Address], deadline: uint256, approveMax: bool, v: uint8, r: bytes32, s: bytes32, *, from_: Optional[Union[Account, Address, str]] = None, to: Optional[Union[Account, Address, str]] = None, value: Union[int, str] = 0, gas_limit: Optional[Union[int, Literal["max"], Literal["auto"]]] = None, request_type: Literal["access_list"], gas_price: Optional[Union[int, str]] = None, max_fee_per_gas: Optional[Union[int, str]] = None, max_priority_fee_per_gas: Optional[Union[int, str]] = None, access_list: Optional[Union[Dict[Union[Account, Address, str], List[int]], Literal["auto"]]] = None, type: Optional[int] = None, block: Optional[Union[int, Literal["latest"], Literal["pending"], Literal["earliest"], Literal["safe"], Literal["finalized"]]] = None, confirmations: Optional[int] = None) -> Tuple[Dict[Address, List[int]], int]:
        """
        [Source code](file:///Users/dteiml/p/hacker-dom/woke-uniswap-v2/src/UniswapV2Router02.sol#157)

        Args:
            token: address
            liquidity: uint256
            amountTokenMin: uint256
            amountETHMin: uint256
            to_: address
            deadline: uint256
            approveMax: bool
            v: uint8
            r: bytes32
            s: bytes32
        Returns:
            (uint256, uint256)
        """
        ...

    @overload
    def removeLiquidityETHWithPermit(self, token: Union[Account, Address], liquidity: uint256, amountTokenMin: uint256, amountETHMin: uint256, to_: Union[Account, Address], deadline: uint256, approveMax: bool, v: uint8, r: bytes32, s: bytes32, *, from_: Optional[Union[Account, Address, str]] = None, to: Optional[Union[Account, Address, str]] = None, value: Union[int, str] = 0, gas_limit: Optional[Union[int, Literal["max"], Literal["auto"]]] = None, request_type: Literal["tx"] = "tx", gas_price: Optional[Union[int, str]] = None, max_fee_per_gas: Optional[Union[int, str]] = None, max_priority_fee_per_gas: Optional[Union[int, str]] = None, access_list: Optional[Union[Dict[Union[Account, Address, str], List[int]], Literal["auto"]]] = None, type: Optional[int] = None, block: Optional[Union[int, Literal["latest"], Literal["pending"], Literal["earliest"], Literal["safe"], Literal["finalized"]]] = None, confirmations: Optional[int] = None) -> TransactionAbc[Tuple[uint256, uint256]]:
        """
        [Source code](file:///Users/dteiml/p/hacker-dom/woke-uniswap-v2/src/UniswapV2Router02.sol#157)

        Args:
            token: address
            liquidity: uint256
            amountTokenMin: uint256
            amountETHMin: uint256
            to_: address
            deadline: uint256
            approveMax: bool
            v: uint8
            r: bytes32
            s: bytes32
        Returns:
            (uint256, uint256)
        """
        ...

    def removeLiquidityETHWithPermit(self, token: Union[Account, Address], liquidity: uint256, amountTokenMin: uint256, amountETHMin: uint256, to_: Union[Account, Address], deadline: uint256, approveMax: bool, v: uint8, r: bytes32, s: bytes32, *, from_: Optional[Union[Account, Address, str]] = None, to: Optional[Union[Account, Address, str]] = None, value: Union[int, str] = 0, gas_limit: Optional[Union[int, Literal["max"], Literal["auto"]]] = None, request_type: RequestType = 'tx', gas_price: Optional[Union[int, str]] = None, max_fee_per_gas: Optional[Union[int, str]] = None, max_priority_fee_per_gas: Optional[Union[int, str]] = None, access_list: Optional[Union[Dict[Union[Account, Address, str], List[int]], Literal["auto"]]] = None, type: Optional[int] = None, block: Optional[Union[int, Literal["latest"], Literal["pending"], Literal["earliest"], Literal["safe"], Literal["finalized"]]] = None, confirmations: Optional[int] = None) -> Union[Tuple[uint256, uint256], TransactionAbc[Tuple[uint256, uint256]], int, Tuple[Dict[Address, List[int]], int]]:
        """
        [Source code](file:///Users/dteiml/p/hacker-dom/woke-uniswap-v2/src/UniswapV2Router02.sol#157)

        Args:
            token: address
            liquidity: uint256
            amountTokenMin: uint256
            amountETHMin: uint256
            to_: address
            deadline: uint256
            approveMax: bool
            v: uint8
            r: bytes32
            s: bytes32
        Returns:
            (uint256, uint256)
        """
        return self._execute(self.chain, request_type, "ded9382a", [token, liquidity, amountTokenMin, amountETHMin, to_, deadline, approveMax, v, r, s], True if request_type == "tx" else False, Tuple[uint256, uint256], from_, to if to is not None else str(self.address), value, gas_limit, gas_price, max_fee_per_gas, max_priority_fee_per_gas, access_list, type, block, confirmations)

    @overload
    def removeLiquidityETHSupportingFeeOnTransferTokens(self, token: Union[Account, Address], liquidity: uint256, amountTokenMin: uint256, amountETHMin: uint256, to_: Union[Account, Address], deadline: uint256, *, from_: Optional[Union[Account, Address, str]] = None, to: Optional[Union[Account, Address, str]] = None, value: Union[int, str] = 0, gas_limit: Optional[Union[int, Literal["max"], Literal["auto"]]] = None, request_type: Literal["call"], gas_price: Optional[Union[int, str]] = None, max_fee_per_gas: Optional[Union[int, str]] = None, max_priority_fee_per_gas: Optional[Union[int, str]] = None, access_list: Optional[Union[Dict[Union[Account, Address, str], List[int]], Literal["auto"]]] = None, type: Optional[int] = None, block: Optional[Union[int, Literal["latest"], Literal["pending"], Literal["earliest"], Literal["safe"], Literal["finalized"]]] = None, confirmations: Optional[int] = None) -> uint256:
        """
        [Source code](file:///Users/dteiml/p/hacker-dom/woke-uniswap-v2/src/UniswapV2Router02.sol#173)

        Args:
            token: address
            liquidity: uint256
            amountTokenMin: uint256
            amountETHMin: uint256
            to_: address
            deadline: uint256
        Returns:
            uint256
        """
        ...

    @overload
    def removeLiquidityETHSupportingFeeOnTransferTokens(self, token: Union[Account, Address], liquidity: uint256, amountTokenMin: uint256, amountETHMin: uint256, to_: Union[Account, Address], deadline: uint256, *, from_: Optional[Union[Account, Address, str]] = None, to: Optional[Union[Account, Address, str]] = None, value: Union[int, str] = 0, gas_limit: Optional[Union[int, Literal["max"], Literal["auto"]]] = None, request_type: Literal["estimate"], gas_price: Optional[Union[int, str]] = None, max_fee_per_gas: Optional[Union[int, str]] = None, max_priority_fee_per_gas: Optional[Union[int, str]] = None, access_list: Optional[Union[Dict[Union[Account, Address, str], List[int]], Literal["auto"]]] = None, type: Optional[int] = None, block: Optional[Union[int, Literal["latest"], Literal["pending"], Literal["earliest"], Literal["safe"], Literal["finalized"]]] = None, confirmations: Optional[int] = None) -> int:
        """
        [Source code](file:///Users/dteiml/p/hacker-dom/woke-uniswap-v2/src/UniswapV2Router02.sol#173)

        Args:
            token: address
            liquidity: uint256
            amountTokenMin: uint256
            amountETHMin: uint256
            to_: address
            deadline: uint256
        Returns:
            uint256
        """
        ...

    @overload
    def removeLiquidityETHSupportingFeeOnTransferTokens(self, token: Union[Account, Address], liquidity: uint256, amountTokenMin: uint256, amountETHMin: uint256, to_: Union[Account, Address], deadline: uint256, *, from_: Optional[Union[Account, Address, str]] = None, to: Optional[Union[Account, Address, str]] = None, value: Union[int, str] = 0, gas_limit: Optional[Union[int, Literal["max"], Literal["auto"]]] = None, request_type: Literal["access_list"], gas_price: Optional[Union[int, str]] = None, max_fee_per_gas: Optional[Union[int, str]] = None, max_priority_fee_per_gas: Optional[Union[int, str]] = None, access_list: Optional[Union[Dict[Union[Account, Address, str], List[int]], Literal["auto"]]] = None, type: Optional[int] = None, block: Optional[Union[int, Literal["latest"], Literal["pending"], Literal["earliest"], Literal["safe"], Literal["finalized"]]] = None, confirmations: Optional[int] = None) -> Tuple[Dict[Address, List[int]], int]:
        """
        [Source code](file:///Users/dteiml/p/hacker-dom/woke-uniswap-v2/src/UniswapV2Router02.sol#173)

        Args:
            token: address
            liquidity: uint256
            amountTokenMin: uint256
            amountETHMin: uint256
            to_: address
            deadline: uint256
        Returns:
            uint256
        """
        ...

    @overload
    def removeLiquidityETHSupportingFeeOnTransferTokens(self, token: Union[Account, Address], liquidity: uint256, amountTokenMin: uint256, amountETHMin: uint256, to_: Union[Account, Address], deadline: uint256, *, from_: Optional[Union[Account, Address, str]] = None, to: Optional[Union[Account, Address, str]] = None, value: Union[int, str] = 0, gas_limit: Optional[Union[int, Literal["max"], Literal["auto"]]] = None, request_type: Literal["tx"] = "tx", gas_price: Optional[Union[int, str]] = None, max_fee_per_gas: Optional[Union[int, str]] = None, max_priority_fee_per_gas: Optional[Union[int, str]] = None, access_list: Optional[Union[Dict[Union[Account, Address, str], List[int]], Literal["auto"]]] = None, type: Optional[int] = None, block: Optional[Union[int, Literal["latest"], Literal["pending"], Literal["earliest"], Literal["safe"], Literal["finalized"]]] = None, confirmations: Optional[int] = None) -> TransactionAbc[uint256]:
        """
        [Source code](file:///Users/dteiml/p/hacker-dom/woke-uniswap-v2/src/UniswapV2Router02.sol#173)

        Args:
            token: address
            liquidity: uint256
            amountTokenMin: uint256
            amountETHMin: uint256
            to_: address
            deadline: uint256
        Returns:
            uint256
        """
        ...

    def removeLiquidityETHSupportingFeeOnTransferTokens(self, token: Union[Account, Address], liquidity: uint256, amountTokenMin: uint256, amountETHMin: uint256, to_: Union[Account, Address], deadline: uint256, *, from_: Optional[Union[Account, Address, str]] = None, to: Optional[Union[Account, Address, str]] = None, value: Union[int, str] = 0, gas_limit: Optional[Union[int, Literal["max"], Literal["auto"]]] = None, request_type: RequestType = 'tx', gas_price: Optional[Union[int, str]] = None, max_fee_per_gas: Optional[Union[int, str]] = None, max_priority_fee_per_gas: Optional[Union[int, str]] = None, access_list: Optional[Union[Dict[Union[Account, Address, str], List[int]], Literal["auto"]]] = None, type: Optional[int] = None, block: Optional[Union[int, Literal["latest"], Literal["pending"], Literal["earliest"], Literal["safe"], Literal["finalized"]]] = None, confirmations: Optional[int] = None) -> Union[uint256, TransactionAbc[uint256], int, Tuple[Dict[Address, List[int]], int]]:
        """
        [Source code](file:///Users/dteiml/p/hacker-dom/woke-uniswap-v2/src/UniswapV2Router02.sol#173)

        Args:
            token: address
            liquidity: uint256
            amountTokenMin: uint256
            amountETHMin: uint256
            to_: address
            deadline: uint256
        Returns:
            uint256
        """
        return self._execute(self.chain, request_type, "af2979eb", [token, liquidity, amountTokenMin, amountETHMin, to_, deadline], True if request_type == "tx" else False, uint256, from_, to if to is not None else str(self.address), value, gas_limit, gas_price, max_fee_per_gas, max_priority_fee_per_gas, access_list, type, block, confirmations)

    @overload
    def removeLiquidityETHWithPermitSupportingFeeOnTransferTokens(self, token: Union[Account, Address], liquidity: uint256, amountTokenMin: uint256, amountETHMin: uint256, to_: Union[Account, Address], deadline: uint256, approveMax: bool, v: uint8, r: bytes32, s: bytes32, *, from_: Optional[Union[Account, Address, str]] = None, to: Optional[Union[Account, Address, str]] = None, value: Union[int, str] = 0, gas_limit: Optional[Union[int, Literal["max"], Literal["auto"]]] = None, request_type: Literal["call"], gas_price: Optional[Union[int, str]] = None, max_fee_per_gas: Optional[Union[int, str]] = None, max_priority_fee_per_gas: Optional[Union[int, str]] = None, access_list: Optional[Union[Dict[Union[Account, Address, str], List[int]], Literal["auto"]]] = None, type: Optional[int] = None, block: Optional[Union[int, Literal["latest"], Literal["pending"], Literal["earliest"], Literal["safe"], Literal["finalized"]]] = None, confirmations: Optional[int] = None) -> uint256:
        """
        [Source code](file:///Users/dteiml/p/hacker-dom/woke-uniswap-v2/src/UniswapV2Router02.sol#194)

        Args:
            token: address
            liquidity: uint256
            amountTokenMin: uint256
            amountETHMin: uint256
            to_: address
            deadline: uint256
            approveMax: bool
            v: uint8
            r: bytes32
            s: bytes32
        Returns:
            uint256
        """
        ...

    @overload
    def removeLiquidityETHWithPermitSupportingFeeOnTransferTokens(self, token: Union[Account, Address], liquidity: uint256, amountTokenMin: uint256, amountETHMin: uint256, to_: Union[Account, Address], deadline: uint256, approveMax: bool, v: uint8, r: bytes32, s: bytes32, *, from_: Optional[Union[Account, Address, str]] = None, to: Optional[Union[Account, Address, str]] = None, value: Union[int, str] = 0, gas_limit: Optional[Union[int, Literal["max"], Literal["auto"]]] = None, request_type: Literal["estimate"], gas_price: Optional[Union[int, str]] = None, max_fee_per_gas: Optional[Union[int, str]] = None, max_priority_fee_per_gas: Optional[Union[int, str]] = None, access_list: Optional[Union[Dict[Union[Account, Address, str], List[int]], Literal["auto"]]] = None, type: Optional[int] = None, block: Optional[Union[int, Literal["latest"], Literal["pending"], Literal["earliest"], Literal["safe"], Literal["finalized"]]] = None, confirmations: Optional[int] = None) -> int:
        """
        [Source code](file:///Users/dteiml/p/hacker-dom/woke-uniswap-v2/src/UniswapV2Router02.sol#194)

        Args:
            token: address
            liquidity: uint256
            amountTokenMin: uint256
            amountETHMin: uint256
            to_: address
            deadline: uint256
            approveMax: bool
            v: uint8
            r: bytes32
            s: bytes32
        Returns:
            uint256
        """
        ...

    @overload
    def removeLiquidityETHWithPermitSupportingFeeOnTransferTokens(self, token: Union[Account, Address], liquidity: uint256, amountTokenMin: uint256, amountETHMin: uint256, to_: Union[Account, Address], deadline: uint256, approveMax: bool, v: uint8, r: bytes32, s: bytes32, *, from_: Optional[Union[Account, Address, str]] = None, to: Optional[Union[Account, Address, str]] = None, value: Union[int, str] = 0, gas_limit: Optional[Union[int, Literal["max"], Literal["auto"]]] = None, request_type: Literal["access_list"], gas_price: Optional[Union[int, str]] = None, max_fee_per_gas: Optional[Union[int, str]] = None, max_priority_fee_per_gas: Optional[Union[int, str]] = None, access_list: Optional[Union[Dict[Union[Account, Address, str], List[int]], Literal["auto"]]] = None, type: Optional[int] = None, block: Optional[Union[int, Literal["latest"], Literal["pending"], Literal["earliest"], Literal["safe"], Literal["finalized"]]] = None, confirmations: Optional[int] = None) -> Tuple[Dict[Address, List[int]], int]:
        """
        [Source code](file:///Users/dteiml/p/hacker-dom/woke-uniswap-v2/src/UniswapV2Router02.sol#194)

        Args:
            token: address
            liquidity: uint256
            amountTokenMin: uint256
            amountETHMin: uint256
            to_: address
            deadline: uint256
            approveMax: bool
            v: uint8
            r: bytes32
            s: bytes32
        Returns:
            uint256
        """
        ...

    @overload
    def removeLiquidityETHWithPermitSupportingFeeOnTransferTokens(self, token: Union[Account, Address], liquidity: uint256, amountTokenMin: uint256, amountETHMin: uint256, to_: Union[Account, Address], deadline: uint256, approveMax: bool, v: uint8, r: bytes32, s: bytes32, *, from_: Optional[Union[Account, Address, str]] = None, to: Optional[Union[Account, Address, str]] = None, value: Union[int, str] = 0, gas_limit: Optional[Union[int, Literal["max"], Literal["auto"]]] = None, request_type: Literal["tx"] = "tx", gas_price: Optional[Union[int, str]] = None, max_fee_per_gas: Optional[Union[int, str]] = None, max_priority_fee_per_gas: Optional[Union[int, str]] = None, access_list: Optional[Union[Dict[Union[Account, Address, str], List[int]], Literal["auto"]]] = None, type: Optional[int] = None, block: Optional[Union[int, Literal["latest"], Literal["pending"], Literal["earliest"], Literal["safe"], Literal["finalized"]]] = None, confirmations: Optional[int] = None) -> TransactionAbc[uint256]:
        """
        [Source code](file:///Users/dteiml/p/hacker-dom/woke-uniswap-v2/src/UniswapV2Router02.sol#194)

        Args:
            token: address
            liquidity: uint256
            amountTokenMin: uint256
            amountETHMin: uint256
            to_: address
            deadline: uint256
            approveMax: bool
            v: uint8
            r: bytes32
            s: bytes32
        Returns:
            uint256
        """
        ...

    def removeLiquidityETHWithPermitSupportingFeeOnTransferTokens(self, token: Union[Account, Address], liquidity: uint256, amountTokenMin: uint256, amountETHMin: uint256, to_: Union[Account, Address], deadline: uint256, approveMax: bool, v: uint8, r: bytes32, s: bytes32, *, from_: Optional[Union[Account, Address, str]] = None, to: Optional[Union[Account, Address, str]] = None, value: Union[int, str] = 0, gas_limit: Optional[Union[int, Literal["max"], Literal["auto"]]] = None, request_type: RequestType = 'tx', gas_price: Optional[Union[int, str]] = None, max_fee_per_gas: Optional[Union[int, str]] = None, max_priority_fee_per_gas: Optional[Union[int, str]] = None, access_list: Optional[Union[Dict[Union[Account, Address, str], List[int]], Literal["auto"]]] = None, type: Optional[int] = None, block: Optional[Union[int, Literal["latest"], Literal["pending"], Literal["earliest"], Literal["safe"], Literal["finalized"]]] = None, confirmations: Optional[int] = None) -> Union[uint256, TransactionAbc[uint256], int, Tuple[Dict[Address, List[int]], int]]:
        """
        [Source code](file:///Users/dteiml/p/hacker-dom/woke-uniswap-v2/src/UniswapV2Router02.sol#194)

        Args:
            token: address
            liquidity: uint256
            amountTokenMin: uint256
            amountETHMin: uint256
            to_: address
            deadline: uint256
            approveMax: bool
            v: uint8
            r: bytes32
            s: bytes32
        Returns:
            uint256
        """
        return self._execute(self.chain, request_type, "5b0d5984", [token, liquidity, amountTokenMin, amountETHMin, to_, deadline, approveMax, v, r, s], True if request_type == "tx" else False, uint256, from_, to if to is not None else str(self.address), value, gas_limit, gas_price, max_fee_per_gas, max_priority_fee_per_gas, access_list, type, block, confirmations)

    @overload
    def swapExactTokensForTokens(self, amountIn: uint256, amountOutMin: uint256, path: List[Union[Account, Address]], to_: Union[Account, Address], deadline: uint256, *, from_: Optional[Union[Account, Address, str]] = None, to: Optional[Union[Account, Address, str]] = None, value: Union[int, str] = 0, gas_limit: Optional[Union[int, Literal["max"], Literal["auto"]]] = None, request_type: Literal["call"], gas_price: Optional[Union[int, str]] = None, max_fee_per_gas: Optional[Union[int, str]] = None, max_priority_fee_per_gas: Optional[Union[int, str]] = None, access_list: Optional[Union[Dict[Union[Account, Address, str], List[int]], Literal["auto"]]] = None, type: Optional[int] = None, block: Optional[Union[int, Literal["latest"], Literal["pending"], Literal["earliest"], Literal["safe"], Literal["finalized"]]] = None, confirmations: Optional[int] = None) -> List[uint256]:
        """
        [Source code](file:///Users/dteiml/p/hacker-dom/woke-uniswap-v2/src/UniswapV2Router02.sol#244)

        Args:
            amountIn: uint256
            amountOutMin: uint256
            path: address[]
            to_: address
            deadline: uint256
        Returns:
            uint256[]
        """
        ...

    @overload
    def swapExactTokensForTokens(self, amountIn: uint256, amountOutMin: uint256, path: List[Union[Account, Address]], to_: Union[Account, Address], deadline: uint256, *, from_: Optional[Union[Account, Address, str]] = None, to: Optional[Union[Account, Address, str]] = None, value: Union[int, str] = 0, gas_limit: Optional[Union[int, Literal["max"], Literal["auto"]]] = None, request_type: Literal["estimate"], gas_price: Optional[Union[int, str]] = None, max_fee_per_gas: Optional[Union[int, str]] = None, max_priority_fee_per_gas: Optional[Union[int, str]] = None, access_list: Optional[Union[Dict[Union[Account, Address, str], List[int]], Literal["auto"]]] = None, type: Optional[int] = None, block: Optional[Union[int, Literal["latest"], Literal["pending"], Literal["earliest"], Literal["safe"], Literal["finalized"]]] = None, confirmations: Optional[int] = None) -> int:
        """
        [Source code](file:///Users/dteiml/p/hacker-dom/woke-uniswap-v2/src/UniswapV2Router02.sol#244)

        Args:
            amountIn: uint256
            amountOutMin: uint256
            path: address[]
            to_: address
            deadline: uint256
        Returns:
            uint256[]
        """
        ...

    @overload
    def swapExactTokensForTokens(self, amountIn: uint256, amountOutMin: uint256, path: List[Union[Account, Address]], to_: Union[Account, Address], deadline: uint256, *, from_: Optional[Union[Account, Address, str]] = None, to: Optional[Union[Account, Address, str]] = None, value: Union[int, str] = 0, gas_limit: Optional[Union[int, Literal["max"], Literal["auto"]]] = None, request_type: Literal["access_list"], gas_price: Optional[Union[int, str]] = None, max_fee_per_gas: Optional[Union[int, str]] = None, max_priority_fee_per_gas: Optional[Union[int, str]] = None, access_list: Optional[Union[Dict[Union[Account, Address, str], List[int]], Literal["auto"]]] = None, type: Optional[int] = None, block: Optional[Union[int, Literal["latest"], Literal["pending"], Literal["earliest"], Literal["safe"], Literal["finalized"]]] = None, confirmations: Optional[int] = None) -> Tuple[Dict[Address, List[int]], int]:
        """
        [Source code](file:///Users/dteiml/p/hacker-dom/woke-uniswap-v2/src/UniswapV2Router02.sol#244)

        Args:
            amountIn: uint256
            amountOutMin: uint256
            path: address[]
            to_: address
            deadline: uint256
        Returns:
            uint256[]
        """
        ...

    @overload
    def swapExactTokensForTokens(self, amountIn: uint256, amountOutMin: uint256, path: List[Union[Account, Address]], to_: Union[Account, Address], deadline: uint256, *, from_: Optional[Union[Account, Address, str]] = None, to: Optional[Union[Account, Address, str]] = None, value: Union[int, str] = 0, gas_limit: Optional[Union[int, Literal["max"], Literal["auto"]]] = None, request_type: Literal["tx"] = "tx", gas_price: Optional[Union[int, str]] = None, max_fee_per_gas: Optional[Union[int, str]] = None, max_priority_fee_per_gas: Optional[Union[int, str]] = None, access_list: Optional[Union[Dict[Union[Account, Address, str], List[int]], Literal["auto"]]] = None, type: Optional[int] = None, block: Optional[Union[int, Literal["latest"], Literal["pending"], Literal["earliest"], Literal["safe"], Literal["finalized"]]] = None, confirmations: Optional[int] = None) -> TransactionAbc[List[uint256]]:
        """
        [Source code](file:///Users/dteiml/p/hacker-dom/woke-uniswap-v2/src/UniswapV2Router02.sol#244)

        Args:
            amountIn: uint256
            amountOutMin: uint256
            path: address[]
            to_: address
            deadline: uint256
        Returns:
            uint256[]
        """
        ...

    def swapExactTokensForTokens(self, amountIn: uint256, amountOutMin: uint256, path: List[Union[Account, Address]], to_: Union[Account, Address], deadline: uint256, *, from_: Optional[Union[Account, Address, str]] = None, to: Optional[Union[Account, Address, str]] = None, value: Union[int, str] = 0, gas_limit: Optional[Union[int, Literal["max"], Literal["auto"]]] = None, request_type: RequestType = 'tx', gas_price: Optional[Union[int, str]] = None, max_fee_per_gas: Optional[Union[int, str]] = None, max_priority_fee_per_gas: Optional[Union[int, str]] = None, access_list: Optional[Union[Dict[Union[Account, Address, str], List[int]], Literal["auto"]]] = None, type: Optional[int] = None, block: Optional[Union[int, Literal["latest"], Literal["pending"], Literal["earliest"], Literal["safe"], Literal["finalized"]]] = None, confirmations: Optional[int] = None) -> Union[List[uint256], TransactionAbc[List[uint256]], int, Tuple[Dict[Address, List[int]], int]]:
        """
        [Source code](file:///Users/dteiml/p/hacker-dom/woke-uniswap-v2/src/UniswapV2Router02.sol#244)

        Args:
            amountIn: uint256
            amountOutMin: uint256
            path: address[]
            to_: address
            deadline: uint256
        Returns:
            uint256[]
        """
        return self._execute(self.chain, request_type, "38ed1739", [amountIn, amountOutMin, path, to_, deadline], True if request_type == "tx" else False, List[uint256], from_, to if to is not None else str(self.address), value, gas_limit, gas_price, max_fee_per_gas, max_priority_fee_per_gas, access_list, type, block, confirmations)

    @overload
    def swapExactTokensForTokens_noFee(self, amountIn: uint256, amountOutMin: uint256, path: List[Union[Account, Address]], to_: Union[Account, Address], deadline: uint256, *, from_: Optional[Union[Account, Address, str]] = None, to: Optional[Union[Account, Address, str]] = None, value: Union[int, str] = 0, gas_limit: Optional[Union[int, Literal["max"], Literal["auto"]]] = None, request_type: Literal["call"], gas_price: Optional[Union[int, str]] = None, max_fee_per_gas: Optional[Union[int, str]] = None, max_priority_fee_per_gas: Optional[Union[int, str]] = None, access_list: Optional[Union[Dict[Union[Account, Address, str], List[int]], Literal["auto"]]] = None, type: Optional[int] = None, block: Optional[Union[int, Literal["latest"], Literal["pending"], Literal["earliest"], Literal["safe"], Literal["finalized"]]] = None, confirmations: Optional[int] = None) -> List[uint256]:
        """
        [Source code](file:///Users/dteiml/p/hacker-dom/woke-uniswap-v2/src/UniswapV2Router02.sol#261)

        Args:
            amountIn: uint256
            amountOutMin: uint256
            path: address[]
            to_: address
            deadline: uint256
        Returns:
            uint256[]
        """
        ...

    @overload
    def swapExactTokensForTokens_noFee(self, amountIn: uint256, amountOutMin: uint256, path: List[Union[Account, Address]], to_: Union[Account, Address], deadline: uint256, *, from_: Optional[Union[Account, Address, str]] = None, to: Optional[Union[Account, Address, str]] = None, value: Union[int, str] = 0, gas_limit: Optional[Union[int, Literal["max"], Literal["auto"]]] = None, request_type: Literal["estimate"], gas_price: Optional[Union[int, str]] = None, max_fee_per_gas: Optional[Union[int, str]] = None, max_priority_fee_per_gas: Optional[Union[int, str]] = None, access_list: Optional[Union[Dict[Union[Account, Address, str], List[int]], Literal["auto"]]] = None, type: Optional[int] = None, block: Optional[Union[int, Literal["latest"], Literal["pending"], Literal["earliest"], Literal["safe"], Literal["finalized"]]] = None, confirmations: Optional[int] = None) -> int:
        """
        [Source code](file:///Users/dteiml/p/hacker-dom/woke-uniswap-v2/src/UniswapV2Router02.sol#261)

        Args:
            amountIn: uint256
            amountOutMin: uint256
            path: address[]
            to_: address
            deadline: uint256
        Returns:
            uint256[]
        """
        ...

    @overload
    def swapExactTokensForTokens_noFee(self, amountIn: uint256, amountOutMin: uint256, path: List[Union[Account, Address]], to_: Union[Account, Address], deadline: uint256, *, from_: Optional[Union[Account, Address, str]] = None, to: Optional[Union[Account, Address, str]] = None, value: Union[int, str] = 0, gas_limit: Optional[Union[int, Literal["max"], Literal["auto"]]] = None, request_type: Literal["access_list"], gas_price: Optional[Union[int, str]] = None, max_fee_per_gas: Optional[Union[int, str]] = None, max_priority_fee_per_gas: Optional[Union[int, str]] = None, access_list: Optional[Union[Dict[Union[Account, Address, str], List[int]], Literal["auto"]]] = None, type: Optional[int] = None, block: Optional[Union[int, Literal["latest"], Literal["pending"], Literal["earliest"], Literal["safe"], Literal["finalized"]]] = None, confirmations: Optional[int] = None) -> Tuple[Dict[Address, List[int]], int]:
        """
        [Source code](file:///Users/dteiml/p/hacker-dom/woke-uniswap-v2/src/UniswapV2Router02.sol#261)

        Args:
            amountIn: uint256
            amountOutMin: uint256
            path: address[]
            to_: address
            deadline: uint256
        Returns:
            uint256[]
        """
        ...

    @overload
    def swapExactTokensForTokens_noFee(self, amountIn: uint256, amountOutMin: uint256, path: List[Union[Account, Address]], to_: Union[Account, Address], deadline: uint256, *, from_: Optional[Union[Account, Address, str]] = None, to: Optional[Union[Account, Address, str]] = None, value: Union[int, str] = 0, gas_limit: Optional[Union[int, Literal["max"], Literal["auto"]]] = None, request_type: Literal["tx"] = "tx", gas_price: Optional[Union[int, str]] = None, max_fee_per_gas: Optional[Union[int, str]] = None, max_priority_fee_per_gas: Optional[Union[int, str]] = None, access_list: Optional[Union[Dict[Union[Account, Address, str], List[int]], Literal["auto"]]] = None, type: Optional[int] = None, block: Optional[Union[int, Literal["latest"], Literal["pending"], Literal["earliest"], Literal["safe"], Literal["finalized"]]] = None, confirmations: Optional[int] = None) -> TransactionAbc[List[uint256]]:
        """
        [Source code](file:///Users/dteiml/p/hacker-dom/woke-uniswap-v2/src/UniswapV2Router02.sol#261)

        Args:
            amountIn: uint256
            amountOutMin: uint256
            path: address[]
            to_: address
            deadline: uint256
        Returns:
            uint256[]
        """
        ...

    def swapExactTokensForTokens_noFee(self, amountIn: uint256, amountOutMin: uint256, path: List[Union[Account, Address]], to_: Union[Account, Address], deadline: uint256, *, from_: Optional[Union[Account, Address, str]] = None, to: Optional[Union[Account, Address, str]] = None, value: Union[int, str] = 0, gas_limit: Optional[Union[int, Literal["max"], Literal["auto"]]] = None, request_type: RequestType = 'tx', gas_price: Optional[Union[int, str]] = None, max_fee_per_gas: Optional[Union[int, str]] = None, max_priority_fee_per_gas: Optional[Union[int, str]] = None, access_list: Optional[Union[Dict[Union[Account, Address, str], List[int]], Literal["auto"]]] = None, type: Optional[int] = None, block: Optional[Union[int, Literal["latest"], Literal["pending"], Literal["earliest"], Literal["safe"], Literal["finalized"]]] = None, confirmations: Optional[int] = None) -> Union[List[uint256], TransactionAbc[List[uint256]], int, Tuple[Dict[Address, List[int]], int]]:
        """
        [Source code](file:///Users/dteiml/p/hacker-dom/woke-uniswap-v2/src/UniswapV2Router02.sol#261)

        Args:
            amountIn: uint256
            amountOutMin: uint256
            path: address[]
            to_: address
            deadline: uint256
        Returns:
            uint256[]
        """
        return self._execute(self.chain, request_type, "9539cab8", [amountIn, amountOutMin, path, to_, deadline], True if request_type == "tx" else False, List[uint256], from_, to if to is not None else str(self.address), value, gas_limit, gas_price, max_fee_per_gas, max_priority_fee_per_gas, access_list, type, block, confirmations)

    @overload
    def swapTokensForExactTokens(self, amountOut: uint256, amountInMax: uint256, path: List[Union[Account, Address]], to_: Union[Account, Address], deadline: uint256, *, from_: Optional[Union[Account, Address, str]] = None, to: Optional[Union[Account, Address, str]] = None, value: Union[int, str] = 0, gas_limit: Optional[Union[int, Literal["max"], Literal["auto"]]] = None, request_type: Literal["call"], gas_price: Optional[Union[int, str]] = None, max_fee_per_gas: Optional[Union[int, str]] = None, max_priority_fee_per_gas: Optional[Union[int, str]] = None, access_list: Optional[Union[Dict[Union[Account, Address, str], List[int]], Literal["auto"]]] = None, type: Optional[int] = None, block: Optional[Union[int, Literal["latest"], Literal["pending"], Literal["earliest"], Literal["safe"], Literal["finalized"]]] = None, confirmations: Optional[int] = None) -> List[uint256]:
        """
        [Source code](file:///Users/dteiml/p/hacker-dom/woke-uniswap-v2/src/UniswapV2Router02.sol#277)

        Args:
            amountOut: uint256
            amountInMax: uint256
            path: address[]
            to_: address
            deadline: uint256
        Returns:
            uint256[]
        """
        ...

    @overload
    def swapTokensForExactTokens(self, amountOut: uint256, amountInMax: uint256, path: List[Union[Account, Address]], to_: Union[Account, Address], deadline: uint256, *, from_: Optional[Union[Account, Address, str]] = None, to: Optional[Union[Account, Address, str]] = None, value: Union[int, str] = 0, gas_limit: Optional[Union[int, Literal["max"], Literal["auto"]]] = None, request_type: Literal["estimate"], gas_price: Optional[Union[int, str]] = None, max_fee_per_gas: Optional[Union[int, str]] = None, max_priority_fee_per_gas: Optional[Union[int, str]] = None, access_list: Optional[Union[Dict[Union[Account, Address, str], List[int]], Literal["auto"]]] = None, type: Optional[int] = None, block: Optional[Union[int, Literal["latest"], Literal["pending"], Literal["earliest"], Literal["safe"], Literal["finalized"]]] = None, confirmations: Optional[int] = None) -> int:
        """
        [Source code](file:///Users/dteiml/p/hacker-dom/woke-uniswap-v2/src/UniswapV2Router02.sol#277)

        Args:
            amountOut: uint256
            amountInMax: uint256
            path: address[]
            to_: address
            deadline: uint256
        Returns:
            uint256[]
        """
        ...

    @overload
    def swapTokensForExactTokens(self, amountOut: uint256, amountInMax: uint256, path: List[Union[Account, Address]], to_: Union[Account, Address], deadline: uint256, *, from_: Optional[Union[Account, Address, str]] = None, to: Optional[Union[Account, Address, str]] = None, value: Union[int, str] = 0, gas_limit: Optional[Union[int, Literal["max"], Literal["auto"]]] = None, request_type: Literal["access_list"], gas_price: Optional[Union[int, str]] = None, max_fee_per_gas: Optional[Union[int, str]] = None, max_priority_fee_per_gas: Optional[Union[int, str]] = None, access_list: Optional[Union[Dict[Union[Account, Address, str], List[int]], Literal["auto"]]] = None, type: Optional[int] = None, block: Optional[Union[int, Literal["latest"], Literal["pending"], Literal["earliest"], Literal["safe"], Literal["finalized"]]] = None, confirmations: Optional[int] = None) -> Tuple[Dict[Address, List[int]], int]:
        """
        [Source code](file:///Users/dteiml/p/hacker-dom/woke-uniswap-v2/src/UniswapV2Router02.sol#277)

        Args:
            amountOut: uint256
            amountInMax: uint256
            path: address[]
            to_: address
            deadline: uint256
        Returns:
            uint256[]
        """
        ...

    @overload
    def swapTokensForExactTokens(self, amountOut: uint256, amountInMax: uint256, path: List[Union[Account, Address]], to_: Union[Account, Address], deadline: uint256, *, from_: Optional[Union[Account, Address, str]] = None, to: Optional[Union[Account, Address, str]] = None, value: Union[int, str] = 0, gas_limit: Optional[Union[int, Literal["max"], Literal["auto"]]] = None, request_type: Literal["tx"] = "tx", gas_price: Optional[Union[int, str]] = None, max_fee_per_gas: Optional[Union[int, str]] = None, max_priority_fee_per_gas: Optional[Union[int, str]] = None, access_list: Optional[Union[Dict[Union[Account, Address, str], List[int]], Literal["auto"]]] = None, type: Optional[int] = None, block: Optional[Union[int, Literal["latest"], Literal["pending"], Literal["earliest"], Literal["safe"], Literal["finalized"]]] = None, confirmations: Optional[int] = None) -> TransactionAbc[List[uint256]]:
        """
        [Source code](file:///Users/dteiml/p/hacker-dom/woke-uniswap-v2/src/UniswapV2Router02.sol#277)

        Args:
            amountOut: uint256
            amountInMax: uint256
            path: address[]
            to_: address
            deadline: uint256
        Returns:
            uint256[]
        """
        ...

    def swapTokensForExactTokens(self, amountOut: uint256, amountInMax: uint256, path: List[Union[Account, Address]], to_: Union[Account, Address], deadline: uint256, *, from_: Optional[Union[Account, Address, str]] = None, to: Optional[Union[Account, Address, str]] = None, value: Union[int, str] = 0, gas_limit: Optional[Union[int, Literal["max"], Literal["auto"]]] = None, request_type: RequestType = 'tx', gas_price: Optional[Union[int, str]] = None, max_fee_per_gas: Optional[Union[int, str]] = None, max_priority_fee_per_gas: Optional[Union[int, str]] = None, access_list: Optional[Union[Dict[Union[Account, Address, str], List[int]], Literal["auto"]]] = None, type: Optional[int] = None, block: Optional[Union[int, Literal["latest"], Literal["pending"], Literal["earliest"], Literal["safe"], Literal["finalized"]]] = None, confirmations: Optional[int] = None) -> Union[List[uint256], TransactionAbc[List[uint256]], int, Tuple[Dict[Address, List[int]], int]]:
        """
        [Source code](file:///Users/dteiml/p/hacker-dom/woke-uniswap-v2/src/UniswapV2Router02.sol#277)

        Args:
            amountOut: uint256
            amountInMax: uint256
            path: address[]
            to_: address
            deadline: uint256
        Returns:
            uint256[]
        """
        return self._execute(self.chain, request_type, "8803dbee", [amountOut, amountInMax, path, to_, deadline], True if request_type == "tx" else False, List[uint256], from_, to if to is not None else str(self.address), value, gas_limit, gas_price, max_fee_per_gas, max_priority_fee_per_gas, access_list, type, block, confirmations)

    @overload
    def swapExactETHForTokens(self, amountOutMin: uint256, path: List[Union[Account, Address]], to_: Union[Account, Address], deadline: uint256, *, from_: Optional[Union[Account, Address, str]] = None, to: Optional[Union[Account, Address, str]] = None, value: Union[int, str] = 0, gas_limit: Optional[Union[int, Literal["max"], Literal["auto"]]] = None, request_type: Literal["call"], gas_price: Optional[Union[int, str]] = None, max_fee_per_gas: Optional[Union[int, str]] = None, max_priority_fee_per_gas: Optional[Union[int, str]] = None, access_list: Optional[Union[Dict[Union[Account, Address, str], List[int]], Literal["auto"]]] = None, type: Optional[int] = None, block: Optional[Union[int, Literal["latest"], Literal["pending"], Literal["earliest"], Literal["safe"], Literal["finalized"]]] = None, confirmations: Optional[int] = None) -> List[uint256]:
        """
        [Source code](file:///Users/dteiml/p/hacker-dom/woke-uniswap-v2/src/UniswapV2Router02.sol#291)

        Args:
            amountOutMin: uint256
            path: address[]
            to_: address
            deadline: uint256
        Returns:
            uint256[]
        """
        ...

    @overload
    def swapExactETHForTokens(self, amountOutMin: uint256, path: List[Union[Account, Address]], to_: Union[Account, Address], deadline: uint256, *, from_: Optional[Union[Account, Address, str]] = None, to: Optional[Union[Account, Address, str]] = None, value: Union[int, str] = 0, gas_limit: Optional[Union[int, Literal["max"], Literal["auto"]]] = None, request_type: Literal["estimate"], gas_price: Optional[Union[int, str]] = None, max_fee_per_gas: Optional[Union[int, str]] = None, max_priority_fee_per_gas: Optional[Union[int, str]] = None, access_list: Optional[Union[Dict[Union[Account, Address, str], List[int]], Literal["auto"]]] = None, type: Optional[int] = None, block: Optional[Union[int, Literal["latest"], Literal["pending"], Literal["earliest"], Literal["safe"], Literal["finalized"]]] = None, confirmations: Optional[int] = None) -> int:
        """
        [Source code](file:///Users/dteiml/p/hacker-dom/woke-uniswap-v2/src/UniswapV2Router02.sol#291)

        Args:
            amountOutMin: uint256
            path: address[]
            to_: address
            deadline: uint256
        Returns:
            uint256[]
        """
        ...

    @overload
    def swapExactETHForTokens(self, amountOutMin: uint256, path: List[Union[Account, Address]], to_: Union[Account, Address], deadline: uint256, *, from_: Optional[Union[Account, Address, str]] = None, to: Optional[Union[Account, Address, str]] = None, value: Union[int, str] = 0, gas_limit: Optional[Union[int, Literal["max"], Literal["auto"]]] = None, request_type: Literal["access_list"], gas_price: Optional[Union[int, str]] = None, max_fee_per_gas: Optional[Union[int, str]] = None, max_priority_fee_per_gas: Optional[Union[int, str]] = None, access_list: Optional[Union[Dict[Union[Account, Address, str], List[int]], Literal["auto"]]] = None, type: Optional[int] = None, block: Optional[Union[int, Literal["latest"], Literal["pending"], Literal["earliest"], Literal["safe"], Literal["finalized"]]] = None, confirmations: Optional[int] = None) -> Tuple[Dict[Address, List[int]], int]:
        """
        [Source code](file:///Users/dteiml/p/hacker-dom/woke-uniswap-v2/src/UniswapV2Router02.sol#291)

        Args:
            amountOutMin: uint256
            path: address[]
            to_: address
            deadline: uint256
        Returns:
            uint256[]
        """
        ...

    @overload
    def swapExactETHForTokens(self, amountOutMin: uint256, path: List[Union[Account, Address]], to_: Union[Account, Address], deadline: uint256, *, from_: Optional[Union[Account, Address, str]] = None, to: Optional[Union[Account, Address, str]] = None, value: Union[int, str] = 0, gas_limit: Optional[Union[int, Literal["max"], Literal["auto"]]] = None, request_type: Literal["tx"] = "tx", gas_price: Optional[Union[int, str]] = None, max_fee_per_gas: Optional[Union[int, str]] = None, max_priority_fee_per_gas: Optional[Union[int, str]] = None, access_list: Optional[Union[Dict[Union[Account, Address, str], List[int]], Literal["auto"]]] = None, type: Optional[int] = None, block: Optional[Union[int, Literal["latest"], Literal["pending"], Literal["earliest"], Literal["safe"], Literal["finalized"]]] = None, confirmations: Optional[int] = None) -> TransactionAbc[List[uint256]]:
        """
        [Source code](file:///Users/dteiml/p/hacker-dom/woke-uniswap-v2/src/UniswapV2Router02.sol#291)

        Args:
            amountOutMin: uint256
            path: address[]
            to_: address
            deadline: uint256
        Returns:
            uint256[]
        """
        ...

    def swapExactETHForTokens(self, amountOutMin: uint256, path: List[Union[Account, Address]], to_: Union[Account, Address], deadline: uint256, *, from_: Optional[Union[Account, Address, str]] = None, to: Optional[Union[Account, Address, str]] = None, value: Union[int, str] = 0, gas_limit: Optional[Union[int, Literal["max"], Literal["auto"]]] = None, request_type: RequestType = 'tx', gas_price: Optional[Union[int, str]] = None, max_fee_per_gas: Optional[Union[int, str]] = None, max_priority_fee_per_gas: Optional[Union[int, str]] = None, access_list: Optional[Union[Dict[Union[Account, Address, str], List[int]], Literal["auto"]]] = None, type: Optional[int] = None, block: Optional[Union[int, Literal["latest"], Literal["pending"], Literal["earliest"], Literal["safe"], Literal["finalized"]]] = None, confirmations: Optional[int] = None) -> Union[List[uint256], TransactionAbc[List[uint256]], int, Tuple[Dict[Address, List[int]], int]]:
        """
        [Source code](file:///Users/dteiml/p/hacker-dom/woke-uniswap-v2/src/UniswapV2Router02.sol#291)

        Args:
            amountOutMin: uint256
            path: address[]
            to_: address
            deadline: uint256
        Returns:
            uint256[]
        """
        return self._execute(self.chain, request_type, "7ff36ab5", [amountOutMin, path, to_, deadline], True if request_type == "tx" else False, List[uint256], from_, to if to is not None else str(self.address), value, gas_limit, gas_price, max_fee_per_gas, max_priority_fee_per_gas, access_list, type, block, confirmations)

    @overload
    def swapTokensForExactETH(self, amountOut: uint256, amountInMax: uint256, path: List[Union[Account, Address]], to_: Union[Account, Address], deadline: uint256, *, from_: Optional[Union[Account, Address, str]] = None, to: Optional[Union[Account, Address, str]] = None, value: Union[int, str] = 0, gas_limit: Optional[Union[int, Literal["max"], Literal["auto"]]] = None, request_type: Literal["call"], gas_price: Optional[Union[int, str]] = None, max_fee_per_gas: Optional[Union[int, str]] = None, max_priority_fee_per_gas: Optional[Union[int, str]] = None, access_list: Optional[Union[Dict[Union[Account, Address, str], List[int]], Literal["auto"]]] = None, type: Optional[int] = None, block: Optional[Union[int, Literal["latest"], Literal["pending"], Literal["earliest"], Literal["safe"], Literal["finalized"]]] = None, confirmations: Optional[int] = None) -> List[uint256]:
        """
        [Source code](file:///Users/dteiml/p/hacker-dom/woke-uniswap-v2/src/UniswapV2Router02.sol#305)

        Args:
            amountOut: uint256
            amountInMax: uint256
            path: address[]
            to_: address
            deadline: uint256
        Returns:
            uint256[]
        """
        ...

    @overload
    def swapTokensForExactETH(self, amountOut: uint256, amountInMax: uint256, path: List[Union[Account, Address]], to_: Union[Account, Address], deadline: uint256, *, from_: Optional[Union[Account, Address, str]] = None, to: Optional[Union[Account, Address, str]] = None, value: Union[int, str] = 0, gas_limit: Optional[Union[int, Literal["max"], Literal["auto"]]] = None, request_type: Literal["estimate"], gas_price: Optional[Union[int, str]] = None, max_fee_per_gas: Optional[Union[int, str]] = None, max_priority_fee_per_gas: Optional[Union[int, str]] = None, access_list: Optional[Union[Dict[Union[Account, Address, str], List[int]], Literal["auto"]]] = None, type: Optional[int] = None, block: Optional[Union[int, Literal["latest"], Literal["pending"], Literal["earliest"], Literal["safe"], Literal["finalized"]]] = None, confirmations: Optional[int] = None) -> int:
        """
        [Source code](file:///Users/dteiml/p/hacker-dom/woke-uniswap-v2/src/UniswapV2Router02.sol#305)

        Args:
            amountOut: uint256
            amountInMax: uint256
            path: address[]
            to_: address
            deadline: uint256
        Returns:
            uint256[]
        """
        ...

    @overload
    def swapTokensForExactETH(self, amountOut: uint256, amountInMax: uint256, path: List[Union[Account, Address]], to_: Union[Account, Address], deadline: uint256, *, from_: Optional[Union[Account, Address, str]] = None, to: Optional[Union[Account, Address, str]] = None, value: Union[int, str] = 0, gas_limit: Optional[Union[int, Literal["max"], Literal["auto"]]] = None, request_type: Literal["access_list"], gas_price: Optional[Union[int, str]] = None, max_fee_per_gas: Optional[Union[int, str]] = None, max_priority_fee_per_gas: Optional[Union[int, str]] = None, access_list: Optional[Union[Dict[Union[Account, Address, str], List[int]], Literal["auto"]]] = None, type: Optional[int] = None, block: Optional[Union[int, Literal["latest"], Literal["pending"], Literal["earliest"], Literal["safe"], Literal["finalized"]]] = None, confirmations: Optional[int] = None) -> Tuple[Dict[Address, List[int]], int]:
        """
        [Source code](file:///Users/dteiml/p/hacker-dom/woke-uniswap-v2/src/UniswapV2Router02.sol#305)

        Args:
            amountOut: uint256
            amountInMax: uint256
            path: address[]
            to_: address
            deadline: uint256
        Returns:
            uint256[]
        """
        ...

    @overload
    def swapTokensForExactETH(self, amountOut: uint256, amountInMax: uint256, path: List[Union[Account, Address]], to_: Union[Account, Address], deadline: uint256, *, from_: Optional[Union[Account, Address, str]] = None, to: Optional[Union[Account, Address, str]] = None, value: Union[int, str] = 0, gas_limit: Optional[Union[int, Literal["max"], Literal["auto"]]] = None, request_type: Literal["tx"] = "tx", gas_price: Optional[Union[int, str]] = None, max_fee_per_gas: Optional[Union[int, str]] = None, max_priority_fee_per_gas: Optional[Union[int, str]] = None, access_list: Optional[Union[Dict[Union[Account, Address, str], List[int]], Literal["auto"]]] = None, type: Optional[int] = None, block: Optional[Union[int, Literal["latest"], Literal["pending"], Literal["earliest"], Literal["safe"], Literal["finalized"]]] = None, confirmations: Optional[int] = None) -> TransactionAbc[List[uint256]]:
        """
        [Source code](file:///Users/dteiml/p/hacker-dom/woke-uniswap-v2/src/UniswapV2Router02.sol#305)

        Args:
            amountOut: uint256
            amountInMax: uint256
            path: address[]
            to_: address
            deadline: uint256
        Returns:
            uint256[]
        """
        ...

    def swapTokensForExactETH(self, amountOut: uint256, amountInMax: uint256, path: List[Union[Account, Address]], to_: Union[Account, Address], deadline: uint256, *, from_: Optional[Union[Account, Address, str]] = None, to: Optional[Union[Account, Address, str]] = None, value: Union[int, str] = 0, gas_limit: Optional[Union[int, Literal["max"], Literal["auto"]]] = None, request_type: RequestType = 'tx', gas_price: Optional[Union[int, str]] = None, max_fee_per_gas: Optional[Union[int, str]] = None, max_priority_fee_per_gas: Optional[Union[int, str]] = None, access_list: Optional[Union[Dict[Union[Account, Address, str], List[int]], Literal["auto"]]] = None, type: Optional[int] = None, block: Optional[Union[int, Literal["latest"], Literal["pending"], Literal["earliest"], Literal["safe"], Literal["finalized"]]] = None, confirmations: Optional[int] = None) -> Union[List[uint256], TransactionAbc[List[uint256]], int, Tuple[Dict[Address, List[int]], int]]:
        """
        [Source code](file:///Users/dteiml/p/hacker-dom/woke-uniswap-v2/src/UniswapV2Router02.sol#305)

        Args:
            amountOut: uint256
            amountInMax: uint256
            path: address[]
            to_: address
            deadline: uint256
        Returns:
            uint256[]
        """
        return self._execute(self.chain, request_type, "4a25d94a", [amountOut, amountInMax, path, to_, deadline], True if request_type == "tx" else False, List[uint256], from_, to if to is not None else str(self.address), value, gas_limit, gas_price, max_fee_per_gas, max_priority_fee_per_gas, access_list, type, block, confirmations)

    @overload
    def swapExactTokensForETH(self, amountIn: uint256, amountOutMin: uint256, path: List[Union[Account, Address]], to_: Union[Account, Address], deadline: uint256, *, from_: Optional[Union[Account, Address, str]] = None, to: Optional[Union[Account, Address, str]] = None, value: Union[int, str] = 0, gas_limit: Optional[Union[int, Literal["max"], Literal["auto"]]] = None, request_type: Literal["call"], gas_price: Optional[Union[int, str]] = None, max_fee_per_gas: Optional[Union[int, str]] = None, max_priority_fee_per_gas: Optional[Union[int, str]] = None, access_list: Optional[Union[Dict[Union[Account, Address, str], List[int]], Literal["auto"]]] = None, type: Optional[int] = None, block: Optional[Union[int, Literal["latest"], Literal["pending"], Literal["earliest"], Literal["safe"], Literal["finalized"]]] = None, confirmations: Optional[int] = None) -> List[uint256]:
        """
        [Source code](file:///Users/dteiml/p/hacker-dom/woke-uniswap-v2/src/UniswapV2Router02.sol#321)

        Args:
            amountIn: uint256
            amountOutMin: uint256
            path: address[]
            to_: address
            deadline: uint256
        Returns:
            uint256[]
        """
        ...

    @overload
    def swapExactTokensForETH(self, amountIn: uint256, amountOutMin: uint256, path: List[Union[Account, Address]], to_: Union[Account, Address], deadline: uint256, *, from_: Optional[Union[Account, Address, str]] = None, to: Optional[Union[Account, Address, str]] = None, value: Union[int, str] = 0, gas_limit: Optional[Union[int, Literal["max"], Literal["auto"]]] = None, request_type: Literal["estimate"], gas_price: Optional[Union[int, str]] = None, max_fee_per_gas: Optional[Union[int, str]] = None, max_priority_fee_per_gas: Optional[Union[int, str]] = None, access_list: Optional[Union[Dict[Union[Account, Address, str], List[int]], Literal["auto"]]] = None, type: Optional[int] = None, block: Optional[Union[int, Literal["latest"], Literal["pending"], Literal["earliest"], Literal["safe"], Literal["finalized"]]] = None, confirmations: Optional[int] = None) -> int:
        """
        [Source code](file:///Users/dteiml/p/hacker-dom/woke-uniswap-v2/src/UniswapV2Router02.sol#321)

        Args:
            amountIn: uint256
            amountOutMin: uint256
            path: address[]
            to_: address
            deadline: uint256
        Returns:
            uint256[]
        """
        ...

    @overload
    def swapExactTokensForETH(self, amountIn: uint256, amountOutMin: uint256, path: List[Union[Account, Address]], to_: Union[Account, Address], deadline: uint256, *, from_: Optional[Union[Account, Address, str]] = None, to: Optional[Union[Account, Address, str]] = None, value: Union[int, str] = 0, gas_limit: Optional[Union[int, Literal["max"], Literal["auto"]]] = None, request_type: Literal["access_list"], gas_price: Optional[Union[int, str]] = None, max_fee_per_gas: Optional[Union[int, str]] = None, max_priority_fee_per_gas: Optional[Union[int, str]] = None, access_list: Optional[Union[Dict[Union[Account, Address, str], List[int]], Literal["auto"]]] = None, type: Optional[int] = None, block: Optional[Union[int, Literal["latest"], Literal["pending"], Literal["earliest"], Literal["safe"], Literal["finalized"]]] = None, confirmations: Optional[int] = None) -> Tuple[Dict[Address, List[int]], int]:
        """
        [Source code](file:///Users/dteiml/p/hacker-dom/woke-uniswap-v2/src/UniswapV2Router02.sol#321)

        Args:
            amountIn: uint256
            amountOutMin: uint256
            path: address[]
            to_: address
            deadline: uint256
        Returns:
            uint256[]
        """
        ...

    @overload
    def swapExactTokensForETH(self, amountIn: uint256, amountOutMin: uint256, path: List[Union[Account, Address]], to_: Union[Account, Address], deadline: uint256, *, from_: Optional[Union[Account, Address, str]] = None, to: Optional[Union[Account, Address, str]] = None, value: Union[int, str] = 0, gas_limit: Optional[Union[int, Literal["max"], Literal["auto"]]] = None, request_type: Literal["tx"] = "tx", gas_price: Optional[Union[int, str]] = None, max_fee_per_gas: Optional[Union[int, str]] = None, max_priority_fee_per_gas: Optional[Union[int, str]] = None, access_list: Optional[Union[Dict[Union[Account, Address, str], List[int]], Literal["auto"]]] = None, type: Optional[int] = None, block: Optional[Union[int, Literal["latest"], Literal["pending"], Literal["earliest"], Literal["safe"], Literal["finalized"]]] = None, confirmations: Optional[int] = None) -> TransactionAbc[List[uint256]]:
        """
        [Source code](file:///Users/dteiml/p/hacker-dom/woke-uniswap-v2/src/UniswapV2Router02.sol#321)

        Args:
            amountIn: uint256
            amountOutMin: uint256
            path: address[]
            to_: address
            deadline: uint256
        Returns:
            uint256[]
        """
        ...

    def swapExactTokensForETH(self, amountIn: uint256, amountOutMin: uint256, path: List[Union[Account, Address]], to_: Union[Account, Address], deadline: uint256, *, from_: Optional[Union[Account, Address, str]] = None, to: Optional[Union[Account, Address, str]] = None, value: Union[int, str] = 0, gas_limit: Optional[Union[int, Literal["max"], Literal["auto"]]] = None, request_type: RequestType = 'tx', gas_price: Optional[Union[int, str]] = None, max_fee_per_gas: Optional[Union[int, str]] = None, max_priority_fee_per_gas: Optional[Union[int, str]] = None, access_list: Optional[Union[Dict[Union[Account, Address, str], List[int]], Literal["auto"]]] = None, type: Optional[int] = None, block: Optional[Union[int, Literal["latest"], Literal["pending"], Literal["earliest"], Literal["safe"], Literal["finalized"]]] = None, confirmations: Optional[int] = None) -> Union[List[uint256], TransactionAbc[List[uint256]], int, Tuple[Dict[Address, List[int]], int]]:
        """
        [Source code](file:///Users/dteiml/p/hacker-dom/woke-uniswap-v2/src/UniswapV2Router02.sol#321)

        Args:
            amountIn: uint256
            amountOutMin: uint256
            path: address[]
            to_: address
            deadline: uint256
        Returns:
            uint256[]
        """
        return self._execute(self.chain, request_type, "18cbafe5", [amountIn, amountOutMin, path, to_, deadline], True if request_type == "tx" else False, List[uint256], from_, to if to is not None else str(self.address), value, gas_limit, gas_price, max_fee_per_gas, max_priority_fee_per_gas, access_list, type, block, confirmations)

    @overload
    def swapETHForExactTokens(self, amountOut: uint256, path: List[Union[Account, Address]], to_: Union[Account, Address], deadline: uint256, *, from_: Optional[Union[Account, Address, str]] = None, to: Optional[Union[Account, Address, str]] = None, value: Union[int, str] = 0, gas_limit: Optional[Union[int, Literal["max"], Literal["auto"]]] = None, request_type: Literal["call"], gas_price: Optional[Union[int, str]] = None, max_fee_per_gas: Optional[Union[int, str]] = None, max_priority_fee_per_gas: Optional[Union[int, str]] = None, access_list: Optional[Union[Dict[Union[Account, Address, str], List[int]], Literal["auto"]]] = None, type: Optional[int] = None, block: Optional[Union[int, Literal["latest"], Literal["pending"], Literal["earliest"], Literal["safe"], Literal["finalized"]]] = None, confirmations: Optional[int] = None) -> List[uint256]:
        """
        [Source code](file:///Users/dteiml/p/hacker-dom/woke-uniswap-v2/src/UniswapV2Router02.sol#337)

        Args:
            amountOut: uint256
            path: address[]
            to_: address
            deadline: uint256
        Returns:
            uint256[]
        """
        ...

    @overload
    def swapETHForExactTokens(self, amountOut: uint256, path: List[Union[Account, Address]], to_: Union[Account, Address], deadline: uint256, *, from_: Optional[Union[Account, Address, str]] = None, to: Optional[Union[Account, Address, str]] = None, value: Union[int, str] = 0, gas_limit: Optional[Union[int, Literal["max"], Literal["auto"]]] = None, request_type: Literal["estimate"], gas_price: Optional[Union[int, str]] = None, max_fee_per_gas: Optional[Union[int, str]] = None, max_priority_fee_per_gas: Optional[Union[int, str]] = None, access_list: Optional[Union[Dict[Union[Account, Address, str], List[int]], Literal["auto"]]] = None, type: Optional[int] = None, block: Optional[Union[int, Literal["latest"], Literal["pending"], Literal["earliest"], Literal["safe"], Literal["finalized"]]] = None, confirmations: Optional[int] = None) -> int:
        """
        [Source code](file:///Users/dteiml/p/hacker-dom/woke-uniswap-v2/src/UniswapV2Router02.sol#337)

        Args:
            amountOut: uint256
            path: address[]
            to_: address
            deadline: uint256
        Returns:
            uint256[]
        """
        ...

    @overload
    def swapETHForExactTokens(self, amountOut: uint256, path: List[Union[Account, Address]], to_: Union[Account, Address], deadline: uint256, *, from_: Optional[Union[Account, Address, str]] = None, to: Optional[Union[Account, Address, str]] = None, value: Union[int, str] = 0, gas_limit: Optional[Union[int, Literal["max"], Literal["auto"]]] = None, request_type: Literal["access_list"], gas_price: Optional[Union[int, str]] = None, max_fee_per_gas: Optional[Union[int, str]] = None, max_priority_fee_per_gas: Optional[Union[int, str]] = None, access_list: Optional[Union[Dict[Union[Account, Address, str], List[int]], Literal["auto"]]] = None, type: Optional[int] = None, block: Optional[Union[int, Literal["latest"], Literal["pending"], Literal["earliest"], Literal["safe"], Literal["finalized"]]] = None, confirmations: Optional[int] = None) -> Tuple[Dict[Address, List[int]], int]:
        """
        [Source code](file:///Users/dteiml/p/hacker-dom/woke-uniswap-v2/src/UniswapV2Router02.sol#337)

        Args:
            amountOut: uint256
            path: address[]
            to_: address
            deadline: uint256
        Returns:
            uint256[]
        """
        ...

    @overload
    def swapETHForExactTokens(self, amountOut: uint256, path: List[Union[Account, Address]], to_: Union[Account, Address], deadline: uint256, *, from_: Optional[Union[Account, Address, str]] = None, to: Optional[Union[Account, Address, str]] = None, value: Union[int, str] = 0, gas_limit: Optional[Union[int, Literal["max"], Literal["auto"]]] = None, request_type: Literal["tx"] = "tx", gas_price: Optional[Union[int, str]] = None, max_fee_per_gas: Optional[Union[int, str]] = None, max_priority_fee_per_gas: Optional[Union[int, str]] = None, access_list: Optional[Union[Dict[Union[Account, Address, str], List[int]], Literal["auto"]]] = None, type: Optional[int] = None, block: Optional[Union[int, Literal["latest"], Literal["pending"], Literal["earliest"], Literal["safe"], Literal["finalized"]]] = None, confirmations: Optional[int] = None) -> TransactionAbc[List[uint256]]:
        """
        [Source code](file:///Users/dteiml/p/hacker-dom/woke-uniswap-v2/src/UniswapV2Router02.sol#337)

        Args:
            amountOut: uint256
            path: address[]
            to_: address
            deadline: uint256
        Returns:
            uint256[]
        """
        ...

    def swapETHForExactTokens(self, amountOut: uint256, path: List[Union[Account, Address]], to_: Union[Account, Address], deadline: uint256, *, from_: Optional[Union[Account, Address, str]] = None, to: Optional[Union[Account, Address, str]] = None, value: Union[int, str] = 0, gas_limit: Optional[Union[int, Literal["max"], Literal["auto"]]] = None, request_type: RequestType = 'tx', gas_price: Optional[Union[int, str]] = None, max_fee_per_gas: Optional[Union[int, str]] = None, max_priority_fee_per_gas: Optional[Union[int, str]] = None, access_list: Optional[Union[Dict[Union[Account, Address, str], List[int]], Literal["auto"]]] = None, type: Optional[int] = None, block: Optional[Union[int, Literal["latest"], Literal["pending"], Literal["earliest"], Literal["safe"], Literal["finalized"]]] = None, confirmations: Optional[int] = None) -> Union[List[uint256], TransactionAbc[List[uint256]], int, Tuple[Dict[Address, List[int]], int]]:
        """
        [Source code](file:///Users/dteiml/p/hacker-dom/woke-uniswap-v2/src/UniswapV2Router02.sol#337)

        Args:
            amountOut: uint256
            path: address[]
            to_: address
            deadline: uint256
        Returns:
            uint256[]
        """
        return self._execute(self.chain, request_type, "fb3bdb41", [amountOut, path, to_, deadline], True if request_type == "tx" else False, List[uint256], from_, to if to is not None else str(self.address), value, gas_limit, gas_price, max_fee_per_gas, max_priority_fee_per_gas, access_list, type, block, confirmations)

    @overload
    def swapExactTokensForTokensSupportingFeeOnTransferTokens(self, amountIn: uint256, amountOutMin: uint256, path: List[Union[Account, Address]], to_: Union[Account, Address], deadline: uint256, *, from_: Optional[Union[Account, Address, str]] = None, to: Optional[Union[Account, Address, str]] = None, value: Union[int, str] = 0, gas_limit: Optional[Union[int, Literal["max"], Literal["auto"]]] = None, request_type: Literal["call"], gas_price: Optional[Union[int, str]] = None, max_fee_per_gas: Optional[Union[int, str]] = None, max_priority_fee_per_gas: Optional[Union[int, str]] = None, access_list: Optional[Union[Dict[Union[Account, Address, str], List[int]], Literal["auto"]]] = None, type: Optional[int] = None, block: Optional[Union[int, Literal["latest"], Literal["pending"], Literal["earliest"], Literal["safe"], Literal["finalized"]]] = None, confirmations: Optional[int] = None) -> None:
        """
        [Source code](file:///Users/dteiml/p/hacker-dom/woke-uniswap-v2/src/UniswapV2Router02.sol#374)

        Args:
            amountIn: uint256
            amountOutMin: uint256
            path: address[]
            to_: address
            deadline: uint256
        """
        ...

    @overload
    def swapExactTokensForTokensSupportingFeeOnTransferTokens(self, amountIn: uint256, amountOutMin: uint256, path: List[Union[Account, Address]], to_: Union[Account, Address], deadline: uint256, *, from_: Optional[Union[Account, Address, str]] = None, to: Optional[Union[Account, Address, str]] = None, value: Union[int, str] = 0, gas_limit: Optional[Union[int, Literal["max"], Literal["auto"]]] = None, request_type: Literal["estimate"], gas_price: Optional[Union[int, str]] = None, max_fee_per_gas: Optional[Union[int, str]] = None, max_priority_fee_per_gas: Optional[Union[int, str]] = None, access_list: Optional[Union[Dict[Union[Account, Address, str], List[int]], Literal["auto"]]] = None, type: Optional[int] = None, block: Optional[Union[int, Literal["latest"], Literal["pending"], Literal["earliest"], Literal["safe"], Literal["finalized"]]] = None, confirmations: Optional[int] = None) -> int:
        """
        [Source code](file:///Users/dteiml/p/hacker-dom/woke-uniswap-v2/src/UniswapV2Router02.sol#374)

        Args:
            amountIn: uint256
            amountOutMin: uint256
            path: address[]
            to_: address
            deadline: uint256
        """
        ...

    @overload
    def swapExactTokensForTokensSupportingFeeOnTransferTokens(self, amountIn: uint256, amountOutMin: uint256, path: List[Union[Account, Address]], to_: Union[Account, Address], deadline: uint256, *, from_: Optional[Union[Account, Address, str]] = None, to: Optional[Union[Account, Address, str]] = None, value: Union[int, str] = 0, gas_limit: Optional[Union[int, Literal["max"], Literal["auto"]]] = None, request_type: Literal["access_list"], gas_price: Optional[Union[int, str]] = None, max_fee_per_gas: Optional[Union[int, str]] = None, max_priority_fee_per_gas: Optional[Union[int, str]] = None, access_list: Optional[Union[Dict[Union[Account, Address, str], List[int]], Literal["auto"]]] = None, type: Optional[int] = None, block: Optional[Union[int, Literal["latest"], Literal["pending"], Literal["earliest"], Literal["safe"], Literal["finalized"]]] = None, confirmations: Optional[int] = None) -> Tuple[Dict[Address, List[int]], int]:
        """
        [Source code](file:///Users/dteiml/p/hacker-dom/woke-uniswap-v2/src/UniswapV2Router02.sol#374)

        Args:
            amountIn: uint256
            amountOutMin: uint256
            path: address[]
            to_: address
            deadline: uint256
        """
        ...

    @overload
    def swapExactTokensForTokensSupportingFeeOnTransferTokens(self, amountIn: uint256, amountOutMin: uint256, path: List[Union[Account, Address]], to_: Union[Account, Address], deadline: uint256, *, from_: Optional[Union[Account, Address, str]] = None, to: Optional[Union[Account, Address, str]] = None, value: Union[int, str] = 0, gas_limit: Optional[Union[int, Literal["max"], Literal["auto"]]] = None, request_type: Literal["tx"] = "tx", gas_price: Optional[Union[int, str]] = None, max_fee_per_gas: Optional[Union[int, str]] = None, max_priority_fee_per_gas: Optional[Union[int, str]] = None, access_list: Optional[Union[Dict[Union[Account, Address, str], List[int]], Literal["auto"]]] = None, type: Optional[int] = None, block: Optional[Union[int, Literal["latest"], Literal["pending"], Literal["earliest"], Literal["safe"], Literal["finalized"]]] = None, confirmations: Optional[int] = None) -> TransactionAbc[None]:
        """
        [Source code](file:///Users/dteiml/p/hacker-dom/woke-uniswap-v2/src/UniswapV2Router02.sol#374)

        Args:
            amountIn: uint256
            amountOutMin: uint256
            path: address[]
            to_: address
            deadline: uint256
        """
        ...

    def swapExactTokensForTokensSupportingFeeOnTransferTokens(self, amountIn: uint256, amountOutMin: uint256, path: List[Union[Account, Address]], to_: Union[Account, Address], deadline: uint256, *, from_: Optional[Union[Account, Address, str]] = None, to: Optional[Union[Account, Address, str]] = None, value: Union[int, str] = 0, gas_limit: Optional[Union[int, Literal["max"], Literal["auto"]]] = None, request_type: RequestType = 'tx', gas_price: Optional[Union[int, str]] = None, max_fee_per_gas: Optional[Union[int, str]] = None, max_priority_fee_per_gas: Optional[Union[int, str]] = None, access_list: Optional[Union[Dict[Union[Account, Address, str], List[int]], Literal["auto"]]] = None, type: Optional[int] = None, block: Optional[Union[int, Literal["latest"], Literal["pending"], Literal["earliest"], Literal["safe"], Literal["finalized"]]] = None, confirmations: Optional[int] = None) -> Union[None, TransactionAbc[None], int, Tuple[Dict[Address, List[int]], int]]:
        """
        [Source code](file:///Users/dteiml/p/hacker-dom/woke-uniswap-v2/src/UniswapV2Router02.sol#374)

        Args:
            amountIn: uint256
            amountOutMin: uint256
            path: address[]
            to_: address
            deadline: uint256
        """
        return self._execute(self.chain, request_type, "5c11d795", [amountIn, amountOutMin, path, to_, deadline], True if request_type == "tx" else False, NoneType, from_, to if to is not None else str(self.address), value, gas_limit, gas_price, max_fee_per_gas, max_priority_fee_per_gas, access_list, type, block, confirmations)

    @overload
    def swapExactETHForTokensSupportingFeeOnTransferTokens(self, amountOutMin: uint256, path: List[Union[Account, Address]], to_: Union[Account, Address], deadline: uint256, *, from_: Optional[Union[Account, Address, str]] = None, to: Optional[Union[Account, Address, str]] = None, value: Union[int, str] = 0, gas_limit: Optional[Union[int, Literal["max"], Literal["auto"]]] = None, request_type: Literal["call"], gas_price: Optional[Union[int, str]] = None, max_fee_per_gas: Optional[Union[int, str]] = None, max_priority_fee_per_gas: Optional[Union[int, str]] = None, access_list: Optional[Union[Dict[Union[Account, Address, str], List[int]], Literal["auto"]]] = None, type: Optional[int] = None, block: Optional[Union[int, Literal["latest"], Literal["pending"], Literal["earliest"], Literal["safe"], Literal["finalized"]]] = None, confirmations: Optional[int] = None) -> None:
        """
        [Source code](file:///Users/dteiml/p/hacker-dom/woke-uniswap-v2/src/UniswapV2Router02.sol#391)

        Args:
            amountOutMin: uint256
            path: address[]
            to_: address
            deadline: uint256
        """
        ...

    @overload
    def swapExactETHForTokensSupportingFeeOnTransferTokens(self, amountOutMin: uint256, path: List[Union[Account, Address]], to_: Union[Account, Address], deadline: uint256, *, from_: Optional[Union[Account, Address, str]] = None, to: Optional[Union[Account, Address, str]] = None, value: Union[int, str] = 0, gas_limit: Optional[Union[int, Literal["max"], Literal["auto"]]] = None, request_type: Literal["estimate"], gas_price: Optional[Union[int, str]] = None, max_fee_per_gas: Optional[Union[int, str]] = None, max_priority_fee_per_gas: Optional[Union[int, str]] = None, access_list: Optional[Union[Dict[Union[Account, Address, str], List[int]], Literal["auto"]]] = None, type: Optional[int] = None, block: Optional[Union[int, Literal["latest"], Literal["pending"], Literal["earliest"], Literal["safe"], Literal["finalized"]]] = None, confirmations: Optional[int] = None) -> int:
        """
        [Source code](file:///Users/dteiml/p/hacker-dom/woke-uniswap-v2/src/UniswapV2Router02.sol#391)

        Args:
            amountOutMin: uint256
            path: address[]
            to_: address
            deadline: uint256
        """
        ...

    @overload
    def swapExactETHForTokensSupportingFeeOnTransferTokens(self, amountOutMin: uint256, path: List[Union[Account, Address]], to_: Union[Account, Address], deadline: uint256, *, from_: Optional[Union[Account, Address, str]] = None, to: Optional[Union[Account, Address, str]] = None, value: Union[int, str] = 0, gas_limit: Optional[Union[int, Literal["max"], Literal["auto"]]] = None, request_type: Literal["access_list"], gas_price: Optional[Union[int, str]] = None, max_fee_per_gas: Optional[Union[int, str]] = None, max_priority_fee_per_gas: Optional[Union[int, str]] = None, access_list: Optional[Union[Dict[Union[Account, Address, str], List[int]], Literal["auto"]]] = None, type: Optional[int] = None, block: Optional[Union[int, Literal["latest"], Literal["pending"], Literal["earliest"], Literal["safe"], Literal["finalized"]]] = None, confirmations: Optional[int] = None) -> Tuple[Dict[Address, List[int]], int]:
        """
        [Source code](file:///Users/dteiml/p/hacker-dom/woke-uniswap-v2/src/UniswapV2Router02.sol#391)

        Args:
            amountOutMin: uint256
            path: address[]
            to_: address
            deadline: uint256
        """
        ...

    @overload
    def swapExactETHForTokensSupportingFeeOnTransferTokens(self, amountOutMin: uint256, path: List[Union[Account, Address]], to_: Union[Account, Address], deadline: uint256, *, from_: Optional[Union[Account, Address, str]] = None, to: Optional[Union[Account, Address, str]] = None, value: Union[int, str] = 0, gas_limit: Optional[Union[int, Literal["max"], Literal["auto"]]] = None, request_type: Literal["tx"] = "tx", gas_price: Optional[Union[int, str]] = None, max_fee_per_gas: Optional[Union[int, str]] = None, max_priority_fee_per_gas: Optional[Union[int, str]] = None, access_list: Optional[Union[Dict[Union[Account, Address, str], List[int]], Literal["auto"]]] = None, type: Optional[int] = None, block: Optional[Union[int, Literal["latest"], Literal["pending"], Literal["earliest"], Literal["safe"], Literal["finalized"]]] = None, confirmations: Optional[int] = None) -> TransactionAbc[None]:
        """
        [Source code](file:///Users/dteiml/p/hacker-dom/woke-uniswap-v2/src/UniswapV2Router02.sol#391)

        Args:
            amountOutMin: uint256
            path: address[]
            to_: address
            deadline: uint256
        """
        ...

    def swapExactETHForTokensSupportingFeeOnTransferTokens(self, amountOutMin: uint256, path: List[Union[Account, Address]], to_: Union[Account, Address], deadline: uint256, *, from_: Optional[Union[Account, Address, str]] = None, to: Optional[Union[Account, Address, str]] = None, value: Union[int, str] = 0, gas_limit: Optional[Union[int, Literal["max"], Literal["auto"]]] = None, request_type: RequestType = 'tx', gas_price: Optional[Union[int, str]] = None, max_fee_per_gas: Optional[Union[int, str]] = None, max_priority_fee_per_gas: Optional[Union[int, str]] = None, access_list: Optional[Union[Dict[Union[Account, Address, str], List[int]], Literal["auto"]]] = None, type: Optional[int] = None, block: Optional[Union[int, Literal["latest"], Literal["pending"], Literal["earliest"], Literal["safe"], Literal["finalized"]]] = None, confirmations: Optional[int] = None) -> Union[None, TransactionAbc[None], int, Tuple[Dict[Address, List[int]], int]]:
        """
        [Source code](file:///Users/dteiml/p/hacker-dom/woke-uniswap-v2/src/UniswapV2Router02.sol#391)

        Args:
            amountOutMin: uint256
            path: address[]
            to_: address
            deadline: uint256
        """
        return self._execute(self.chain, request_type, "b6f9de95", [amountOutMin, path, to_, deadline], True if request_type == "tx" else False, NoneType, from_, to if to is not None else str(self.address), value, gas_limit, gas_price, max_fee_per_gas, max_priority_fee_per_gas, access_list, type, block, confirmations)

    @overload
    def swapExactTokensForETHSupportingFeeOnTransferTokens(self, amountIn: uint256, amountOutMin: uint256, path: List[Union[Account, Address]], to_: Union[Account, Address], deadline: uint256, *, from_: Optional[Union[Account, Address, str]] = None, to: Optional[Union[Account, Address, str]] = None, value: Union[int, str] = 0, gas_limit: Optional[Union[int, Literal["max"], Literal["auto"]]] = None, request_type: Literal["call"], gas_price: Optional[Union[int, str]] = None, max_fee_per_gas: Optional[Union[int, str]] = None, max_priority_fee_per_gas: Optional[Union[int, str]] = None, access_list: Optional[Union[Dict[Union[Account, Address, str], List[int]], Literal["auto"]]] = None, type: Optional[int] = None, block: Optional[Union[int, Literal["latest"], Literal["pending"], Literal["earliest"], Literal["safe"], Literal["finalized"]]] = None, confirmations: Optional[int] = None) -> None:
        """
        [Source code](file:///Users/dteiml/p/hacker-dom/woke-uniswap-v2/src/UniswapV2Router02.sol#413)

        Args:
            amountIn: uint256
            amountOutMin: uint256
            path: address[]
            to_: address
            deadline: uint256
        """
        ...

    @overload
    def swapExactTokensForETHSupportingFeeOnTransferTokens(self, amountIn: uint256, amountOutMin: uint256, path: List[Union[Account, Address]], to_: Union[Account, Address], deadline: uint256, *, from_: Optional[Union[Account, Address, str]] = None, to: Optional[Union[Account, Address, str]] = None, value: Union[int, str] = 0, gas_limit: Optional[Union[int, Literal["max"], Literal["auto"]]] = None, request_type: Literal["estimate"], gas_price: Optional[Union[int, str]] = None, max_fee_per_gas: Optional[Union[int, str]] = None, max_priority_fee_per_gas: Optional[Union[int, str]] = None, access_list: Optional[Union[Dict[Union[Account, Address, str], List[int]], Literal["auto"]]] = None, type: Optional[int] = None, block: Optional[Union[int, Literal["latest"], Literal["pending"], Literal["earliest"], Literal["safe"], Literal["finalized"]]] = None, confirmations: Optional[int] = None) -> int:
        """
        [Source code](file:///Users/dteiml/p/hacker-dom/woke-uniswap-v2/src/UniswapV2Router02.sol#413)

        Args:
            amountIn: uint256
            amountOutMin: uint256
            path: address[]
            to_: address
            deadline: uint256
        """
        ...

    @overload
    def swapExactTokensForETHSupportingFeeOnTransferTokens(self, amountIn: uint256, amountOutMin: uint256, path: List[Union[Account, Address]], to_: Union[Account, Address], deadline: uint256, *, from_: Optional[Union[Account, Address, str]] = None, to: Optional[Union[Account, Address, str]] = None, value: Union[int, str] = 0, gas_limit: Optional[Union[int, Literal["max"], Literal["auto"]]] = None, request_type: Literal["access_list"], gas_price: Optional[Union[int, str]] = None, max_fee_per_gas: Optional[Union[int, str]] = None, max_priority_fee_per_gas: Optional[Union[int, str]] = None, access_list: Optional[Union[Dict[Union[Account, Address, str], List[int]], Literal["auto"]]] = None, type: Optional[int] = None, block: Optional[Union[int, Literal["latest"], Literal["pending"], Literal["earliest"], Literal["safe"], Literal["finalized"]]] = None, confirmations: Optional[int] = None) -> Tuple[Dict[Address, List[int]], int]:
        """
        [Source code](file:///Users/dteiml/p/hacker-dom/woke-uniswap-v2/src/UniswapV2Router02.sol#413)

        Args:
            amountIn: uint256
            amountOutMin: uint256
            path: address[]
            to_: address
            deadline: uint256
        """
        ...

    @overload
    def swapExactTokensForETHSupportingFeeOnTransferTokens(self, amountIn: uint256, amountOutMin: uint256, path: List[Union[Account, Address]], to_: Union[Account, Address], deadline: uint256, *, from_: Optional[Union[Account, Address, str]] = None, to: Optional[Union[Account, Address, str]] = None, value: Union[int, str] = 0, gas_limit: Optional[Union[int, Literal["max"], Literal["auto"]]] = None, request_type: Literal["tx"] = "tx", gas_price: Optional[Union[int, str]] = None, max_fee_per_gas: Optional[Union[int, str]] = None, max_priority_fee_per_gas: Optional[Union[int, str]] = None, access_list: Optional[Union[Dict[Union[Account, Address, str], List[int]], Literal["auto"]]] = None, type: Optional[int] = None, block: Optional[Union[int, Literal["latest"], Literal["pending"], Literal["earliest"], Literal["safe"], Literal["finalized"]]] = None, confirmations: Optional[int] = None) -> TransactionAbc[None]:
        """
        [Source code](file:///Users/dteiml/p/hacker-dom/woke-uniswap-v2/src/UniswapV2Router02.sol#413)

        Args:
            amountIn: uint256
            amountOutMin: uint256
            path: address[]
            to_: address
            deadline: uint256
        """
        ...

    def swapExactTokensForETHSupportingFeeOnTransferTokens(self, amountIn: uint256, amountOutMin: uint256, path: List[Union[Account, Address]], to_: Union[Account, Address], deadline: uint256, *, from_: Optional[Union[Account, Address, str]] = None, to: Optional[Union[Account, Address, str]] = None, value: Union[int, str] = 0, gas_limit: Optional[Union[int, Literal["max"], Literal["auto"]]] = None, request_type: RequestType = 'tx', gas_price: Optional[Union[int, str]] = None, max_fee_per_gas: Optional[Union[int, str]] = None, max_priority_fee_per_gas: Optional[Union[int, str]] = None, access_list: Optional[Union[Dict[Union[Account, Address, str], List[int]], Literal["auto"]]] = None, type: Optional[int] = None, block: Optional[Union[int, Literal["latest"], Literal["pending"], Literal["earliest"], Literal["safe"], Literal["finalized"]]] = None, confirmations: Optional[int] = None) -> Union[None, TransactionAbc[None], int, Tuple[Dict[Address, List[int]], int]]:
        """
        [Source code](file:///Users/dteiml/p/hacker-dom/woke-uniswap-v2/src/UniswapV2Router02.sol#413)

        Args:
            amountIn: uint256
            amountOutMin: uint256
            path: address[]
            to_: address
            deadline: uint256
        """
        return self._execute(self.chain, request_type, "791ac947", [amountIn, amountOutMin, path, to_, deadline], True if request_type == "tx" else False, NoneType, from_, to if to is not None else str(self.address), value, gas_limit, gas_price, max_fee_per_gas, max_priority_fee_per_gas, access_list, type, block, confirmations)

    @overload
    def quote(self, amountA: uint256, reserveA: uint256, reserveB: uint256, *, from_: Optional[Union[Account, Address, str]] = None, to: Optional[Union[Account, Address, str]] = None, value: Union[int, str] = 0, gas_limit: Optional[Union[int, Literal["max"], Literal["auto"]]] = None, request_type: Literal["call"] = "call", gas_price: Optional[Union[int, str]] = None, max_fee_per_gas: Optional[Union[int, str]] = None, max_priority_fee_per_gas: Optional[Union[int, str]] = None, access_list: Optional[Union[Dict[Union[Account, Address, str], List[int]], Literal["auto"]]] = None, type: Optional[int] = None, block: Optional[Union[int, Literal["latest"], Literal["pending"], Literal["earliest"], Literal["safe"], Literal["finalized"]]] = None, confirmations: Optional[int] = None) -> uint256:
        """
        [Source code](file:///Users/dteiml/p/hacker-dom/woke-uniswap-v2/src/UniswapV2Router02.sol#436)

        Args:
            amountA: uint256
            reserveA: uint256
            reserveB: uint256
        Returns:
            uint256
        """
        ...

    @overload
    def quote(self, amountA: uint256, reserveA: uint256, reserveB: uint256, *, from_: Optional[Union[Account, Address, str]] = None, to: Optional[Union[Account, Address, str]] = None, value: Union[int, str] = 0, gas_limit: Optional[Union[int, Literal["max"], Literal["auto"]]] = None, request_type: Literal["estimate"], gas_price: Optional[Union[int, str]] = None, max_fee_per_gas: Optional[Union[int, str]] = None, max_priority_fee_per_gas: Optional[Union[int, str]] = None, access_list: Optional[Union[Dict[Union[Account, Address, str], List[int]], Literal["auto"]]] = None, type: Optional[int] = None, block: Optional[Union[int, Literal["latest"], Literal["pending"], Literal["earliest"], Literal["safe"], Literal["finalized"]]] = None, confirmations: Optional[int] = None) -> int:
        """
        [Source code](file:///Users/dteiml/p/hacker-dom/woke-uniswap-v2/src/UniswapV2Router02.sol#436)

        Args:
            amountA: uint256
            reserveA: uint256
            reserveB: uint256
        Returns:
            uint256
        """
        ...

    @overload
    def quote(self, amountA: uint256, reserveA: uint256, reserveB: uint256, *, from_: Optional[Union[Account, Address, str]] = None, to: Optional[Union[Account, Address, str]] = None, value: Union[int, str] = 0, gas_limit: Optional[Union[int, Literal["max"], Literal["auto"]]] = None, request_type: Literal["access_list"], gas_price: Optional[Union[int, str]] = None, max_fee_per_gas: Optional[Union[int, str]] = None, max_priority_fee_per_gas: Optional[Union[int, str]] = None, access_list: Optional[Union[Dict[Union[Account, Address, str], List[int]], Literal["auto"]]] = None, type: Optional[int] = None, block: Optional[Union[int, Literal["latest"], Literal["pending"], Literal["earliest"], Literal["safe"], Literal["finalized"]]] = None, confirmations: Optional[int] = None) -> Tuple[Dict[Address, List[int]], int]:
        """
        [Source code](file:///Users/dteiml/p/hacker-dom/woke-uniswap-v2/src/UniswapV2Router02.sol#436)

        Args:
            amountA: uint256
            reserveA: uint256
            reserveB: uint256
        Returns:
            uint256
        """
        ...

    @overload
    def quote(self, amountA: uint256, reserveA: uint256, reserveB: uint256, *, from_: Optional[Union[Account, Address, str]] = None, to: Optional[Union[Account, Address, str]] = None, value: Union[int, str] = 0, gas_limit: Optional[Union[int, Literal["max"], Literal["auto"]]] = None, request_type: Literal["tx"], gas_price: Optional[Union[int, str]] = None, max_fee_per_gas: Optional[Union[int, str]] = None, max_priority_fee_per_gas: Optional[Union[int, str]] = None, access_list: Optional[Union[Dict[Union[Account, Address, str], List[int]], Literal["auto"]]] = None, type: Optional[int] = None, block: Optional[Union[int, Literal["latest"], Literal["pending"], Literal["earliest"], Literal["safe"], Literal["finalized"]]] = None, confirmations: Optional[int] = None) -> TransactionAbc[uint256]:
        """
        [Source code](file:///Users/dteiml/p/hacker-dom/woke-uniswap-v2/src/UniswapV2Router02.sol#436)

        Args:
            amountA: uint256
            reserveA: uint256
            reserveB: uint256
        Returns:
            uint256
        """
        ...

    def quote(self, amountA: uint256, reserveA: uint256, reserveB: uint256, *, from_: Optional[Union[Account, Address, str]] = None, to: Optional[Union[Account, Address, str]] = None, value: Union[int, str] = 0, gas_limit: Optional[Union[int, Literal["max"], Literal["auto"]]] = None, request_type: RequestType = 'call', gas_price: Optional[Union[int, str]] = None, max_fee_per_gas: Optional[Union[int, str]] = None, max_priority_fee_per_gas: Optional[Union[int, str]] = None, access_list: Optional[Union[Dict[Union[Account, Address, str], List[int]], Literal["auto"]]] = None, type: Optional[int] = None, block: Optional[Union[int, Literal["latest"], Literal["pending"], Literal["earliest"], Literal["safe"], Literal["finalized"]]] = None, confirmations: Optional[int] = None) -> Union[uint256, TransactionAbc[uint256], int, Tuple[Dict[Address, List[int]], int]]:
        """
        [Source code](file:///Users/dteiml/p/hacker-dom/woke-uniswap-v2/src/UniswapV2Router02.sol#436)

        Args:
            amountA: uint256
            reserveA: uint256
            reserveB: uint256
        Returns:
            uint256
        """
        return self._execute(self.chain, request_type, "ad615dec", [amountA, reserveA, reserveB], True if request_type == "tx" else False, uint256, from_, to if to is not None else str(self.address), value, gas_limit, gas_price, max_fee_per_gas, max_priority_fee_per_gas, access_list, type, block, confirmations)

    @overload
    def getAmountOut(self, amountIn: uint256, reserveIn: uint256, reserveOut: uint256, *, from_: Optional[Union[Account, Address, str]] = None, to: Optional[Union[Account, Address, str]] = None, value: Union[int, str] = 0, gas_limit: Optional[Union[int, Literal["max"], Literal["auto"]]] = None, request_type: Literal["call"] = "call", gas_price: Optional[Union[int, str]] = None, max_fee_per_gas: Optional[Union[int, str]] = None, max_priority_fee_per_gas: Optional[Union[int, str]] = None, access_list: Optional[Union[Dict[Union[Account, Address, str], List[int]], Literal["auto"]]] = None, type: Optional[int] = None, block: Optional[Union[int, Literal["latest"], Literal["pending"], Literal["earliest"], Literal["safe"], Literal["finalized"]]] = None, confirmations: Optional[int] = None) -> uint256:
        """
        [Source code](file:///Users/dteiml/p/hacker-dom/woke-uniswap-v2/src/UniswapV2Router02.sol#440)

        Args:
            amountIn: uint256
            reserveIn: uint256
            reserveOut: uint256
        Returns:
            uint256
        """
        ...

    @overload
    def getAmountOut(self, amountIn: uint256, reserveIn: uint256, reserveOut: uint256, *, from_: Optional[Union[Account, Address, str]] = None, to: Optional[Union[Account, Address, str]] = None, value: Union[int, str] = 0, gas_limit: Optional[Union[int, Literal["max"], Literal["auto"]]] = None, request_type: Literal["estimate"], gas_price: Optional[Union[int, str]] = None, max_fee_per_gas: Optional[Union[int, str]] = None, max_priority_fee_per_gas: Optional[Union[int, str]] = None, access_list: Optional[Union[Dict[Union[Account, Address, str], List[int]], Literal["auto"]]] = None, type: Optional[int] = None, block: Optional[Union[int, Literal["latest"], Literal["pending"], Literal["earliest"], Literal["safe"], Literal["finalized"]]] = None, confirmations: Optional[int] = None) -> int:
        """
        [Source code](file:///Users/dteiml/p/hacker-dom/woke-uniswap-v2/src/UniswapV2Router02.sol#440)

        Args:
            amountIn: uint256
            reserveIn: uint256
            reserveOut: uint256
        Returns:
            uint256
        """
        ...

    @overload
    def getAmountOut(self, amountIn: uint256, reserveIn: uint256, reserveOut: uint256, *, from_: Optional[Union[Account, Address, str]] = None, to: Optional[Union[Account, Address, str]] = None, value: Union[int, str] = 0, gas_limit: Optional[Union[int, Literal["max"], Literal["auto"]]] = None, request_type: Literal["access_list"], gas_price: Optional[Union[int, str]] = None, max_fee_per_gas: Optional[Union[int, str]] = None, max_priority_fee_per_gas: Optional[Union[int, str]] = None, access_list: Optional[Union[Dict[Union[Account, Address, str], List[int]], Literal["auto"]]] = None, type: Optional[int] = None, block: Optional[Union[int, Literal["latest"], Literal["pending"], Literal["earliest"], Literal["safe"], Literal["finalized"]]] = None, confirmations: Optional[int] = None) -> Tuple[Dict[Address, List[int]], int]:
        """
        [Source code](file:///Users/dteiml/p/hacker-dom/woke-uniswap-v2/src/UniswapV2Router02.sol#440)

        Args:
            amountIn: uint256
            reserveIn: uint256
            reserveOut: uint256
        Returns:
            uint256
        """
        ...

    @overload
    def getAmountOut(self, amountIn: uint256, reserveIn: uint256, reserveOut: uint256, *, from_: Optional[Union[Account, Address, str]] = None, to: Optional[Union[Account, Address, str]] = None, value: Union[int, str] = 0, gas_limit: Optional[Union[int, Literal["max"], Literal["auto"]]] = None, request_type: Literal["tx"], gas_price: Optional[Union[int, str]] = None, max_fee_per_gas: Optional[Union[int, str]] = None, max_priority_fee_per_gas: Optional[Union[int, str]] = None, access_list: Optional[Union[Dict[Union[Account, Address, str], List[int]], Literal["auto"]]] = None, type: Optional[int] = None, block: Optional[Union[int, Literal["latest"], Literal["pending"], Literal["earliest"], Literal["safe"], Literal["finalized"]]] = None, confirmations: Optional[int] = None) -> TransactionAbc[uint256]:
        """
        [Source code](file:///Users/dteiml/p/hacker-dom/woke-uniswap-v2/src/UniswapV2Router02.sol#440)

        Args:
            amountIn: uint256
            reserveIn: uint256
            reserveOut: uint256
        Returns:
            uint256
        """
        ...

    def getAmountOut(self, amountIn: uint256, reserveIn: uint256, reserveOut: uint256, *, from_: Optional[Union[Account, Address, str]] = None, to: Optional[Union[Account, Address, str]] = None, value: Union[int, str] = 0, gas_limit: Optional[Union[int, Literal["max"], Literal["auto"]]] = None, request_type: RequestType = 'call', gas_price: Optional[Union[int, str]] = None, max_fee_per_gas: Optional[Union[int, str]] = None, max_priority_fee_per_gas: Optional[Union[int, str]] = None, access_list: Optional[Union[Dict[Union[Account, Address, str], List[int]], Literal["auto"]]] = None, type: Optional[int] = None, block: Optional[Union[int, Literal["latest"], Literal["pending"], Literal["earliest"], Literal["safe"], Literal["finalized"]]] = None, confirmations: Optional[int] = None) -> Union[uint256, TransactionAbc[uint256], int, Tuple[Dict[Address, List[int]], int]]:
        """
        [Source code](file:///Users/dteiml/p/hacker-dom/woke-uniswap-v2/src/UniswapV2Router02.sol#440)

        Args:
            amountIn: uint256
            reserveIn: uint256
            reserveOut: uint256
        Returns:
            uint256
        """
        return self._execute(self.chain, request_type, "054d50d4", [amountIn, reserveIn, reserveOut], True if request_type == "tx" else False, uint256, from_, to if to is not None else str(self.address), value, gas_limit, gas_price, max_fee_per_gas, max_priority_fee_per_gas, access_list, type, block, confirmations)

    @overload
    def getAmountIn(self, amountOut: uint256, reserveIn: uint256, reserveOut: uint256, *, from_: Optional[Union[Account, Address, str]] = None, to: Optional[Union[Account, Address, str]] = None, value: Union[int, str] = 0, gas_limit: Optional[Union[int, Literal["max"], Literal["auto"]]] = None, request_type: Literal["call"] = "call", gas_price: Optional[Union[int, str]] = None, max_fee_per_gas: Optional[Union[int, str]] = None, max_priority_fee_per_gas: Optional[Union[int, str]] = None, access_list: Optional[Union[Dict[Union[Account, Address, str], List[int]], Literal["auto"]]] = None, type: Optional[int] = None, block: Optional[Union[int, Literal["latest"], Literal["pending"], Literal["earliest"], Literal["safe"], Literal["finalized"]]] = None, confirmations: Optional[int] = None) -> uint256:
        """
        [Source code](file:///Users/dteiml/p/hacker-dom/woke-uniswap-v2/src/UniswapV2Router02.sol#449)

        Args:
            amountOut: uint256
            reserveIn: uint256
            reserveOut: uint256
        Returns:
            uint256
        """
        ...

    @overload
    def getAmountIn(self, amountOut: uint256, reserveIn: uint256, reserveOut: uint256, *, from_: Optional[Union[Account, Address, str]] = None, to: Optional[Union[Account, Address, str]] = None, value: Union[int, str] = 0, gas_limit: Optional[Union[int, Literal["max"], Literal["auto"]]] = None, request_type: Literal["estimate"], gas_price: Optional[Union[int, str]] = None, max_fee_per_gas: Optional[Union[int, str]] = None, max_priority_fee_per_gas: Optional[Union[int, str]] = None, access_list: Optional[Union[Dict[Union[Account, Address, str], List[int]], Literal["auto"]]] = None, type: Optional[int] = None, block: Optional[Union[int, Literal["latest"], Literal["pending"], Literal["earliest"], Literal["safe"], Literal["finalized"]]] = None, confirmations: Optional[int] = None) -> int:
        """
        [Source code](file:///Users/dteiml/p/hacker-dom/woke-uniswap-v2/src/UniswapV2Router02.sol#449)

        Args:
            amountOut: uint256
            reserveIn: uint256
            reserveOut: uint256
        Returns:
            uint256
        """
        ...

    @overload
    def getAmountIn(self, amountOut: uint256, reserveIn: uint256, reserveOut: uint256, *, from_: Optional[Union[Account, Address, str]] = None, to: Optional[Union[Account, Address, str]] = None, value: Union[int, str] = 0, gas_limit: Optional[Union[int, Literal["max"], Literal["auto"]]] = None, request_type: Literal["access_list"], gas_price: Optional[Union[int, str]] = None, max_fee_per_gas: Optional[Union[int, str]] = None, max_priority_fee_per_gas: Optional[Union[int, str]] = None, access_list: Optional[Union[Dict[Union[Account, Address, str], List[int]], Literal["auto"]]] = None, type: Optional[int] = None, block: Optional[Union[int, Literal["latest"], Literal["pending"], Literal["earliest"], Literal["safe"], Literal["finalized"]]] = None, confirmations: Optional[int] = None) -> Tuple[Dict[Address, List[int]], int]:
        """
        [Source code](file:///Users/dteiml/p/hacker-dom/woke-uniswap-v2/src/UniswapV2Router02.sol#449)

        Args:
            amountOut: uint256
            reserveIn: uint256
            reserveOut: uint256
        Returns:
            uint256
        """
        ...

    @overload
    def getAmountIn(self, amountOut: uint256, reserveIn: uint256, reserveOut: uint256, *, from_: Optional[Union[Account, Address, str]] = None, to: Optional[Union[Account, Address, str]] = None, value: Union[int, str] = 0, gas_limit: Optional[Union[int, Literal["max"], Literal["auto"]]] = None, request_type: Literal["tx"], gas_price: Optional[Union[int, str]] = None, max_fee_per_gas: Optional[Union[int, str]] = None, max_priority_fee_per_gas: Optional[Union[int, str]] = None, access_list: Optional[Union[Dict[Union[Account, Address, str], List[int]], Literal["auto"]]] = None, type: Optional[int] = None, block: Optional[Union[int, Literal["latest"], Literal["pending"], Literal["earliest"], Literal["safe"], Literal["finalized"]]] = None, confirmations: Optional[int] = None) -> TransactionAbc[uint256]:
        """
        [Source code](file:///Users/dteiml/p/hacker-dom/woke-uniswap-v2/src/UniswapV2Router02.sol#449)

        Args:
            amountOut: uint256
            reserveIn: uint256
            reserveOut: uint256
        Returns:
            uint256
        """
        ...

    def getAmountIn(self, amountOut: uint256, reserveIn: uint256, reserveOut: uint256, *, from_: Optional[Union[Account, Address, str]] = None, to: Optional[Union[Account, Address, str]] = None, value: Union[int, str] = 0, gas_limit: Optional[Union[int, Literal["max"], Literal["auto"]]] = None, request_type: RequestType = 'call', gas_price: Optional[Union[int, str]] = None, max_fee_per_gas: Optional[Union[int, str]] = None, max_priority_fee_per_gas: Optional[Union[int, str]] = None, access_list: Optional[Union[Dict[Union[Account, Address, str], List[int]], Literal["auto"]]] = None, type: Optional[int] = None, block: Optional[Union[int, Literal["latest"], Literal["pending"], Literal["earliest"], Literal["safe"], Literal["finalized"]]] = None, confirmations: Optional[int] = None) -> Union[uint256, TransactionAbc[uint256], int, Tuple[Dict[Address, List[int]], int]]:
        """
        [Source code](file:///Users/dteiml/p/hacker-dom/woke-uniswap-v2/src/UniswapV2Router02.sol#449)

        Args:
            amountOut: uint256
            reserveIn: uint256
            reserveOut: uint256
        Returns:
            uint256
        """
        return self._execute(self.chain, request_type, "85f8c259", [amountOut, reserveIn, reserveOut], True if request_type == "tx" else False, uint256, from_, to if to is not None else str(self.address), value, gas_limit, gas_price, max_fee_per_gas, max_priority_fee_per_gas, access_list, type, block, confirmations)

    @overload
    def getAmountsOut(self, amountIn: uint256, path: List[Union[Account, Address]], *, from_: Optional[Union[Account, Address, str]] = None, to: Optional[Union[Account, Address, str]] = None, value: Union[int, str] = 0, gas_limit: Optional[Union[int, Literal["max"], Literal["auto"]]] = None, request_type: Literal["call"] = "call", gas_price: Optional[Union[int, str]] = None, max_fee_per_gas: Optional[Union[int, str]] = None, max_priority_fee_per_gas: Optional[Union[int, str]] = None, access_list: Optional[Union[Dict[Union[Account, Address, str], List[int]], Literal["auto"]]] = None, type: Optional[int] = None, block: Optional[Union[int, Literal["latest"], Literal["pending"], Literal["earliest"], Literal["safe"], Literal["finalized"]]] = None, confirmations: Optional[int] = None) -> List[uint256]:
        """
        [Source code](file:///Users/dteiml/p/hacker-dom/woke-uniswap-v2/src/UniswapV2Router02.sol#458)

        Args:
            amountIn: uint256
            path: address[]
        Returns:
            uint256[]
        """
        ...

    @overload
    def getAmountsOut(self, amountIn: uint256, path: List[Union[Account, Address]], *, from_: Optional[Union[Account, Address, str]] = None, to: Optional[Union[Account, Address, str]] = None, value: Union[int, str] = 0, gas_limit: Optional[Union[int, Literal["max"], Literal["auto"]]] = None, request_type: Literal["estimate"], gas_price: Optional[Union[int, str]] = None, max_fee_per_gas: Optional[Union[int, str]] = None, max_priority_fee_per_gas: Optional[Union[int, str]] = None, access_list: Optional[Union[Dict[Union[Account, Address, str], List[int]], Literal["auto"]]] = None, type: Optional[int] = None, block: Optional[Union[int, Literal["latest"], Literal["pending"], Literal["earliest"], Literal["safe"], Literal["finalized"]]] = None, confirmations: Optional[int] = None) -> int:
        """
        [Source code](file:///Users/dteiml/p/hacker-dom/woke-uniswap-v2/src/UniswapV2Router02.sol#458)

        Args:
            amountIn: uint256
            path: address[]
        Returns:
            uint256[]
        """
        ...

    @overload
    def getAmountsOut(self, amountIn: uint256, path: List[Union[Account, Address]], *, from_: Optional[Union[Account, Address, str]] = None, to: Optional[Union[Account, Address, str]] = None, value: Union[int, str] = 0, gas_limit: Optional[Union[int, Literal["max"], Literal["auto"]]] = None, request_type: Literal["access_list"], gas_price: Optional[Union[int, str]] = None, max_fee_per_gas: Optional[Union[int, str]] = None, max_priority_fee_per_gas: Optional[Union[int, str]] = None, access_list: Optional[Union[Dict[Union[Account, Address, str], List[int]], Literal["auto"]]] = None, type: Optional[int] = None, block: Optional[Union[int, Literal["latest"], Literal["pending"], Literal["earliest"], Literal["safe"], Literal["finalized"]]] = None, confirmations: Optional[int] = None) -> Tuple[Dict[Address, List[int]], int]:
        """
        [Source code](file:///Users/dteiml/p/hacker-dom/woke-uniswap-v2/src/UniswapV2Router02.sol#458)

        Args:
            amountIn: uint256
            path: address[]
        Returns:
            uint256[]
        """
        ...

    @overload
    def getAmountsOut(self, amountIn: uint256, path: List[Union[Account, Address]], *, from_: Optional[Union[Account, Address, str]] = None, to: Optional[Union[Account, Address, str]] = None, value: Union[int, str] = 0, gas_limit: Optional[Union[int, Literal["max"], Literal["auto"]]] = None, request_type: Literal["tx"], gas_price: Optional[Union[int, str]] = None, max_fee_per_gas: Optional[Union[int, str]] = None, max_priority_fee_per_gas: Optional[Union[int, str]] = None, access_list: Optional[Union[Dict[Union[Account, Address, str], List[int]], Literal["auto"]]] = None, type: Optional[int] = None, block: Optional[Union[int, Literal["latest"], Literal["pending"], Literal["earliest"], Literal["safe"], Literal["finalized"]]] = None, confirmations: Optional[int] = None) -> TransactionAbc[List[uint256]]:
        """
        [Source code](file:///Users/dteiml/p/hacker-dom/woke-uniswap-v2/src/UniswapV2Router02.sol#458)

        Args:
            amountIn: uint256
            path: address[]
        Returns:
            uint256[]
        """
        ...

    def getAmountsOut(self, amountIn: uint256, path: List[Union[Account, Address]], *, from_: Optional[Union[Account, Address, str]] = None, to: Optional[Union[Account, Address, str]] = None, value: Union[int, str] = 0, gas_limit: Optional[Union[int, Literal["max"], Literal["auto"]]] = None, request_type: RequestType = 'call', gas_price: Optional[Union[int, str]] = None, max_fee_per_gas: Optional[Union[int, str]] = None, max_priority_fee_per_gas: Optional[Union[int, str]] = None, access_list: Optional[Union[Dict[Union[Account, Address, str], List[int]], Literal["auto"]]] = None, type: Optional[int] = None, block: Optional[Union[int, Literal["latest"], Literal["pending"], Literal["earliest"], Literal["safe"], Literal["finalized"]]] = None, confirmations: Optional[int] = None) -> Union[List[uint256], TransactionAbc[List[uint256]], int, Tuple[Dict[Address, List[int]], int]]:
        """
        [Source code](file:///Users/dteiml/p/hacker-dom/woke-uniswap-v2/src/UniswapV2Router02.sol#458)

        Args:
            amountIn: uint256
            path: address[]
        Returns:
            uint256[]
        """
        return self._execute(self.chain, request_type, "d06ca61f", [amountIn, path], True if request_type == "tx" else False, List[uint256], from_, to if to is not None else str(self.address), value, gas_limit, gas_price, max_fee_per_gas, max_priority_fee_per_gas, access_list, type, block, confirmations)

    @overload
    def getAmountsIn(self, amountOut: uint256, path: List[Union[Account, Address]], *, from_: Optional[Union[Account, Address, str]] = None, to: Optional[Union[Account, Address, str]] = None, value: Union[int, str] = 0, gas_limit: Optional[Union[int, Literal["max"], Literal["auto"]]] = None, request_type: Literal["call"] = "call", gas_price: Optional[Union[int, str]] = None, max_fee_per_gas: Optional[Union[int, str]] = None, max_priority_fee_per_gas: Optional[Union[int, str]] = None, access_list: Optional[Union[Dict[Union[Account, Address, str], List[int]], Literal["auto"]]] = None, type: Optional[int] = None, block: Optional[Union[int, Literal["latest"], Literal["pending"], Literal["earliest"], Literal["safe"], Literal["finalized"]]] = None, confirmations: Optional[int] = None) -> List[uint256]:
        """
        [Source code](file:///Users/dteiml/p/hacker-dom/woke-uniswap-v2/src/UniswapV2Router02.sol#467)

        Args:
            amountOut: uint256
            path: address[]
        Returns:
            uint256[]
        """
        ...

    @overload
    def getAmountsIn(self, amountOut: uint256, path: List[Union[Account, Address]], *, from_: Optional[Union[Account, Address, str]] = None, to: Optional[Union[Account, Address, str]] = None, value: Union[int, str] = 0, gas_limit: Optional[Union[int, Literal["max"], Literal["auto"]]] = None, request_type: Literal["estimate"], gas_price: Optional[Union[int, str]] = None, max_fee_per_gas: Optional[Union[int, str]] = None, max_priority_fee_per_gas: Optional[Union[int, str]] = None, access_list: Optional[Union[Dict[Union[Account, Address, str], List[int]], Literal["auto"]]] = None, type: Optional[int] = None, block: Optional[Union[int, Literal["latest"], Literal["pending"], Literal["earliest"], Literal["safe"], Literal["finalized"]]] = None, confirmations: Optional[int] = None) -> int:
        """
        [Source code](file:///Users/dteiml/p/hacker-dom/woke-uniswap-v2/src/UniswapV2Router02.sol#467)

        Args:
            amountOut: uint256
            path: address[]
        Returns:
            uint256[]
        """
        ...

    @overload
    def getAmountsIn(self, amountOut: uint256, path: List[Union[Account, Address]], *, from_: Optional[Union[Account, Address, str]] = None, to: Optional[Union[Account, Address, str]] = None, value: Union[int, str] = 0, gas_limit: Optional[Union[int, Literal["max"], Literal["auto"]]] = None, request_type: Literal["access_list"], gas_price: Optional[Union[int, str]] = None, max_fee_per_gas: Optional[Union[int, str]] = None, max_priority_fee_per_gas: Optional[Union[int, str]] = None, access_list: Optional[Union[Dict[Union[Account, Address, str], List[int]], Literal["auto"]]] = None, type: Optional[int] = None, block: Optional[Union[int, Literal["latest"], Literal["pending"], Literal["earliest"], Literal["safe"], Literal["finalized"]]] = None, confirmations: Optional[int] = None) -> Tuple[Dict[Address, List[int]], int]:
        """
        [Source code](file:///Users/dteiml/p/hacker-dom/woke-uniswap-v2/src/UniswapV2Router02.sol#467)

        Args:
            amountOut: uint256
            path: address[]
        Returns:
            uint256[]
        """
        ...

    @overload
    def getAmountsIn(self, amountOut: uint256, path: List[Union[Account, Address]], *, from_: Optional[Union[Account, Address, str]] = None, to: Optional[Union[Account, Address, str]] = None, value: Union[int, str] = 0, gas_limit: Optional[Union[int, Literal["max"], Literal["auto"]]] = None, request_type: Literal["tx"], gas_price: Optional[Union[int, str]] = None, max_fee_per_gas: Optional[Union[int, str]] = None, max_priority_fee_per_gas: Optional[Union[int, str]] = None, access_list: Optional[Union[Dict[Union[Account, Address, str], List[int]], Literal["auto"]]] = None, type: Optional[int] = None, block: Optional[Union[int, Literal["latest"], Literal["pending"], Literal["earliest"], Literal["safe"], Literal["finalized"]]] = None, confirmations: Optional[int] = None) -> TransactionAbc[List[uint256]]:
        """
        [Source code](file:///Users/dteiml/p/hacker-dom/woke-uniswap-v2/src/UniswapV2Router02.sol#467)

        Args:
            amountOut: uint256
            path: address[]
        Returns:
            uint256[]
        """
        ...

    def getAmountsIn(self, amountOut: uint256, path: List[Union[Account, Address]], *, from_: Optional[Union[Account, Address, str]] = None, to: Optional[Union[Account, Address, str]] = None, value: Union[int, str] = 0, gas_limit: Optional[Union[int, Literal["max"], Literal["auto"]]] = None, request_type: RequestType = 'call', gas_price: Optional[Union[int, str]] = None, max_fee_per_gas: Optional[Union[int, str]] = None, max_priority_fee_per_gas: Optional[Union[int, str]] = None, access_list: Optional[Union[Dict[Union[Account, Address, str], List[int]], Literal["auto"]]] = None, type: Optional[int] = None, block: Optional[Union[int, Literal["latest"], Literal["pending"], Literal["earliest"], Literal["safe"], Literal["finalized"]]] = None, confirmations: Optional[int] = None) -> Union[List[uint256], TransactionAbc[List[uint256]], int, Tuple[Dict[Address, List[int]], int]]:
        """
        [Source code](file:///Users/dteiml/p/hacker-dom/woke-uniswap-v2/src/UniswapV2Router02.sol#467)

        Args:
            amountOut: uint256
            path: address[]
        Returns:
            uint256[]
        """
        return self._execute(self.chain, request_type, "1f00ca74", [amountOut, path], True if request_type == "tx" else False, List[uint256], from_, to if to is not None else str(self.address), value, gas_limit, gas_price, max_fee_per_gas, max_priority_fee_per_gas, access_list, type, block, confirmations)

UniswapV2Router02.factory.selector = b'\xc4Z\x01U'
UniswapV2Router02.WETH.selector = b'\xad\\FH'
UniswapV2Router02.addLiquidity.selector = b'\xe8\xe37\x00'
UniswapV2Router02.addLiquidityETH.selector = b'\xf3\x05\xd7\x19'
UniswapV2Router02.removeLiquidity.selector = b'\xba\xa2\xab\xde'
UniswapV2Router02.removeLiquidityETH.selector = b'\x02u\x1c\xec'
UniswapV2Router02.removeLiquidityWithPermit.selector = b'!\x95\x99\\'
UniswapV2Router02.removeLiquidityETHWithPermit.selector = b'\xde\xd98*'
UniswapV2Router02.removeLiquidityETHSupportingFeeOnTransferTokens.selector = b'\xaf)y\xeb'
UniswapV2Router02.removeLiquidityETHWithPermitSupportingFeeOnTransferTokens.selector = b'[\rY\x84'
UniswapV2Router02.swapExactTokensForTokens.selector = b'8\xed\x179'
UniswapV2Router02.swapExactTokensForTokens_noFee.selector = b'\x959\xca\xb8'
UniswapV2Router02.swapTokensForExactTokens.selector = b'\x88\x03\xdb\xee'
UniswapV2Router02.swapExactETHForTokens.selector = b'\x7f\xf3j\xb5'
UniswapV2Router02.swapTokensForExactETH.selector = b'J%\xd9J'
UniswapV2Router02.swapExactTokensForETH.selector = b'\x18\xcb\xaf\xe5'
UniswapV2Router02.swapETHForExactTokens.selector = b'\xfb;\xdbA'
UniswapV2Router02.swapExactTokensForTokensSupportingFeeOnTransferTokens.selector = b'\\\x11\xd7\x95'
UniswapV2Router02.swapExactETHForTokensSupportingFeeOnTransferTokens.selector = b'\xb6\xf9\xde\x95'
UniswapV2Router02.swapExactTokensForETHSupportingFeeOnTransferTokens.selector = b'y\x1a\xc9G'
UniswapV2Router02.quote.selector = b'\xada]\xec'
UniswapV2Router02.getAmountOut.selector = b'\x05MP\xd4'
UniswapV2Router02.getAmountIn.selector = b'\x85\xf8\xc2Y'
UniswapV2Router02.getAmountsOut.selector = b'\xd0l\xa6\x1f'
UniswapV2Router02.getAmountsIn.selector = b'\x1f\x00\xcat'
