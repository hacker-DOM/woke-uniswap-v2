
from __future__ import annotations

import dataclasses
from typing import List, Dict, Optional, overload, Union, Callable, Tuple
from typing_extensions import Literal

from woke.development.core import Contract, Library, Address, Account, Chain, RequestType
from woke.development.primitive_types import *
from woke.development.transactions import TransactionAbc, TransactionRevertedError

from enum import IntEnum



class UniswapV2Router02(Contract):
    """
    [Source code](file:///Users/dteiml/p/hacker-dom/woke-uniswap-v2/src/UniswapV2Router02.sol#13)
    """
    _abi = {'constructor': {'inputs': [{'internalType': 'address', 'name': '_factory', 'type': 'address'}, {'internalType': 'address', 'name': '_WETH', 'type': 'address'}], 'stateMutability': 'nonpayable', 'type': 'constructor'}, b'\xad\\FH': {'inputs': [], 'name': 'WETH', 'outputs': [{'internalType': 'address', 'name': '', 'type': 'address'}], 'stateMutability': 'view', 'type': 'function'}, b'\xe8\xe37\x00': {'inputs': [{'internalType': 'address', 'name': 'tokenA', 'type': 'address'}, {'internalType': 'address', 'name': 'tokenB', 'type': 'address'}, {'internalType': 'uint256', 'name': 'amountADesired', 'type': 'uint256'}, {'internalType': 'uint256', 'name': 'amountBDesired', 'type': 'uint256'}, {'internalType': 'uint256', 'name': 'amountAMin', 'type': 'uint256'}, {'internalType': 'uint256', 'name': 'amountBMin', 'type': 'uint256'}, {'internalType': 'address', 'name': 'to', 'type': 'address'}, {'internalType': 'uint256', 'name': 'deadline', 'type': 'uint256'}], 'name': 'addLiquidity', 'outputs': [{'internalType': 'uint256', 'name': 'amountA', 'type': 'uint256'}, {'internalType': 'uint256', 'name': 'amountB', 'type': 'uint256'}, {'internalType': 'uint256', 'name': 'liquidity', 'type': 'uint256'}], 'stateMutability': 'nonpayable', 'type': 'function'}, b'\xf3\x05\xd7\x19': {'inputs': [{'internalType': 'address', 'name': 'token', 'type': 'address'}, {'internalType': 'uint256', 'name': 'amountTokenDesired', 'type': 'uint256'}, {'internalType': 'uint256', 'name': 'amountTokenMin', 'type': 'uint256'}, {'internalType': 'uint256', 'name': 'amountETHMin', 'type': 'uint256'}, {'internalType': 'address', 'name': 'to', 'type': 'address'}, {'internalType': 'uint256', 'name': 'deadline', 'type': 'uint256'}], 'name': 'addLiquidityETH', 'outputs': [{'internalType': 'uint256', 'name': 'amountToken', 'type': 'uint256'}, {'internalType': 'uint256', 'name': 'amountETH', 'type': 'uint256'}, {'internalType': 'uint256', 'name': 'liquidity', 'type': 'uint256'}], 'stateMutability': 'payable', 'type': 'function'}, b'\xc4Z\x01U': {'inputs': [], 'name': 'factory', 'outputs': [{'internalType': 'address', 'name': '', 'type': 'address'}], 'stateMutability': 'view', 'type': 'function'}, b'\x85\xf8\xc2Y': {'inputs': [{'internalType': 'uint256', 'name': 'amountOut', 'type': 'uint256'}, {'internalType': 'uint256', 'name': 'reserveIn', 'type': 'uint256'}, {'internalType': 'uint256', 'name': 'reserveOut', 'type': 'uint256'}], 'name': 'getAmountIn', 'outputs': [{'internalType': 'uint256', 'name': 'amountIn', 'type': 'uint256'}], 'stateMutability': 'view', 'type': 'function'}, b'\x05MP\xd4': {'inputs': [{'internalType': 'uint256', 'name': 'amountIn', 'type': 'uint256'}, {'internalType': 'uint256', 'name': 'reserveIn', 'type': 'uint256'}, {'internalType': 'uint256', 'name': 'reserveOut', 'type': 'uint256'}], 'name': 'getAmountOut', 'outputs': [{'internalType': 'uint256', 'name': 'amountOut', 'type': 'uint256'}], 'stateMutability': 'view', 'type': 'function'}, b'\x1f\x00\xcat': {'inputs': [{'internalType': 'uint256', 'name': 'amountOut', 'type': 'uint256'}, {'internalType': 'address[]', 'name': 'path', 'type': 'address[]'}], 'name': 'getAmountsIn', 'outputs': [{'internalType': 'uint256[]', 'name': 'amounts', 'type': 'uint256[]'}], 'stateMutability': 'view', 'type': 'function'}, b'\xd0l\xa6\x1f': {'inputs': [{'internalType': 'uint256', 'name': 'amountIn', 'type': 'uint256'}, {'internalType': 'address[]', 'name': 'path', 'type': 'address[]'}], 'name': 'getAmountsOut', 'outputs': [{'internalType': 'uint256[]', 'name': 'amounts', 'type': 'uint256[]'}], 'stateMutability': 'view', 'type': 'function'}, b'\xada]\xec': {'inputs': [{'internalType': 'uint256', 'name': 'amountA', 'type': 'uint256'}, {'internalType': 'uint256', 'name': 'reserveA', 'type': 'uint256'}, {'internalType': 'uint256', 'name': 'reserveB', 'type': 'uint256'}], 'name': 'quote', 'outputs': [{'internalType': 'uint256', 'name': 'amountB', 'type': 'uint256'}], 'stateMutability': 'pure', 'type': 'function'}, b'\xba\xa2\xab\xde': {'inputs': [{'internalType': 'address', 'name': 'tokenA', 'type': 'address'}, {'internalType': 'address', 'name': 'tokenB', 'type': 'address'}, {'internalType': 'uint256', 'name': 'liquidity', 'type': 'uint256'}, {'internalType': 'uint256', 'name': 'amountAMin', 'type': 'uint256'}, {'internalType': 'uint256', 'name': 'amountBMin', 'type': 'uint256'}, {'internalType': 'address', 'name': 'to', 'type': 'address'}, {'internalType': 'uint256', 'name': 'deadline', 'type': 'uint256'}], 'name': 'removeLiquidity', 'outputs': [{'internalType': 'uint256', 'name': 'amountA', 'type': 'uint256'}, {'internalType': 'uint256', 'name': 'amountB', 'type': 'uint256'}], 'stateMutability': 'nonpayable', 'type': 'function'}, b'\x02u\x1c\xec': {'inputs': [{'internalType': 'address', 'name': 'token', 'type': 'address'}, {'internalType': 'uint256', 'name': 'liquidity', 'type': 'uint256'}, {'internalType': 'uint256', 'name': 'amountTokenMin', 'type': 'uint256'}, {'internalType': 'uint256', 'name': 'amountETHMin', 'type': 'uint256'}, {'internalType': 'address', 'name': 'to', 'type': 'address'}, {'internalType': 'uint256', 'name': 'deadline', 'type': 'uint256'}], 'name': 'removeLiquidityETH', 'outputs': [{'internalType': 'uint256', 'name': 'amountToken', 'type': 'uint256'}, {'internalType': 'uint256', 'name': 'amountETH', 'type': 'uint256'}], 'stateMutability': 'nonpayable', 'type': 'function'}, b'\xaf)y\xeb': {'inputs': [{'internalType': 'address', 'name': 'token', 'type': 'address'}, {'internalType': 'uint256', 'name': 'liquidity', 'type': 'uint256'}, {'internalType': 'uint256', 'name': 'amountTokenMin', 'type': 'uint256'}, {'internalType': 'uint256', 'name': 'amountETHMin', 'type': 'uint256'}, {'internalType': 'address', 'name': 'to', 'type': 'address'}, {'internalType': 'uint256', 'name': 'deadline', 'type': 'uint256'}], 'name': 'removeLiquidityETHSupportingFeeOnTransferTokens', 'outputs': [{'internalType': 'uint256', 'name': 'amountETH', 'type': 'uint256'}], 'stateMutability': 'nonpayable', 'type': 'function'}, b'\xde\xd98*': {'inputs': [{'internalType': 'address', 'name': 'token', 'type': 'address'}, {'internalType': 'uint256', 'name': 'liquidity', 'type': 'uint256'}, {'internalType': 'uint256', 'name': 'amountTokenMin', 'type': 'uint256'}, {'internalType': 'uint256', 'name': 'amountETHMin', 'type': 'uint256'}, {'internalType': 'address', 'name': 'to', 'type': 'address'}, {'internalType': 'uint256', 'name': 'deadline', 'type': 'uint256'}, {'internalType': 'bool', 'name': 'approveMax', 'type': 'bool'}, {'internalType': 'uint8', 'name': 'v', 'type': 'uint8'}, {'internalType': 'bytes32', 'name': 'r', 'type': 'bytes32'}, {'internalType': 'bytes32', 'name': 's', 'type': 'bytes32'}], 'name': 'removeLiquidityETHWithPermit', 'outputs': [{'internalType': 'uint256', 'name': 'amountToken', 'type': 'uint256'}, {'internalType': 'uint256', 'name': 'amountETH', 'type': 'uint256'}], 'stateMutability': 'nonpayable', 'type': 'function'}, b'[\rY\x84': {'inputs': [{'internalType': 'address', 'name': 'token', 'type': 'address'}, {'internalType': 'uint256', 'name': 'liquidity', 'type': 'uint256'}, {'internalType': 'uint256', 'name': 'amountTokenMin', 'type': 'uint256'}, {'internalType': 'uint256', 'name': 'amountETHMin', 'type': 'uint256'}, {'internalType': 'address', 'name': 'to', 'type': 'address'}, {'internalType': 'uint256', 'name': 'deadline', 'type': 'uint256'}, {'internalType': 'bool', 'name': 'approveMax', 'type': 'bool'}, {'internalType': 'uint8', 'name': 'v', 'type': 'uint8'}, {'internalType': 'bytes32', 'name': 'r', 'type': 'bytes32'}, {'internalType': 'bytes32', 'name': 's', 'type': 'bytes32'}], 'name': 'removeLiquidityETHWithPermitSupportingFeeOnTransferTokens', 'outputs': [{'internalType': 'uint256', 'name': 'amountETH', 'type': 'uint256'}], 'stateMutability': 'nonpayable', 'type': 'function'}, b'!\x95\x99\\': {'inputs': [{'internalType': 'address', 'name': 'tokenA', 'type': 'address'}, {'internalType': 'address', 'name': 'tokenB', 'type': 'address'}, {'internalType': 'uint256', 'name': 'liquidity', 'type': 'uint256'}, {'internalType': 'uint256', 'name': 'amountAMin', 'type': 'uint256'}, {'internalType': 'uint256', 'name': 'amountBMin', 'type': 'uint256'}, {'internalType': 'address', 'name': 'to', 'type': 'address'}, {'internalType': 'uint256', 'name': 'deadline', 'type': 'uint256'}, {'internalType': 'bool', 'name': 'approveMax', 'type': 'bool'}, {'internalType': 'uint8', 'name': 'v', 'type': 'uint8'}, {'internalType': 'bytes32', 'name': 'r', 'type': 'bytes32'}, {'internalType': 'bytes32', 'name': 's', 'type': 'bytes32'}], 'name': 'removeLiquidityWithPermit', 'outputs': [{'internalType': 'uint256', 'name': 'amountA', 'type': 'uint256'}, {'internalType': 'uint256', 'name': 'amountB', 'type': 'uint256'}], 'stateMutability': 'nonpayable', 'type': 'function'}, b'\xfb;\xdbA': {'inputs': [{'internalType': 'uint256', 'name': 'amountOut', 'type': 'uint256'}, {'internalType': 'address[]', 'name': 'path', 'type': 'address[]'}, {'internalType': 'address', 'name': 'to', 'type': 'address'}, {'internalType': 'uint256', 'name': 'deadline', 'type': 'uint256'}], 'name': 'swapETHForExactTokens', 'outputs': [{'internalType': 'uint256[]', 'name': 'amounts', 'type': 'uint256[]'}], 'stateMutability': 'payable', 'type': 'function'}, b'\x7f\xf3j\xb5': {'inputs': [{'internalType': 'uint256', 'name': 'amountOutMin', 'type': 'uint256'}, {'internalType': 'address[]', 'name': 'path', 'type': 'address[]'}, {'internalType': 'address', 'name': 'to', 'type': 'address'}, {'internalType': 'uint256', 'name': 'deadline', 'type': 'uint256'}], 'name': 'swapExactETHForTokens', 'outputs': [{'internalType': 'uint256[]', 'name': 'amounts', 'type': 'uint256[]'}], 'stateMutability': 'payable', 'type': 'function'}, b'\xb6\xf9\xde\x95': {'inputs': [{'internalType': 'uint256', 'name': 'amountOutMin', 'type': 'uint256'}, {'internalType': 'address[]', 'name': 'path', 'type': 'address[]'}, {'internalType': 'address', 'name': 'to', 'type': 'address'}, {'internalType': 'uint256', 'name': 'deadline', 'type': 'uint256'}], 'name': 'swapExactETHForTokensSupportingFeeOnTransferTokens', 'outputs': [], 'stateMutability': 'payable', 'type': 'function'}, b'\x18\xcb\xaf\xe5': {'inputs': [{'internalType': 'uint256', 'name': 'amountIn', 'type': 'uint256'}, {'internalType': 'uint256', 'name': 'amountOutMin', 'type': 'uint256'}, {'internalType': 'address[]', 'name': 'path', 'type': 'address[]'}, {'internalType': 'address', 'name': 'to', 'type': 'address'}, {'internalType': 'uint256', 'name': 'deadline', 'type': 'uint256'}], 'name': 'swapExactTokensForETH', 'outputs': [{'internalType': 'uint256[]', 'name': 'amounts', 'type': 'uint256[]'}], 'stateMutability': 'nonpayable', 'type': 'function'}, b'y\x1a\xc9G': {'inputs': [{'internalType': 'uint256', 'name': 'amountIn', 'type': 'uint256'}, {'internalType': 'uint256', 'name': 'amountOutMin', 'type': 'uint256'}, {'internalType': 'address[]', 'name': 'path', 'type': 'address[]'}, {'internalType': 'address', 'name': 'to', 'type': 'address'}, {'internalType': 'uint256', 'name': 'deadline', 'type': 'uint256'}], 'name': 'swapExactTokensForETHSupportingFeeOnTransferTokens', 'outputs': [], 'stateMutability': 'nonpayable', 'type': 'function'}, b'8\xed\x179': {'inputs': [{'internalType': 'uint256', 'name': 'amountIn', 'type': 'uint256'}, {'internalType': 'uint256', 'name': 'amountOutMin', 'type': 'uint256'}, {'internalType': 'address[]', 'name': 'path', 'type': 'address[]'}, {'internalType': 'address', 'name': 'to', 'type': 'address'}, {'internalType': 'uint256', 'name': 'deadline', 'type': 'uint256'}], 'name': 'swapExactTokensForTokens', 'outputs': [{'internalType': 'uint256[]', 'name': 'amounts', 'type': 'uint256[]'}], 'stateMutability': 'nonpayable', 'type': 'function'}, b'\\\x11\xd7\x95': {'inputs': [{'internalType': 'uint256', 'name': 'amountIn', 'type': 'uint256'}, {'internalType': 'uint256', 'name': 'amountOutMin', 'type': 'uint256'}, {'internalType': 'address[]', 'name': 'path', 'type': 'address[]'}, {'internalType': 'address', 'name': 'to', 'type': 'address'}, {'internalType': 'uint256', 'name': 'deadline', 'type': 'uint256'}], 'name': 'swapExactTokensForTokensSupportingFeeOnTransferTokens', 'outputs': [], 'stateMutability': 'nonpayable', 'type': 'function'}, b'J%\xd9J': {'inputs': [{'internalType': 'uint256', 'name': 'amountOut', 'type': 'uint256'}, {'internalType': 'uint256', 'name': 'amountInMax', 'type': 'uint256'}, {'internalType': 'address[]', 'name': 'path', 'type': 'address[]'}, {'internalType': 'address', 'name': 'to', 'type': 'address'}, {'internalType': 'uint256', 'name': 'deadline', 'type': 'uint256'}], 'name': 'swapTokensForExactETH', 'outputs': [{'internalType': 'uint256[]', 'name': 'amounts', 'type': 'uint256[]'}], 'stateMutability': 'nonpayable', 'type': 'function'}, b'\x88\x03\xdb\xee': {'inputs': [{'internalType': 'uint256', 'name': 'amountOut', 'type': 'uint256'}, {'internalType': 'uint256', 'name': 'amountInMax', 'type': 'uint256'}, {'internalType': 'address[]', 'name': 'path', 'type': 'address[]'}, {'internalType': 'address', 'name': 'to', 'type': 'address'}, {'internalType': 'uint256', 'name': 'deadline', 'type': 'uint256'}], 'name': 'swapTokensForExactTokens', 'outputs': [{'internalType': 'uint256[]', 'name': 'amounts', 'type': 'uint256[]'}], 'stateMutability': 'nonpayable', 'type': 'function'}, 'receive': {'stateMutability': 'payable', 'type': 'receive'}}
    _creation_code = ""

    @overload
    @classmethod
    def deploy(cls, _factory: Union[Account, Address], _WETH: Union[Account, Address], *, from_: Optional[Union[Account, Address, str]] = None, value: Union[int, str] = 0, gas_limit: Optional[Union[int, Literal["max"], Literal["auto"]]] = None, return_tx: Literal[False] = False, request_type: Literal["call"], chain: Optional[Chain] = None, gas_price: Optional[Union[int, str]] = None, max_fee_per_gas: Optional[Union[int, str]] = None, max_priority_fee_per_gas: Optional[Union[int, str]] = None, access_list: Optional[Union[Dict[Union[Account, Address, str], List[int]], Literal["auto"]]] = None, type: Optional[int] = None, block: Optional[Union[int, Literal["latest"], Literal["pending"], Literal["earliest"], Literal["safe"], Literal["finalized"]]] = None, confirmations: Optional[int] = None) -> bytearray:
        """
        [Source code](file:///Users/dteiml/p/hacker-dom/woke-uniswap-v2/src/UniswapV2Router02.sol#24)

        Args:
            _factory: address
            _WETH: address
        """
        ...

    @overload
    @classmethod
    def deploy(cls, _factory: Union[Account, Address], _WETH: Union[Account, Address], *, from_: Optional[Union[Account, Address, str]] = None, value: Union[int, str] = 0, gas_limit: Optional[Union[int, Literal["max"], Literal["auto"]]] = None, return_tx: Literal[False] = False, request_type: Literal["tx"] = "tx", chain: Optional[Chain] = None, gas_price: Optional[Union[int, str]] = None, max_fee_per_gas: Optional[Union[int, str]] = None, max_priority_fee_per_gas: Optional[Union[int, str]] = None, access_list: Optional[Union[Dict[Union[Account, Address, str], List[int]], Literal["auto"]]] = None, type: Optional[int] = None, block: Optional[Union[int, Literal["latest"], Literal["pending"], Literal["earliest"], Literal["safe"], Literal["finalized"]]] = None, confirmations: Optional[int] = None) -> UniswapV2Router02:
        """
        [Source code](file:///Users/dteiml/p/hacker-dom/woke-uniswap-v2/src/UniswapV2Router02.sol#24)

        Args:
            _factory: address
            _WETH: address
        """
        ...

    @overload
    @classmethod
    def deploy(cls, _factory: Union[Account, Address], _WETH: Union[Account, Address], *, from_: Optional[Union[Account, Address, str]] = None, value: Union[int, str] = 0, gas_limit: Optional[Union[int, Literal["max"], Literal["auto"]]] = None, return_tx: Literal[False] = False, request_type: Literal["estimate"], chain: Optional[Chain] = None, gas_price: Optional[Union[int, str]] = None, max_fee_per_gas: Optional[Union[int, str]] = None, max_priority_fee_per_gas: Optional[Union[int, str]] = None, access_list: Optional[Union[Dict[Union[Account, Address, str], List[int]], Literal["auto"]]] = None, type: Optional[int] = None, block: Optional[Union[int, Literal["latest"], Literal["pending"], Literal["earliest"], Literal["safe"], Literal["finalized"]]] = None, confirmations: Optional[int] = None) -> int:
        """
        [Source code](file:///Users/dteiml/p/hacker-dom/woke-uniswap-v2/src/UniswapV2Router02.sol#24)

        Args:
            _factory: address
            _WETH: address
        """
        ...

    @overload
    @classmethod
    def deploy(cls, _factory: Union[Account, Address], _WETH: Union[Account, Address], *, from_: Optional[Union[Account, Address, str]] = None, value: Union[int, str] = 0, gas_limit: Optional[Union[int, Literal["max"], Literal["auto"]]] = None, return_tx: Literal[False] = False, request_type: Literal["access_list"], chain: Optional[Chain] = None, gas_price: Optional[Union[int, str]] = None, max_fee_per_gas: Optional[Union[int, str]] = None, max_priority_fee_per_gas: Optional[Union[int, str]] = None, access_list: Optional[Union[Dict[Union[Account, Address, str], List[int]], Literal["auto"]]] = None, type: Optional[int] = None, block: Optional[Union[int, Literal["latest"], Literal["pending"], Literal["earliest"], Literal["safe"], Literal["finalized"]]] = None, confirmations: Optional[int] = None) -> Tuple[Dict[Address, List[int]], int]:
        """
        [Source code](file:///Users/dteiml/p/hacker-dom/woke-uniswap-v2/src/UniswapV2Router02.sol#24)

        Args:
            _factory: address
            _WETH: address
        """
        ...

    @overload
    @classmethod
    def deploy(cls, _factory: Union[Account, Address], _WETH: Union[Account, Address], *, from_: Optional[Union[Account, Address, str]] = None, value: Union[int, str] = 0, gas_limit: Optional[Union[int, Literal["max"], Literal["auto"]]] = None, return_tx: Literal[True], request_type: Literal["tx"] = "tx", chain: Optional[Chain] = None, gas_price: Optional[Union[int, str]] = None, max_fee_per_gas: Optional[Union[int, str]] = None, max_priority_fee_per_gas: Optional[Union[int, str]] = None, access_list: Optional[Union[Dict[Union[Account, Address, str], List[int]], Literal["auto"]]] = None, type: Optional[int] = None, block: Optional[Union[int, Literal["latest"], Literal["pending"], Literal["earliest"], Literal["safe"], Literal["finalized"]]] = None, confirmations: Optional[int] = None) -> TransactionAbc[UniswapV2Router02]:
        """
        [Source code](file:///Users/dteiml/p/hacker-dom/woke-uniswap-v2/src/UniswapV2Router02.sol#24)

        Args:
            _factory: address
            _WETH: address
        """
        ...

    @classmethod
    def deploy(cls, _factory: Union[Account, Address], _WETH: Union[Account, Address], *, from_: Optional[Union[Account, Address, str]] = None, value: Union[int, str] = 0, gas_limit: Optional[Union[int, Literal["max"], Literal["auto"]]] = None, return_tx: bool = False, request_type: RequestType = "tx", chain: Optional[Chain] = None, gas_price: Optional[Union[int, str]] = None, max_fee_per_gas: Optional[Union[int, str]] = None, max_priority_fee_per_gas: Optional[Union[int, str]] = None, access_list: Optional[Union[Dict[Union[Account, Address, str], List[int]], Literal["auto"]]] = None, type: Optional[int] = None, block: Optional[Union[int, Literal["latest"], Literal["pending"], Literal["earliest"], Literal["safe"], Literal["finalized"]]] = None, confirmations: Optional[int] = None) -> Union[bytearray, UniswapV2Router02, int, Tuple[Dict[Address, List[int]], int], TransactionAbc[UniswapV2Router02]]:
        """
        [Source code](file:///Users/dteiml/p/hacker-dom/woke-uniswap-v2/src/UniswapV2Router02.sol#24)

        Args:
            _factory: address
            _WETH: address
        """
        return cls._deploy(request_type, [_factory, _WETH], return_tx, UniswapV2Router02, from_, value, gas_limit, {}, chain, gas_price, max_fee_per_gas, max_priority_fee_per_gas, access_list, type, block, confirmations)

    @classmethod
    def get_creation_code(cls) -> bytes:
        return cls._get_creation_code({})

    @overload
    def factory(self, *, from_: Optional[Union[Account, Address, str]] = None, to: Optional[Union[Account, Address, str]] = None, value: Union[int, str] = 0, gas_limit: Optional[Union[int, Literal["max"], Literal["auto"]]] = None, request_type: Literal["call"] = "call", gas_price: Optional[Union[int, str]] = None, max_fee_per_gas: Optional[Union[int, str]] = None, max_priority_fee_per_gas: Optional[Union[int, str]] = None, access_list: Optional[Union[Dict[Union[Account, Address, str], List[int]], Literal["auto"]]] = None, type: Optional[int] = None, block: Optional[Union[int, Literal["latest"], Literal["pending"], Literal["earliest"], Literal["safe"], Literal["finalized"]]] = None, confirmations: Optional[int] = None) -> Address:
        """
        [Source code](file:///Users/dteiml/p/hacker-dom/woke-uniswap-v2/src/UniswapV2Router02.sol#16)

        Returns:
            address
        """
        ...

    @overload
    def factory(self, *, from_: Optional[Union[Account, Address, str]] = None, to: Optional[Union[Account, Address, str]] = None, value: Union[int, str] = 0, gas_limit: Optional[Union[int, Literal["max"], Literal["auto"]]] = None, request_type: Literal["estimate"], gas_price: Optional[Union[int, str]] = None, max_fee_per_gas: Optional[Union[int, str]] = None, max_priority_fee_per_gas: Optional[Union[int, str]] = None, access_list: Optional[Union[Dict[Union[Account, Address, str], List[int]], Literal["auto"]]] = None, type: Optional[int] = None, block: Optional[Union[int, Literal["latest"], Literal["pending"], Literal["earliest"], Literal["safe"], Literal["finalized"]]] = None, confirmations: Optional[int] = None) -> int:
        """
        [Source code](file:///Users/dteiml/p/hacker-dom/woke-uniswap-v2/src/UniswapV2Router02.sol#16)

        Returns:
            address
        """
        ...

    @overload
    def factory(self, *, from_: Optional[Union[Account, Address, str]] = None, to: Optional[Union[Account, Address, str]] = None, value: Union[int, str] = 0, gas_limit: Optional[Union[int, Literal["max"], Literal["auto"]]] = None, request_type: Literal["access_list"], gas_price: Optional[Union[int, str]] = None, max_fee_per_gas: Optional[Union[int, str]] = None, max_priority_fee_per_gas: Optional[Union[int, str]] = None, access_list: Optional[Union[Dict[Union[Account, Address, str], List[int]], Literal["auto"]]] = None, type: Optional[int] = None, block: Optional[Union[int, Literal["latest"], Literal["pending"], Literal["earliest"], Literal["safe"], Literal["finalized"]]] = None, confirmations: Optional[int] = None) -> Tuple[Dict[Address, List[int]], int]:
        """
        [Source code](file:///Users/dteiml/p/hacker-dom/woke-uniswap-v2/src/UniswapV2Router02.sol#16)

        Returns:
            address
        """
        ...

    @overload
    def factory(self, *, from_: Optional[Union[Account, Address, str]] = None, to: Optional[Union[Account, Address, str]] = None, value: Union[int, str] = 0, gas_limit: Optional[Union[int, Literal["max"], Literal["auto"]]] = None, request_type: Literal["tx"], gas_price: Optional[Union[int, str]] = None, max_fee_per_gas: Optional[Union[int, str]] = None, max_priority_fee_per_gas: Optional[Union[int, str]] = None, access_list: Optional[Union[Dict[Union[Account, Address, str], List[int]], Literal["auto"]]] = None, type: Optional[int] = None, block: Optional[Union[int, Literal["latest"], Literal["pending"], Literal["earliest"], Literal["safe"], Literal["finalized"]]] = None, confirmations: Optional[int] = None) -> TransactionAbc[Address]:
        """
        [Source code](file:///Users/dteiml/p/hacker-dom/woke-uniswap-v2/src/UniswapV2Router02.sol#16)

        Returns:
            address
        """
        ...

    def factory(self, *, from_: Optional[Union[Account, Address, str]] = None, to: Optional[Union[Account, Address, str]] = None, value: Union[int, str] = 0, gas_limit: Optional[Union[int, Literal["max"], Literal["auto"]]] = None, request_type: RequestType = 'call', gas_price: Optional[Union[int, str]] = None, max_fee_per_gas: Optional[Union[int, str]] = None, max_priority_fee_per_gas: Optional[Union[int, str]] = None, access_list: Optional[Union[Dict[Union[Account, Address, str], List[int]], Literal["auto"]]] = None, type: Optional[int] = None, block: Optional[Union[int, Literal["latest"], Literal["pending"], Literal["earliest"], Literal["safe"], Literal["finalized"]]] = None, confirmations: Optional[int] = None) -> Union[Address, TransactionAbc[Address], int, Tuple[Dict[Address, List[int]], int]]:
        """
        [Source code](file:///Users/dteiml/p/hacker-dom/woke-uniswap-v2/src/UniswapV2Router02.sol#16)

        Returns:
            address
        """
        return self._execute(self.chain, request_type, "c45a0155", [], True if request_type == "tx" else False, Address, from_, to if to is not None else str(self.address), value, gas_limit, gas_price, max_fee_per_gas, max_priority_fee_per_gas, access_list, type, block, confirmations)

    @overload
    def WETH(self, *, from_: Optional[Union[Account, Address, str]] = None, to: Optional[Union[Account, Address, str]] = None, value: Union[int, str] = 0, gas_limit: Optional[Union[int, Literal["max"], Literal["auto"]]] = None, request_type: Literal["call"] = "call", gas_price: Optional[Union[int, str]] = None, max_fee_per_gas: Optional[Union[int, str]] = None, max_priority_fee_per_gas: Optional[Union[int, str]] = None, access_list: Optional[Union[Dict[Union[Account, Address, str], List[int]], Literal["auto"]]] = None, type: Optional[int] = None, block: Optional[Union[int, Literal["latest"], Literal["pending"], Literal["earliest"], Literal["safe"], Literal["finalized"]]] = None, confirmations: Optional[int] = None) -> Address:
        """
        [Source code](file:///Users/dteiml/p/hacker-dom/woke-uniswap-v2/src/UniswapV2Router02.sol#17)

        Returns:
            address
        """
        ...

    @overload
    def WETH(self, *, from_: Optional[Union[Account, Address, str]] = None, to: Optional[Union[Account, Address, str]] = None, value: Union[int, str] = 0, gas_limit: Optional[Union[int, Literal["max"], Literal["auto"]]] = None, request_type: Literal["estimate"], gas_price: Optional[Union[int, str]] = None, max_fee_per_gas: Optional[Union[int, str]] = None, max_priority_fee_per_gas: Optional[Union[int, str]] = None, access_list: Optional[Union[Dict[Union[Account, Address, str], List[int]], Literal["auto"]]] = None, type: Optional[int] = None, block: Optional[Union[int, Literal["latest"], Literal["pending"], Literal["earliest"], Literal["safe"], Literal["finalized"]]] = None, confirmations: Optional[int] = None) -> int:
        """
        [Source code](file:///Users/dteiml/p/hacker-dom/woke-uniswap-v2/src/UniswapV2Router02.sol#17)

        Returns:
            address
        """
        ...

    @overload
    def WETH(self, *, from_: Optional[Union[Account, Address, str]] = None, to: Optional[Union[Account, Address, str]] = None, value: Union[int, str] = 0, gas_limit: Optional[Union[int, Literal["max"], Literal["auto"]]] = None, request_type: Literal["access_list"], gas_price: Optional[Union[int, str]] = None, max_fee_per_gas: Optional[Union[int, str]] = None, max_priority_fee_per_gas: Optional[Union[int, str]] = None, access_list: Optional[Union[Dict[Union[Account, Address, str], List[int]], Literal["auto"]]] = None, type: Optional[int] = None, block: Optional[Union[int, Literal["latest"], Literal["pending"], Literal["earliest"], Literal["safe"], Literal["finalized"]]] = None, confirmations: Optional[int] = None) -> Tuple[Dict[Address, List[int]], int]:
        """
        [Source code](file:///Users/dteiml/p/hacker-dom/woke-uniswap-v2/src/UniswapV2Router02.sol#17)

        Returns:
            address
        """
        ...

    @overload
    def WETH(self, *, from_: Optional[Union[Account, Address, str]] = None, to: Optional[Union[Account, Address, str]] = None, value: Union[int, str] = 0, gas_limit: Optional[Union[int, Literal["max"], Literal["auto"]]] = None, request_type: Literal["tx"], gas_price: Optional[Union[int, str]] = None, max_fee_per_gas: Optional[Union[int, str]] = None, max_priority_fee_per_gas: Optional[Union[int, str]] = None, access_list: Optional[Union[Dict[Union[Account, Address, str], List[int]], Literal["auto"]]] = None, type: Optional[int] = None, block: Optional[Union[int, Literal["latest"], Literal["pending"], Literal["earliest"], Literal["safe"], Literal["finalized"]]] = None, confirmations: Optional[int] = None) -> TransactionAbc[Address]:
        """
        [Source code](file:///Users/dteiml/p/hacker-dom/woke-uniswap-v2/src/UniswapV2Router02.sol#17)

        Returns:
            address
        """
        ...

    def WETH(self, *, from_: Optional[Union[Account, Address, str]] = None, to: Optional[Union[Account, Address, str]] = None, value: Union[int, str] = 0, gas_limit: Optional[Union[int, Literal["max"], Literal["auto"]]] = None, request_type: RequestType = 'call', gas_price: Optional[Union[int, str]] = None, max_fee_per_gas: Optional[Union[int, str]] = None, max_priority_fee_per_gas: Optional[Union[int, str]] = None, access_list: Optional[Union[Dict[Union[Account, Address, str], List[int]], Literal["auto"]]] = None, type: Optional[int] = None, block: Optional[Union[int, Literal["latest"], Literal["pending"], Literal["earliest"], Literal["safe"], Literal["finalized"]]] = None, confirmations: Optional[int] = None) -> Union[Address, TransactionAbc[Address], int, Tuple[Dict[Address, List[int]], int]]:
        """
        [Source code](file:///Users/dteiml/p/hacker-dom/woke-uniswap-v2/src/UniswapV2Router02.sol#17)

        Returns:
            address
        """
        return self._execute(self.chain, request_type, "ad5c4648", [], True if request_type == "tx" else False, Address, from_, to if to is not None else str(self.address), value, gas_limit, gas_price, max_fee_per_gas, max_priority_fee_per_gas, access_list, type, block, confirmations)

    @overload
    def addLiquidity(self, tokenA: Union[Account, Address], tokenB: Union[Account, Address], amountADesired: uint256, amountBDesired: uint256, amountAMin: uint256, amountBMin: uint256, to_: Union[Account, Address], deadline: uint256, *, from_: Optional[Union[Account, Address, str]] = None, to: Optional[Union[Account, Address, str]] = None, value: Union[int, str] = 0, gas_limit: Optional[Union[int, Literal["max"], Literal["auto"]]] = None, request_type: Literal["call"], gas_price: Optional[Union[int, str]] = None, max_fee_per_gas: Optional[Union[int, str]] = None, max_priority_fee_per_gas: Optional[Union[int, str]] = None, access_list: Optional[Union[Dict[Union[Account, Address, str], List[int]], Literal["auto"]]] = None, type: Optional[int] = None, block: Optional[Union[int, Literal["latest"], Literal["pending"], Literal["earliest"], Literal["safe"], Literal["finalized"]]] = None, confirmations: Optional[int] = None) -> Tuple[uint256, uint256, uint256]:
        """
        [Source code](file:///Users/dteiml/p/hacker-dom/woke-uniswap-v2/src/UniswapV2Router02.sol#62)

        Args:
            tokenA: address
            tokenB: address
            amountADesired: uint256
            amountBDesired: uint256
            amountAMin: uint256
            amountBMin: uint256
            to_: address
            deadline: uint256
        Returns:
            (uint256, uint256, uint256)
        """
        ...

    @overload
    def addLiquidity(self, tokenA: Union[Account, Address], tokenB: Union[Account, Address], amountADesired: uint256, amountBDesired: uint256, amountAMin: uint256, amountBMin: uint256, to_: Union[Account, Address], deadline: uint256, *, from_: Optional[Union[Account, Address, str]] = None, to: Optional[Union[Account, Address, str]] = None, value: Union[int, str] = 0, gas_limit: Optional[Union[int, Literal["max"], Literal["auto"]]] = None, request_type: Literal["estimate"], gas_price: Optional[Union[int, str]] = None, max_fee_per_gas: Optional[Union[int, str]] = None, max_priority_fee_per_gas: Optional[Union[int, str]] = None, access_list: Optional[Union[Dict[Union[Account, Address, str], List[int]], Literal["auto"]]] = None, type: Optional[int] = None, block: Optional[Union[int, Literal["latest"], Literal["pending"], Literal["earliest"], Literal["safe"], Literal["finalized"]]] = None, confirmations: Optional[int] = None) -> int:
        """
        [Source code](file:///Users/dteiml/p/hacker-dom/woke-uniswap-v2/src/UniswapV2Router02.sol#62)

        Args:
            tokenA: address
            tokenB: address
            amountADesired: uint256
            amountBDesired: uint256
            amountAMin: uint256
            amountBMin: uint256
            to_: address
            deadline: uint256
        Returns:
            (uint256, uint256, uint256)
        """
        ...

    @overload
    def addLiquidity(self, tokenA: Union[Account, Address], tokenB: Union[Account, Address], amountADesired: uint256, amountBDesired: uint256, amountAMin: uint256, amountBMin: uint256, to_: Union[Account, Address], deadline: uint256, *, from_: Optional[Union[Account, Address, str]] = None, to: Optional[Union[Account, Address, str]] = None, value: Union[int, str] = 0, gas_limit: Optional[Union[int, Literal["max"], Literal["auto"]]] = None, request_type: Literal["access_list"], gas_price: Optional[Union[int, str]] = None, max_fee_per_gas: Optional[Union[int, str]] = None, max_priority_fee_per_gas: Optional[Union[int, str]] = None, access_list: Optional[Union[Dict[Union[Account, Address, str], List[int]], Literal["auto"]]] = None, type: Optional[int] = None, block: Optional[Union[int, Literal["latest"], Literal["pending"], Literal["earliest"], Literal["safe"], Literal["finalized"]]] = None, confirmations: Optional[int] = None) -> Tuple[Dict[Address, List[int]], int]:
        """
        [Source code](file:///Users/dteiml/p/hacker-dom/woke-uniswap-v2/src/UniswapV2Router02.sol#62)

        Args:
            tokenA: address
            tokenB: address
            amountADesired: uint256
            amountBDesired: uint256
            amountAMin: uint256
            amountBMin: uint256
            to_: address
            deadline: uint256
        Returns:
            (uint256, uint256, uint256)
        """
        ...

    @overload
    def addLiquidity(self, tokenA: Union[Account, Address], tokenB: Union[Account, Address], amountADesired: uint256, amountBDesired: uint256, amountAMin: uint256, amountBMin: uint256, to_: Union[Account, Address], deadline: uint256, *, from_: Optional[Union[Account, Address, str]] = None, to: Optional[Union[Account, Address, str]] = None, value: Union[int, str] = 0, gas_limit: Optional[Union[int, Literal["max"], Literal["auto"]]] = None, request_type: Literal["tx"] = "tx", gas_price: Optional[Union[int, str]] = None, max_fee_per_gas: Optional[Union[int, str]] = None, max_priority_fee_per_gas: Optional[Union[int, str]] = None, access_list: Optional[Union[Dict[Union[Account, Address, str], List[int]], Literal["auto"]]] = None, type: Optional[int] = None, block: Optional[Union[int, Literal["latest"], Literal["pending"], Literal["earliest"], Literal["safe"], Literal["finalized"]]] = None, confirmations: Optional[int] = None) -> TransactionAbc[Tuple[uint256, uint256, uint256]]:
        """
        [Source code](file:///Users/dteiml/p/hacker-dom/woke-uniswap-v2/src/UniswapV2Router02.sol#62)

        Args:
            tokenA: address
            tokenB: address
            amountADesired: uint256
            amountBDesired: uint256
            amountAMin: uint256
            amountBMin: uint256
            to_: address
            deadline: uint256
        Returns:
            (uint256, uint256, uint256)
        """
        ...

    def addLiquidity(self, tokenA: Union[Account, Address], tokenB: Union[Account, Address], amountADesired: uint256, amountBDesired: uint256, amountAMin: uint256, amountBMin: uint256, to_: Union[Account, Address], deadline: uint256, *, from_: Optional[Union[Account, Address, str]] = None, to: Optional[Union[Account, Address, str]] = None, value: Union[int, str] = 0, gas_limit: Optional[Union[int, Literal["max"], Literal["auto"]]] = None, request_type: RequestType = 'tx', gas_price: Optional[Union[int, str]] = None, max_fee_per_gas: Optional[Union[int, str]] = None, max_priority_fee_per_gas: Optional[Union[int, str]] = None, access_list: Optional[Union[Dict[Union[Account, Address, str], List[int]], Literal["auto"]]] = None, type: Optional[int] = None, block: Optional[Union[int, Literal["latest"], Literal["pending"], Literal["earliest"], Literal["safe"], Literal["finalized"]]] = None, confirmations: Optional[int] = None) -> Union[Tuple[uint256, uint256, uint256], TransactionAbc[Tuple[uint256, uint256, uint256]], int, Tuple[Dict[Address, List[int]], int]]:
        """
        [Source code](file:///Users/dteiml/p/hacker-dom/woke-uniswap-v2/src/UniswapV2Router02.sol#62)

        Args:
            tokenA: address
            tokenB: address
            amountADesired: uint256
            amountBDesired: uint256
            amountAMin: uint256
            amountBMin: uint256
            to_: address
            deadline: uint256
        Returns:
            (uint256, uint256, uint256)
        """
        return self._execute(self.chain, request_type, "e8e33700", [tokenA, tokenB, amountADesired, amountBDesired, amountAMin, amountBMin, to_, deadline], True if request_type == "tx" else False, Tuple[uint256, uint256, uint256], from_, to if to is not None else str(self.address), value, gas_limit, gas_price, max_fee_per_gas, max_priority_fee_per_gas, access_list, type, block, confirmations)

    @overload
    def addLiquidityETH(self, token: Union[Account, Address], amountTokenDesired: uint256, amountTokenMin: uint256, amountETHMin: uint256, to_: Union[Account, Address], deadline: uint256, *, from_: Optional[Union[Account, Address, str]] = None, to: Optional[Union[Account, Address, str]] = None, value: Union[int, str] = 0, gas_limit: Optional[Union[int, Literal["max"], Literal["auto"]]] = None, request_type: Literal["call"], gas_price: Optional[Union[int, str]] = None, max_fee_per_gas: Optional[Union[int, str]] = None, max_priority_fee_per_gas: Optional[Union[int, str]] = None, access_list: Optional[Union[Dict[Union[Account, Address, str], List[int]], Literal["auto"]]] = None, type: Optional[int] = None, block: Optional[Union[int, Literal["latest"], Literal["pending"], Literal["earliest"], Literal["safe"], Literal["finalized"]]] = None, confirmations: Optional[int] = None) -> Tuple[uint256, uint256, uint256]:
        """
        [Source code](file:///Users/dteiml/p/hacker-dom/woke-uniswap-v2/src/UniswapV2Router02.sol#78)

        Args:
            token: address
            amountTokenDesired: uint256
            amountTokenMin: uint256
            amountETHMin: uint256
            to_: address
            deadline: uint256
        Returns:
            (uint256, uint256, uint256)
        """
        ...

    @overload
    def addLiquidityETH(self, token: Union[Account, Address], amountTokenDesired: uint256, amountTokenMin: uint256, amountETHMin: uint256, to_: Union[Account, Address], deadline: uint256, *, from_: Optional[Union[Account, Address, str]] = None, to: Optional[Union[Account, Address, str]] = None, value: Union[int, str] = 0, gas_limit: Optional[Union[int, Literal["max"], Literal["auto"]]] = None, request_type: Literal["estimate"], gas_price: Optional[Union[int, str]] = None, max_fee_per_gas: Optional[Union[int, str]] = None, max_priority_fee_per_gas: Optional[Union[int, str]] = None, access_list: Optional[Union[Dict[Union[Account, Address, str], List[int]], Literal["auto"]]] = None, type: Optional[int] = None, block: Optional[Union[int, Literal["latest"], Literal["pending"], Literal["earliest"], Literal["safe"], Literal["finalized"]]] = None, confirmations: Optional[int] = None) -> int:
        """
        [Source code](file:///Users/dteiml/p/hacker-dom/woke-uniswap-v2/src/UniswapV2Router02.sol#78)

        Args:
            token: address
            amountTokenDesired: uint256
            amountTokenMin: uint256
            amountETHMin: uint256
            to_: address
            deadline: uint256
        Returns:
            (uint256, uint256, uint256)
        """
        ...

    @overload
    def addLiquidityETH(self, token: Union[Account, Address], amountTokenDesired: uint256, amountTokenMin: uint256, amountETHMin: uint256, to_: Union[Account, Address], deadline: uint256, *, from_: Optional[Union[Account, Address, str]] = None, to: Optional[Union[Account, Address, str]] = None, value: Union[int, str] = 0, gas_limit: Optional[Union[int, Literal["max"], Literal["auto"]]] = None, request_type: Literal["access_list"], gas_price: Optional[Union[int, str]] = None, max_fee_per_gas: Optional[Union[int, str]] = None, max_priority_fee_per_gas: Optional[Union[int, str]] = None, access_list: Optional[Union[Dict[Union[Account, Address, str], List[int]], Literal["auto"]]] = None, type: Optional[int] = None, block: Optional[Union[int, Literal["latest"], Literal["pending"], Literal["earliest"], Literal["safe"], Literal["finalized"]]] = None, confirmations: Optional[int] = None) -> Tuple[Dict[Address, List[int]], int]:
        """
        [Source code](file:///Users/dteiml/p/hacker-dom/woke-uniswap-v2/src/UniswapV2Router02.sol#78)

        Args:
            token: address
            amountTokenDesired: uint256
            amountTokenMin: uint256
            amountETHMin: uint256
            to_: address
            deadline: uint256
        Returns:
            (uint256, uint256, uint256)
        """
        ...

    @overload
    def addLiquidityETH(self, token: Union[Account, Address], amountTokenDesired: uint256, amountTokenMin: uint256, amountETHMin: uint256, to_: Union[Account, Address], deadline: uint256, *, from_: Optional[Union[Account, Address, str]] = None, to: Optional[Union[Account, Address, str]] = None, value: Union[int, str] = 0, gas_limit: Optional[Union[int, Literal["max"], Literal["auto"]]] = None, request_type: Literal["tx"] = "tx", gas_price: Optional[Union[int, str]] = None, max_fee_per_gas: Optional[Union[int, str]] = None, max_priority_fee_per_gas: Optional[Union[int, str]] = None, access_list: Optional[Union[Dict[Union[Account, Address, str], List[int]], Literal["auto"]]] = None, type: Optional[int] = None, block: Optional[Union[int, Literal["latest"], Literal["pending"], Literal["earliest"], Literal["safe"], Literal["finalized"]]] = None, confirmations: Optional[int] = None) -> TransactionAbc[Tuple[uint256, uint256, uint256]]:
        """
        [Source code](file:///Users/dteiml/p/hacker-dom/woke-uniswap-v2/src/UniswapV2Router02.sol#78)

        Args:
            token: address
            amountTokenDesired: uint256
            amountTokenMin: uint256
            amountETHMin: uint256
            to_: address
            deadline: uint256
        Returns:
            (uint256, uint256, uint256)
        """
        ...

    def addLiquidityETH(self, token: Union[Account, Address], amountTokenDesired: uint256, amountTokenMin: uint256, amountETHMin: uint256, to_: Union[Account, Address], deadline: uint256, *, from_: Optional[Union[Account, Address, str]] = None, to: Optional[Union[Account, Address, str]] = None, value: Union[int, str] = 0, gas_limit: Optional[Union[int, Literal["max"], Literal["auto"]]] = None, request_type: RequestType = 'tx', gas_price: Optional[Union[int, str]] = None, max_fee_per_gas: Optional[Union[int, str]] = None, max_priority_fee_per_gas: Optional[Union[int, str]] = None, access_list: Optional[Union[Dict[Union[Account, Address, str], List[int]], Literal["auto"]]] = None, type: Optional[int] = None, block: Optional[Union[int, Literal["latest"], Literal["pending"], Literal["earliest"], Literal["safe"], Literal["finalized"]]] = None, confirmations: Optional[int] = None) -> Union[Tuple[uint256, uint256, uint256], TransactionAbc[Tuple[uint256, uint256, uint256]], int, Tuple[Dict[Address, List[int]], int]]:
        """
        [Source code](file:///Users/dteiml/p/hacker-dom/woke-uniswap-v2/src/UniswapV2Router02.sol#78)

        Args:
            token: address
            amountTokenDesired: uint256
            amountTokenMin: uint256
            amountETHMin: uint256
            to_: address
            deadline: uint256
        Returns:
            (uint256, uint256, uint256)
        """
        return self._execute(self.chain, request_type, "f305d719", [token, amountTokenDesired, amountTokenMin, amountETHMin, to_, deadline], True if request_type == "tx" else False, Tuple[uint256, uint256, uint256], from_, to if to is not None else str(self.address), value, gas_limit, gas_price, max_fee_per_gas, max_priority_fee_per_gas, access_list, type, block, confirmations)

    @overload
    def removeLiquidity(self, tokenA: Union[Account, Address], tokenB: Union[Account, Address], liquidity: uint256, amountAMin: uint256, amountBMin: uint256, to_: Union[Account, Address], deadline: uint256, *, from_: Optional[Union[Account, Address, str]] = None, to: Optional[Union[Account, Address, str]] = None, value: Union[int, str] = 0, gas_limit: Optional[Union[int, Literal["max"], Literal["auto"]]] = None, request_type: Literal["call"], gas_price: Optional[Union[int, str]] = None, max_fee_per_gas: Optional[Union[int, str]] = None, max_priority_fee_per_gas: Optional[Union[int, str]] = None, access_list: Optional[Union[Dict[Union[Account, Address, str], List[int]], Literal["auto"]]] = None, type: Optional[int] = None, block: Optional[Union[int, Literal["latest"], Literal["pending"], Literal["earliest"], Literal["safe"], Literal["finalized"]]] = None, confirmations: Optional[int] = None) -> Tuple[uint256, uint256]:
        """
        [Source code](file:///Users/dteiml/p/hacker-dom/woke-uniswap-v2/src/UniswapV2Router02.sol#104)

        Args:
            tokenA: address
            tokenB: address
            liquidity: uint256
            amountAMin: uint256
            amountBMin: uint256
            to_: address
            deadline: uint256
        Returns:
            (uint256, uint256)
        """
        ...

    @overload
    def removeLiquidity(self, tokenA: Union[Account, Address], tokenB: Union[Account, Address], liquidity: uint256, amountAMin: uint256, amountBMin: uint256, to_: Union[Account, Address], deadline: uint256, *, from_: Optional[Union[Account, Address, str]] = None, to: Optional[Union[Account, Address, str]] = None, value: Union[int, str] = 0, gas_limit: Optional[Union[int, Literal["max"], Literal["auto"]]] = None, request_type: Literal["estimate"], gas_price: Optional[Union[int, str]] = None, max_fee_per_gas: Optional[Union[int, str]] = None, max_priority_fee_per_gas: Optional[Union[int, str]] = None, access_list: Optional[Union[Dict[Union[Account, Address, str], List[int]], Literal["auto"]]] = None, type: Optional[int] = None, block: Optional[Union[int, Literal["latest"], Literal["pending"], Literal["earliest"], Literal["safe"], Literal["finalized"]]] = None, confirmations: Optional[int] = None) -> int:
        """
        [Source code](file:///Users/dteiml/p/hacker-dom/woke-uniswap-v2/src/UniswapV2Router02.sol#104)

        Args:
            tokenA: address
            tokenB: address
            liquidity: uint256
            amountAMin: uint256
            amountBMin: uint256
            to_: address
            deadline: uint256
        Returns:
            (uint256, uint256)
        """
        ...

    @overload
    def removeLiquidity(self, tokenA: Union[Account, Address], tokenB: Union[Account, Address], liquidity: uint256, amountAMin: uint256, amountBMin: uint256, to_: Union[Account, Address], deadline: uint256, *, from_: Optional[Union[Account, Address, str]] = None, to: Optional[Union[Account, Address, str]] = None, value: Union[int, str] = 0, gas_limit: Optional[Union[int, Literal["max"], Literal["auto"]]] = None, request_type: Literal["access_list"], gas_price: Optional[Union[int, str]] = None, max_fee_per_gas: Optional[Union[int, str]] = None, max_priority_fee_per_gas: Optional[Union[int, str]] = None, access_list: Optional[Union[Dict[Union[Account, Address, str], List[int]], Literal["auto"]]] = None, type: Optional[int] = None, block: Optional[Union[int, Literal["latest"], Literal["pending"], Literal["earliest"], Literal["safe"], Literal["finalized"]]] = None, confirmations: Optional[int] = None) -> Tuple[Dict[Address, List[int]], int]:
        """
        [Source code](file:///Users/dteiml/p/hacker-dom/woke-uniswap-v2/src/UniswapV2Router02.sol#104)

        Args:
            tokenA: address
            tokenB: address
            liquidity: uint256
            amountAMin: uint256
            amountBMin: uint256
            to_: address
            deadline: uint256
        Returns:
            (uint256, uint256)
        """
        ...

    @overload
    def removeLiquidity(self, tokenA: Union[Account, Address], tokenB: Union[Account, Address], liquidity: uint256, amountAMin: uint256, amountBMin: uint256, to_: Union[Account, Address], deadline: uint256, *, from_: Optional[Union[Account, Address, str]] = None, to: Optional[Union[Account, Address, str]] = None, value: Union[int, str] = 0, gas_limit: Optional[Union[int, Literal["max"], Literal["auto"]]] = None, request_type: Literal["tx"] = "tx", gas_price: Optional[Union[int, str]] = None, max_fee_per_gas: Optional[Union[int, str]] = None, max_priority_fee_per_gas: Optional[Union[int, str]] = None, access_list: Optional[Union[Dict[Union[Account, Address, str], List[int]], Literal["auto"]]] = None, type: Optional[int] = None, block: Optional[Union[int, Literal["latest"], Literal["pending"], Literal["earliest"], Literal["safe"], Literal["finalized"]]] = None, confirmations: Optional[int] = None) -> TransactionAbc[Tuple[uint256, uint256]]:
        """
        [Source code](file:///Users/dteiml/p/hacker-dom/woke-uniswap-v2/src/UniswapV2Router02.sol#104)

        Args:
            tokenA: address
            tokenB: address
            liquidity: uint256
            amountAMin: uint256
            amountBMin: uint256
            to_: address
            deadline: uint256
        Returns:
            (uint256, uint256)
        """
        ...

    def removeLiquidity(self, tokenA: Union[Account, Address], tokenB: Union[Account, Address], liquidity: uint256, amountAMin: uint256, amountBMin: uint256, to_: Union[Account, Address], deadline: uint256, *, from_: Optional[Union[Account, Address, str]] = None, to: Optional[Union[Account, Address, str]] = None, value: Union[int, str] = 0, gas_limit: Optional[Union[int, Literal["max"], Literal["auto"]]] = None, request_type: RequestType = 'tx', gas_price: Optional[Union[int, str]] = None, max_fee_per_gas: Optional[Union[int, str]] = None, max_priority_fee_per_gas: Optional[Union[int, str]] = None, access_list: Optional[Union[Dict[Union[Account, Address, str], List[int]], Literal["auto"]]] = None, type: Optional[int] = None, block: Optional[Union[int, Literal["latest"], Literal["pending"], Literal["earliest"], Literal["safe"], Literal["finalized"]]] = None, confirmations: Optional[int] = None) -> Union[Tuple[uint256, uint256], TransactionAbc[Tuple[uint256, uint256]], int, Tuple[Dict[Address, List[int]], int]]:
        """
        [Source code](file:///Users/dteiml/p/hacker-dom/woke-uniswap-v2/src/UniswapV2Router02.sol#104)

        Args:
            tokenA: address
            tokenB: address
            liquidity: uint256
            amountAMin: uint256
            amountBMin: uint256
            to_: address
            deadline: uint256
        Returns:
            (uint256, uint256)
        """
        return self._execute(self.chain, request_type, "baa2abde", [tokenA, tokenB, liquidity, amountAMin, amountBMin, to_, deadline], True if request_type == "tx" else False, Tuple[uint256, uint256], from_, to if to is not None else str(self.address), value, gas_limit, gas_price, max_fee_per_gas, max_priority_fee_per_gas, access_list, type, block, confirmations)

    @overload
    def removeLiquidityETH(self, token: Union[Account, Address], liquidity: uint256, amountTokenMin: uint256, amountETHMin: uint256, to_: Union[Account, Address], deadline: uint256, *, from_: Optional[Union[Account, Address, str]] = None, to: Optional[Union[Account, Address, str]] = None, value: Union[int, str] = 0, gas_limit: Optional[Union[int, Literal["max"], Literal["auto"]]] = None, request_type: Literal["call"], gas_price: Optional[Union[int, str]] = None, max_fee_per_gas: Optional[Union[int, str]] = None, max_priority_fee_per_gas: Optional[Union[int, str]] = None, access_list: Optional[Union[Dict[Union[Account, Address, str], List[int]], Literal["auto"]]] = None, type: Optional[int] = None, block: Optional[Union[int, Literal["latest"], Literal["pending"], Literal["earliest"], Literal["safe"], Literal["finalized"]]] = None, confirmations: Optional[int] = None) -> Tuple[uint256, uint256]:
        """
        [Source code](file:///Users/dteiml/p/hacker-dom/woke-uniswap-v2/src/UniswapV2Router02.sol#121)

        Args:
            token: address
            liquidity: uint256
            amountTokenMin: uint256
            amountETHMin: uint256
            to_: address
            deadline: uint256
        Returns:
            (uint256, uint256)
        """
        ...

    @overload
    def removeLiquidityETH(self, token: Union[Account, Address], liquidity: uint256, amountTokenMin: uint256, amountETHMin: uint256, to_: Union[Account, Address], deadline: uint256, *, from_: Optional[Union[Account, Address, str]] = None, to: Optional[Union[Account, Address, str]] = None, value: Union[int, str] = 0, gas_limit: Optional[Union[int, Literal["max"], Literal["auto"]]] = None, request_type: Literal["estimate"], gas_price: Optional[Union[int, str]] = None, max_fee_per_gas: Optional[Union[int, str]] = None, max_priority_fee_per_gas: Optional[Union[int, str]] = None, access_list: Optional[Union[Dict[Union[Account, Address, str], List[int]], Literal["auto"]]] = None, type: Optional[int] = None, block: Optional[Union[int, Literal["latest"], Literal["pending"], Literal["earliest"], Literal["safe"], Literal["finalized"]]] = None, confirmations: Optional[int] = None) -> int:
        """
        [Source code](file:///Users/dteiml/p/hacker-dom/woke-uniswap-v2/src/UniswapV2Router02.sol#121)

        Args:
            token: address
            liquidity: uint256
            amountTokenMin: uint256
            amountETHMin: uint256
            to_: address
            deadline: uint256
        Returns:
            (uint256, uint256)
        """
        ...

    @overload
    def removeLiquidityETH(self, token: Union[Account, Address], liquidity: uint256, amountTokenMin: uint256, amountETHMin: uint256, to_: Union[Account, Address], deadline: uint256, *, from_: Optional[Union[Account, Address, str]] = None, to: Optional[Union[Account, Address, str]] = None, value: Union[int, str] = 0, gas_limit: Optional[Union[int, Literal["max"], Literal["auto"]]] = None, request_type: Literal["access_list"], gas_price: Optional[Union[int, str]] = None, max_fee_per_gas: Optional[Union[int, str]] = None, max_priority_fee_per_gas: Optional[Union[int, str]] = None, access_list: Optional[Union[Dict[Union[Account, Address, str], List[int]], Literal["auto"]]] = None, type: Optional[int] = None, block: Optional[Union[int, Literal["latest"], Literal["pending"], Literal["earliest"], Literal["safe"], Literal["finalized"]]] = None, confirmations: Optional[int] = None) -> Tuple[Dict[Address, List[int]], int]:
        """
        [Source code](file:///Users/dteiml/p/hacker-dom/woke-uniswap-v2/src/UniswapV2Router02.sol#121)

        Args:
            token: address
            liquidity: uint256
            amountTokenMin: uint256
            amountETHMin: uint256
            to_: address
            deadline: uint256
        Returns:
            (uint256, uint256)
        """
        ...

    @overload
    def removeLiquidityETH(self, token: Union[Account, Address], liquidity: uint256, amountTokenMin: uint256, amountETHMin: uint256, to_: Union[Account, Address], deadline: uint256, *, from_: Optional[Union[Account, Address, str]] = None, to: Optional[Union[Account, Address, str]] = None, value: Union[int, str] = 0, gas_limit: Optional[Union[int, Literal["max"], Literal["auto"]]] = None, request_type: Literal["tx"] = "tx", gas_price: Optional[Union[int, str]] = None, max_fee_per_gas: Optional[Union[int, str]] = None, max_priority_fee_per_gas: Optional[Union[int, str]] = None, access_list: Optional[Union[Dict[Union[Account, Address, str], List[int]], Literal["auto"]]] = None, type: Optional[int] = None, block: Optional[Union[int, Literal["latest"], Literal["pending"], Literal["earliest"], Literal["safe"], Literal["finalized"]]] = None, confirmations: Optional[int] = None) -> TransactionAbc[Tuple[uint256, uint256]]:
        """
        [Source code](file:///Users/dteiml/p/hacker-dom/woke-uniswap-v2/src/UniswapV2Router02.sol#121)

        Args:
            token: address
            liquidity: uint256
            amountTokenMin: uint256
            amountETHMin: uint256
            to_: address
            deadline: uint256
        Returns:
            (uint256, uint256)
        """
        ...

    def removeLiquidityETH(self, token: Union[Account, Address], liquidity: uint256, amountTokenMin: uint256, amountETHMin: uint256, to_: Union[Account, Address], deadline: uint256, *, from_: Optional[Union[Account, Address, str]] = None, to: Optional[Union[Account, Address, str]] = None, value: Union[int, str] = 0, gas_limit: Optional[Union[int, Literal["max"], Literal["auto"]]] = None, request_type: RequestType = 'tx', gas_price: Optional[Union[int, str]] = None, max_fee_per_gas: Optional[Union[int, str]] = None, max_priority_fee_per_gas: Optional[Union[int, str]] = None, access_list: Optional[Union[Dict[Union[Account, Address, str], List[int]], Literal["auto"]]] = None, type: Optional[int] = None, block: Optional[Union[int, Literal["latest"], Literal["pending"], Literal["earliest"], Literal["safe"], Literal["finalized"]]] = None, confirmations: Optional[int] = None) -> Union[Tuple[uint256, uint256], TransactionAbc[Tuple[uint256, uint256]], int, Tuple[Dict[Address, List[int]], int]]:
        """
        [Source code](file:///Users/dteiml/p/hacker-dom/woke-uniswap-v2/src/UniswapV2Router02.sol#121)

        Args:
            token: address
            liquidity: uint256
            amountTokenMin: uint256
            amountETHMin: uint256
            to_: address
            deadline: uint256
        Returns:
            (uint256, uint256)
        """
        return self._execute(self.chain, request_type, "02751cec", [token, liquidity, amountTokenMin, amountETHMin, to_, deadline], True if request_type == "tx" else False, Tuple[uint256, uint256], from_, to if to is not None else str(self.address), value, gas_limit, gas_price, max_fee_per_gas, max_priority_fee_per_gas, access_list, type, block, confirmations)

    @overload
    def removeLiquidityWithPermit(self, tokenA: Union[Account, Address], tokenB: Union[Account, Address], liquidity: uint256, amountAMin: uint256, amountBMin: uint256, to_: Union[Account, Address], deadline: uint256, approveMax: bool, v: uint8, r: bytes32, s: bytes32, *, from_: Optional[Union[Account, Address, str]] = None, to: Optional[Union[Account, Address, str]] = None, value: Union[int, str] = 0, gas_limit: Optional[Union[int, Literal["max"], Literal["auto"]]] = None, request_type: Literal["call"], gas_price: Optional[Union[int, str]] = None, max_fee_per_gas: Optional[Union[int, str]] = None, max_priority_fee_per_gas: Optional[Union[int, str]] = None, access_list: Optional[Union[Dict[Union[Account, Address, str], List[int]], Literal["auto"]]] = None, type: Optional[int] = None, block: Optional[Union[int, Literal["latest"], Literal["pending"], Literal["earliest"], Literal["safe"], Literal["finalized"]]] = None, confirmations: Optional[int] = None) -> Tuple[uint256, uint256]:
        """
        [Source code](file:///Users/dteiml/p/hacker-dom/woke-uniswap-v2/src/UniswapV2Router02.sol#142)

        Args:
            tokenA: address
            tokenB: address
            liquidity: uint256
            amountAMin: uint256
            amountBMin: uint256
            to_: address
            deadline: uint256
            approveMax: bool
            v: uint8
            r: bytes32
            s: bytes32
        Returns:
            (uint256, uint256)
        """
        ...

    @overload
    def removeLiquidityWithPermit(self, tokenA: Union[Account, Address], tokenB: Union[Account, Address], liquidity: uint256, amountAMin: uint256, amountBMin: uint256, to_: Union[Account, Address], deadline: uint256, approveMax: bool, v: uint8, r: bytes32, s: bytes32, *, from_: Optional[Union[Account, Address, str]] = None, to: Optional[Union[Account, Address, str]] = None, value: Union[int, str] = 0, gas_limit: Optional[Union[int, Literal["max"], Literal["auto"]]] = None, request_type: Literal["estimate"], gas_price: Optional[Union[int, str]] = None, max_fee_per_gas: Optional[Union[int, str]] = None, max_priority_fee_per_gas: Optional[Union[int, str]] = None, access_list: Optional[Union[Dict[Union[Account, Address, str], List[int]], Literal["auto"]]] = None, type: Optional[int] = None, block: Optional[Union[int, Literal["latest"], Literal["pending"], Literal["earliest"], Literal["safe"], Literal["finalized"]]] = None, confirmations: Optional[int] = None) -> int:
        """
        [Source code](file:///Users/dteiml/p/hacker-dom/woke-uniswap-v2/src/UniswapV2Router02.sol#142)

        Args:
            tokenA: address
            tokenB: address
            liquidity: uint256
            amountAMin: uint256
            amountBMin: uint256
            to_: address
            deadline: uint256
            approveMax: bool
            v: uint8
            r: bytes32
            s: bytes32
        Returns:
            (uint256, uint256)
        """
        ...

    @overload
    def removeLiquidityWithPermit(self, tokenA: Union[Account, Address], tokenB: Union[Account, Address], liquidity: uint256, amountAMin: uint256, amountBMin: uint256, to_: Union[Account, Address], deadline: uint256, approveMax: bool, v: uint8, r: bytes32, s: bytes32, *, from_: Optional[Union[Account, Address, str]] = None, to: Optional[Union[Account, Address, str]] = None, value: Union[int, str] = 0, gas_limit: Optional[Union[int, Literal["max"], Literal["auto"]]] = None, request_type: Literal["access_list"], gas_price: Optional[Union[int, str]] = None, max_fee_per_gas: Optional[Union[int, str]] = None, max_priority_fee_per_gas: Optional[Union[int, str]] = None, access_list: Optional[Union[Dict[Union[Account, Address, str], List[int]], Literal["auto"]]] = None, type: Optional[int] = None, block: Optional[Union[int, Literal["latest"], Literal["pending"], Literal["earliest"], Literal["safe"], Literal["finalized"]]] = None, confirmations: Optional[int] = None) -> Tuple[Dict[Address, List[int]], int]:
        """
        [Source code](file:///Users/dteiml/p/hacker-dom/woke-uniswap-v2/src/UniswapV2Router02.sol#142)

        Args:
            tokenA: address
            tokenB: address
            liquidity: uint256
            amountAMin: uint256
            amountBMin: uint256
            to_: address
            deadline: uint256
            approveMax: bool
            v: uint8
            r: bytes32
            s: bytes32
        Returns:
            (uint256, uint256)
        """
        ...

    @overload
    def removeLiquidityWithPermit(self, tokenA: Union[Account, Address], tokenB: Union[Account, Address], liquidity: uint256, amountAMin: uint256, amountBMin: uint256, to_: Union[Account, Address], deadline: uint256, approveMax: bool, v: uint8, r: bytes32, s: bytes32, *, from_: Optional[Union[Account, Address, str]] = None, to: Optional[Union[Account, Address, str]] = None, value: Union[int, str] = 0, gas_limit: Optional[Union[int, Literal["max"], Literal["auto"]]] = None, request_type: Literal["tx"] = "tx", gas_price: Optional[Union[int, str]] = None, max_fee_per_gas: Optional[Union[int, str]] = None, max_priority_fee_per_gas: Optional[Union[int, str]] = None, access_list: Optional[Union[Dict[Union[Account, Address, str], List[int]], Literal["auto"]]] = None, type: Optional[int] = None, block: Optional[Union[int, Literal["latest"], Literal["pending"], Literal["earliest"], Literal["safe"], Literal["finalized"]]] = None, confirmations: Optional[int] = None) -> TransactionAbc[Tuple[uint256, uint256]]:
        """
        [Source code](file:///Users/dteiml/p/hacker-dom/woke-uniswap-v2/src/UniswapV2Router02.sol#142)

        Args:
            tokenA: address
            tokenB: address
            liquidity: uint256
            amountAMin: uint256
            amountBMin: uint256
            to_: address
            deadline: uint256
            approveMax: bool
            v: uint8
            r: bytes32
            s: bytes32
        Returns:
            (uint256, uint256)
        """
        ...

    def removeLiquidityWithPermit(self, tokenA: Union[Account, Address], tokenB: Union[Account, Address], liquidity: uint256, amountAMin: uint256, amountBMin: uint256, to_: Union[Account, Address], deadline: uint256, approveMax: bool, v: uint8, r: bytes32, s: bytes32, *, from_: Optional[Union[Account, Address, str]] = None, to: Optional[Union[Account, Address, str]] = None, value: Union[int, str] = 0, gas_limit: Optional[Union[int, Literal["max"], Literal["auto"]]] = None, request_type: RequestType = 'tx', gas_price: Optional[Union[int, str]] = None, max_fee_per_gas: Optional[Union[int, str]] = None, max_priority_fee_per_gas: Optional[Union[int, str]] = None, access_list: Optional[Union[Dict[Union[Account, Address, str], List[int]], Literal["auto"]]] = None, type: Optional[int] = None, block: Optional[Union[int, Literal["latest"], Literal["pending"], Literal["earliest"], Literal["safe"], Literal["finalized"]]] = None, confirmations: Optional[int] = None) -> Union[Tuple[uint256, uint256], TransactionAbc[Tuple[uint256, uint256]], int, Tuple[Dict[Address, List[int]], int]]:
        """
        [Source code](file:///Users/dteiml/p/hacker-dom/woke-uniswap-v2/src/UniswapV2Router02.sol#142)

        Args:
            tokenA: address
            tokenB: address
            liquidity: uint256
            amountAMin: uint256
            amountBMin: uint256
            to_: address
            deadline: uint256
            approveMax: bool
            v: uint8
            r: bytes32
            s: bytes32
        Returns:
            (uint256, uint256)
        """
        return self._execute(self.chain, request_type, "2195995c", [tokenA, tokenB, liquidity, amountAMin, amountBMin, to_, deadline, approveMax, v, r, s], True if request_type == "tx" else False, Tuple[uint256, uint256], from_, to if to is not None else str(self.address), value, gas_limit, gas_price, max_fee_per_gas, max_priority_fee_per_gas, access_list, type, block, confirmations)

    @overload
    def removeLiquidityETHWithPermit(self, token: Union[Account, Address], liquidity: uint256, amountTokenMin: uint256, amountETHMin: uint256, to_: Union[Account, Address], deadline: uint256, approveMax: bool, v: uint8, r: bytes32, s: bytes32, *, from_: Optional[Union[Account, Address, str]] = None, to: Optional[Union[Account, Address, str]] = None, value: Union[int, str] = 0, gas_limit: Optional[Union[int, Literal["max"], Literal["auto"]]] = None, request_type: Literal["call"], gas_price: Optional[Union[int, str]] = None, max_fee_per_gas: Optional[Union[int, str]] = None, max_priority_fee_per_gas: Optional[Union[int, str]] = None, access_list: Optional[Union[Dict[Union[Account, Address, str], List[int]], Literal["auto"]]] = None, type: Optional[int] = None, block: Optional[Union[int, Literal["latest"], Literal["pending"], Literal["earliest"], Literal["safe"], Literal["finalized"]]] = None, confirmations: Optional[int] = None) -> Tuple[uint256, uint256]:
        """
        [Source code](file:///Users/dteiml/p/hacker-dom/woke-uniswap-v2/src/UniswapV2Router02.sol#157)

        Args:
            token: address
            liquidity: uint256
            amountTokenMin: uint256
            amountETHMin: uint256
            to_: address
            deadline: uint256
            approveMax: bool
            v: uint8
            r: bytes32
            s: bytes32
        Returns:
            (uint256, uint256)
        """
        ...

    @overload
    def removeLiquidityETHWithPermit(self, token: Union[Account, Address], liquidity: uint256, amountTokenMin: uint256, amountETHMin: uint256, to_: Union[Account, Address], deadline: uint256, approveMax: bool, v: uint8, r: bytes32, s: bytes32, *, from_: Optional[Union[Account, Address, str]] = None, to: Optional[Union[Account, Address, str]] = None, value: Union[int, str] = 0, gas_limit: Optional[Union[int, Literal["max"], Literal["auto"]]] = None, request_type: Literal["estimate"], gas_price: Optional[Union[int, str]] = None, max_fee_per_gas: Optional[Union[int, str]] = None, max_priority_fee_per_gas: Optional[Union[int, str]] = None, access_list: Optional[Union[Dict[Union[Account, Address, str], List[int]], Literal["auto"]]] = None, type: Optional[int] = None, block: Optional[Union[int, Literal["latest"], Literal["pending"], Literal["earliest"], Literal["safe"], Literal["finalized"]]] = None, confirmations: Optional[int] = None) -> int:
        """
        [Source code](file:///Users/dteiml/p/hacker-dom/woke-uniswap-v2/src/UniswapV2Router02.sol#157)

        Args:
            token: address
            liquidity: uint256
            amountTokenMin: uint256
            amountETHMin: uint256
            to_: address
            deadline: uint256
            approveMax: bool
            v: uint8
            r: bytes32
            s: bytes32
        Returns:
            (uint256, uint256)
        """
        ...

    @overload
    def removeLiquidityETHWithPermit(self, token: Union[Account, Address], liquidity: uint256, amountTokenMin: uint256, amountETHMin: uint256, to_: Union[Account, Address], deadline: uint256, approveMax: bool, v: uint8, r: bytes32, s: bytes32, *, from_: Optional[Union[Account, Address, str]] = None, to: Optional[Union[Account, Address, str]] = None, value: Union[int, str] = 0, gas_limit: Optional[Union[int, Literal["max"], Literal["auto"]]] = None, request_type: Literal["access_list"], gas_price: Optional[Union[int, str]] = None, max_fee_per_gas: Optional[Union[int, str]] = None, max_priority_fee_per_gas: Optional[Union[int, str]] = None, access_list: Optional[Union[Dict[Union[Account, Address, str], List[int]], Literal["auto"]]] = None, type: Optional[int] = None, block: Optional[Union[int, Literal["latest"], Literal["pending"], Literal["earliest"], Literal["safe"], Literal["finalized"]]] = None, confirmations: Optional[int] = None) -> Tuple[Dict[Address, List[int]], int]:
        """
        [Source code](file:///Users/dteiml/p/hacker-dom/woke-uniswap-v2/src/UniswapV2Router02.sol#157)

        Args:
            token: address
            liquidity: uint256
            amountTokenMin: uint256
            amountETHMin: uint256
            to_: address
            deadline: uint256
            approveMax: bool
            v: uint8
            r: bytes32
            s: bytes32
        Returns:
            (uint256, uint256)
        """
        ...

    @overload
    def removeLiquidityETHWithPermit(self, token: Union[Account, Address], liquidity: uint256, amountTokenMin: uint256, amountETHMin: uint256, to_: Union[Account, Address], deadline: uint256, approveMax: bool, v: uint8, r: bytes32, s: bytes32, *, from_: Optional[Union[Account, Address, str]] = None, to: Optional[Union[Account, Address, str]] = None, value: Union[int, str] = 0, gas_limit: Optional[Union[int, Literal["max"], Literal["auto"]]] = None, request_type: Literal["tx"] = "tx", gas_price: Optional[Union[int, str]] = None, max_fee_per_gas: Optional[Union[int, str]] = None, max_priority_fee_per_gas: Optional[Union[int, str]] = None, access_list: Optional[Union[Dict[Union[Account, Address, str], List[int]], Literal["auto"]]] = None, type: Optional[int] = None, block: Optional[Union[int, Literal["latest"], Literal["pending"], Literal["earliest"], Literal["safe"], Literal["finalized"]]] = None, confirmations: Optional[int] = None) -> TransactionAbc[Tuple[uint256, uint256]]:
        """
        [Source code](file:///Users/dteiml/p/hacker-dom/woke-uniswap-v2/src/UniswapV2Router02.sol#157)

        Args:
            token: address
            liquidity: uint256
            amountTokenMin: uint256
            amountETHMin: uint256
            to_: address
            deadline: uint256
            approveMax: bool
            v: uint8
            r: bytes32
            s: bytes32
        Returns:
            (uint256, uint256)
        """
        ...

    def removeLiquidityETHWithPermit(self, token: Union[Account, Address], liquidity: uint256, amountTokenMin: uint256, amountETHMin: uint256, to_: Union[Account, Address], deadline: uint256, approveMax: bool, v: uint8, r: bytes32, s: bytes32, *, from_: Optional[Union[Account, Address, str]] = None, to: Optional[Union[Account, Address, str]] = None, value: Union[int, str] = 0, gas_limit: Optional[Union[int, Literal["max"], Literal["auto"]]] = None, request_type: RequestType = 'tx', gas_price: Optional[Union[int, str]] = None, max_fee_per_gas: Optional[Union[int, str]] = None, max_priority_fee_per_gas: Optional[Union[int, str]] = None, access_list: Optional[Union[Dict[Union[Account, Address, str], List[int]], Literal["auto"]]] = None, type: Optional[int] = None, block: Optional[Union[int, Literal["latest"], Literal["pending"], Literal["earliest"], Literal["safe"], Literal["finalized"]]] = None, confirmations: Optional[int] = None) -> Union[Tuple[uint256, uint256], TransactionAbc[Tuple[uint256, uint256]], int, Tuple[Dict[Address, List[int]], int]]:
        """
        [Source code](file:///Users/dteiml/p/hacker-dom/woke-uniswap-v2/src/UniswapV2Router02.sol#157)

        Args:
            token: address
            liquidity: uint256
            amountTokenMin: uint256
            amountETHMin: uint256
            to_: address
            deadline: uint256
            approveMax: bool
            v: uint8
            r: bytes32
            s: bytes32
        Returns:
            (uint256, uint256)
        """
        return self._execute(self.chain, request_type, "ded9382a", [token, liquidity, amountTokenMin, amountETHMin, to_, deadline, approveMax, v, r, s], True if request_type == "tx" else False, Tuple[uint256, uint256], from_, to if to is not None else str(self.address), value, gas_limit, gas_price, max_fee_per_gas, max_priority_fee_per_gas, access_list, type, block, confirmations)

    @overload
    def removeLiquidityETHSupportingFeeOnTransferTokens(self, token: Union[Account, Address], liquidity: uint256, amountTokenMin: uint256, amountETHMin: uint256, to_: Union[Account, Address], deadline: uint256, *, from_: Optional[Union[Account, Address, str]] = None, to: Optional[Union[Account, Address, str]] = None, value: Union[int, str] = 0, gas_limit: Optional[Union[int, Literal["max"], Literal["auto"]]] = None, request_type: Literal["call"], gas_price: Optional[Union[int, str]] = None, max_fee_per_gas: Optional[Union[int, str]] = None, max_priority_fee_per_gas: Optional[Union[int, str]] = None, access_list: Optional[Union[Dict[Union[Account, Address, str], List[int]], Literal["auto"]]] = None, type: Optional[int] = None, block: Optional[Union[int, Literal["latest"], Literal["pending"], Literal["earliest"], Literal["safe"], Literal["finalized"]]] = None, confirmations: Optional[int] = None) -> uint256:
        """
        [Source code](file:///Users/dteiml/p/hacker-dom/woke-uniswap-v2/src/UniswapV2Router02.sol#173)

        Args:
            token: address
            liquidity: uint256
            amountTokenMin: uint256
            amountETHMin: uint256
            to_: address
            deadline: uint256
        Returns:
            uint256
        """
        ...

    @overload
    def removeLiquidityETHSupportingFeeOnTransferTokens(self, token: Union[Account, Address], liquidity: uint256, amountTokenMin: uint256, amountETHMin: uint256, to_: Union[Account, Address], deadline: uint256, *, from_: Optional[Union[Account, Address, str]] = None, to: Optional[Union[Account, Address, str]] = None, value: Union[int, str] = 0, gas_limit: Optional[Union[int, Literal["max"], Literal["auto"]]] = None, request_type: Literal["estimate"], gas_price: Optional[Union[int, str]] = None, max_fee_per_gas: Optional[Union[int, str]] = None, max_priority_fee_per_gas: Optional[Union[int, str]] = None, access_list: Optional[Union[Dict[Union[Account, Address, str], List[int]], Literal["auto"]]] = None, type: Optional[int] = None, block: Optional[Union[int, Literal["latest"], Literal["pending"], Literal["earliest"], Literal["safe"], Literal["finalized"]]] = None, confirmations: Optional[int] = None) -> int:
        """
        [Source code](file:///Users/dteiml/p/hacker-dom/woke-uniswap-v2/src/UniswapV2Router02.sol#173)

        Args:
            token: address
            liquidity: uint256
            amountTokenMin: uint256
            amountETHMin: uint256
            to_: address
            deadline: uint256
        Returns:
            uint256
        """
        ...

    @overload
    def removeLiquidityETHSupportingFeeOnTransferTokens(self, token: Union[Account, Address], liquidity: uint256, amountTokenMin: uint256, amountETHMin: uint256, to_: Union[Account, Address], deadline: uint256, *, from_: Optional[Union[Account, Address, str]] = None, to: Optional[Union[Account, Address, str]] = None, value: Union[int, str] = 0, gas_limit: Optional[Union[int, Literal["max"], Literal["auto"]]] = None, request_type: Literal["access_list"], gas_price: Optional[Union[int, str]] = None, max_fee_per_gas: Optional[Union[int, str]] = None, max_priority_fee_per_gas: Optional[Union[int, str]] = None, access_list: Optional[Union[Dict[Union[Account, Address, str], List[int]], Literal["auto"]]] = None, type: Optional[int] = None, block: Optional[Union[int, Literal["latest"], Literal["pending"], Literal["earliest"], Literal["safe"], Literal["finalized"]]] = None, confirmations: Optional[int] = None) -> Tuple[Dict[Address, List[int]], int]:
        """
        [Source code](file:///Users/dteiml/p/hacker-dom/woke-uniswap-v2/src/UniswapV2Router02.sol#173)

        Args:
            token: address
            liquidity: uint256
            amountTokenMin: uint256
            amountETHMin: uint256
            to_: address
            deadline: uint256
        Returns:
            uint256
        """
        ...

    @overload
    def removeLiquidityETHSupportingFeeOnTransferTokens(self, token: Union[Account, Address], liquidity: uint256, amountTokenMin: uint256, amountETHMin: uint256, to_: Union[Account, Address], deadline: uint256, *, from_: Optional[Union[Account, Address, str]] = None, to: Optional[Union[Account, Address, str]] = None, value: Union[int, str] = 0, gas_limit: Optional[Union[int, Literal["max"], Literal["auto"]]] = None, request_type: Literal["tx"] = "tx", gas_price: Optional[Union[int, str]] = None, max_fee_per_gas: Optional[Union[int, str]] = None, max_priority_fee_per_gas: Optional[Union[int, str]] = None, access_list: Optional[Union[Dict[Union[Account, Address, str], List[int]], Literal["auto"]]] = None, type: Optional[int] = None, block: Optional[Union[int, Literal["latest"], Literal["pending"], Literal["earliest"], Literal["safe"], Literal["finalized"]]] = None, confirmations: Optional[int] = None) -> TransactionAbc[uint256]:
        """
        [Source code](file:///Users/dteiml/p/hacker-dom/woke-uniswap-v2/src/UniswapV2Router02.sol#173)

        Args:
            token: address
            liquidity: uint256
            amountTokenMin: uint256
            amountETHMin: uint256
            to_: address
            deadline: uint256
        Returns:
            uint256
        """
        ...

    def removeLiquidityETHSupportingFeeOnTransferTokens(self, token: Union[Account, Address], liquidity: uint256, amountTokenMin: uint256, amountETHMin: uint256, to_: Union[Account, Address], deadline: uint256, *, from_: Optional[Union[Account, Address, str]] = None, to: Optional[Union[Account, Address, str]] = None, value: Union[int, str] = 0, gas_limit: Optional[Union[int, Literal["max"], Literal["auto"]]] = None, request_type: RequestType = 'tx', gas_price: Optional[Union[int, str]] = None, max_fee_per_gas: Optional[Union[int, str]] = None, max_priority_fee_per_gas: Optional[Union[int, str]] = None, access_list: Optional[Union[Dict[Union[Account, Address, str], List[int]], Literal["auto"]]] = None, type: Optional[int] = None, block: Optional[Union[int, Literal["latest"], Literal["pending"], Literal["earliest"], Literal["safe"], Literal["finalized"]]] = None, confirmations: Optional[int] = None) -> Union[uint256, TransactionAbc[uint256], int, Tuple[Dict[Address, List[int]], int]]:
        """
        [Source code](file:///Users/dteiml/p/hacker-dom/woke-uniswap-v2/src/UniswapV2Router02.sol#173)

        Args:
            token: address
            liquidity: uint256
            amountTokenMin: uint256
            amountETHMin: uint256
            to_: address
            deadline: uint256
        Returns:
            uint256
        """
        return self._execute(self.chain, request_type, "af2979eb", [token, liquidity, amountTokenMin, amountETHMin, to_, deadline], True if request_type == "tx" else False, uint256, from_, to if to is not None else str(self.address), value, gas_limit, gas_price, max_fee_per_gas, max_priority_fee_per_gas, access_list, type, block, confirmations)

    @overload
    def removeLiquidityETHWithPermitSupportingFeeOnTransferTokens(self, token: Union[Account, Address], liquidity: uint256, amountTokenMin: uint256, amountETHMin: uint256, to_: Union[Account, Address], deadline: uint256, approveMax: bool, v: uint8, r: bytes32, s: bytes32, *, from_: Optional[Union[Account, Address, str]] = None, to: Optional[Union[Account, Address, str]] = None, value: Union[int, str] = 0, gas_limit: Optional[Union[int, Literal["max"], Literal["auto"]]] = None, request_type: Literal["call"], gas_price: Optional[Union[int, str]] = None, max_fee_per_gas: Optional[Union[int, str]] = None, max_priority_fee_per_gas: Optional[Union[int, str]] = None, access_list: Optional[Union[Dict[Union[Account, Address, str], List[int]], Literal["auto"]]] = None, type: Optional[int] = None, block: Optional[Union[int, Literal["latest"], Literal["pending"], Literal["earliest"], Literal["safe"], Literal["finalized"]]] = None, confirmations: Optional[int] = None) -> uint256:
        """
        [Source code](file:///Users/dteiml/p/hacker-dom/woke-uniswap-v2/src/UniswapV2Router02.sol#194)

        Args:
            token: address
            liquidity: uint256
            amountTokenMin: uint256
            amountETHMin: uint256
            to_: address
            deadline: uint256
            approveMax: bool
            v: uint8
            r: bytes32
            s: bytes32
        Returns:
            uint256
        """
        ...

    @overload
    def removeLiquidityETHWithPermitSupportingFeeOnTransferTokens(self, token: Union[Account, Address], liquidity: uint256, amountTokenMin: uint256, amountETHMin: uint256, to_: Union[Account, Address], deadline: uint256, approveMax: bool, v: uint8, r: bytes32, s: bytes32, *, from_: Optional[Union[Account, Address, str]] = None, to: Optional[Union[Account, Address, str]] = None, value: Union[int, str] = 0, gas_limit: Optional[Union[int, Literal["max"], Literal["auto"]]] = None, request_type: Literal["estimate"], gas_price: Optional[Union[int, str]] = None, max_fee_per_gas: Optional[Union[int, str]] = None, max_priority_fee_per_gas: Optional[Union[int, str]] = None, access_list: Optional[Union[Dict[Union[Account, Address, str], List[int]], Literal["auto"]]] = None, type: Optional[int] = None, block: Optional[Union[int, Literal["latest"], Literal["pending"], Literal["earliest"], Literal["safe"], Literal["finalized"]]] = None, confirmations: Optional[int] = None) -> int:
        """
        [Source code](file:///Users/dteiml/p/hacker-dom/woke-uniswap-v2/src/UniswapV2Router02.sol#194)

        Args:
            token: address
            liquidity: uint256
            amountTokenMin: uint256
            amountETHMin: uint256
            to_: address
            deadline: uint256
            approveMax: bool
            v: uint8
            r: bytes32
            s: bytes32
        Returns:
            uint256
        """
        ...

    @overload
    def removeLiquidityETHWithPermitSupportingFeeOnTransferTokens(self, token: Union[Account, Address], liquidity: uint256, amountTokenMin: uint256, amountETHMin: uint256, to_: Union[Account, Address], deadline: uint256, approveMax: bool, v: uint8, r: bytes32, s: bytes32, *, from_: Optional[Union[Account, Address, str]] = None, to: Optional[Union[Account, Address, str]] = None, value: Union[int, str] = 0, gas_limit: Optional[Union[int, Literal["max"], Literal["auto"]]] = None, request_type: Literal["access_list"], gas_price: Optional[Union[int, str]] = None, max_fee_per_gas: Optional[Union[int, str]] = None, max_priority_fee_per_gas: Optional[Union[int, str]] = None, access_list: Optional[Union[Dict[Union[Account, Address, str], List[int]], Literal["auto"]]] = None, type: Optional[int] = None, block: Optional[Union[int, Literal["latest"], Literal["pending"], Literal["earliest"], Literal["safe"], Literal["finalized"]]] = None, confirmations: Optional[int] = None) -> Tuple[Dict[Address, List[int]], int]:
        """
        [Source code](file:///Users/dteiml/p/hacker-dom/woke-uniswap-v2/src/UniswapV2Router02.sol#194)

        Args:
            token: address
            liquidity: uint256
            amountTokenMin: uint256
            amountETHMin: uint256
            to_: address
            deadline: uint256
            approveMax: bool
            v: uint8
            r: bytes32
            s: bytes32
        Returns:
            uint256
        """
        ...

    @overload
    def removeLiquidityETHWithPermitSupportingFeeOnTransferTokens(self, token: Union[Account, Address], liquidity: uint256, amountTokenMin: uint256, amountETHMin: uint256, to_: Union[Account, Address], deadline: uint256, approveMax: bool, v: uint8, r: bytes32, s: bytes32, *, from_: Optional[Union[Account, Address, str]] = None, to: Optional[Union[Account, Address, str]] = None, value: Union[int, str] = 0, gas_limit: Optional[Union[int, Literal["max"], Literal["auto"]]] = None, request_type: Literal["tx"] = "tx", gas_price: Optional[Union[int, str]] = None, max_fee_per_gas: Optional[Union[int, str]] = None, max_priority_fee_per_gas: Optional[Union[int, str]] = None, access_list: Optional[Union[Dict[Union[Account, Address, str], List[int]], Literal["auto"]]] = None, type: Optional[int] = None, block: Optional[Union[int, Literal["latest"], Literal["pending"], Literal["earliest"], Literal["safe"], Literal["finalized"]]] = None, confirmations: Optional[int] = None) -> TransactionAbc[uint256]:
        """
        [Source code](file:///Users/dteiml/p/hacker-dom/woke-uniswap-v2/src/UniswapV2Router02.sol#194)

        Args:
            token: address
            liquidity: uint256
            amountTokenMin: uint256
            amountETHMin: uint256
            to_: address
            deadline: uint256
            approveMax: bool
            v: uint8
            r: bytes32
            s: bytes32
        Returns:
            uint256
        """
        ...

    def removeLiquidityETHWithPermitSupportingFeeOnTransferTokens(self, token: Union[Account, Address], liquidity: uint256, amountTokenMin: uint256, amountETHMin: uint256, to_: Union[Account, Address], deadline: uint256, approveMax: bool, v: uint8, r: bytes32, s: bytes32, *, from_: Optional[Union[Account, Address, str]] = None, to: Optional[Union[Account, Address, str]] = None, value: Union[int, str] = 0, gas_limit: Optional[Union[int, Literal["max"], Literal["auto"]]] = None, request_type: RequestType = 'tx', gas_price: Optional[Union[int, str]] = None, max_fee_per_gas: Optional[Union[int, str]] = None, max_priority_fee_per_gas: Optional[Union[int, str]] = None, access_list: Optional[Union[Dict[Union[Account, Address, str], List[int]], Literal["auto"]]] = None, type: Optional[int] = None, block: Optional[Union[int, Literal["latest"], Literal["pending"], Literal["earliest"], Literal["safe"], Literal["finalized"]]] = None, confirmations: Optional[int] = None) -> Union[uint256, TransactionAbc[uint256], int, Tuple[Dict[Address, List[int]], int]]:
        """
        [Source code](file:///Users/dteiml/p/hacker-dom/woke-uniswap-v2/src/UniswapV2Router02.sol#194)

        Args:
            token: address
            liquidity: uint256
            amountTokenMin: uint256
            amountETHMin: uint256
            to_: address
            deadline: uint256
            approveMax: bool
            v: uint8
            r: bytes32
            s: bytes32
        Returns:
            uint256
        """
        return self._execute(self.chain, request_type, "5b0d5984", [token, liquidity, amountTokenMin, amountETHMin, to_, deadline, approveMax, v, r, s], True if request_type == "tx" else False, uint256, from_, to if to is not None else str(self.address), value, gas_limit, gas_price, max_fee_per_gas, max_priority_fee_per_gas, access_list, type, block, confirmations)

    @overload
    def swapExactTokensForTokens(self, amountIn: uint256, amountOutMin: uint256, path: List[Union[Account, Address]], to_: Union[Account, Address], deadline: uint256, *, from_: Optional[Union[Account, Address, str]] = None, to: Optional[Union[Account, Address, str]] = None, value: Union[int, str] = 0, gas_limit: Optional[Union[int, Literal["max"], Literal["auto"]]] = None, request_type: Literal["call"], gas_price: Optional[Union[int, str]] = None, max_fee_per_gas: Optional[Union[int, str]] = None, max_priority_fee_per_gas: Optional[Union[int, str]] = None, access_list: Optional[Union[Dict[Union[Account, Address, str], List[int]], Literal["auto"]]] = None, type: Optional[int] = None, block: Optional[Union[int, Literal["latest"], Literal["pending"], Literal["earliest"], Literal["safe"], Literal["finalized"]]] = None, confirmations: Optional[int] = None) -> List[uint256]:
        """
        [Source code](file:///Users/dteiml/p/hacker-dom/woke-uniswap-v2/src/UniswapV2Router02.sol#228)

        Args:
            amountIn: uint256
            amountOutMin: uint256
            path: address[]
            to_: address
            deadline: uint256
        Returns:
            uint256[]
        """
        ...

    @overload
    def swapExactTokensForTokens(self, amountIn: uint256, amountOutMin: uint256, path: List[Union[Account, Address]], to_: Union[Account, Address], deadline: uint256, *, from_: Optional[Union[Account, Address, str]] = None, to: Optional[Union[Account, Address, str]] = None, value: Union[int, str] = 0, gas_limit: Optional[Union[int, Literal["max"], Literal["auto"]]] = None, request_type: Literal["estimate"], gas_price: Optional[Union[int, str]] = None, max_fee_per_gas: Optional[Union[int, str]] = None, max_priority_fee_per_gas: Optional[Union[int, str]] = None, access_list: Optional[Union[Dict[Union[Account, Address, str], List[int]], Literal["auto"]]] = None, type: Optional[int] = None, block: Optional[Union[int, Literal["latest"], Literal["pending"], Literal["earliest"], Literal["safe"], Literal["finalized"]]] = None, confirmations: Optional[int] = None) -> int:
        """
        [Source code](file:///Users/dteiml/p/hacker-dom/woke-uniswap-v2/src/UniswapV2Router02.sol#228)

        Args:
            amountIn: uint256
            amountOutMin: uint256
            path: address[]
            to_: address
            deadline: uint256
        Returns:
            uint256[]
        """
        ...

    @overload
    def swapExactTokensForTokens(self, amountIn: uint256, amountOutMin: uint256, path: List[Union[Account, Address]], to_: Union[Account, Address], deadline: uint256, *, from_: Optional[Union[Account, Address, str]] = None, to: Optional[Union[Account, Address, str]] = None, value: Union[int, str] = 0, gas_limit: Optional[Union[int, Literal["max"], Literal["auto"]]] = None, request_type: Literal["access_list"], gas_price: Optional[Union[int, str]] = None, max_fee_per_gas: Optional[Union[int, str]] = None, max_priority_fee_per_gas: Optional[Union[int, str]] = None, access_list: Optional[Union[Dict[Union[Account, Address, str], List[int]], Literal["auto"]]] = None, type: Optional[int] = None, block: Optional[Union[int, Literal["latest"], Literal["pending"], Literal["earliest"], Literal["safe"], Literal["finalized"]]] = None, confirmations: Optional[int] = None) -> Tuple[Dict[Address, List[int]], int]:
        """
        [Source code](file:///Users/dteiml/p/hacker-dom/woke-uniswap-v2/src/UniswapV2Router02.sol#228)

        Args:
            amountIn: uint256
            amountOutMin: uint256
            path: address[]
            to_: address
            deadline: uint256
        Returns:
            uint256[]
        """
        ...

    @overload
    def swapExactTokensForTokens(self, amountIn: uint256, amountOutMin: uint256, path: List[Union[Account, Address]], to_: Union[Account, Address], deadline: uint256, *, from_: Optional[Union[Account, Address, str]] = None, to: Optional[Union[Account, Address, str]] = None, value: Union[int, str] = 0, gas_limit: Optional[Union[int, Literal["max"], Literal["auto"]]] = None, request_type: Literal["tx"] = "tx", gas_price: Optional[Union[int, str]] = None, max_fee_per_gas: Optional[Union[int, str]] = None, max_priority_fee_per_gas: Optional[Union[int, str]] = None, access_list: Optional[Union[Dict[Union[Account, Address, str], List[int]], Literal["auto"]]] = None, type: Optional[int] = None, block: Optional[Union[int, Literal["latest"], Literal["pending"], Literal["earliest"], Literal["safe"], Literal["finalized"]]] = None, confirmations: Optional[int] = None) -> TransactionAbc[List[uint256]]:
        """
        [Source code](file:///Users/dteiml/p/hacker-dom/woke-uniswap-v2/src/UniswapV2Router02.sol#228)

        Args:
            amountIn: uint256
            amountOutMin: uint256
            path: address[]
            to_: address
            deadline: uint256
        Returns:
            uint256[]
        """
        ...

    def swapExactTokensForTokens(self, amountIn: uint256, amountOutMin: uint256, path: List[Union[Account, Address]], to_: Union[Account, Address], deadline: uint256, *, from_: Optional[Union[Account, Address, str]] = None, to: Optional[Union[Account, Address, str]] = None, value: Union[int, str] = 0, gas_limit: Optional[Union[int, Literal["max"], Literal["auto"]]] = None, request_type: RequestType = 'tx', gas_price: Optional[Union[int, str]] = None, max_fee_per_gas: Optional[Union[int, str]] = None, max_priority_fee_per_gas: Optional[Union[int, str]] = None, access_list: Optional[Union[Dict[Union[Account, Address, str], List[int]], Literal["auto"]]] = None, type: Optional[int] = None, block: Optional[Union[int, Literal["latest"], Literal["pending"], Literal["earliest"], Literal["safe"], Literal["finalized"]]] = None, confirmations: Optional[int] = None) -> Union[List[uint256], TransactionAbc[List[uint256]], int, Tuple[Dict[Address, List[int]], int]]:
        """
        [Source code](file:///Users/dteiml/p/hacker-dom/woke-uniswap-v2/src/UniswapV2Router02.sol#228)

        Args:
            amountIn: uint256
            amountOutMin: uint256
            path: address[]
            to_: address
            deadline: uint256
        Returns:
            uint256[]
        """
        return self._execute(self.chain, request_type, "38ed1739", [amountIn, amountOutMin, path, to_, deadline], True if request_type == "tx" else False, List[uint256], from_, to if to is not None else str(self.address), value, gas_limit, gas_price, max_fee_per_gas, max_priority_fee_per_gas, access_list, type, block, confirmations)

    @overload
    def swapTokensForExactTokens(self, amountOut: uint256, amountInMax: uint256, path: List[Union[Account, Address]], to_: Union[Account, Address], deadline: uint256, *, from_: Optional[Union[Account, Address, str]] = None, to: Optional[Union[Account, Address, str]] = None, value: Union[int, str] = 0, gas_limit: Optional[Union[int, Literal["max"], Literal["auto"]]] = None, request_type: Literal["call"], gas_price: Optional[Union[int, str]] = None, max_fee_per_gas: Optional[Union[int, str]] = None, max_priority_fee_per_gas: Optional[Union[int, str]] = None, access_list: Optional[Union[Dict[Union[Account, Address, str], List[int]], Literal["auto"]]] = None, type: Optional[int] = None, block: Optional[Union[int, Literal["latest"], Literal["pending"], Literal["earliest"], Literal["safe"], Literal["finalized"]]] = None, confirmations: Optional[int] = None) -> List[uint256]:
        """
        [Source code](file:///Users/dteiml/p/hacker-dom/woke-uniswap-v2/src/UniswapV2Router02.sol#245)

        Args:
            amountOut: uint256
            amountInMax: uint256
            path: address[]
            to_: address
            deadline: uint256
        Returns:
            uint256[]
        """
        ...

    @overload
    def swapTokensForExactTokens(self, amountOut: uint256, amountInMax: uint256, path: List[Union[Account, Address]], to_: Union[Account, Address], deadline: uint256, *, from_: Optional[Union[Account, Address, str]] = None, to: Optional[Union[Account, Address, str]] = None, value: Union[int, str] = 0, gas_limit: Optional[Union[int, Literal["max"], Literal["auto"]]] = None, request_type: Literal["estimate"], gas_price: Optional[Union[int, str]] = None, max_fee_per_gas: Optional[Union[int, str]] = None, max_priority_fee_per_gas: Optional[Union[int, str]] = None, access_list: Optional[Union[Dict[Union[Account, Address, str], List[int]], Literal["auto"]]] = None, type: Optional[int] = None, block: Optional[Union[int, Literal["latest"], Literal["pending"], Literal["earliest"], Literal["safe"], Literal["finalized"]]] = None, confirmations: Optional[int] = None) -> int:
        """
        [Source code](file:///Users/dteiml/p/hacker-dom/woke-uniswap-v2/src/UniswapV2Router02.sol#245)

        Args:
            amountOut: uint256
            amountInMax: uint256
            path: address[]
            to_: address
            deadline: uint256
        Returns:
            uint256[]
        """
        ...

    @overload
    def swapTokensForExactTokens(self, amountOut: uint256, amountInMax: uint256, path: List[Union[Account, Address]], to_: Union[Account, Address], deadline: uint256, *, from_: Optional[Union[Account, Address, str]] = None, to: Optional[Union[Account, Address, str]] = None, value: Union[int, str] = 0, gas_limit: Optional[Union[int, Literal["max"], Literal["auto"]]] = None, request_type: Literal["access_list"], gas_price: Optional[Union[int, str]] = None, max_fee_per_gas: Optional[Union[int, str]] = None, max_priority_fee_per_gas: Optional[Union[int, str]] = None, access_list: Optional[Union[Dict[Union[Account, Address, str], List[int]], Literal["auto"]]] = None, type: Optional[int] = None, block: Optional[Union[int, Literal["latest"], Literal["pending"], Literal["earliest"], Literal["safe"], Literal["finalized"]]] = None, confirmations: Optional[int] = None) -> Tuple[Dict[Address, List[int]], int]:
        """
        [Source code](file:///Users/dteiml/p/hacker-dom/woke-uniswap-v2/src/UniswapV2Router02.sol#245)

        Args:
            amountOut: uint256
            amountInMax: uint256
            path: address[]
            to_: address
            deadline: uint256
        Returns:
            uint256[]
        """
        ...

    @overload
    def swapTokensForExactTokens(self, amountOut: uint256, amountInMax: uint256, path: List[Union[Account, Address]], to_: Union[Account, Address], deadline: uint256, *, from_: Optional[Union[Account, Address, str]] = None, to: Optional[Union[Account, Address, str]] = None, value: Union[int, str] = 0, gas_limit: Optional[Union[int, Literal["max"], Literal["auto"]]] = None, request_type: Literal["tx"] = "tx", gas_price: Optional[Union[int, str]] = None, max_fee_per_gas: Optional[Union[int, str]] = None, max_priority_fee_per_gas: Optional[Union[int, str]] = None, access_list: Optional[Union[Dict[Union[Account, Address, str], List[int]], Literal["auto"]]] = None, type: Optional[int] = None, block: Optional[Union[int, Literal["latest"], Literal["pending"], Literal["earliest"], Literal["safe"], Literal["finalized"]]] = None, confirmations: Optional[int] = None) -> TransactionAbc[List[uint256]]:
        """
        [Source code](file:///Users/dteiml/p/hacker-dom/woke-uniswap-v2/src/UniswapV2Router02.sol#245)

        Args:
            amountOut: uint256
            amountInMax: uint256
            path: address[]
            to_: address
            deadline: uint256
        Returns:
            uint256[]
        """
        ...

    def swapTokensForExactTokens(self, amountOut: uint256, amountInMax: uint256, path: List[Union[Account, Address]], to_: Union[Account, Address], deadline: uint256, *, from_: Optional[Union[Account, Address, str]] = None, to: Optional[Union[Account, Address, str]] = None, value: Union[int, str] = 0, gas_limit: Optional[Union[int, Literal["max"], Literal["auto"]]] = None, request_type: RequestType = 'tx', gas_price: Optional[Union[int, str]] = None, max_fee_per_gas: Optional[Union[int, str]] = None, max_priority_fee_per_gas: Optional[Union[int, str]] = None, access_list: Optional[Union[Dict[Union[Account, Address, str], List[int]], Literal["auto"]]] = None, type: Optional[int] = None, block: Optional[Union[int, Literal["latest"], Literal["pending"], Literal["earliest"], Literal["safe"], Literal["finalized"]]] = None, confirmations: Optional[int] = None) -> Union[List[uint256], TransactionAbc[List[uint256]], int, Tuple[Dict[Address, List[int]], int]]:
        """
        [Source code](file:///Users/dteiml/p/hacker-dom/woke-uniswap-v2/src/UniswapV2Router02.sol#245)

        Args:
            amountOut: uint256
            amountInMax: uint256
            path: address[]
            to_: address
            deadline: uint256
        Returns:
            uint256[]
        """
        return self._execute(self.chain, request_type, "8803dbee", [amountOut, amountInMax, path, to_, deadline], True if request_type == "tx" else False, List[uint256], from_, to if to is not None else str(self.address), value, gas_limit, gas_price, max_fee_per_gas, max_priority_fee_per_gas, access_list, type, block, confirmations)

    @overload
    def swapExactETHForTokens(self, amountOutMin: uint256, path: List[Union[Account, Address]], to_: Union[Account, Address], deadline: uint256, *, from_: Optional[Union[Account, Address, str]] = None, to: Optional[Union[Account, Address, str]] = None, value: Union[int, str] = 0, gas_limit: Optional[Union[int, Literal["max"], Literal["auto"]]] = None, request_type: Literal["call"], gas_price: Optional[Union[int, str]] = None, max_fee_per_gas: Optional[Union[int, str]] = None, max_priority_fee_per_gas: Optional[Union[int, str]] = None, access_list: Optional[Union[Dict[Union[Account, Address, str], List[int]], Literal["auto"]]] = None, type: Optional[int] = None, block: Optional[Union[int, Literal["latest"], Literal["pending"], Literal["earliest"], Literal["safe"], Literal["finalized"]]] = None, confirmations: Optional[int] = None) -> List[uint256]:
        """
        [Source code](file:///Users/dteiml/p/hacker-dom/woke-uniswap-v2/src/UniswapV2Router02.sol#259)

        Args:
            amountOutMin: uint256
            path: address[]
            to_: address
            deadline: uint256
        Returns:
            uint256[]
        """
        ...

    @overload
    def swapExactETHForTokens(self, amountOutMin: uint256, path: List[Union[Account, Address]], to_: Union[Account, Address], deadline: uint256, *, from_: Optional[Union[Account, Address, str]] = None, to: Optional[Union[Account, Address, str]] = None, value: Union[int, str] = 0, gas_limit: Optional[Union[int, Literal["max"], Literal["auto"]]] = None, request_type: Literal["estimate"], gas_price: Optional[Union[int, str]] = None, max_fee_per_gas: Optional[Union[int, str]] = None, max_priority_fee_per_gas: Optional[Union[int, str]] = None, access_list: Optional[Union[Dict[Union[Account, Address, str], List[int]], Literal["auto"]]] = None, type: Optional[int] = None, block: Optional[Union[int, Literal["latest"], Literal["pending"], Literal["earliest"], Literal["safe"], Literal["finalized"]]] = None, confirmations: Optional[int] = None) -> int:
        """
        [Source code](file:///Users/dteiml/p/hacker-dom/woke-uniswap-v2/src/UniswapV2Router02.sol#259)

        Args:
            amountOutMin: uint256
            path: address[]
            to_: address
            deadline: uint256
        Returns:
            uint256[]
        """
        ...

    @overload
    def swapExactETHForTokens(self, amountOutMin: uint256, path: List[Union[Account, Address]], to_: Union[Account, Address], deadline: uint256, *, from_: Optional[Union[Account, Address, str]] = None, to: Optional[Union[Account, Address, str]] = None, value: Union[int, str] = 0, gas_limit: Optional[Union[int, Literal["max"], Literal["auto"]]] = None, request_type: Literal["access_list"], gas_price: Optional[Union[int, str]] = None, max_fee_per_gas: Optional[Union[int, str]] = None, max_priority_fee_per_gas: Optional[Union[int, str]] = None, access_list: Optional[Union[Dict[Union[Account, Address, str], List[int]], Literal["auto"]]] = None, type: Optional[int] = None, block: Optional[Union[int, Literal["latest"], Literal["pending"], Literal["earliest"], Literal["safe"], Literal["finalized"]]] = None, confirmations: Optional[int] = None) -> Tuple[Dict[Address, List[int]], int]:
        """
        [Source code](file:///Users/dteiml/p/hacker-dom/woke-uniswap-v2/src/UniswapV2Router02.sol#259)

        Args:
            amountOutMin: uint256
            path: address[]
            to_: address
            deadline: uint256
        Returns:
            uint256[]
        """
        ...

    @overload
    def swapExactETHForTokens(self, amountOutMin: uint256, path: List[Union[Account, Address]], to_: Union[Account, Address], deadline: uint256, *, from_: Optional[Union[Account, Address, str]] = None, to: Optional[Union[Account, Address, str]] = None, value: Union[int, str] = 0, gas_limit: Optional[Union[int, Literal["max"], Literal["auto"]]] = None, request_type: Literal["tx"] = "tx", gas_price: Optional[Union[int, str]] = None, max_fee_per_gas: Optional[Union[int, str]] = None, max_priority_fee_per_gas: Optional[Union[int, str]] = None, access_list: Optional[Union[Dict[Union[Account, Address, str], List[int]], Literal["auto"]]] = None, type: Optional[int] = None, block: Optional[Union[int, Literal["latest"], Literal["pending"], Literal["earliest"], Literal["safe"], Literal["finalized"]]] = None, confirmations: Optional[int] = None) -> TransactionAbc[List[uint256]]:
        """
        [Source code](file:///Users/dteiml/p/hacker-dom/woke-uniswap-v2/src/UniswapV2Router02.sol#259)

        Args:
            amountOutMin: uint256
            path: address[]
            to_: address
            deadline: uint256
        Returns:
            uint256[]
        """
        ...

    def swapExactETHForTokens(self, amountOutMin: uint256, path: List[Union[Account, Address]], to_: Union[Account, Address], deadline: uint256, *, from_: Optional[Union[Account, Address, str]] = None, to: Optional[Union[Account, Address, str]] = None, value: Union[int, str] = 0, gas_limit: Optional[Union[int, Literal["max"], Literal["auto"]]] = None, request_type: RequestType = 'tx', gas_price: Optional[Union[int, str]] = None, max_fee_per_gas: Optional[Union[int, str]] = None, max_priority_fee_per_gas: Optional[Union[int, str]] = None, access_list: Optional[Union[Dict[Union[Account, Address, str], List[int]], Literal["auto"]]] = None, type: Optional[int] = None, block: Optional[Union[int, Literal["latest"], Literal["pending"], Literal["earliest"], Literal["safe"], Literal["finalized"]]] = None, confirmations: Optional[int] = None) -> Union[List[uint256], TransactionAbc[List[uint256]], int, Tuple[Dict[Address, List[int]], int]]:
        """
        [Source code](file:///Users/dteiml/p/hacker-dom/woke-uniswap-v2/src/UniswapV2Router02.sol#259)

        Args:
            amountOutMin: uint256
            path: address[]
            to_: address
            deadline: uint256
        Returns:
            uint256[]
        """
        return self._execute(self.chain, request_type, "7ff36ab5", [amountOutMin, path, to_, deadline], True if request_type == "tx" else False, List[uint256], from_, to if to is not None else str(self.address), value, gas_limit, gas_price, max_fee_per_gas, max_priority_fee_per_gas, access_list, type, block, confirmations)

    @overload
    def swapTokensForExactETH(self, amountOut: uint256, amountInMax: uint256, path: List[Union[Account, Address]], to_: Union[Account, Address], deadline: uint256, *, from_: Optional[Union[Account, Address, str]] = None, to: Optional[Union[Account, Address, str]] = None, value: Union[int, str] = 0, gas_limit: Optional[Union[int, Literal["max"], Literal["auto"]]] = None, request_type: Literal["call"], gas_price: Optional[Union[int, str]] = None, max_fee_per_gas: Optional[Union[int, str]] = None, max_priority_fee_per_gas: Optional[Union[int, str]] = None, access_list: Optional[Union[Dict[Union[Account, Address, str], List[int]], Literal["auto"]]] = None, type: Optional[int] = None, block: Optional[Union[int, Literal["latest"], Literal["pending"], Literal["earliest"], Literal["safe"], Literal["finalized"]]] = None, confirmations: Optional[int] = None) -> List[uint256]:
        """
        [Source code](file:///Users/dteiml/p/hacker-dom/woke-uniswap-v2/src/UniswapV2Router02.sol#273)

        Args:
            amountOut: uint256
            amountInMax: uint256
            path: address[]
            to_: address
            deadline: uint256
        Returns:
            uint256[]
        """
        ...

    @overload
    def swapTokensForExactETH(self, amountOut: uint256, amountInMax: uint256, path: List[Union[Account, Address]], to_: Union[Account, Address], deadline: uint256, *, from_: Optional[Union[Account, Address, str]] = None, to: Optional[Union[Account, Address, str]] = None, value: Union[int, str] = 0, gas_limit: Optional[Union[int, Literal["max"], Literal["auto"]]] = None, request_type: Literal["estimate"], gas_price: Optional[Union[int, str]] = None, max_fee_per_gas: Optional[Union[int, str]] = None, max_priority_fee_per_gas: Optional[Union[int, str]] = None, access_list: Optional[Union[Dict[Union[Account, Address, str], List[int]], Literal["auto"]]] = None, type: Optional[int] = None, block: Optional[Union[int, Literal["latest"], Literal["pending"], Literal["earliest"], Literal["safe"], Literal["finalized"]]] = None, confirmations: Optional[int] = None) -> int:
        """
        [Source code](file:///Users/dteiml/p/hacker-dom/woke-uniswap-v2/src/UniswapV2Router02.sol#273)

        Args:
            amountOut: uint256
            amountInMax: uint256
            path: address[]
            to_: address
            deadline: uint256
        Returns:
            uint256[]
        """
        ...

    @overload
    def swapTokensForExactETH(self, amountOut: uint256, amountInMax: uint256, path: List[Union[Account, Address]], to_: Union[Account, Address], deadline: uint256, *, from_: Optional[Union[Account, Address, str]] = None, to: Optional[Union[Account, Address, str]] = None, value: Union[int, str] = 0, gas_limit: Optional[Union[int, Literal["max"], Literal["auto"]]] = None, request_type: Literal["access_list"], gas_price: Optional[Union[int, str]] = None, max_fee_per_gas: Optional[Union[int, str]] = None, max_priority_fee_per_gas: Optional[Union[int, str]] = None, access_list: Optional[Union[Dict[Union[Account, Address, str], List[int]], Literal["auto"]]] = None, type: Optional[int] = None, block: Optional[Union[int, Literal["latest"], Literal["pending"], Literal["earliest"], Literal["safe"], Literal["finalized"]]] = None, confirmations: Optional[int] = None) -> Tuple[Dict[Address, List[int]], int]:
        """
        [Source code](file:///Users/dteiml/p/hacker-dom/woke-uniswap-v2/src/UniswapV2Router02.sol#273)

        Args:
            amountOut: uint256
            amountInMax: uint256
            path: address[]
            to_: address
            deadline: uint256
        Returns:
            uint256[]
        """
        ...

    @overload
    def swapTokensForExactETH(self, amountOut: uint256, amountInMax: uint256, path: List[Union[Account, Address]], to_: Union[Account, Address], deadline: uint256, *, from_: Optional[Union[Account, Address, str]] = None, to: Optional[Union[Account, Address, str]] = None, value: Union[int, str] = 0, gas_limit: Optional[Union[int, Literal["max"], Literal["auto"]]] = None, request_type: Literal["tx"] = "tx", gas_price: Optional[Union[int, str]] = None, max_fee_per_gas: Optional[Union[int, str]] = None, max_priority_fee_per_gas: Optional[Union[int, str]] = None, access_list: Optional[Union[Dict[Union[Account, Address, str], List[int]], Literal["auto"]]] = None, type: Optional[int] = None, block: Optional[Union[int, Literal["latest"], Literal["pending"], Literal["earliest"], Literal["safe"], Literal["finalized"]]] = None, confirmations: Optional[int] = None) -> TransactionAbc[List[uint256]]:
        """
        [Source code](file:///Users/dteiml/p/hacker-dom/woke-uniswap-v2/src/UniswapV2Router02.sol#273)

        Args:
            amountOut: uint256
            amountInMax: uint256
            path: address[]
            to_: address
            deadline: uint256
        Returns:
            uint256[]
        """
        ...

    def swapTokensForExactETH(self, amountOut: uint256, amountInMax: uint256, path: List[Union[Account, Address]], to_: Union[Account, Address], deadline: uint256, *, from_: Optional[Union[Account, Address, str]] = None, to: Optional[Union[Account, Address, str]] = None, value: Union[int, str] = 0, gas_limit: Optional[Union[int, Literal["max"], Literal["auto"]]] = None, request_type: RequestType = 'tx', gas_price: Optional[Union[int, str]] = None, max_fee_per_gas: Optional[Union[int, str]] = None, max_priority_fee_per_gas: Optional[Union[int, str]] = None, access_list: Optional[Union[Dict[Union[Account, Address, str], List[int]], Literal["auto"]]] = None, type: Optional[int] = None, block: Optional[Union[int, Literal["latest"], Literal["pending"], Literal["earliest"], Literal["safe"], Literal["finalized"]]] = None, confirmations: Optional[int] = None) -> Union[List[uint256], TransactionAbc[List[uint256]], int, Tuple[Dict[Address, List[int]], int]]:
        """
        [Source code](file:///Users/dteiml/p/hacker-dom/woke-uniswap-v2/src/UniswapV2Router02.sol#273)

        Args:
            amountOut: uint256
            amountInMax: uint256
            path: address[]
            to_: address
            deadline: uint256
        Returns:
            uint256[]
        """
        return self._execute(self.chain, request_type, "4a25d94a", [amountOut, amountInMax, path, to_, deadline], True if request_type == "tx" else False, List[uint256], from_, to if to is not None else str(self.address), value, gas_limit, gas_price, max_fee_per_gas, max_priority_fee_per_gas, access_list, type, block, confirmations)

    @overload
    def swapExactTokensForETH(self, amountIn: uint256, amountOutMin: uint256, path: List[Union[Account, Address]], to_: Union[Account, Address], deadline: uint256, *, from_: Optional[Union[Account, Address, str]] = None, to: Optional[Union[Account, Address, str]] = None, value: Union[int, str] = 0, gas_limit: Optional[Union[int, Literal["max"], Literal["auto"]]] = None, request_type: Literal["call"], gas_price: Optional[Union[int, str]] = None, max_fee_per_gas: Optional[Union[int, str]] = None, max_priority_fee_per_gas: Optional[Union[int, str]] = None, access_list: Optional[Union[Dict[Union[Account, Address, str], List[int]], Literal["auto"]]] = None, type: Optional[int] = None, block: Optional[Union[int, Literal["latest"], Literal["pending"], Literal["earliest"], Literal["safe"], Literal["finalized"]]] = None, confirmations: Optional[int] = None) -> List[uint256]:
        """
        [Source code](file:///Users/dteiml/p/hacker-dom/woke-uniswap-v2/src/UniswapV2Router02.sol#289)

        Args:
            amountIn: uint256
            amountOutMin: uint256
            path: address[]
            to_: address
            deadline: uint256
        Returns:
            uint256[]
        """
        ...

    @overload
    def swapExactTokensForETH(self, amountIn: uint256, amountOutMin: uint256, path: List[Union[Account, Address]], to_: Union[Account, Address], deadline: uint256, *, from_: Optional[Union[Account, Address, str]] = None, to: Optional[Union[Account, Address, str]] = None, value: Union[int, str] = 0, gas_limit: Optional[Union[int, Literal["max"], Literal["auto"]]] = None, request_type: Literal["estimate"], gas_price: Optional[Union[int, str]] = None, max_fee_per_gas: Optional[Union[int, str]] = None, max_priority_fee_per_gas: Optional[Union[int, str]] = None, access_list: Optional[Union[Dict[Union[Account, Address, str], List[int]], Literal["auto"]]] = None, type: Optional[int] = None, block: Optional[Union[int, Literal["latest"], Literal["pending"], Literal["earliest"], Literal["safe"], Literal["finalized"]]] = None, confirmations: Optional[int] = None) -> int:
        """
        [Source code](file:///Users/dteiml/p/hacker-dom/woke-uniswap-v2/src/UniswapV2Router02.sol#289)

        Args:
            amountIn: uint256
            amountOutMin: uint256
            path: address[]
            to_: address
            deadline: uint256
        Returns:
            uint256[]
        """
        ...

    @overload
    def swapExactTokensForETH(self, amountIn: uint256, amountOutMin: uint256, path: List[Union[Account, Address]], to_: Union[Account, Address], deadline: uint256, *, from_: Optional[Union[Account, Address, str]] = None, to: Optional[Union[Account, Address, str]] = None, value: Union[int, str] = 0, gas_limit: Optional[Union[int, Literal["max"], Literal["auto"]]] = None, request_type: Literal["access_list"], gas_price: Optional[Union[int, str]] = None, max_fee_per_gas: Optional[Union[int, str]] = None, max_priority_fee_per_gas: Optional[Union[int, str]] = None, access_list: Optional[Union[Dict[Union[Account, Address, str], List[int]], Literal["auto"]]] = None, type: Optional[int] = None, block: Optional[Union[int, Literal["latest"], Literal["pending"], Literal["earliest"], Literal["safe"], Literal["finalized"]]] = None, confirmations: Optional[int] = None) -> Tuple[Dict[Address, List[int]], int]:
        """
        [Source code](file:///Users/dteiml/p/hacker-dom/woke-uniswap-v2/src/UniswapV2Router02.sol#289)

        Args:
            amountIn: uint256
            amountOutMin: uint256
            path: address[]
            to_: address
            deadline: uint256
        Returns:
            uint256[]
        """
        ...

    @overload
    def swapExactTokensForETH(self, amountIn: uint256, amountOutMin: uint256, path: List[Union[Account, Address]], to_: Union[Account, Address], deadline: uint256, *, from_: Optional[Union[Account, Address, str]] = None, to: Optional[Union[Account, Address, str]] = None, value: Union[int, str] = 0, gas_limit: Optional[Union[int, Literal["max"], Literal["auto"]]] = None, request_type: Literal["tx"] = "tx", gas_price: Optional[Union[int, str]] = None, max_fee_per_gas: Optional[Union[int, str]] = None, max_priority_fee_per_gas: Optional[Union[int, str]] = None, access_list: Optional[Union[Dict[Union[Account, Address, str], List[int]], Literal["auto"]]] = None, type: Optional[int] = None, block: Optional[Union[int, Literal["latest"], Literal["pending"], Literal["earliest"], Literal["safe"], Literal["finalized"]]] = None, confirmations: Optional[int] = None) -> TransactionAbc[List[uint256]]:
        """
        [Source code](file:///Users/dteiml/p/hacker-dom/woke-uniswap-v2/src/UniswapV2Router02.sol#289)

        Args:
            amountIn: uint256
            amountOutMin: uint256
            path: address[]
            to_: address
            deadline: uint256
        Returns:
            uint256[]
        """
        ...

    def swapExactTokensForETH(self, amountIn: uint256, amountOutMin: uint256, path: List[Union[Account, Address]], to_: Union[Account, Address], deadline: uint256, *, from_: Optional[Union[Account, Address, str]] = None, to: Optional[Union[Account, Address, str]] = None, value: Union[int, str] = 0, gas_limit: Optional[Union[int, Literal["max"], Literal["auto"]]] = None, request_type: RequestType = 'tx', gas_price: Optional[Union[int, str]] = None, max_fee_per_gas: Optional[Union[int, str]] = None, max_priority_fee_per_gas: Optional[Union[int, str]] = None, access_list: Optional[Union[Dict[Union[Account, Address, str], List[int]], Literal["auto"]]] = None, type: Optional[int] = None, block: Optional[Union[int, Literal["latest"], Literal["pending"], Literal["earliest"], Literal["safe"], Literal["finalized"]]] = None, confirmations: Optional[int] = None) -> Union[List[uint256], TransactionAbc[List[uint256]], int, Tuple[Dict[Address, List[int]], int]]:
        """
        [Source code](file:///Users/dteiml/p/hacker-dom/woke-uniswap-v2/src/UniswapV2Router02.sol#289)

        Args:
            amountIn: uint256
            amountOutMin: uint256
            path: address[]
            to_: address
            deadline: uint256
        Returns:
            uint256[]
        """
        return self._execute(self.chain, request_type, "18cbafe5", [amountIn, amountOutMin, path, to_, deadline], True if request_type == "tx" else False, List[uint256], from_, to if to is not None else str(self.address), value, gas_limit, gas_price, max_fee_per_gas, max_priority_fee_per_gas, access_list, type, block, confirmations)

    @overload
    def swapETHForExactTokens(self, amountOut: uint256, path: List[Union[Account, Address]], to_: Union[Account, Address], deadline: uint256, *, from_: Optional[Union[Account, Address, str]] = None, to: Optional[Union[Account, Address, str]] = None, value: Union[int, str] = 0, gas_limit: Optional[Union[int, Literal["max"], Literal["auto"]]] = None, request_type: Literal["call"], gas_price: Optional[Union[int, str]] = None, max_fee_per_gas: Optional[Union[int, str]] = None, max_priority_fee_per_gas: Optional[Union[int, str]] = None, access_list: Optional[Union[Dict[Union[Account, Address, str], List[int]], Literal["auto"]]] = None, type: Optional[int] = None, block: Optional[Union[int, Literal["latest"], Literal["pending"], Literal["earliest"], Literal["safe"], Literal["finalized"]]] = None, confirmations: Optional[int] = None) -> List[uint256]:
        """
        [Source code](file:///Users/dteiml/p/hacker-dom/woke-uniswap-v2/src/UniswapV2Router02.sol#305)

        Args:
            amountOut: uint256
            path: address[]
            to_: address
            deadline: uint256
        Returns:
            uint256[]
        """
        ...

    @overload
    def swapETHForExactTokens(self, amountOut: uint256, path: List[Union[Account, Address]], to_: Union[Account, Address], deadline: uint256, *, from_: Optional[Union[Account, Address, str]] = None, to: Optional[Union[Account, Address, str]] = None, value: Union[int, str] = 0, gas_limit: Optional[Union[int, Literal["max"], Literal["auto"]]] = None, request_type: Literal["estimate"], gas_price: Optional[Union[int, str]] = None, max_fee_per_gas: Optional[Union[int, str]] = None, max_priority_fee_per_gas: Optional[Union[int, str]] = None, access_list: Optional[Union[Dict[Union[Account, Address, str], List[int]], Literal["auto"]]] = None, type: Optional[int] = None, block: Optional[Union[int, Literal["latest"], Literal["pending"], Literal["earliest"], Literal["safe"], Literal["finalized"]]] = None, confirmations: Optional[int] = None) -> int:
        """
        [Source code](file:///Users/dteiml/p/hacker-dom/woke-uniswap-v2/src/UniswapV2Router02.sol#305)

        Args:
            amountOut: uint256
            path: address[]
            to_: address
            deadline: uint256
        Returns:
            uint256[]
        """
        ...

    @overload
    def swapETHForExactTokens(self, amountOut: uint256, path: List[Union[Account, Address]], to_: Union[Account, Address], deadline: uint256, *, from_: Optional[Union[Account, Address, str]] = None, to: Optional[Union[Account, Address, str]] = None, value: Union[int, str] = 0, gas_limit: Optional[Union[int, Literal["max"], Literal["auto"]]] = None, request_type: Literal["access_list"], gas_price: Optional[Union[int, str]] = None, max_fee_per_gas: Optional[Union[int, str]] = None, max_priority_fee_per_gas: Optional[Union[int, str]] = None, access_list: Optional[Union[Dict[Union[Account, Address, str], List[int]], Literal["auto"]]] = None, type: Optional[int] = None, block: Optional[Union[int, Literal["latest"], Literal["pending"], Literal["earliest"], Literal["safe"], Literal["finalized"]]] = None, confirmations: Optional[int] = None) -> Tuple[Dict[Address, List[int]], int]:
        """
        [Source code](file:///Users/dteiml/p/hacker-dom/woke-uniswap-v2/src/UniswapV2Router02.sol#305)

        Args:
            amountOut: uint256
            path: address[]
            to_: address
            deadline: uint256
        Returns:
            uint256[]
        """
        ...

    @overload
    def swapETHForExactTokens(self, amountOut: uint256, path: List[Union[Account, Address]], to_: Union[Account, Address], deadline: uint256, *, from_: Optional[Union[Account, Address, str]] = None, to: Optional[Union[Account, Address, str]] = None, value: Union[int, str] = 0, gas_limit: Optional[Union[int, Literal["max"], Literal["auto"]]] = None, request_type: Literal["tx"] = "tx", gas_price: Optional[Union[int, str]] = None, max_fee_per_gas: Optional[Union[int, str]] = None, max_priority_fee_per_gas: Optional[Union[int, str]] = None, access_list: Optional[Union[Dict[Union[Account, Address, str], List[int]], Literal["auto"]]] = None, type: Optional[int] = None, block: Optional[Union[int, Literal["latest"], Literal["pending"], Literal["earliest"], Literal["safe"], Literal["finalized"]]] = None, confirmations: Optional[int] = None) -> TransactionAbc[List[uint256]]:
        """
        [Source code](file:///Users/dteiml/p/hacker-dom/woke-uniswap-v2/src/UniswapV2Router02.sol#305)

        Args:
            amountOut: uint256
            path: address[]
            to_: address
            deadline: uint256
        Returns:
            uint256[]
        """
        ...

    def swapETHForExactTokens(self, amountOut: uint256, path: List[Union[Account, Address]], to_: Union[Account, Address], deadline: uint256, *, from_: Optional[Union[Account, Address, str]] = None, to: Optional[Union[Account, Address, str]] = None, value: Union[int, str] = 0, gas_limit: Optional[Union[int, Literal["max"], Literal["auto"]]] = None, request_type: RequestType = 'tx', gas_price: Optional[Union[int, str]] = None, max_fee_per_gas: Optional[Union[int, str]] = None, max_priority_fee_per_gas: Optional[Union[int, str]] = None, access_list: Optional[Union[Dict[Union[Account, Address, str], List[int]], Literal["auto"]]] = None, type: Optional[int] = None, block: Optional[Union[int, Literal["latest"], Literal["pending"], Literal["earliest"], Literal["safe"], Literal["finalized"]]] = None, confirmations: Optional[int] = None) -> Union[List[uint256], TransactionAbc[List[uint256]], int, Tuple[Dict[Address, List[int]], int]]:
        """
        [Source code](file:///Users/dteiml/p/hacker-dom/woke-uniswap-v2/src/UniswapV2Router02.sol#305)

        Args:
            amountOut: uint256
            path: address[]
            to_: address
            deadline: uint256
        Returns:
            uint256[]
        """
        return self._execute(self.chain, request_type, "fb3bdb41", [amountOut, path, to_, deadline], True if request_type == "tx" else False, List[uint256], from_, to if to is not None else str(self.address), value, gas_limit, gas_price, max_fee_per_gas, max_priority_fee_per_gas, access_list, type, block, confirmations)

    @overload
    def swapExactTokensForTokensSupportingFeeOnTransferTokens(self, amountIn: uint256, amountOutMin: uint256, path: List[Union[Account, Address]], to_: Union[Account, Address], deadline: uint256, *, from_: Optional[Union[Account, Address, str]] = None, to: Optional[Union[Account, Address, str]] = None, value: Union[int, str] = 0, gas_limit: Optional[Union[int, Literal["max"], Literal["auto"]]] = None, request_type: Literal["call"], gas_price: Optional[Union[int, str]] = None, max_fee_per_gas: Optional[Union[int, str]] = None, max_priority_fee_per_gas: Optional[Union[int, str]] = None, access_list: Optional[Union[Dict[Union[Account, Address, str], List[int]], Literal["auto"]]] = None, type: Optional[int] = None, block: Optional[Union[int, Literal["latest"], Literal["pending"], Literal["earliest"], Literal["safe"], Literal["finalized"]]] = None, confirmations: Optional[int] = None) -> None:
        """
        [Source code](file:///Users/dteiml/p/hacker-dom/woke-uniswap-v2/src/UniswapV2Router02.sol#342)

        Args:
            amountIn: uint256
            amountOutMin: uint256
            path: address[]
            to_: address
            deadline: uint256
        """
        ...

    @overload
    def swapExactTokensForTokensSupportingFeeOnTransferTokens(self, amountIn: uint256, amountOutMin: uint256, path: List[Union[Account, Address]], to_: Union[Account, Address], deadline: uint256, *, from_: Optional[Union[Account, Address, str]] = None, to: Optional[Union[Account, Address, str]] = None, value: Union[int, str] = 0, gas_limit: Optional[Union[int, Literal["max"], Literal["auto"]]] = None, request_type: Literal["estimate"], gas_price: Optional[Union[int, str]] = None, max_fee_per_gas: Optional[Union[int, str]] = None, max_priority_fee_per_gas: Optional[Union[int, str]] = None, access_list: Optional[Union[Dict[Union[Account, Address, str], List[int]], Literal["auto"]]] = None, type: Optional[int] = None, block: Optional[Union[int, Literal["latest"], Literal["pending"], Literal["earliest"], Literal["safe"], Literal["finalized"]]] = None, confirmations: Optional[int] = None) -> int:
        """
        [Source code](file:///Users/dteiml/p/hacker-dom/woke-uniswap-v2/src/UniswapV2Router02.sol#342)

        Args:
            amountIn: uint256
            amountOutMin: uint256
            path: address[]
            to_: address
            deadline: uint256
        """
        ...

    @overload
    def swapExactTokensForTokensSupportingFeeOnTransferTokens(self, amountIn: uint256, amountOutMin: uint256, path: List[Union[Account, Address]], to_: Union[Account, Address], deadline: uint256, *, from_: Optional[Union[Account, Address, str]] = None, to: Optional[Union[Account, Address, str]] = None, value: Union[int, str] = 0, gas_limit: Optional[Union[int, Literal["max"], Literal["auto"]]] = None, request_type: Literal["access_list"], gas_price: Optional[Union[int, str]] = None, max_fee_per_gas: Optional[Union[int, str]] = None, max_priority_fee_per_gas: Optional[Union[int, str]] = None, access_list: Optional[Union[Dict[Union[Account, Address, str], List[int]], Literal["auto"]]] = None, type: Optional[int] = None, block: Optional[Union[int, Literal["latest"], Literal["pending"], Literal["earliest"], Literal["safe"], Literal["finalized"]]] = None, confirmations: Optional[int] = None) -> Tuple[Dict[Address, List[int]], int]:
        """
        [Source code](file:///Users/dteiml/p/hacker-dom/woke-uniswap-v2/src/UniswapV2Router02.sol#342)

        Args:
            amountIn: uint256
            amountOutMin: uint256
            path: address[]
            to_: address
            deadline: uint256
        """
        ...

    @overload
    def swapExactTokensForTokensSupportingFeeOnTransferTokens(self, amountIn: uint256, amountOutMin: uint256, path: List[Union[Account, Address]], to_: Union[Account, Address], deadline: uint256, *, from_: Optional[Union[Account, Address, str]] = None, to: Optional[Union[Account, Address, str]] = None, value: Union[int, str] = 0, gas_limit: Optional[Union[int, Literal["max"], Literal["auto"]]] = None, request_type: Literal["tx"] = "tx", gas_price: Optional[Union[int, str]] = None, max_fee_per_gas: Optional[Union[int, str]] = None, max_priority_fee_per_gas: Optional[Union[int, str]] = None, access_list: Optional[Union[Dict[Union[Account, Address, str], List[int]], Literal["auto"]]] = None, type: Optional[int] = None, block: Optional[Union[int, Literal["latest"], Literal["pending"], Literal["earliest"], Literal["safe"], Literal["finalized"]]] = None, confirmations: Optional[int] = None) -> TransactionAbc[None]:
        """
        [Source code](file:///Users/dteiml/p/hacker-dom/woke-uniswap-v2/src/UniswapV2Router02.sol#342)

        Args:
            amountIn: uint256
            amountOutMin: uint256
            path: address[]
            to_: address
            deadline: uint256
        """
        ...

    def swapExactTokensForTokensSupportingFeeOnTransferTokens(self, amountIn: uint256, amountOutMin: uint256, path: List[Union[Account, Address]], to_: Union[Account, Address], deadline: uint256, *, from_: Optional[Union[Account, Address, str]] = None, to: Optional[Union[Account, Address, str]] = None, value: Union[int, str] = 0, gas_limit: Optional[Union[int, Literal["max"], Literal["auto"]]] = None, request_type: RequestType = 'tx', gas_price: Optional[Union[int, str]] = None, max_fee_per_gas: Optional[Union[int, str]] = None, max_priority_fee_per_gas: Optional[Union[int, str]] = None, access_list: Optional[Union[Dict[Union[Account, Address, str], List[int]], Literal["auto"]]] = None, type: Optional[int] = None, block: Optional[Union[int, Literal["latest"], Literal["pending"], Literal["earliest"], Literal["safe"], Literal["finalized"]]] = None, confirmations: Optional[int] = None) -> Union[None, TransactionAbc[None], int, Tuple[Dict[Address, List[int]], int]]:
        """
        [Source code](file:///Users/dteiml/p/hacker-dom/woke-uniswap-v2/src/UniswapV2Router02.sol#342)

        Args:
            amountIn: uint256
            amountOutMin: uint256
            path: address[]
            to_: address
            deadline: uint256
        """
        return self._execute(self.chain, request_type, "5c11d795", [amountIn, amountOutMin, path, to_, deadline], True if request_type == "tx" else False, NoneType, from_, to if to is not None else str(self.address), value, gas_limit, gas_price, max_fee_per_gas, max_priority_fee_per_gas, access_list, type, block, confirmations)

    @overload
    def swapExactETHForTokensSupportingFeeOnTransferTokens(self, amountOutMin: uint256, path: List[Union[Account, Address]], to_: Union[Account, Address], deadline: uint256, *, from_: Optional[Union[Account, Address, str]] = None, to: Optional[Union[Account, Address, str]] = None, value: Union[int, str] = 0, gas_limit: Optional[Union[int, Literal["max"], Literal["auto"]]] = None, request_type: Literal["call"], gas_price: Optional[Union[int, str]] = None, max_fee_per_gas: Optional[Union[int, str]] = None, max_priority_fee_per_gas: Optional[Union[int, str]] = None, access_list: Optional[Union[Dict[Union[Account, Address, str], List[int]], Literal["auto"]]] = None, type: Optional[int] = None, block: Optional[Union[int, Literal["latest"], Literal["pending"], Literal["earliest"], Literal["safe"], Literal["finalized"]]] = None, confirmations: Optional[int] = None) -> None:
        """
        [Source code](file:///Users/dteiml/p/hacker-dom/woke-uniswap-v2/src/UniswapV2Router02.sol#359)

        Args:
            amountOutMin: uint256
            path: address[]
            to_: address
            deadline: uint256
        """
        ...

    @overload
    def swapExactETHForTokensSupportingFeeOnTransferTokens(self, amountOutMin: uint256, path: List[Union[Account, Address]], to_: Union[Account, Address], deadline: uint256, *, from_: Optional[Union[Account, Address, str]] = None, to: Optional[Union[Account, Address, str]] = None, value: Union[int, str] = 0, gas_limit: Optional[Union[int, Literal["max"], Literal["auto"]]] = None, request_type: Literal["estimate"], gas_price: Optional[Union[int, str]] = None, max_fee_per_gas: Optional[Union[int, str]] = None, max_priority_fee_per_gas: Optional[Union[int, str]] = None, access_list: Optional[Union[Dict[Union[Account, Address, str], List[int]], Literal["auto"]]] = None, type: Optional[int] = None, block: Optional[Union[int, Literal["latest"], Literal["pending"], Literal["earliest"], Literal["safe"], Literal["finalized"]]] = None, confirmations: Optional[int] = None) -> int:
        """
        [Source code](file:///Users/dteiml/p/hacker-dom/woke-uniswap-v2/src/UniswapV2Router02.sol#359)

        Args:
            amountOutMin: uint256
            path: address[]
            to_: address
            deadline: uint256
        """
        ...

    @overload
    def swapExactETHForTokensSupportingFeeOnTransferTokens(self, amountOutMin: uint256, path: List[Union[Account, Address]], to_: Union[Account, Address], deadline: uint256, *, from_: Optional[Union[Account, Address, str]] = None, to: Optional[Union[Account, Address, str]] = None, value: Union[int, str] = 0, gas_limit: Optional[Union[int, Literal["max"], Literal["auto"]]] = None, request_type: Literal["access_list"], gas_price: Optional[Union[int, str]] = None, max_fee_per_gas: Optional[Union[int, str]] = None, max_priority_fee_per_gas: Optional[Union[int, str]] = None, access_list: Optional[Union[Dict[Union[Account, Address, str], List[int]], Literal["auto"]]] = None, type: Optional[int] = None, block: Optional[Union[int, Literal["latest"], Literal["pending"], Literal["earliest"], Literal["safe"], Literal["finalized"]]] = None, confirmations: Optional[int] = None) -> Tuple[Dict[Address, List[int]], int]:
        """
        [Source code](file:///Users/dteiml/p/hacker-dom/woke-uniswap-v2/src/UniswapV2Router02.sol#359)

        Args:
            amountOutMin: uint256
            path: address[]
            to_: address
            deadline: uint256
        """
        ...

    @overload
    def swapExactETHForTokensSupportingFeeOnTransferTokens(self, amountOutMin: uint256, path: List[Union[Account, Address]], to_: Union[Account, Address], deadline: uint256, *, from_: Optional[Union[Account, Address, str]] = None, to: Optional[Union[Account, Address, str]] = None, value: Union[int, str] = 0, gas_limit: Optional[Union[int, Literal["max"], Literal["auto"]]] = None, request_type: Literal["tx"] = "tx", gas_price: Optional[Union[int, str]] = None, max_fee_per_gas: Optional[Union[int, str]] = None, max_priority_fee_per_gas: Optional[Union[int, str]] = None, access_list: Optional[Union[Dict[Union[Account, Address, str], List[int]], Literal["auto"]]] = None, type: Optional[int] = None, block: Optional[Union[int, Literal["latest"], Literal["pending"], Literal["earliest"], Literal["safe"], Literal["finalized"]]] = None, confirmations: Optional[int] = None) -> TransactionAbc[None]:
        """
        [Source code](file:///Users/dteiml/p/hacker-dom/woke-uniswap-v2/src/UniswapV2Router02.sol#359)

        Args:
            amountOutMin: uint256
            path: address[]
            to_: address
            deadline: uint256
        """
        ...

    def swapExactETHForTokensSupportingFeeOnTransferTokens(self, amountOutMin: uint256, path: List[Union[Account, Address]], to_: Union[Account, Address], deadline: uint256, *, from_: Optional[Union[Account, Address, str]] = None, to: Optional[Union[Account, Address, str]] = None, value: Union[int, str] = 0, gas_limit: Optional[Union[int, Literal["max"], Literal["auto"]]] = None, request_type: RequestType = 'tx', gas_price: Optional[Union[int, str]] = None, max_fee_per_gas: Optional[Union[int, str]] = None, max_priority_fee_per_gas: Optional[Union[int, str]] = None, access_list: Optional[Union[Dict[Union[Account, Address, str], List[int]], Literal["auto"]]] = None, type: Optional[int] = None, block: Optional[Union[int, Literal["latest"], Literal["pending"], Literal["earliest"], Literal["safe"], Literal["finalized"]]] = None, confirmations: Optional[int] = None) -> Union[None, TransactionAbc[None], int, Tuple[Dict[Address, List[int]], int]]:
        """
        [Source code](file:///Users/dteiml/p/hacker-dom/woke-uniswap-v2/src/UniswapV2Router02.sol#359)

        Args:
            amountOutMin: uint256
            path: address[]
            to_: address
            deadline: uint256
        """
        return self._execute(self.chain, request_type, "b6f9de95", [amountOutMin, path, to_, deadline], True if request_type == "tx" else False, NoneType, from_, to if to is not None else str(self.address), value, gas_limit, gas_price, max_fee_per_gas, max_priority_fee_per_gas, access_list, type, block, confirmations)

    @overload
    def swapExactTokensForETHSupportingFeeOnTransferTokens(self, amountIn: uint256, amountOutMin: uint256, path: List[Union[Account, Address]], to_: Union[Account, Address], deadline: uint256, *, from_: Optional[Union[Account, Address, str]] = None, to: Optional[Union[Account, Address, str]] = None, value: Union[int, str] = 0, gas_limit: Optional[Union[int, Literal["max"], Literal["auto"]]] = None, request_type: Literal["call"], gas_price: Optional[Union[int, str]] = None, max_fee_per_gas: Optional[Union[int, str]] = None, max_priority_fee_per_gas: Optional[Union[int, str]] = None, access_list: Optional[Union[Dict[Union[Account, Address, str], List[int]], Literal["auto"]]] = None, type: Optional[int] = None, block: Optional[Union[int, Literal["latest"], Literal["pending"], Literal["earliest"], Literal["safe"], Literal["finalized"]]] = None, confirmations: Optional[int] = None) -> None:
        """
        [Source code](file:///Users/dteiml/p/hacker-dom/woke-uniswap-v2/src/UniswapV2Router02.sol#381)

        Args:
            amountIn: uint256
            amountOutMin: uint256
            path: address[]
            to_: address
            deadline: uint256
        """
        ...

    @overload
    def swapExactTokensForETHSupportingFeeOnTransferTokens(self, amountIn: uint256, amountOutMin: uint256, path: List[Union[Account, Address]], to_: Union[Account, Address], deadline: uint256, *, from_: Optional[Union[Account, Address, str]] = None, to: Optional[Union[Account, Address, str]] = None, value: Union[int, str] = 0, gas_limit: Optional[Union[int, Literal["max"], Literal["auto"]]] = None, request_type: Literal["estimate"], gas_price: Optional[Union[int, str]] = None, max_fee_per_gas: Optional[Union[int, str]] = None, max_priority_fee_per_gas: Optional[Union[int, str]] = None, access_list: Optional[Union[Dict[Union[Account, Address, str], List[int]], Literal["auto"]]] = None, type: Optional[int] = None, block: Optional[Union[int, Literal["latest"], Literal["pending"], Literal["earliest"], Literal["safe"], Literal["finalized"]]] = None, confirmations: Optional[int] = None) -> int:
        """
        [Source code](file:///Users/dteiml/p/hacker-dom/woke-uniswap-v2/src/UniswapV2Router02.sol#381)

        Args:
            amountIn: uint256
            amountOutMin: uint256
            path: address[]
            to_: address
            deadline: uint256
        """
        ...

    @overload
    def swapExactTokensForETHSupportingFeeOnTransferTokens(self, amountIn: uint256, amountOutMin: uint256, path: List[Union[Account, Address]], to_: Union[Account, Address], deadline: uint256, *, from_: Optional[Union[Account, Address, str]] = None, to: Optional[Union[Account, Address, str]] = None, value: Union[int, str] = 0, gas_limit: Optional[Union[int, Literal["max"], Literal["auto"]]] = None, request_type: Literal["access_list"], gas_price: Optional[Union[int, str]] = None, max_fee_per_gas: Optional[Union[int, str]] = None, max_priority_fee_per_gas: Optional[Union[int, str]] = None, access_list: Optional[Union[Dict[Union[Account, Address, str], List[int]], Literal["auto"]]] = None, type: Optional[int] = None, block: Optional[Union[int, Literal["latest"], Literal["pending"], Literal["earliest"], Literal["safe"], Literal["finalized"]]] = None, confirmations: Optional[int] = None) -> Tuple[Dict[Address, List[int]], int]:
        """
        [Source code](file:///Users/dteiml/p/hacker-dom/woke-uniswap-v2/src/UniswapV2Router02.sol#381)

        Args:
            amountIn: uint256
            amountOutMin: uint256
            path: address[]
            to_: address
            deadline: uint256
        """
        ...

    @overload
    def swapExactTokensForETHSupportingFeeOnTransferTokens(self, amountIn: uint256, amountOutMin: uint256, path: List[Union[Account, Address]], to_: Union[Account, Address], deadline: uint256, *, from_: Optional[Union[Account, Address, str]] = None, to: Optional[Union[Account, Address, str]] = None, value: Union[int, str] = 0, gas_limit: Optional[Union[int, Literal["max"], Literal["auto"]]] = None, request_type: Literal["tx"] = "tx", gas_price: Optional[Union[int, str]] = None, max_fee_per_gas: Optional[Union[int, str]] = None, max_priority_fee_per_gas: Optional[Union[int, str]] = None, access_list: Optional[Union[Dict[Union[Account, Address, str], List[int]], Literal["auto"]]] = None, type: Optional[int] = None, block: Optional[Union[int, Literal["latest"], Literal["pending"], Literal["earliest"], Literal["safe"], Literal["finalized"]]] = None, confirmations: Optional[int] = None) -> TransactionAbc[None]:
        """
        [Source code](file:///Users/dteiml/p/hacker-dom/woke-uniswap-v2/src/UniswapV2Router02.sol#381)

        Args:
            amountIn: uint256
            amountOutMin: uint256
            path: address[]
            to_: address
            deadline: uint256
        """
        ...

    def swapExactTokensForETHSupportingFeeOnTransferTokens(self, amountIn: uint256, amountOutMin: uint256, path: List[Union[Account, Address]], to_: Union[Account, Address], deadline: uint256, *, from_: Optional[Union[Account, Address, str]] = None, to: Optional[Union[Account, Address, str]] = None, value: Union[int, str] = 0, gas_limit: Optional[Union[int, Literal["max"], Literal["auto"]]] = None, request_type: RequestType = 'tx', gas_price: Optional[Union[int, str]] = None, max_fee_per_gas: Optional[Union[int, str]] = None, max_priority_fee_per_gas: Optional[Union[int, str]] = None, access_list: Optional[Union[Dict[Union[Account, Address, str], List[int]], Literal["auto"]]] = None, type: Optional[int] = None, block: Optional[Union[int, Literal["latest"], Literal["pending"], Literal["earliest"], Literal["safe"], Literal["finalized"]]] = None, confirmations: Optional[int] = None) -> Union[None, TransactionAbc[None], int, Tuple[Dict[Address, List[int]], int]]:
        """
        [Source code](file:///Users/dteiml/p/hacker-dom/woke-uniswap-v2/src/UniswapV2Router02.sol#381)

        Args:
            amountIn: uint256
            amountOutMin: uint256
            path: address[]
            to_: address
            deadline: uint256
        """
        return self._execute(self.chain, request_type, "791ac947", [amountIn, amountOutMin, path, to_, deadline], True if request_type == "tx" else False, NoneType, from_, to if to is not None else str(self.address), value, gas_limit, gas_price, max_fee_per_gas, max_priority_fee_per_gas, access_list, type, block, confirmations)

    @overload
    def quote(self, amountA: uint256, reserveA: uint256, reserveB: uint256, *, from_: Optional[Union[Account, Address, str]] = None, to: Optional[Union[Account, Address, str]] = None, value: Union[int, str] = 0, gas_limit: Optional[Union[int, Literal["max"], Literal["auto"]]] = None, request_type: Literal["call"] = "call", gas_price: Optional[Union[int, str]] = None, max_fee_per_gas: Optional[Union[int, str]] = None, max_priority_fee_per_gas: Optional[Union[int, str]] = None, access_list: Optional[Union[Dict[Union[Account, Address, str], List[int]], Literal["auto"]]] = None, type: Optional[int] = None, block: Optional[Union[int, Literal["latest"], Literal["pending"], Literal["earliest"], Literal["safe"], Literal["finalized"]]] = None, confirmations: Optional[int] = None) -> uint256:
        """
        [Source code](file:///Users/dteiml/p/hacker-dom/woke-uniswap-v2/src/UniswapV2Router02.sol#404)

        Args:
            amountA: uint256
            reserveA: uint256
            reserveB: uint256
        Returns:
            uint256
        """
        ...

    @overload
    def quote(self, amountA: uint256, reserveA: uint256, reserveB: uint256, *, from_: Optional[Union[Account, Address, str]] = None, to: Optional[Union[Account, Address, str]] = None, value: Union[int, str] = 0, gas_limit: Optional[Union[int, Literal["max"], Literal["auto"]]] = None, request_type: Literal["estimate"], gas_price: Optional[Union[int, str]] = None, max_fee_per_gas: Optional[Union[int, str]] = None, max_priority_fee_per_gas: Optional[Union[int, str]] = None, access_list: Optional[Union[Dict[Union[Account, Address, str], List[int]], Literal["auto"]]] = None, type: Optional[int] = None, block: Optional[Union[int, Literal["latest"], Literal["pending"], Literal["earliest"], Literal["safe"], Literal["finalized"]]] = None, confirmations: Optional[int] = None) -> int:
        """
        [Source code](file:///Users/dteiml/p/hacker-dom/woke-uniswap-v2/src/UniswapV2Router02.sol#404)

        Args:
            amountA: uint256
            reserveA: uint256
            reserveB: uint256
        Returns:
            uint256
        """
        ...

    @overload
    def quote(self, amountA: uint256, reserveA: uint256, reserveB: uint256, *, from_: Optional[Union[Account, Address, str]] = None, to: Optional[Union[Account, Address, str]] = None, value: Union[int, str] = 0, gas_limit: Optional[Union[int, Literal["max"], Literal["auto"]]] = None, request_type: Literal["access_list"], gas_price: Optional[Union[int, str]] = None, max_fee_per_gas: Optional[Union[int, str]] = None, max_priority_fee_per_gas: Optional[Union[int, str]] = None, access_list: Optional[Union[Dict[Union[Account, Address, str], List[int]], Literal["auto"]]] = None, type: Optional[int] = None, block: Optional[Union[int, Literal["latest"], Literal["pending"], Literal["earliest"], Literal["safe"], Literal["finalized"]]] = None, confirmations: Optional[int] = None) -> Tuple[Dict[Address, List[int]], int]:
        """
        [Source code](file:///Users/dteiml/p/hacker-dom/woke-uniswap-v2/src/UniswapV2Router02.sol#404)

        Args:
            amountA: uint256
            reserveA: uint256
            reserveB: uint256
        Returns:
            uint256
        """
        ...

    @overload
    def quote(self, amountA: uint256, reserveA: uint256, reserveB: uint256, *, from_: Optional[Union[Account, Address, str]] = None, to: Optional[Union[Account, Address, str]] = None, value: Union[int, str] = 0, gas_limit: Optional[Union[int, Literal["max"], Literal["auto"]]] = None, request_type: Literal["tx"], gas_price: Optional[Union[int, str]] = None, max_fee_per_gas: Optional[Union[int, str]] = None, max_priority_fee_per_gas: Optional[Union[int, str]] = None, access_list: Optional[Union[Dict[Union[Account, Address, str], List[int]], Literal["auto"]]] = None, type: Optional[int] = None, block: Optional[Union[int, Literal["latest"], Literal["pending"], Literal["earliest"], Literal["safe"], Literal["finalized"]]] = None, confirmations: Optional[int] = None) -> TransactionAbc[uint256]:
        """
        [Source code](file:///Users/dteiml/p/hacker-dom/woke-uniswap-v2/src/UniswapV2Router02.sol#404)

        Args:
            amountA: uint256
            reserveA: uint256
            reserveB: uint256
        Returns:
            uint256
        """
        ...

    def quote(self, amountA: uint256, reserveA: uint256, reserveB: uint256, *, from_: Optional[Union[Account, Address, str]] = None, to: Optional[Union[Account, Address, str]] = None, value: Union[int, str] = 0, gas_limit: Optional[Union[int, Literal["max"], Literal["auto"]]] = None, request_type: RequestType = 'call', gas_price: Optional[Union[int, str]] = None, max_fee_per_gas: Optional[Union[int, str]] = None, max_priority_fee_per_gas: Optional[Union[int, str]] = None, access_list: Optional[Union[Dict[Union[Account, Address, str], List[int]], Literal["auto"]]] = None, type: Optional[int] = None, block: Optional[Union[int, Literal["latest"], Literal["pending"], Literal["earliest"], Literal["safe"], Literal["finalized"]]] = None, confirmations: Optional[int] = None) -> Union[uint256, TransactionAbc[uint256], int, Tuple[Dict[Address, List[int]], int]]:
        """
        [Source code](file:///Users/dteiml/p/hacker-dom/woke-uniswap-v2/src/UniswapV2Router02.sol#404)

        Args:
            amountA: uint256
            reserveA: uint256
            reserveB: uint256
        Returns:
            uint256
        """
        return self._execute(self.chain, request_type, "ad615dec", [amountA, reserveA, reserveB], True if request_type == "tx" else False, uint256, from_, to if to is not None else str(self.address), value, gas_limit, gas_price, max_fee_per_gas, max_priority_fee_per_gas, access_list, type, block, confirmations)

    @overload
    def getAmountOut(self, amountIn: uint256, reserveIn: uint256, reserveOut: uint256, *, from_: Optional[Union[Account, Address, str]] = None, to: Optional[Union[Account, Address, str]] = None, value: Union[int, str] = 0, gas_limit: Optional[Union[int, Literal["max"], Literal["auto"]]] = None, request_type: Literal["call"] = "call", gas_price: Optional[Union[int, str]] = None, max_fee_per_gas: Optional[Union[int, str]] = None, max_priority_fee_per_gas: Optional[Union[int, str]] = None, access_list: Optional[Union[Dict[Union[Account, Address, str], List[int]], Literal["auto"]]] = None, type: Optional[int] = None, block: Optional[Union[int, Literal["latest"], Literal["pending"], Literal["earliest"], Literal["safe"], Literal["finalized"]]] = None, confirmations: Optional[int] = None) -> uint256:
        """
        [Source code](file:///Users/dteiml/p/hacker-dom/woke-uniswap-v2/src/UniswapV2Router02.sol#408)

        Args:
            amountIn: uint256
            reserveIn: uint256
            reserveOut: uint256
        Returns:
            uint256
        """
        ...

    @overload
    def getAmountOut(self, amountIn: uint256, reserveIn: uint256, reserveOut: uint256, *, from_: Optional[Union[Account, Address, str]] = None, to: Optional[Union[Account, Address, str]] = None, value: Union[int, str] = 0, gas_limit: Optional[Union[int, Literal["max"], Literal["auto"]]] = None, request_type: Literal["estimate"], gas_price: Optional[Union[int, str]] = None, max_fee_per_gas: Optional[Union[int, str]] = None, max_priority_fee_per_gas: Optional[Union[int, str]] = None, access_list: Optional[Union[Dict[Union[Account, Address, str], List[int]], Literal["auto"]]] = None, type: Optional[int] = None, block: Optional[Union[int, Literal["latest"], Literal["pending"], Literal["earliest"], Literal["safe"], Literal["finalized"]]] = None, confirmations: Optional[int] = None) -> int:
        """
        [Source code](file:///Users/dteiml/p/hacker-dom/woke-uniswap-v2/src/UniswapV2Router02.sol#408)

        Args:
            amountIn: uint256
            reserveIn: uint256
            reserveOut: uint256
        Returns:
            uint256
        """
        ...

    @overload
    def getAmountOut(self, amountIn: uint256, reserveIn: uint256, reserveOut: uint256, *, from_: Optional[Union[Account, Address, str]] = None, to: Optional[Union[Account, Address, str]] = None, value: Union[int, str] = 0, gas_limit: Optional[Union[int, Literal["max"], Literal["auto"]]] = None, request_type: Literal["access_list"], gas_price: Optional[Union[int, str]] = None, max_fee_per_gas: Optional[Union[int, str]] = None, max_priority_fee_per_gas: Optional[Union[int, str]] = None, access_list: Optional[Union[Dict[Union[Account, Address, str], List[int]], Literal["auto"]]] = None, type: Optional[int] = None, block: Optional[Union[int, Literal["latest"], Literal["pending"], Literal["earliest"], Literal["safe"], Literal["finalized"]]] = None, confirmations: Optional[int] = None) -> Tuple[Dict[Address, List[int]], int]:
        """
        [Source code](file:///Users/dteiml/p/hacker-dom/woke-uniswap-v2/src/UniswapV2Router02.sol#408)

        Args:
            amountIn: uint256
            reserveIn: uint256
            reserveOut: uint256
        Returns:
            uint256
        """
        ...

    @overload
    def getAmountOut(self, amountIn: uint256, reserveIn: uint256, reserveOut: uint256, *, from_: Optional[Union[Account, Address, str]] = None, to: Optional[Union[Account, Address, str]] = None, value: Union[int, str] = 0, gas_limit: Optional[Union[int, Literal["max"], Literal["auto"]]] = None, request_type: Literal["tx"], gas_price: Optional[Union[int, str]] = None, max_fee_per_gas: Optional[Union[int, str]] = None, max_priority_fee_per_gas: Optional[Union[int, str]] = None, access_list: Optional[Union[Dict[Union[Account, Address, str], List[int]], Literal["auto"]]] = None, type: Optional[int] = None, block: Optional[Union[int, Literal["latest"], Literal["pending"], Literal["earliest"], Literal["safe"], Literal["finalized"]]] = None, confirmations: Optional[int] = None) -> TransactionAbc[uint256]:
        """
        [Source code](file:///Users/dteiml/p/hacker-dom/woke-uniswap-v2/src/UniswapV2Router02.sol#408)

        Args:
            amountIn: uint256
            reserveIn: uint256
            reserveOut: uint256
        Returns:
            uint256
        """
        ...

    def getAmountOut(self, amountIn: uint256, reserveIn: uint256, reserveOut: uint256, *, from_: Optional[Union[Account, Address, str]] = None, to: Optional[Union[Account, Address, str]] = None, value: Union[int, str] = 0, gas_limit: Optional[Union[int, Literal["max"], Literal["auto"]]] = None, request_type: RequestType = 'call', gas_price: Optional[Union[int, str]] = None, max_fee_per_gas: Optional[Union[int, str]] = None, max_priority_fee_per_gas: Optional[Union[int, str]] = None, access_list: Optional[Union[Dict[Union[Account, Address, str], List[int]], Literal["auto"]]] = None, type: Optional[int] = None, block: Optional[Union[int, Literal["latest"], Literal["pending"], Literal["earliest"], Literal["safe"], Literal["finalized"]]] = None, confirmations: Optional[int] = None) -> Union[uint256, TransactionAbc[uint256], int, Tuple[Dict[Address, List[int]], int]]:
        """
        [Source code](file:///Users/dteiml/p/hacker-dom/woke-uniswap-v2/src/UniswapV2Router02.sol#408)

        Args:
            amountIn: uint256
            reserveIn: uint256
            reserveOut: uint256
        Returns:
            uint256
        """
        return self._execute(self.chain, request_type, "054d50d4", [amountIn, reserveIn, reserveOut], True if request_type == "tx" else False, uint256, from_, to if to is not None else str(self.address), value, gas_limit, gas_price, max_fee_per_gas, max_priority_fee_per_gas, access_list, type, block, confirmations)

    @overload
    def getAmountIn(self, amountOut: uint256, reserveIn: uint256, reserveOut: uint256, *, from_: Optional[Union[Account, Address, str]] = None, to: Optional[Union[Account, Address, str]] = None, value: Union[int, str] = 0, gas_limit: Optional[Union[int, Literal["max"], Literal["auto"]]] = None, request_type: Literal["call"] = "call", gas_price: Optional[Union[int, str]] = None, max_fee_per_gas: Optional[Union[int, str]] = None, max_priority_fee_per_gas: Optional[Union[int, str]] = None, access_list: Optional[Union[Dict[Union[Account, Address, str], List[int]], Literal["auto"]]] = None, type: Optional[int] = None, block: Optional[Union[int, Literal["latest"], Literal["pending"], Literal["earliest"], Literal["safe"], Literal["finalized"]]] = None, confirmations: Optional[int] = None) -> uint256:
        """
        [Source code](file:///Users/dteiml/p/hacker-dom/woke-uniswap-v2/src/UniswapV2Router02.sol#417)

        Args:
            amountOut: uint256
            reserveIn: uint256
            reserveOut: uint256
        Returns:
            uint256
        """
        ...

    @overload
    def getAmountIn(self, amountOut: uint256, reserveIn: uint256, reserveOut: uint256, *, from_: Optional[Union[Account, Address, str]] = None, to: Optional[Union[Account, Address, str]] = None, value: Union[int, str] = 0, gas_limit: Optional[Union[int, Literal["max"], Literal["auto"]]] = None, request_type: Literal["estimate"], gas_price: Optional[Union[int, str]] = None, max_fee_per_gas: Optional[Union[int, str]] = None, max_priority_fee_per_gas: Optional[Union[int, str]] = None, access_list: Optional[Union[Dict[Union[Account, Address, str], List[int]], Literal["auto"]]] = None, type: Optional[int] = None, block: Optional[Union[int, Literal["latest"], Literal["pending"], Literal["earliest"], Literal["safe"], Literal["finalized"]]] = None, confirmations: Optional[int] = None) -> int:
        """
        [Source code](file:///Users/dteiml/p/hacker-dom/woke-uniswap-v2/src/UniswapV2Router02.sol#417)

        Args:
            amountOut: uint256
            reserveIn: uint256
            reserveOut: uint256
        Returns:
            uint256
        """
        ...

    @overload
    def getAmountIn(self, amountOut: uint256, reserveIn: uint256, reserveOut: uint256, *, from_: Optional[Union[Account, Address, str]] = None, to: Optional[Union[Account, Address, str]] = None, value: Union[int, str] = 0, gas_limit: Optional[Union[int, Literal["max"], Literal["auto"]]] = None, request_type: Literal["access_list"], gas_price: Optional[Union[int, str]] = None, max_fee_per_gas: Optional[Union[int, str]] = None, max_priority_fee_per_gas: Optional[Union[int, str]] = None, access_list: Optional[Union[Dict[Union[Account, Address, str], List[int]], Literal["auto"]]] = None, type: Optional[int] = None, block: Optional[Union[int, Literal["latest"], Literal["pending"], Literal["earliest"], Literal["safe"], Literal["finalized"]]] = None, confirmations: Optional[int] = None) -> Tuple[Dict[Address, List[int]], int]:
        """
        [Source code](file:///Users/dteiml/p/hacker-dom/woke-uniswap-v2/src/UniswapV2Router02.sol#417)

        Args:
            amountOut: uint256
            reserveIn: uint256
            reserveOut: uint256
        Returns:
            uint256
        """
        ...

    @overload
    def getAmountIn(self, amountOut: uint256, reserveIn: uint256, reserveOut: uint256, *, from_: Optional[Union[Account, Address, str]] = None, to: Optional[Union[Account, Address, str]] = None, value: Union[int, str] = 0, gas_limit: Optional[Union[int, Literal["max"], Literal["auto"]]] = None, request_type: Literal["tx"], gas_price: Optional[Union[int, str]] = None, max_fee_per_gas: Optional[Union[int, str]] = None, max_priority_fee_per_gas: Optional[Union[int, str]] = None, access_list: Optional[Union[Dict[Union[Account, Address, str], List[int]], Literal["auto"]]] = None, type: Optional[int] = None, block: Optional[Union[int, Literal["latest"], Literal["pending"], Literal["earliest"], Literal["safe"], Literal["finalized"]]] = None, confirmations: Optional[int] = None) -> TransactionAbc[uint256]:
        """
        [Source code](file:///Users/dteiml/p/hacker-dom/woke-uniswap-v2/src/UniswapV2Router02.sol#417)

        Args:
            amountOut: uint256
            reserveIn: uint256
            reserveOut: uint256
        Returns:
            uint256
        """
        ...

    def getAmountIn(self, amountOut: uint256, reserveIn: uint256, reserveOut: uint256, *, from_: Optional[Union[Account, Address, str]] = None, to: Optional[Union[Account, Address, str]] = None, value: Union[int, str] = 0, gas_limit: Optional[Union[int, Literal["max"], Literal["auto"]]] = None, request_type: RequestType = 'call', gas_price: Optional[Union[int, str]] = None, max_fee_per_gas: Optional[Union[int, str]] = None, max_priority_fee_per_gas: Optional[Union[int, str]] = None, access_list: Optional[Union[Dict[Union[Account, Address, str], List[int]], Literal["auto"]]] = None, type: Optional[int] = None, block: Optional[Union[int, Literal["latest"], Literal["pending"], Literal["earliest"], Literal["safe"], Literal["finalized"]]] = None, confirmations: Optional[int] = None) -> Union[uint256, TransactionAbc[uint256], int, Tuple[Dict[Address, List[int]], int]]:
        """
        [Source code](file:///Users/dteiml/p/hacker-dom/woke-uniswap-v2/src/UniswapV2Router02.sol#417)

        Args:
            amountOut: uint256
            reserveIn: uint256
            reserveOut: uint256
        Returns:
            uint256
        """
        return self._execute(self.chain, request_type, "85f8c259", [amountOut, reserveIn, reserveOut], True if request_type == "tx" else False, uint256, from_, to if to is not None else str(self.address), value, gas_limit, gas_price, max_fee_per_gas, max_priority_fee_per_gas, access_list, type, block, confirmations)

    @overload
    def getAmountsOut(self, amountIn: uint256, path: List[Union[Account, Address]], *, from_: Optional[Union[Account, Address, str]] = None, to: Optional[Union[Account, Address, str]] = None, value: Union[int, str] = 0, gas_limit: Optional[Union[int, Literal["max"], Literal["auto"]]] = None, request_type: Literal["call"] = "call", gas_price: Optional[Union[int, str]] = None, max_fee_per_gas: Optional[Union[int, str]] = None, max_priority_fee_per_gas: Optional[Union[int, str]] = None, access_list: Optional[Union[Dict[Union[Account, Address, str], List[int]], Literal["auto"]]] = None, type: Optional[int] = None, block: Optional[Union[int, Literal["latest"], Literal["pending"], Literal["earliest"], Literal["safe"], Literal["finalized"]]] = None, confirmations: Optional[int] = None) -> List[uint256]:
        """
        [Source code](file:///Users/dteiml/p/hacker-dom/woke-uniswap-v2/src/UniswapV2Router02.sol#426)

        Args:
            amountIn: uint256
            path: address[]
        Returns:
            uint256[]
        """
        ...

    @overload
    def getAmountsOut(self, amountIn: uint256, path: List[Union[Account, Address]], *, from_: Optional[Union[Account, Address, str]] = None, to: Optional[Union[Account, Address, str]] = None, value: Union[int, str] = 0, gas_limit: Optional[Union[int, Literal["max"], Literal["auto"]]] = None, request_type: Literal["estimate"], gas_price: Optional[Union[int, str]] = None, max_fee_per_gas: Optional[Union[int, str]] = None, max_priority_fee_per_gas: Optional[Union[int, str]] = None, access_list: Optional[Union[Dict[Union[Account, Address, str], List[int]], Literal["auto"]]] = None, type: Optional[int] = None, block: Optional[Union[int, Literal["latest"], Literal["pending"], Literal["earliest"], Literal["safe"], Literal["finalized"]]] = None, confirmations: Optional[int] = None) -> int:
        """
        [Source code](file:///Users/dteiml/p/hacker-dom/woke-uniswap-v2/src/UniswapV2Router02.sol#426)

        Args:
            amountIn: uint256
            path: address[]
        Returns:
            uint256[]
        """
        ...

    @overload
    def getAmountsOut(self, amountIn: uint256, path: List[Union[Account, Address]], *, from_: Optional[Union[Account, Address, str]] = None, to: Optional[Union[Account, Address, str]] = None, value: Union[int, str] = 0, gas_limit: Optional[Union[int, Literal["max"], Literal["auto"]]] = None, request_type: Literal["access_list"], gas_price: Optional[Union[int, str]] = None, max_fee_per_gas: Optional[Union[int, str]] = None, max_priority_fee_per_gas: Optional[Union[int, str]] = None, access_list: Optional[Union[Dict[Union[Account, Address, str], List[int]], Literal["auto"]]] = None, type: Optional[int] = None, block: Optional[Union[int, Literal["latest"], Literal["pending"], Literal["earliest"], Literal["safe"], Literal["finalized"]]] = None, confirmations: Optional[int] = None) -> Tuple[Dict[Address, List[int]], int]:
        """
        [Source code](file:///Users/dteiml/p/hacker-dom/woke-uniswap-v2/src/UniswapV2Router02.sol#426)

        Args:
            amountIn: uint256
            path: address[]
        Returns:
            uint256[]
        """
        ...

    @overload
    def getAmountsOut(self, amountIn: uint256, path: List[Union[Account, Address]], *, from_: Optional[Union[Account, Address, str]] = None, to: Optional[Union[Account, Address, str]] = None, value: Union[int, str] = 0, gas_limit: Optional[Union[int, Literal["max"], Literal["auto"]]] = None, request_type: Literal["tx"], gas_price: Optional[Union[int, str]] = None, max_fee_per_gas: Optional[Union[int, str]] = None, max_priority_fee_per_gas: Optional[Union[int, str]] = None, access_list: Optional[Union[Dict[Union[Account, Address, str], List[int]], Literal["auto"]]] = None, type: Optional[int] = None, block: Optional[Union[int, Literal["latest"], Literal["pending"], Literal["earliest"], Literal["safe"], Literal["finalized"]]] = None, confirmations: Optional[int] = None) -> TransactionAbc[List[uint256]]:
        """
        [Source code](file:///Users/dteiml/p/hacker-dom/woke-uniswap-v2/src/UniswapV2Router02.sol#426)

        Args:
            amountIn: uint256
            path: address[]
        Returns:
            uint256[]
        """
        ...

    def getAmountsOut(self, amountIn: uint256, path: List[Union[Account, Address]], *, from_: Optional[Union[Account, Address, str]] = None, to: Optional[Union[Account, Address, str]] = None, value: Union[int, str] = 0, gas_limit: Optional[Union[int, Literal["max"], Literal["auto"]]] = None, request_type: RequestType = 'call', gas_price: Optional[Union[int, str]] = None, max_fee_per_gas: Optional[Union[int, str]] = None, max_priority_fee_per_gas: Optional[Union[int, str]] = None, access_list: Optional[Union[Dict[Union[Account, Address, str], List[int]], Literal["auto"]]] = None, type: Optional[int] = None, block: Optional[Union[int, Literal["latest"], Literal["pending"], Literal["earliest"], Literal["safe"], Literal["finalized"]]] = None, confirmations: Optional[int] = None) -> Union[List[uint256], TransactionAbc[List[uint256]], int, Tuple[Dict[Address, List[int]], int]]:
        """
        [Source code](file:///Users/dteiml/p/hacker-dom/woke-uniswap-v2/src/UniswapV2Router02.sol#426)

        Args:
            amountIn: uint256
            path: address[]
        Returns:
            uint256[]
        """
        return self._execute(self.chain, request_type, "d06ca61f", [amountIn, path], True if request_type == "tx" else False, List[uint256], from_, to if to is not None else str(self.address), value, gas_limit, gas_price, max_fee_per_gas, max_priority_fee_per_gas, access_list, type, block, confirmations)

    @overload
    def getAmountsIn(self, amountOut: uint256, path: List[Union[Account, Address]], *, from_: Optional[Union[Account, Address, str]] = None, to: Optional[Union[Account, Address, str]] = None, value: Union[int, str] = 0, gas_limit: Optional[Union[int, Literal["max"], Literal["auto"]]] = None, request_type: Literal["call"] = "call", gas_price: Optional[Union[int, str]] = None, max_fee_per_gas: Optional[Union[int, str]] = None, max_priority_fee_per_gas: Optional[Union[int, str]] = None, access_list: Optional[Union[Dict[Union[Account, Address, str], List[int]], Literal["auto"]]] = None, type: Optional[int] = None, block: Optional[Union[int, Literal["latest"], Literal["pending"], Literal["earliest"], Literal["safe"], Literal["finalized"]]] = None, confirmations: Optional[int] = None) -> List[uint256]:
        """
        [Source code](file:///Users/dteiml/p/hacker-dom/woke-uniswap-v2/src/UniswapV2Router02.sol#435)

        Args:
            amountOut: uint256
            path: address[]
        Returns:
            uint256[]
        """
        ...

    @overload
    def getAmountsIn(self, amountOut: uint256, path: List[Union[Account, Address]], *, from_: Optional[Union[Account, Address, str]] = None, to: Optional[Union[Account, Address, str]] = None, value: Union[int, str] = 0, gas_limit: Optional[Union[int, Literal["max"], Literal["auto"]]] = None, request_type: Literal["estimate"], gas_price: Optional[Union[int, str]] = None, max_fee_per_gas: Optional[Union[int, str]] = None, max_priority_fee_per_gas: Optional[Union[int, str]] = None, access_list: Optional[Union[Dict[Union[Account, Address, str], List[int]], Literal["auto"]]] = None, type: Optional[int] = None, block: Optional[Union[int, Literal["latest"], Literal["pending"], Literal["earliest"], Literal["safe"], Literal["finalized"]]] = None, confirmations: Optional[int] = None) -> int:
        """
        [Source code](file:///Users/dteiml/p/hacker-dom/woke-uniswap-v2/src/UniswapV2Router02.sol#435)

        Args:
            amountOut: uint256
            path: address[]
        Returns:
            uint256[]
        """
        ...

    @overload
    def getAmountsIn(self, amountOut: uint256, path: List[Union[Account, Address]], *, from_: Optional[Union[Account, Address, str]] = None, to: Optional[Union[Account, Address, str]] = None, value: Union[int, str] = 0, gas_limit: Optional[Union[int, Literal["max"], Literal["auto"]]] = None, request_type: Literal["access_list"], gas_price: Optional[Union[int, str]] = None, max_fee_per_gas: Optional[Union[int, str]] = None, max_priority_fee_per_gas: Optional[Union[int, str]] = None, access_list: Optional[Union[Dict[Union[Account, Address, str], List[int]], Literal["auto"]]] = None, type: Optional[int] = None, block: Optional[Union[int, Literal["latest"], Literal["pending"], Literal["earliest"], Literal["safe"], Literal["finalized"]]] = None, confirmations: Optional[int] = None) -> Tuple[Dict[Address, List[int]], int]:
        """
        [Source code](file:///Users/dteiml/p/hacker-dom/woke-uniswap-v2/src/UniswapV2Router02.sol#435)

        Args:
            amountOut: uint256
            path: address[]
        Returns:
            uint256[]
        """
        ...

    @overload
    def getAmountsIn(self, amountOut: uint256, path: List[Union[Account, Address]], *, from_: Optional[Union[Account, Address, str]] = None, to: Optional[Union[Account, Address, str]] = None, value: Union[int, str] = 0, gas_limit: Optional[Union[int, Literal["max"], Literal["auto"]]] = None, request_type: Literal["tx"], gas_price: Optional[Union[int, str]] = None, max_fee_per_gas: Optional[Union[int, str]] = None, max_priority_fee_per_gas: Optional[Union[int, str]] = None, access_list: Optional[Union[Dict[Union[Account, Address, str], List[int]], Literal["auto"]]] = None, type: Optional[int] = None, block: Optional[Union[int, Literal["latest"], Literal["pending"], Literal["earliest"], Literal["safe"], Literal["finalized"]]] = None, confirmations: Optional[int] = None) -> TransactionAbc[List[uint256]]:
        """
        [Source code](file:///Users/dteiml/p/hacker-dom/woke-uniswap-v2/src/UniswapV2Router02.sol#435)

        Args:
            amountOut: uint256
            path: address[]
        Returns:
            uint256[]
        """
        ...

    def getAmountsIn(self, amountOut: uint256, path: List[Union[Account, Address]], *, from_: Optional[Union[Account, Address, str]] = None, to: Optional[Union[Account, Address, str]] = None, value: Union[int, str] = 0, gas_limit: Optional[Union[int, Literal["max"], Literal["auto"]]] = None, request_type: RequestType = 'call', gas_price: Optional[Union[int, str]] = None, max_fee_per_gas: Optional[Union[int, str]] = None, max_priority_fee_per_gas: Optional[Union[int, str]] = None, access_list: Optional[Union[Dict[Union[Account, Address, str], List[int]], Literal["auto"]]] = None, type: Optional[int] = None, block: Optional[Union[int, Literal["latest"], Literal["pending"], Literal["earliest"], Literal["safe"], Literal["finalized"]]] = None, confirmations: Optional[int] = None) -> Union[List[uint256], TransactionAbc[List[uint256]], int, Tuple[Dict[Address, List[int]], int]]:
        """
        [Source code](file:///Users/dteiml/p/hacker-dom/woke-uniswap-v2/src/UniswapV2Router02.sol#435)

        Args:
            amountOut: uint256
            path: address[]
        Returns:
            uint256[]
        """
        return self._execute(self.chain, request_type, "1f00ca74", [amountOut, path], True if request_type == "tx" else False, List[uint256], from_, to if to is not None else str(self.address), value, gas_limit, gas_price, max_fee_per_gas, max_priority_fee_per_gas, access_list, type, block, confirmations)

UniswapV2Router02.factory.selector = b'\xc4Z\x01U'
UniswapV2Router02.WETH.selector = b'\xad\\FH'
UniswapV2Router02.addLiquidity.selector = b'\xe8\xe37\x00'
UniswapV2Router02.addLiquidityETH.selector = b'\xf3\x05\xd7\x19'
UniswapV2Router02.removeLiquidity.selector = b'\xba\xa2\xab\xde'
UniswapV2Router02.removeLiquidityETH.selector = b'\x02u\x1c\xec'
UniswapV2Router02.removeLiquidityWithPermit.selector = b'!\x95\x99\\'
UniswapV2Router02.removeLiquidityETHWithPermit.selector = b'\xde\xd98*'
UniswapV2Router02.removeLiquidityETHSupportingFeeOnTransferTokens.selector = b'\xaf)y\xeb'
UniswapV2Router02.removeLiquidityETHWithPermitSupportingFeeOnTransferTokens.selector = b'[\rY\x84'
UniswapV2Router02.swapExactTokensForTokens.selector = b'8\xed\x179'
UniswapV2Router02.swapTokensForExactTokens.selector = b'\x88\x03\xdb\xee'
UniswapV2Router02.swapExactETHForTokens.selector = b'\x7f\xf3j\xb5'
UniswapV2Router02.swapTokensForExactETH.selector = b'J%\xd9J'
UniswapV2Router02.swapExactTokensForETH.selector = b'\x18\xcb\xaf\xe5'
UniswapV2Router02.swapETHForExactTokens.selector = b'\xfb;\xdbA'
UniswapV2Router02.swapExactTokensForTokensSupportingFeeOnTransferTokens.selector = b'\\\x11\xd7\x95'
UniswapV2Router02.swapExactETHForTokensSupportingFeeOnTransferTokens.selector = b'\xb6\xf9\xde\x95'
UniswapV2Router02.swapExactTokensForETHSupportingFeeOnTransferTokens.selector = b'y\x1a\xc9G'
UniswapV2Router02.quote.selector = b'\xada]\xec'
UniswapV2Router02.getAmountOut.selector = b'\x05MP\xd4'
UniswapV2Router02.getAmountIn.selector = b'\x85\xf8\xc2Y'
UniswapV2Router02.getAmountsOut.selector = b'\xd0l\xa6\x1f'
UniswapV2Router02.getAmountsIn.selector = b'\x1f\x00\xcat'
