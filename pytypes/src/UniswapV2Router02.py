
from __future__ import annotations

import dataclasses
from typing import List, Dict, Optional, overload, Union, Callable, Tuple
from typing_extensions import Literal

from woke.development.core import Contract, Library, Address, Account, Chain, RequestType
from woke.development.primitive_types import *
from woke.development.transactions import TransactionAbc, TransactionRevertedError

from enum import IntEnum



class UniswapV2Router02(Contract):
    """
    [Source code](file:///Users/dteiml/p/hacker-dom/woke-uniswap-v2/src/UniswapV2Router02.sol#13)
    """
    _abi = {'constructor': {'inputs': [{'internalType': 'address', 'name': '_factory', 'type': 'address'}, {'internalType': 'address', 'name': '_WETH', 'type': 'address'}], 'stateMutability': 'nonpayable', 'type': 'constructor'}, b'\xad\\FH': {'inputs': [], 'name': 'WETH', 'outputs': [{'internalType': 'address', 'name': '', 'type': 'address'}], 'stateMutability': 'view', 'type': 'function'}, b'\xe8\xe37\x00': {'inputs': [{'internalType': 'address', 'name': 'tokenA', 'type': 'address'}, {'internalType': 'address', 'name': 'tokenB', 'type': 'address'}, {'internalType': 'uint256', 'name': 'amountADesired', 'type': 'uint256'}, {'internalType': 'uint256', 'name': 'amountBDesired', 'type': 'uint256'}, {'internalType': 'uint256', 'name': 'amountAMin', 'type': 'uint256'}, {'internalType': 'uint256', 'name': 'amountBMin', 'type': 'uint256'}, {'internalType': 'address', 'name': 'to', 'type': 'address'}, {'internalType': 'uint256', 'name': 'deadline', 'type': 'uint256'}], 'name': 'addLiquidity', 'outputs': [{'internalType': 'uint256', 'name': 'amountA', 'type': 'uint256'}, {'internalType': 'uint256', 'name': 'amountB', 'type': 'uint256'}, {'internalType': 'uint256', 'name': 'liquidity', 'type': 'uint256'}], 'stateMutability': 'nonpayable', 'type': 'function'}, b'\xf3\x05\xd7\x19': {'inputs': [{'internalType': 'address', 'name': 'token', 'type': 'address'}, {'internalType': 'uint256', 'name': 'amountTokenDesired', 'type': 'uint256'}, {'internalType': 'uint256', 'name': 'amountTokenMin', 'type': 'uint256'}, {'internalType': 'uint256', 'name': 'amountETHMin', 'type': 'uint256'}, {'internalType': 'address', 'name': 'to', 'type': 'address'}, {'internalType': 'uint256', 'name': 'deadline', 'type': 'uint256'}], 'name': 'addLiquidityETH', 'outputs': [{'internalType': 'uint256', 'name': 'amountToken', 'type': 'uint256'}, {'internalType': 'uint256', 'name': 'amountETH', 'type': 'uint256'}, {'internalType': 'uint256', 'name': 'liquidity', 'type': 'uint256'}], 'stateMutability': 'payable', 'type': 'function'}, b'\xc4Z\x01U': {'inputs': [], 'name': 'factory', 'outputs': [{'internalType': 'address', 'name': '', 'type': 'address'}], 'stateMutability': 'view', 'type': 'function'}, b'\x85\xf8\xc2Y': {'inputs': [{'internalType': 'uint256', 'name': 'amountOut', 'type': 'uint256'}, {'internalType': 'uint256', 'name': 'reserveIn', 'type': 'uint256'}, {'internalType': 'uint256', 'name': 'reserveOut', 'type': 'uint256'}], 'name': 'getAmountIn', 'outputs': [{'internalType': 'uint256', 'name': 'amountIn', 'type': 'uint256'}], 'stateMutability': 'view', 'type': 'function'}, b'\x05MP\xd4': {'inputs': [{'internalType': 'uint256', 'name': 'amountIn', 'type': 'uint256'}, {'internalType': 'uint256', 'name': 'reserveIn', 'type': 'uint256'}, {'internalType': 'uint256', 'name': 'reserveOut', 'type': 'uint256'}], 'name': 'getAmountOut', 'outputs': [{'internalType': 'uint256', 'name': 'amountOut', 'type': 'uint256'}], 'stateMutability': 'view', 'type': 'function'}, b'\x1f\x00\xcat': {'inputs': [{'internalType': 'uint256', 'name': 'amountOut', 'type': 'uint256'}, {'internalType': 'address[]', 'name': 'path', 'type': 'address[]'}], 'name': 'getAmountsIn', 'outputs': [{'internalType': 'uint256[]', 'name': 'amounts', 'type': 'uint256[]'}], 'stateMutability': 'view', 'type': 'function'}, b'\xd0l\xa6\x1f': {'inputs': [{'internalType': 'uint256', 'name': 'amountIn', 'type': 'uint256'}, {'internalType': 'address[]', 'name': 'path', 'type': 'address[]'}], 'name': 'getAmountsOut', 'outputs': [{'internalType': 'uint256[]', 'name': 'amounts', 'type': 'uint256[]'}], 'stateMutability': 'view', 'type': 'function'}, b'\xada]\xec': {'inputs': [{'internalType': 'uint256', 'name': 'amountA', 'type': 'uint256'}, {'internalType': 'uint256', 'name': 'reserveA', 'type': 'uint256'}, {'internalType': 'uint256', 'name': 'reserveB', 'type': 'uint256'}], 'name': 'quote', 'outputs': [{'internalType': 'uint256', 'name': 'amountB', 'type': 'uint256'}], 'stateMutability': 'pure', 'type': 'function'}, b'\xba\xa2\xab\xde': {'inputs': [{'internalType': 'address', 'name': 'tokenA', 'type': 'address'}, {'internalType': 'address', 'name': 'tokenB', 'type': 'address'}, {'internalType': 'uint256', 'name': 'liquidity', 'type': 'uint256'}, {'internalType': 'uint256', 'name': 'amountAMin', 'type': 'uint256'}, {'internalType': 'uint256', 'name': 'amountBMin', 'type': 'uint256'}, {'internalType': 'address', 'name': 'to', 'type': 'address'}, {'internalType': 'uint256', 'name': 'deadline', 'type': 'uint256'}], 'name': 'removeLiquidity', 'outputs': [{'internalType': 'uint256', 'name': 'amountA', 'type': 'uint256'}, {'internalType': 'uint256', 'name': 'amountB', 'type': 'uint256'}], 'stateMutability': 'nonpayable', 'type': 'function'}, b'\x02u\x1c\xec': {'inputs': [{'internalType': 'address', 'name': 'token', 'type': 'address'}, {'internalType': 'uint256', 'name': 'liquidity', 'type': 'uint256'}, {'internalType': 'uint256', 'name': 'amountTokenMin', 'type': 'uint256'}, {'internalType': 'uint256', 'name': 'amountETHMin', 'type': 'uint256'}, {'internalType': 'address', 'name': 'to', 'type': 'address'}, {'internalType': 'uint256', 'name': 'deadline', 'type': 'uint256'}], 'name': 'removeLiquidityETH', 'outputs': [{'internalType': 'uint256', 'name': 'amountToken', 'type': 'uint256'}, {'internalType': 'uint256', 'name': 'amountETH', 'type': 'uint256'}], 'stateMutability': 'nonpayable', 'type': 'function'}, b'\xaf)y\xeb': {'inputs': [{'internalType': 'address', 'name': 'token', 'type': 'address'}, {'internalType': 'uint256', 'name': 'liquidity', 'type': 'uint256'}, {'internalType': 'uint256', 'name': 'amountTokenMin', 'type': 'uint256'}, {'internalType': 'uint256', 'name': 'amountETHMin', 'type': 'uint256'}, {'internalType': 'address', 'name': 'to', 'type': 'address'}, {'internalType': 'uint256', 'name': 'deadline', 'type': 'uint256'}], 'name': 'removeLiquidityETHSupportingFeeOnTransferTokens', 'outputs': [{'internalType': 'uint256', 'name': 'amountETH', 'type': 'uint256'}], 'stateMutability': 'nonpayable', 'type': 'function'}, b'\xde\xd98*': {'inputs': [{'internalType': 'address', 'name': 'token', 'type': 'address'}, {'internalType': 'uint256', 'name': 'liquidity', 'type': 'uint256'}, {'internalType': 'uint256', 'name': 'amountTokenMin', 'type': 'uint256'}, {'internalType': 'uint256', 'name': 'amountETHMin', 'type': 'uint256'}, {'internalType': 'address', 'name': 'to', 'type': 'address'}, {'internalType': 'uint256', 'name': 'deadline', 'type': 'uint256'}, {'internalType': 'bool', 'name': 'approveMax', 'type': 'bool'}, {'internalType': 'uint8', 'name': 'v', 'type': 'uint8'}, {'internalType': 'bytes32', 'name': 'r', 'type': 'bytes32'}, {'internalType': 'bytes32', 'name': 's', 'type': 'bytes32'}], 'name': 'removeLiquidityETHWithPermit', 'outputs': [{'internalType': 'uint256', 'name': 'amountToken', 'type': 'uint256'}, {'internalType': 'uint256', 'name': 'amountETH', 'type': 'uint256'}], 'stateMutability': 'nonpayable', 'type': 'function'}, b'[\rY\x84': {'inputs': [{'internalType': 'address', 'name': 'token', 'type': 'address'}, {'internalType': 'uint256', 'name': 'liquidity', 'type': 'uint256'}, {'internalType': 'uint256', 'name': 'amountTokenMin', 'type': 'uint256'}, {'internalType': 'uint256', 'name': 'amountETHMin', 'type': 'uint256'}, {'internalType': 'address', 'name': 'to', 'type': 'address'}, {'internalType': 'uint256', 'name': 'deadline', 'type': 'uint256'}, {'internalType': 'bool', 'name': 'approveMax', 'type': 'bool'}, {'internalType': 'uint8', 'name': 'v', 'type': 'uint8'}, {'internalType': 'bytes32', 'name': 'r', 'type': 'bytes32'}, {'internalType': 'bytes32', 'name': 's', 'type': 'bytes32'}], 'name': 'removeLiquidityETHWithPermitSupportingFeeOnTransferTokens', 'outputs': [{'internalType': 'uint256', 'name': 'amountETH', 'type': 'uint256'}], 'stateMutability': 'nonpayable', 'type': 'function'}, b'!\x95\x99\\': {'inputs': [{'internalType': 'address', 'name': 'tokenA', 'type': 'address'}, {'internalType': 'address', 'name': 'tokenB', 'type': 'address'}, {'internalType': 'uint256', 'name': 'liquidity', 'type': 'uint256'}, {'internalType': 'uint256', 'name': 'amountAMin', 'type': 'uint256'}, {'internalType': 'uint256', 'name': 'amountBMin', 'type': 'uint256'}, {'internalType': 'address', 'name': 'to', 'type': 'address'}, {'internalType': 'uint256', 'name': 'deadline', 'type': 'uint256'}, {'internalType': 'bool', 'name': 'approveMax', 'type': 'bool'}, {'internalType': 'uint8', 'name': 'v', 'type': 'uint8'}, {'internalType': 'bytes32', 'name': 'r', 'type': 'bytes32'}, {'internalType': 'bytes32', 'name': 's', 'type': 'bytes32'}], 'name': 'removeLiquidityWithPermit', 'outputs': [{'internalType': 'uint256', 'name': 'amountA', 'type': 'uint256'}, {'internalType': 'uint256', 'name': 'amountB', 'type': 'uint256'}], 'stateMutability': 'nonpayable', 'type': 'function'}, b'\xfb;\xdbA': {'inputs': [{'internalType': 'uint256', 'name': 'amountOut', 'type': 'uint256'}, {'internalType': 'address[]', 'name': 'path', 'type': 'address[]'}, {'internalType': 'address', 'name': 'to', 'type': 'address'}, {'internalType': 'uint256', 'name': 'deadline', 'type': 'uint256'}], 'name': 'swapETHForExactTokens', 'outputs': [{'internalType': 'uint256[]', 'name': 'amounts', 'type': 'uint256[]'}], 'stateMutability': 'payable', 'type': 'function'}, b'\x7f\xf3j\xb5': {'inputs': [{'internalType': 'uint256', 'name': 'amountOutMin', 'type': 'uint256'}, {'internalType': 'address[]', 'name': 'path', 'type': 'address[]'}, {'internalType': 'address', 'name': 'to', 'type': 'address'}, {'internalType': 'uint256', 'name': 'deadline', 'type': 'uint256'}], 'name': 'swapExactETHForTokens', 'outputs': [{'internalType': 'uint256[]', 'name': 'amounts', 'type': 'uint256[]'}], 'stateMutability': 'payable', 'type': 'function'}, b'\xb6\xf9\xde\x95': {'inputs': [{'internalType': 'uint256', 'name': 'amountOutMin', 'type': 'uint256'}, {'internalType': 'address[]', 'name': 'path', 'type': 'address[]'}, {'internalType': 'address', 'name': 'to', 'type': 'address'}, {'internalType': 'uint256', 'name': 'deadline', 'type': 'uint256'}], 'name': 'swapExactETHForTokensSupportingFeeOnTransferTokens', 'outputs': [], 'stateMutability': 'payable', 'type': 'function'}, b'\x18\xcb\xaf\xe5': {'inputs': [{'internalType': 'uint256', 'name': 'amountIn', 'type': 'uint256'}, {'internalType': 'uint256', 'name': 'amountOutMin', 'type': 'uint256'}, {'internalType': 'address[]', 'name': 'path', 'type': 'address[]'}, {'internalType': 'address', 'name': 'to', 'type': 'address'}, {'internalType': 'uint256', 'name': 'deadline', 'type': 'uint256'}], 'name': 'swapExactTokensForETH', 'outputs': [{'internalType': 'uint256[]', 'name': 'amounts', 'type': 'uint256[]'}], 'stateMutability': 'nonpayable', 'type': 'function'}, b'y\x1a\xc9G': {'inputs': [{'internalType': 'uint256', 'name': 'amountIn', 'type': 'uint256'}, {'internalType': 'uint256', 'name': 'amountOutMin', 'type': 'uint256'}, {'internalType': 'address[]', 'name': 'path', 'type': 'address[]'}, {'internalType': 'address', 'name': 'to', 'type': 'address'}, {'internalType': 'uint256', 'name': 'deadline', 'type': 'uint256'}], 'name': 'swapExactTokensForETHSupportingFeeOnTransferTokens', 'outputs': [], 'stateMutability': 'nonpayable', 'type': 'function'}, b'8\xed\x179': {'inputs': [{'internalType': 'uint256', 'name': 'amountIn', 'type': 'uint256'}, {'internalType': 'uint256', 'name': 'amountOutMin', 'type': 'uint256'}, {'internalType': 'address[]', 'name': 'path', 'type': 'address[]'}, {'internalType': 'address', 'name': 'to', 'type': 'address'}, {'internalType': 'uint256', 'name': 'deadline', 'type': 'uint256'}], 'name': 'swapExactTokensForTokens', 'outputs': [{'internalType': 'uint256[]', 'name': 'amounts', 'type': 'uint256[]'}], 'stateMutability': 'nonpayable', 'type': 'function'}, b'\\\x11\xd7\x95': {'inputs': [{'internalType': 'uint256', 'name': 'amountIn', 'type': 'uint256'}, {'internalType': 'uint256', 'name': 'amountOutMin', 'type': 'uint256'}, {'internalType': 'address[]', 'name': 'path', 'type': 'address[]'}, {'internalType': 'address', 'name': 'to', 'type': 'address'}, {'internalType': 'uint256', 'name': 'deadline', 'type': 'uint256'}], 'name': 'swapExactTokensForTokensSupportingFeeOnTransferTokens', 'outputs': [], 'stateMutability': 'nonpayable', 'type': 'function'}, b'\x959\xca\xb8': {'inputs': [{'internalType': 'uint256', 'name': 'amountIn', 'type': 'uint256'}, {'internalType': 'uint256', 'name': 'amountOutMin', 'type': 'uint256'}, {'internalType': 'address[]', 'name': 'path', 'type': 'address[]'}, {'internalType': 'address', 'name': 'to', 'type': 'address'}, {'internalType': 'uint256', 'name': 'deadline', 'type': 'uint256'}], 'name': 'swapExactTokensForTokens_noFee', 'outputs': [{'internalType': 'uint256[]', 'name': 'amounts', 'type': 'uint256[]'}], 'stateMutability': 'nonpayable', 'type': 'function'}, b'J%\xd9J': {'inputs': [{'internalType': 'uint256', 'name': 'amountOut', 'type': 'uint256'}, {'internalType': 'uint256', 'name': 'amountInMax', 'type': 'uint256'}, {'internalType': 'address[]', 'name': 'path', 'type': 'address[]'}, {'internalType': 'address', 'name': 'to', 'type': 'address'}, {'internalType': 'uint256', 'name': 'deadline', 'type': 'uint256'}], 'name': 'swapTokensForExactETH', 'outputs': [{'internalType': 'uint256[]', 'name': 'amounts', 'type': 'uint256[]'}], 'stateMutability': 'nonpayable', 'type': 'function'}, b'\x88\x03\xdb\xee': {'inputs': [{'internalType': 'uint256', 'name': 'amountOut', 'type': 'uint256'}, {'internalType': 'uint256', 'name': 'amountInMax', 'type': 'uint256'}, {'internalType': 'address[]', 'name': 'path', 'type': 'address[]'}, {'internalType': 'address', 'name': 'to', 'type': 'address'}, {'internalType': 'uint256', 'name': 'deadline', 'type': 'uint256'}], 'name': 'swapTokensForExactTokens', 'outputs': [{'internalType': 'uint256[]', 'name': 'amounts', 'type': 'uint256[]'}], 'stateMutability': 'nonpayable', 'type': 'function'}, b'\xe3\xb3AT': {'inputs': [{'internalType': 'uint256', 'name': 'amountOut', 'type': 'uint256'}, {'internalType': 'uint256', 'name': 'amountInMax', 'type': 'uint256'}, {'internalType': 'address[]', 'name': 'path', 'type': 'address[]'}, {'internalType': 'address', 'name': 'to', 'type': 'address'}, {'internalType': 'uint256', 'name': 'deadline', 'type': 'uint256'}], 'name': 'swapTokensForExactTokens_noFee', 'outputs': [{'internalType': 'uint256[]', 'name': 'amounts', 'type': 'uint256[]'}], 'stateMutability': 'nonpayable', 'type': 'function'}, 'receive': {'stateMutability': 'payable', 'type': 'receive'}}
    _creation_code = "60c060405234801562000010575f80fd5b506040516200518e3803806200518e833981016040819052620000339162000067565b6001600160a01b039182166080521660a0526200009d565b80516001600160a01b038116811462000062575f80fd5b919050565b5f806040838503121562000079575f80fd5b62000084836200004b565b915062000094602084016200004b565b90509250929050565b60805160a051614f47620002475f395f818161018e015281816103ad01528181610579015281816105c80152818161067e0152818161089c01528181610c1501528181610d4d0152818161108e0152818161116e01528181611217015281816112a5015281816113c10152818161144a015281816117d50152818161188b015281816119170152818161199201528181611a0201528181611e35015281816120d2015281816121270152818161215b015281816121ec0152818161231f0152818161242e01526124b701525f8181610468015281816106fa015281816107ca0152818161097d015281816109b401528181610ac501528181610c9101528181610d2b01528181610e5a0152818161131f0152818161147c015281816115c00152818161169c01528181611a3401528181611c4901528181611de501528181611e1301528181611f1d01528181611fed0152818161210501528181612399015281816124e901528181612e8301528181612ed30152818161321a01528181613379015281816137e20152818161381501528181613bf601528181613c960152613d090152614f475ff3fe60806040526004361061017e575f3560e01c80639539cab8116100cd578063c45a015511610087578063e3b3415411610062578063e3b34154146104c8578063e8e33700146104e7578063f305d71914610521578063fb3bdb4114610534575f80fd5b8063c45a015514610457578063d06ca61f1461048a578063ded9382a146104a9575f80fd5b80639539cab81461037d578063ad5c46481461039c578063ad615dec146103e7578063af2979eb14610406578063b6f9de9514610425578063baa2abde14610438575f80fd5b80634a25d94a11610138578063791ac94711610113578063791ac9471461030d5780637ff36ab51461032c57806385f8c2591461033f5780638803dbee1461035e575f80fd5b80634a25d94a146102b05780635b0d5984146102cf5780635c11d795146102ee575f80fd5b806302751cec146101c1578063054d50d4146101fa57806318cbafe5146102275780631f00ca74146102535780632195995c1461027257806338ed173914610291575f80fd5b366101bd57336001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016146101bb576101bb614328565b005b5f80fd5b3480156101cc575f80fd5b506101e06101db366004614360565b610547565b604080519283526020830191909152015b60405180910390f35b348015610205575f80fd5b506102196102143660046143ba565b61063d565b6040519081526020016101f1565b348015610232575f80fd5b50610246610241366004614424565b610651565b6040516101f19190614492565b34801561025e575f80fd5b5061024661026d3660046144e9565b610976565b34801561027d575f80fd5b506101e061028c3660046145d2565b6109ac565b34801561029c575f80fd5b506102466102ab366004614424565b610a7c565b3480156102bb575f80fd5b506102466102ca366004614424565b610be8565b3480156102da575f80fd5b506102196102e9366004614675565b610d24565b3480156102f9575f80fd5b506101bb610308366004614424565b610e09565b348015610318575f80fd5b506101bb610327366004614424565b611063565b61024661033a366004614705565b611280565b34801561034a575f80fd5b506102196103593660046143ba565b61158c565b348015610369575f80fd5b50610246610378366004614424565b611598565b348015610388575f80fd5b50610246610397366004614424565b611653565b3480156103a7575f80fd5b506103cf7f000000000000000000000000000000000000000000000000000000000000000081565b6040516001600160a01b0390911681526020016101f1565b3480156103f2575f80fd5b506102196104013660046143ba565b6117a1565b348015610411575f80fd5b50610219610420366004614360565b6117ad565b6101bb610433366004614705565b6118f4565b348015610443575f80fd5b506101e0610452366004614767565b611c20565b348015610462575f80fd5b506103cf7f000000000000000000000000000000000000000000000000000000000000000081565b348015610495575f80fd5b506102466104a43660046144e9565b611dde565b3480156104b4575f80fd5b506101e06104c3366004614675565b611e0b565b3480156104d3575f80fd5b506102466104e2366004614424565b611ef5565b3480156104f2575f80fd5b506105066105013660046147d4565b611fb0565b604080519384526020840192909252908201526060016101f1565b61050661052f366004614360565b6120a8565b610246610542366004614705565b6122fa565b5f8082428110156105735760405162461bcd60e51b815260040161056a9061484b565b60405180910390fd5b6105a2897f00000000000000000000000000000000000000000000000000000000000000008a8a8a308a611c20565b90935091506105b2898685612639565b604051632e1a7d4d60e01b8152600481018390527f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031690632e1a7d4d906024015f604051808303815f87803b158015610611575f80fd5b505af1158015610623573d5f803e3d5ffd5b505050506106318583612765565b50965096945050505050565b5f610649848484612840565b949350505050565b606081428110156106745760405162461bcd60e51b815260040161056a9061484b565b6001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001686866106ab600182614896565b8181106106ba576106ba6148a9565b90506020020160208101906106cf91906148bd565b6001600160a01b0316146106f55760405162461bcd60e51b815260040161056a906148df565b6107527f0000000000000000000000000000000000000000000000000000000000000000898888808060200260200160405190810160405280939291908181526020018383602002808284375f9201919091525061290492505050565b91508682600184516107649190614896565b81518110610774576107746148a9565b6020026020010151101561079a5760405162461bcd60e51b815260040161056a90614916565b61085c86865f8181106107af576107af6148a9565b90506020020160208101906107c491906148bd565b3361083d7f00000000000000000000000000000000000000000000000000000000000000008a8a5f8181106107fb576107fb6148a9565b905060200201602081019061081091906148bd565b8b8b6001818110610823576108236148a9565b905060200201602081019061083891906148bd565b612a8c565b855f8151811061084f5761084f6148a9565b6020026020010151612b83565b61089a828787808060200260200160405190810160405280939291908181526020018383602002808284375f92019190915250309250612d3c915050565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316632e1a7d4d83600185516108d89190614896565b815181106108e8576108e86148a9565b60200260200101516040518263ffffffff1660e01b815260040161090e91815260200190565b5f604051808303815f87803b158015610925575f80fd5b505af1158015610937573d5f803e3d5ffd5b5050505061096b84836001855161094e9190614896565b8151811061095e5761095e6148a9565b6020026020010151612765565b509695505050505050565b60606109a37f00000000000000000000000000000000000000000000000000000000000000008484612fc9565b90505b92915050565b5f805f6109da7f00000000000000000000000000000000000000000000000000000000000000008f8f612a8c565b90505f876109e8578c6109eb565b5f195b60405163d505accf60e01b81529091506001600160a01b0383169063d505accf90610a26903390309086908f908e908e908e90600401614961565b5f604051808303815f87803b158015610a3d575f80fd5b505af1158015610a4f573d5f803e3d5ffd5b50505050610a628f8f8f8f8f8f8f611c20565b809450819550505050509b509b9950505050505050505050565b60608142811015610a9f5760405162461bcd60e51b815260040161056a9061484b565b610ac0604051806060016040528060228152602001614ef060229139613118565b610b1d7f0000000000000000000000000000000000000000000000000000000000000000898888808060200260200160405190810160405280939291908181526020018383602002808284375f9201919091525061290492505050565b9150610b4f8260018451610b319190614896565b81518110610b4157610b416148a9565b60200260200101518861315e565b868260018451610b5f9190614896565b81518110610b6f57610b6f6148a9565b60200260200101511015610b955760405162461bcd60e51b815260040161056a90614916565b610baa86865f8181106107af576107af6148a9565b61096b828787808060200260200160405190810160405280939291908181526020018383602002808284375f92019190915250899250612d3c915050565b60608142811015610c0b5760405162461bcd60e51b815260040161056a9061484b565b6001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000168686610c42600182614896565b818110610c5157610c516148a9565b9050602002016020810190610c6691906148bd565b6001600160a01b031614610c8c5760405162461bcd60e51b815260040161056a906148df565b610ce97f0000000000000000000000000000000000000000000000000000000000000000898888808060200260200160405190810160405280939291908181526020018383602002808284375f92019190915250612fc992505050565b915086825f81518110610cfe57610cfe6148a9565b6020026020010151111561079a5760405162461bcd60e51b815260040161056a906149a2565b5f80610d717f00000000000000000000000000000000000000000000000000000000000000008d7f0000000000000000000000000000000000000000000000000000000000000000612a8c565b90505f86610d7f578b610d82565b5f195b60405163d505accf60e01b81529091506001600160a01b0383169063d505accf90610dbd903390309086908e908d908d908d90600401614961565b5f604051808303815f87803b158015610dd4575f80fd5b505af1158015610de6573d5f803e3d5ffd5b50505050610df88d8d8d8d8d8d6117ad565b9d9c50505050505050505050505050565b8042811015610e2a5760405162461bcd60e51b815260040161056a9061484b565b610eb985855f818110610e3f57610e3f6148a9565b9050602002016020810190610e5491906148bd565b33610eb37f000000000000000000000000000000000000000000000000000000000000000089895f818110610e8b57610e8b6148a9565b9050602002016020810190610ea091906148bd565b8a8a6001818110610823576108236148a9565b8a612b83565b5f8585610ec7600182614896565b818110610ed657610ed66148a9565b9050602002016020810190610eeb91906148bd565b6040516370a0823160e01b81526001600160a01b03868116600483015291909116906370a0823190602401602060405180830381865afa158015610f31573d5f803e3d5ffd5b505050506040513d601f19601f82011682018060405250810190610f5591906149e9565b9050610f948686808060200260200160405190810160405280939291908181526020018383602002808284375f920191909152508892506131a9915050565b8661103b828888610fa6600182614896565b818110610fb557610fb56148a9565b9050602002016020810190610fca91906148bd565b6040516370a0823160e01b81526001600160a01b03898116600483015291909116906370a08231906024015b602060405180830381865afa158015611011573d5f803e3d5ffd5b505050506040513d601f19601f8201168201806040525081019061103591906149e9565b9061342f565b10156110595760405162461bcd60e51b815260040161056a90614916565b5050505050505050565b80428110156110845760405162461bcd60e51b815260040161056a9061484b565b6001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001685856110bb600182614896565b8181106110ca576110ca6148a9565b90506020020160208101906110df91906148bd565b6001600160a01b0316146111055760405162461bcd60e51b815260040161056a906148df565b61111a85855f818110610e3f57610e3f6148a9565b6111578585808060200260200160405190810160405280939291908181526020018383602002808284375f920191909152503092506131a9915050565b6040516370a0823160e01b81523060048201525f907f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316906370a0823190602401602060405180830381865afa1580156111bb573d5f803e3d5ffd5b505050506040513d601f19601f820116820180604052508101906111df91906149e9565b9050868110156112015760405162461bcd60e51b815260040161056a90614916565b604051632e1a7d4d60e01b8152600481018290527f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031690632e1a7d4d906024015f604051808303815f87803b158015611260575f80fd5b505af1158015611272573d5f803e3d5ffd5b505050506110598482612765565b606081428110156112a35760405162461bcd60e51b815260040161056a9061484b565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031686865f8181106112df576112df6148a9565b90506020020160208101906112f491906148bd565b6001600160a01b03161461131a5760405162461bcd60e51b815260040161056a906148df565b6113777f0000000000000000000000000000000000000000000000000000000000000000348888808060200260200160405190810160405280939291908181526020018383602002808284375f9201919091525061290492505050565b91508682600184516113899190614896565b81518110611399576113996148a9565b602002602001015110156113bf5760405162461bcd60e51b815260040161056a90614916565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663d0e30db0835f81518110611400576114006148a9565b60200260200101516040518263ffffffff1660e01b81526004015f604051808303818588803b158015611431575f80fd5b505af1158015611443573d5f803e3d5ffd5b50505050507f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663a9059cbb6114ad7f000000000000000000000000000000000000000000000000000000000000000089895f818110610e8b57610e8b6148a9565b845f815181106114bf576114bf6148a9565b60200260200101516040518363ffffffff1660e01b81526004016114f89291906001600160a01b03929092168252602082015260400190565b6020604051808303815f875af1158015611514573d5f803e3d5ffd5b505050506040513d601f19601f820116820180604052508101906115389190614a00565b61154457611544614328565b611582828787808060200260200160405190810160405280939291908181526020018383602002808284375f92019190915250899250612d3c915050565b5095945050505050565b5f610649848484613484565b606081428110156115bb5760405162461bcd60e51b815260040161056a9061484b565b6116187f0000000000000000000000000000000000000000000000000000000000000000898888808060200260200160405190810160405280939291908181526020018383602002808284375f92019190915250612fc992505050565b915086825f8151811061162d5761162d6148a9565b60200260200101511115610b955760405162461bcd60e51b815260040161056a906149a2565b606081428110156116765760405162461bcd60e51b815260040161056a9061484b565b611697604051806060016040528060288152602001614ec860289139613118565b6116f47f0000000000000000000000000000000000000000000000000000000000000000898888808060200260200160405190810160405280939291908181526020018383602002808284375f9201919091525061354292505050565b91506117088260018451610b319190614896565b8682600184516117189190614896565b81518110611728576117286148a9565b6020026020010151101561174e5760405162461bcd60e51b815260040161056a90614916565b61176386865f8181106107af576107af6148a9565b61096b828787808060200260200160405190810160405280939291908181526020018383602002808284375f92019190915250899250613695915050565b5f610649848484613911565b5f81428110156117cf5760405162461bcd60e51b815260040161056a9061484b565b6117fe887f00000000000000000000000000000000000000000000000000000000000000008989893089611c20565b6040516370a0823160e01b81523060048201529093506118759150899086906001600160a01b038316906370a0823190602401602060405180830381865afa15801561184c573d5f803e3d5ffd5b505050506040513d601f19601f8201168201806040525081019061187091906149e9565b612639565b604051632e1a7d4d60e01b8152600481018390527f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031690632e1a7d4d906024015f604051808303815f87803b1580156118d4575f80fd5b505af11580156118e6573d5f803e3d5ffd5b5050505061096b8483612765565b80428110156119155760405162461bcd60e51b815260040161056a9061484b565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031685855f818110611951576119516148a9565b905060200201602081019061196691906148bd565b6001600160a01b03161461198c5760405162461bcd60e51b815260040161056a906148df565b5f3490507f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663d0e30db0826040518263ffffffff1660e01b81526004015f604051808303818588803b1580156119e9575f80fd5b505af11580156119fb573d5f803e3d5ffd5b50505050507f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663a9059cbb611a657f000000000000000000000000000000000000000000000000000000000000000089895f818110610e8b57610e8b6148a9565b6040516001600160e01b031960e084901b1681526001600160a01b039091166004820152602481018490526044016020604051808303815f875af1158015611aaf573d5f803e3d5ffd5b505050506040513d601f19601f82011682018060405250810190611ad39190614a00565b611adf57611adf614328565b5f8686611aed600182614896565b818110611afc57611afc6148a9565b9050602002016020810190611b1191906148bd565b6040516370a0823160e01b81526001600160a01b03878116600483015291909116906370a0823190602401602060405180830381865afa158015611b57573d5f803e3d5ffd5b505050506040513d601f19601f82011682018060405250810190611b7b91906149e9565b9050611bba8787808060200260200160405190810160405280939291908181526020018383602002808284375f920191909152508992506131a9915050565b8761103b828989611bcc600182614896565b818110611bdb57611bdb6148a9565b9050602002016020810190611bf091906148bd565b6040516370a0823160e01b81526001600160a01b038a8116600483015291909116906370a0823190602401610ff6565b5f808242811015611c435760405162461bcd60e51b815260040161056a9061484b565b5f611c6f7f00000000000000000000000000000000000000000000000000000000000000008c8c612a8c565b6040516323b872dd60e01b81523360048201526001600160a01b03821660248201819052604482018c90529192506323b872dd906064016020604051808303815f875af1158015611cc2573d5f803e3d5ffd5b505050506040513d601f19601f82011682018060405250810190611ce69190614a00565b5060405163226bf2d160e21b81526001600160a01b0387811660048301525f9182918416906389afcb449060240160408051808303815f875af1158015611d2f573d5f803e3d5ffd5b505050506040513d601f19601f82011682018060405250810190611d539190614a1b565b915091505f611d628e8e6139ae565b509050806001600160a01b03168e6001600160a01b031614611d85578183611d88565b82825b90975095508a871015611dad5760405162461bcd60e51b815260040161056a90614a3d565b89861015611dcd5760405162461bcd60e51b815260040161056a90614a83565b505050505097509795505050505050565b60606109a37f00000000000000000000000000000000000000000000000000000000000000008484612904565b5f805f611e597f00000000000000000000000000000000000000000000000000000000000000008e7f0000000000000000000000000000000000000000000000000000000000000000612a8c565b90505f87611e67578c611e6a565b5f195b60405163d505accf60e01b81529091506001600160a01b0383169063d505accf90611ea5903390309086908f908e908e908e90600401614961565b5f604051808303815f87803b158015611ebc575f80fd5b505af1158015611ece573d5f803e3d5ffd5b50505050611ee08e8e8e8e8e8e610547565b909f909e509c50505050505050505050505050565b60608142811015611f185760405162461bcd60e51b815260040161056a9061484b565b611f757f0000000000000000000000000000000000000000000000000000000000000000898888808060200260200160405190810160405280939291908181526020018383602002808284375f92019190915250613aa492505050565b915086825f81518110611f8a57611f8a6148a9565b6020026020010151111561174e5760405162461bcd60e51b815260040161056a906149a2565b5f805f8342811015611fd45760405162461bcd60e51b815260040161056a9061484b565b611fe28c8c8c8c8c8c613bc9565b90945092505f6120137f00000000000000000000000000000000000000000000000000000000000000008e8e612a8c565b90506120218d338388612b83565b61202d8c338387612b83565b6040516335313c2160e11b81526001600160a01b038881166004830152821690636a627842906024016020604051808303815f875af1158015612072573d5f803e3d5ffd5b505050506040513d601f19601f8201168201806040525081019061209691906149e9565b92505050985098509895505050505050565b5f805f83428110156120cc5760405162461bcd60e51b815260040161056a9061484b565b6120fa8a7f00000000000000000000000000000000000000000000000000000000000000008b348c8c613bc9565b90945092505f61214b7f00000000000000000000000000000000000000000000000000000000000000008c7f0000000000000000000000000000000000000000000000000000000000000000612a8c565b90506121598b338388612b83565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663d0e30db0856040518263ffffffff1660e01b81526004015f604051808303818588803b1580156121b2575f80fd5b505af11580156121c4573d5f803e3d5ffd5b505060405163a9059cbb60e01b81526001600160a01b038581166004830152602482018990527f000000000000000000000000000000000000000000000000000000000000000016935063a9059cbb925060440190506020604051808303815f875af1158015612236573d5f803e3d5ffd5b505050506040513d601f19601f8201168201806040525081019061225a9190614a00565b61226657612266614328565b6040516335313c2160e11b81526001600160a01b038881166004830152821690636a627842906024016020604051808303815f875af11580156122ab573d5f803e3d5ffd5b505050506040513d601f19601f820116820180604052508101906122cf91906149e9565b9250833411156122ec576122ec336122e78634614896565b612765565b505096509650969350505050565b6060814281101561231d5760405162461bcd60e51b815260040161056a9061484b565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031686865f818110612359576123596148a9565b905060200201602081019061236e91906148bd565b6001600160a01b0316146123945760405162461bcd60e51b815260040161056a906148df565b6123f17f0000000000000000000000000000000000000000000000000000000000000000888888808060200260200160405190810160405280939291908181526020018383602002808284375f92019190915250612fc992505050565b915034825f81518110612406576124066148a9565b6020026020010151111561242c5760405162461bcd60e51b815260040161056a906149a2565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663d0e30db0835f8151811061246d5761246d6148a9565b60200260200101516040518263ffffffff1660e01b81526004015f604051808303818588803b15801561249e575f80fd5b505af11580156124b0573d5f803e3d5ffd5b50505050507f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663a9059cbb61251a7f000000000000000000000000000000000000000000000000000000000000000089895f818110610e8b57610e8b6148a9565b845f8151811061252c5761252c6148a9565b60200260200101516040518363ffffffff1660e01b81526004016125659291906001600160a01b03929092168252602082015260400190565b6020604051808303815f875af1158015612581573d5f803e3d5ffd5b505050506040513d601f19601f820116820180604052508101906125a59190614a00565b6125b1576125b1614328565b6125ef828787808060200260200160405190810160405280939291908181526020018383602002808284375f92019190915250899250612d3c915050565b815f81518110612601576126016148a9565b60200260200101513411156115825761158233835f81518110612626576126266148a9565b6020026020010151346122e79190614896565b604080516001600160a01b038481166024830152604480830185905283518084039091018152606490920183526020820180516001600160e01b031663a9059cbb60e01b17905291515f928392908716916126949190614aeb565b5f604051808303815f865af19150503d805f81146126cd576040519150601f19603f3d011682016040523d82523d5f602084013e6126d2565b606091505b50915091508180156126fc5750805115806126fc5750808060200190518101906126fc9190614a00565b61275e5760405162461bcd60e51b815260206004820152602d60248201527f5472616e7366657248656c7065723a3a736166655472616e736665723a20747260448201526c185b9cd9995c8819985a5b1959609a1b606482015260840161056a565b5050505050565b604080515f808252602082019092526001600160a01b03841690839060405161278e9190614aeb565b5f6040518083038185875af1925050503d805f81146127c8576040519150601f19603f3d011682016040523d82523d5f602084013e6127cd565b606091505b505090508061283b5760405162461bcd60e51b815260206004820152603460248201527f5472616e7366657248656c7065723a3a736166655472616e736665724554483a60448201527308115512081d1c985b9cd9995c8819985a5b195960621b606482015260840161056a565b505050565b5f6128716040518060400160405280600c81526020016b19d95d105b5bdd5b9d13dd5d60a21b815250858585613de3565b5f84116128905760405162461bcd60e51b815260040161056a90614b06565b5f8311801561289e57505f82115b6128ba5760405162461bcd60e51b815260040161056a90614b51565b5f6128c7856103e5613e32565b90505f6128d48285613e32565b90505f6128ed836128e7886103e8613e32565b90613e98565b90506128f98183614b99565b979650505050505050565b60606129366040518060400160405280600d81526020016c19d95d105b5bdd5b9d1cd3dd5d609a1b8152508585613eec565b6002825110156129585760405162461bcd60e51b815260040161056a90614bb8565b815167ffffffffffffffff811115612972576129726144d5565b60405190808252806020026020018201604052801561299b578160200160208202803683370190505b50905082815f815181106129b1576129b16148a9565b6020026020010181815250505f5b600183516129cd9190614896565b811015612a84575f80612a1f878685815181106129ec576129ec6148a9565b602002602001015187866001612a029190614bef565b81518110612a1257612a126148a9565b6020026020010151613f33565b91509150612a47848481518110612a3857612a386148a9565b60200260200101518383612840565b84612a53856001614bef565b81518110612a6357612a636148a9565b60200260200101818152505050508080612a7c90614c02565b9150506129bf565b509392505050565b5f612ac26040518060400160405280601181526020017070616972466f7220626567696e6e696e6760781b815250858585614079565b5f80612ace85856139ae565b60405163e6a4390560e01b81526001600160a01b03808416600483015280831660248301529294509092509087169063e6a4390590604401602060405180830381865afa158015612b21573d5f803e3d5ffd5b505050506040513d601f19601f82011682018060405250810190612b459190614c1a565b9250612b7a6040518060400160405280601181526020017070616972466f722072657475726e696e6760781b815250846140c2565b50509392505050565b612bc46040518060400160405280601a81526020017f736166655472616e7366657246726f6d20626567696e6e696e67000000000000815250858585614079565b604080516001600160a01b0385811660248301528481166044830152606480830185905283518084039091018152608490920183526020820180516001600160e01b03166323b872dd60e01b17905291515f92839290881691612c279190614aeb565b5f604051808303815f865af19150503d805f8114612c60576040519150601f19603f3d011682016040523d82523d5f602084013e612c65565b606091505b5091509150818015612c8f575080511580612c8f575080806020019051810190612c8f9190614a00565b612cf55760405162461bcd60e51b815260206004820152603160248201527f5472616e7366657248656c7065723a3a7472616e7366657246726f6d3a207472604482015270185b9cd9995c919c9bdb4819985a5b1959607a1b606482015260840161056a565b612d346040518060400160405280602081526020017f736166655472616e7366657246726f6d20656e64696e673b207375636365737381525083614107565b505050505050565b612d61604051806040016040528060048152602001630737761760e41b815250613118565b5f5b60018351612d719190614896565b811015612f9c575f80848381518110612d8c57612d8c6148a9565b602002602001015185846001612da29190614bef565b81518110612db257612db26148a9565b602002602001015191509150612e05604051806040016040528060058152602001641a5b9c1d5d60da1b81525083604051806040016040528060068152602001651bdd5d1c1d5d60d21b8152508461414c565b5f612e1083836139ae565b5090505f87612e20866001614bef565b81518110612e3057612e306148a9565b602002602001015190505f80836001600160a01b0316866001600160a01b031614612e5c57825f612e5f565b5f835b915091505f60028a51612e729190614896565b8810612e7e5788612ecc565b612ecc7f0000000000000000000000000000000000000000000000000000000000000000878c612eaf8c6002614bef565b81518110612ebf57612ebf6148a9565b6020026020010151612a8c565b9050612ef97f00000000000000000000000000000000000000000000000000000000000000008888612a8c565b6001600160a01b031663022c0d9f8484845f6040519080825280601f01601f191660200182016040528015612f35576020820181803683370190505b506040518563ffffffff1660e01b8152600401612f559493929190614c60565b5f604051808303815f87803b158015612f6c575f80fd5b505af1158015612f7e573d5f803e3d5ffd5b50505050505050505050508080612f9490614c02565b915050612d63565b5061283b6040518060400160405280600b81526020016a7377617020656e64696e6760a81b815250613118565b6060600282511015612fed5760405162461bcd60e51b815260040161056a90614bb8565b815167ffffffffffffffff811115613007576130076144d5565b604051908082528060200260200182016040528015613030578160200160208202803683370190505b5090508281600183516130439190614896565b81518110613053576130536148a9565b6020026020010181815250505f6001835161306e9190614896565b90505b8015612a84575f806130b38786613089600187614896565b81518110613099576130996148a9565b6020026020010151878681518110612a1257612a126148a9565b915091506130db8484815181106130cc576130cc6148a9565b60200260200101518383613484565b846130e7600186614896565b815181106130f7576130f76148a9565b6020026020010181815250505050808061311090614c8c565b915050613071565b61315b8160405160240161312c9190614ca1565b60408051601f198184030181529190526020810180516001600160e01b031663104c13eb60e21b179052614191565b50565b60405160248101839052604481018290526131a59060640160408051601f198184030181529190526020810180516001600160e01b0316637b3338ad60e11b179052614191565b5050565b5f5b600183516131b99190614896565b81101561283b575f808483815181106131d4576131d46148a9565b6020026020010151858460016131ea9190614bef565b815181106131fa576131fa6148a9565b6020026020010151915091505f61321183836139ae565b5090505f6132407f00000000000000000000000000000000000000000000000000000000000000008585612a8c565b90505f805f80846001600160a01b0316630902f1ac6040518163ffffffff1660e01b8152600401606060405180830381865afa158015613282573d5f803e3d5ffd5b505050506040513d601f19601f820116820180604052508101906132a69190614cc9565b506001600160701b031691506001600160701b031691505f80876001600160a01b03168a6001600160a01b0316146132df5782846132e2565b83835b6040516370a0823160e01b81526001600160a01b038a8116600483015292945090925061331d918491908d16906370a0823190602401610ff6565b955061332a868383612840565b9450505050505f80856001600160a01b0316886001600160a01b03161461335257825f613355565b5f835b915091505f60028c516133689190614896565b8a10613374578a6133a5565b6133a57f0000000000000000000000000000000000000000000000000000000000000000898e612eaf8e6002614bef565b604080515f8152602081019182905263022c0d9f60e01b9091529091506001600160a01b0387169063022c0d9f906133e69086908690869060248101614c60565b5f604051808303815f87803b1580156133fd575f80fd5b505af115801561340f573d5f803e3d5ffd5b50505050505050505050505050808061342790614c02565b9150506131ab565b5f8261343b8382614896565b91508111156109a65760405162461bcd60e51b815260206004820152601560248201527464732d6d6174682d7375622d756e646572666c6f7760581b604482015260640161056a565b5f8084116134a45760405162461bcd60e51b815260040161056a90614d15565b5f831180156134b257505f82115b6134ce5760405162461bcd60e51b815260040161056a90614b51565b6134fd6040518060400160405280600b81526020016a33b2ba20b6b7bab73a24b760a91b815250858585613de3565b5f6135146103e861350e8688613e32565b90613e32565b90505f6135276103e561350e868961342f565b905061353860016128e78385614b99565b9695505050505050565b606061357a60405180604001604052806013815260200172676574416d6f756e74734f75745f6e6f46656560681b8152508585613eec565b60028251101561359c5760405162461bcd60e51b815260040161056a90614bb8565b815167ffffffffffffffff8111156135b6576135b66144d5565b6040519080825280602002602001820160405280156135df578160200160208202803683370190505b50905082815f815181106135f5576135f56148a9565b6020026020010181815250505f5b600183516136119190614896565b811015612a84575f80613630878685815181106129ec576129ec6148a9565b91509150613658848481518110613649576136496148a9565b602002602001015183836141b1565b84613664856001614bef565b81518110613674576136746148a9565b6020026020010181815250505050808061368d90614c02565b915050613603565b6136c06040518060400160405280600a815260200169737761705f6e6f46656560b01b815250613118565b5f5b600183516136d09190614896565b8110156138de575f808483815181106136eb576136eb6148a9565b6020026020010151858460016137019190614bef565b81518110613711576137116148a9565b602002602001015191509150613764604051806040016040528060058152602001641a5b9c1d5d60da1b81525083604051806040016040528060068152602001651bdd5d1c1d5d60d21b8152508461414c565b5f61376f83836139ae565b5090505f8761377f866001614bef565b8151811061378f5761378f6148a9565b602002602001015190505f80836001600160a01b0316866001600160a01b0316146137bb57825f6137be565b5f835b915091505f60028a516137d19190614896565b88106137dd578861380e565b61380e7f0000000000000000000000000000000000000000000000000000000000000000878c612eaf8c6002614bef565b905061383b7f00000000000000000000000000000000000000000000000000000000000000008888612a8c565b6001600160a01b031663cab1e0f28484845f6040519080825280601f01601f191660200182016040528015613877576020820181803683370190505b506040518563ffffffff1660e01b81526004016138979493929190614c60565b5f604051808303815f87803b1580156138ae575f80fd5b505af11580156138c0573d5f803e3d5ffd5b505050505050505050505080806138d690614c02565b9150506136c2565b5061283b60405180604001604052806011815260200170737761705f6e6f46656520656e64696e6760781b815250613118565b5f80841161396f5760405162461bcd60e51b815260206004820152602560248201527f556e697377617056324c6962726172793a20494e53554646494349454e545f416044820152641353d5539560da1b606482015260840161056a565b5f8311801561397d57505f82115b6139995760405162461bcd60e51b815260040161056a90614b51565b826139a48584613e32565b6106499190614b99565b5f80826001600160a01b0316846001600160a01b031603613a1f5760405162461bcd60e51b815260206004820152602560248201527f556e697377617056324c6962726172793a204944454e544943414c5f41444452604482015264455353455360d81b606482015260840161056a565b826001600160a01b0316846001600160a01b031610613a3f578284613a42565b83835b90925090506001600160a01b038216613a9d5760405162461bcd60e51b815260206004820152601e60248201527f556e697377617056324c6962726172793a205a45524f5f414444524553530000604482015260640161056a565b9250929050565b6060600282511015613ac85760405162461bcd60e51b815260040161056a90614bb8565b815167ffffffffffffffff811115613ae257613ae26144d5565b604051908082528060200260200182016040528015613b0b578160200160208202803683370190505b509050828160018351613b1e9190614896565b81518110613b2e57613b2e6148a9565b6020026020010181815250505f60018351613b499190614896565b90505b8015612a84575f80613b648786613089600187614896565b91509150613b8c848481518110613b7d57613b7d6148a9565b6020026020010151838361423e565b84613b98600186614896565b81518110613ba857613ba86148a9565b60200260200101818152505050508080613bc190614c8c565b915050613b4c565b60405163e6a4390560e01b81526001600160a01b03878116600483015286811660248301525f91829182917f00000000000000000000000000000000000000000000000000000000000000009091169063e6a4390590604401602060405180830381865afa158015613c3d573d5f803e3d5ffd5b505050506040513d601f19601f82011682018060405250810190613c619190614c1a565b6001600160a01b031603613d02576040516364e329cb60e11b81526001600160a01b03898116600483015288811660248301527f0000000000000000000000000000000000000000000000000000000000000000169063c9c65396906044016020604051808303815f875af1158015613cdc573d5f803e3d5ffd5b505050506040513d601f19601f82011682018060405250810190613d009190614c1a565b505b5f80613d2f7f00000000000000000000000000000000000000000000000000000000000000008b8b613f33565b91509150815f148015613d40575080155b15613d5057879350869250613dd6565b5f613d5c898484613911565b9050878111613d905785811015613d855760405162461bcd60e51b815260040161056a90614a83565b889450925082613dd4565b5f613d9c898486613911565b905089811115613dae57613dae614328565b87811015613dce5760405162461bcd60e51b815260040161056a90614a3d565b94508793505b505b5050965096945050505050565b613e2c84848484604051602401613dfd9493929190614d61565b60408051601f198184030181529190526020810180516001600160e01b031663a7a8785360e01b179052614191565b50505050565b5f811580613e5557508282613e478183614d8f565b9250613e539083614b99565b145b6109a65760405162461bcd60e51b815260206004820152601460248201527364732d6d6174682d6d756c2d6f766572666c6f7760601b604482015260640161056a565b5f82613ea48382614bef565b91508110156109a65760405162461bcd60e51b815260206004820152601460248201527364732d6d6174682d6164642d6f766572666c6f7760601b604482015260640161056a565b61283b838383604051602401613f0493929190614da6565b60408051601f198184030181529190526020810180516001600160e01b0316630d26b92560e01b179052614191565b5f80613f766040518060400160405280601e81526020017f4c6962726172793a20676574526573657276657320626567696e6e696e670000815250868686614079565b5f613f8185856139ae565b5090505f80613f91888888612a8c565b6001600160a01b0316630902f1ac6040518163ffffffff1660e01b8152600401606060405180830381865afa158015613fcc573d5f803e3d5ffd5b505050506040513d601f19601f82011682018060405250810190613ff09190614cc9565b506001600160701b031691506001600160701b03169150826001600160a01b0316876001600160a01b03161461402757808261402a565b81815b60408051808201909152601e81527f4c6962726172793a2067657452657365727665732072657475726e696e6700006020820152919650945061406e9086866142e1565b505050935093915050565b613e2c848484846040516024016140939493929190614dd3565b60408051601f198184030181529190526020810180516001600160e01b03166376c7947b60e11b179052614191565b6131a582826040516024016140d8929190614e0e565b60408051601f198184030181529190526020810180516001600160e01b031663319af33360e01b179052614191565b6131a5828260405160240161411d929190614e37565b60408051601f198184030181529190526020810180516001600160e01b031663c3b5563560e01b179052614191565b613e2c848484846040516024016141669493929190614e5a565b60408051601f198184030181529190526020810180516001600160e01b031663aabc9a3160e01b1790525b80516a636f6e736f6c652e6c6f67602083015f808483855afa5050505050565b5f6141e860405180604001604052806012815260200171676574416d6f756e744f75745f6e6f46656560701b815250858585613de3565b5f84116142075760405162461bcd60e51b815260040161056a90614b06565b5f8311801561421557505f82115b6142315760405162461bcd60e51b815260040161056a90614b51565b5f6128c7856103e8613e32565b5f80841161425e5760405162461bcd60e51b815260040161056a90614d15565b5f8311801561426c57505f82115b6142885760405162461bcd60e51b815260040161056a90614b51565b6142bd60405180604001604052806011815260200170676574416d6f756e74496e5f6e6f46656560781b815250858585613de3565b5f6142ce6103e861350e8688613e32565b90505f6135276103e861350e868961342f565b61283b8383836040516024016142f993929190614ea3565b60408051601f198184030181529190526020810180516001600160e01b031663ca47c4eb60e01b179052614191565b634e487b7160e01b5f52600160045260245ffd5b6001600160a01b038116811461315b575f80fd5b803561435b8161433c565b919050565b5f805f805f8060c08789031215614375575f80fd5b86356143808161433c565b955060208701359450604087013593506060870135925060808701356143a58161433c565b8092505060a087013590509295509295509295565b5f805f606084860312156143cc575f80fd5b505081359360208301359350604090920135919050565b5f8083601f8401126143f3575f80fd5b50813567ffffffffffffffff81111561440a575f80fd5b6020830191508360208260051b8501011115613a9d575f80fd5b5f805f805f8060a08789031215614439575f80fd5b8635955060208701359450604087013567ffffffffffffffff81111561445d575f80fd5b61446989828a016143e3565b909550935050606087013561447d8161433c565b80925050608087013590509295509295509295565b602080825282518282018190525f9190848201906040850190845b818110156144c9578351835292840192918401916001016144ad565b50909695505050505050565b634e487b7160e01b5f52604160045260245ffd5b5f80604083850312156144fa575f80fd5b8235915060208084013567ffffffffffffffff80821115614519575f80fd5b818601915086601f83011261452c575f80fd5b81358181111561453e5761453e6144d5565b8060051b604051601f19603f83011681018181108582111715614563576145636144d5565b604052918252848201925083810185019189831115614580575f80fd5b938501935b828510156145a55761459685614350565b84529385019392850192614585565b8096505050505050509250929050565b801515811461315b575f80fd5b803560ff8116811461435b575f80fd5b5f805f805f805f805f805f6101608c8e0312156145ed575f80fd5b8b356145f88161433c565b9a5060208c01356146088161433c565b995060408c0135985060608c0135975060808c0135965060a08c013561462d8161433c565b955060c08c0135945060e08c0135614644816145b5565b93506146536101008d016145c2565b92506101208c013591506101408c013590509295989b509295989b9093969950565b5f805f805f805f805f806101408b8d03121561468f575f80fd5b8a3561469a8161433c565b995060208b0135985060408b0135975060608b0135965060808b01356146bf8161433c565b955060a08b0135945060c08b01356146d6816145b5565b93506146e460e08c016145c2565b92506101008b013591506101208b013590509295989b9194979a5092959850565b5f805f805f60808688031215614719575f80fd5b85359450602086013567ffffffffffffffff811115614736575f80fd5b614742888289016143e3565b90955093505060408601356147568161433c565b949793965091946060013592915050565b5f805f805f805f60e0888a03121561477d575f80fd5b87356147888161433c565b965060208801356147988161433c565b955060408801359450606088013593506080880135925060a08801356147bd8161433c565b8092505060c0880135905092959891949750929550565b5f805f805f805f80610100898b0312156147ec575f80fd5b88356147f78161433c565b975060208901356148078161433c565b965060408901359550606089013594506080890135935060a0890135925060c08901356148338161433c565b8092505060e089013590509295985092959890939650565b60208082526018908201527f556e69737761705632526f757465723a20455850495245440000000000000000604082015260600190565b634e487b7160e01b5f52601160045260245ffd5b818103818111156109a6576109a6614882565b634e487b7160e01b5f52603260045260245ffd5b5f602082840312156148cd575f80fd5b81356148d88161433c565b9392505050565b6020808252601d908201527f556e69737761705632526f757465723a20494e56414c49445f50415448000000604082015260600190565b6020808252602b908201527f556e69737761705632526f757465723a20494e53554646494349454e545f4f5560408201526a1514155517d05353d5539560aa1b606082015260800190565b6001600160a01b0397881681529590961660208601526040850193909352606084019190915260ff16608083015260a082015260c081019190915260e00190565b60208082526027908201527f556e69737761705632526f757465723a204558434553534956455f494e50555460408201526617d05353d5539560ca1b606082015260800190565b5f602082840312156149f9575f80fd5b5051919050565b5f60208284031215614a10575f80fd5b81516148d8816145b5565b5f8060408385031215614a2c575f80fd5b505080516020909101519092909150565b60208082526026908201527f556e69737761705632526f757465723a20494e53554646494349454e545f415f604082015265105353d5539560d21b606082015260800190565b60208082526026908201527f556e69737761705632526f757465723a20494e53554646494349454e545f425f604082015265105353d5539560d21b606082015260800190565b5f5b83811015614ae3578181015183820152602001614acb565b50505f910152565b5f8251614afc818460208701614ac9565b9190910192915050565b6020808252602b908201527f556e697377617056324c6962726172793a20494e53554646494349454e545f4960408201526a1394155517d05353d5539560aa1b606082015260800190565b60208082526028908201527f556e697377617056324c6962726172793a20494e53554646494349454e545f4c604082015267495155494449545960c01b606082015260800190565b5f82614bb357634e487b7160e01b5f52601260045260245ffd5b500490565b6020808252601e908201527f556e697377617056324c6962726172793a20494e56414c49445f504154480000604082015260600190565b808201808211156109a6576109a6614882565b5f60018201614c1357614c13614882565b5060010190565b5f60208284031215614c2a575f80fd5b81516148d88161433c565b5f8151808452614c4c816020860160208601614ac9565b601f01601f19169290920160200192915050565b84815283602082015260018060a01b0383166040820152608060608201525f6135386080830184614c35565b5f81614c9a57614c9a614882565b505f190190565b602081525f6109a36020830184614c35565b80516001600160701b038116811461435b575f80fd5b5f805f60608486031215614cdb575f80fd5b614ce484614cb3565b9250614cf260208501614cb3565b9150604084015163ffffffff81168114614d0a575f80fd5b809150509250925092565b6020808252602c908201527f556e697377617056324c6962726172793a20494e53554646494349454e545f4f60408201526b155514155517d05353d5539560a21b606082015260800190565b608081525f614d736080830187614c35565b6020830195909552506040810192909252606090910152919050565b80820281158282048414176109a6576109a6614882565b606081525f614db86060830186614c35565b6001600160a01b039490941660208301525060400152919050565b608081525f614de56080830187614c35565b6001600160a01b0395861660208401529385166040830152509216606090920191909152919050565b604081525f614e206040830185614c35565b905060018060a01b03831660208301529392505050565b604081525f614e496040830185614c35565b905082151560208301529392505050565b608081525f614e6c6080830187614c35565b6001600160a01b0386811660208501528382036040850152614e8e8287614c35565b92508085166060850152505095945050505050565b606081525f614eb56060830186614c35565b6020830194909452506040015291905056fe737761704578616374546f6b656e73466f72546f6b656e735f6e6f46656520626567696e6e696e67737761704578616374546f6b656e73466f72546f6b656e7320626567696e6e696e67a26469706673582212203a62b4244663dc4715af5de801747cac371cfaeda322b3b653d347ed3b5c298564736f6c63430008140033"

    @overload
    @classmethod
    def deploy(cls, _factory: Union[Account, Address], _WETH: Union[Account, Address], *, from_: Optional[Union[Account, Address, str]] = None, value: Union[int, str] = 0, gas_limit: Optional[Union[int, Literal["max"], Literal["auto"]]] = None, return_tx: Literal[False] = False, request_type: Literal["call"], chain: Optional[Chain] = None, gas_price: Optional[Union[int, str]] = None, max_fee_per_gas: Optional[Union[int, str]] = None, max_priority_fee_per_gas: Optional[Union[int, str]] = None, access_list: Optional[Union[Dict[Union[Account, Address, str], List[int]], Literal["auto"]]] = None, type: Optional[int] = None, block: Optional[Union[int, Literal["latest"], Literal["pending"], Literal["earliest"], Literal["safe"], Literal["finalized"]]] = None, confirmations: Optional[int] = None) -> bytearray:
        """
        [Source code](file:///Users/dteiml/p/hacker-dom/woke-uniswap-v2/src/UniswapV2Router02.sol#24)

        Args:
            _factory: address
            _WETH: address
        """
        ...

    @overload
    @classmethod
    def deploy(cls, _factory: Union[Account, Address], _WETH: Union[Account, Address], *, from_: Optional[Union[Account, Address, str]] = None, value: Union[int, str] = 0, gas_limit: Optional[Union[int, Literal["max"], Literal["auto"]]] = None, return_tx: Literal[False] = False, request_type: Literal["tx"] = "tx", chain: Optional[Chain] = None, gas_price: Optional[Union[int, str]] = None, max_fee_per_gas: Optional[Union[int, str]] = None, max_priority_fee_per_gas: Optional[Union[int, str]] = None, access_list: Optional[Union[Dict[Union[Account, Address, str], List[int]], Literal["auto"]]] = None, type: Optional[int] = None, block: Optional[Union[int, Literal["latest"], Literal["pending"], Literal["earliest"], Literal["safe"], Literal["finalized"]]] = None, confirmations: Optional[int] = None) -> UniswapV2Router02:
        """
        [Source code](file:///Users/dteiml/p/hacker-dom/woke-uniswap-v2/src/UniswapV2Router02.sol#24)

        Args:
            _factory: address
            _WETH: address
        """
        ...

    @overload
    @classmethod
    def deploy(cls, _factory: Union[Account, Address], _WETH: Union[Account, Address], *, from_: Optional[Union[Account, Address, str]] = None, value: Union[int, str] = 0, gas_limit: Optional[Union[int, Literal["max"], Literal["auto"]]] = None, return_tx: Literal[False] = False, request_type: Literal["estimate"], chain: Optional[Chain] = None, gas_price: Optional[Union[int, str]] = None, max_fee_per_gas: Optional[Union[int, str]] = None, max_priority_fee_per_gas: Optional[Union[int, str]] = None, access_list: Optional[Union[Dict[Union[Account, Address, str], List[int]], Literal["auto"]]] = None, type: Optional[int] = None, block: Optional[Union[int, Literal["latest"], Literal["pending"], Literal["earliest"], Literal["safe"], Literal["finalized"]]] = None, confirmations: Optional[int] = None) -> int:
        """
        [Source code](file:///Users/dteiml/p/hacker-dom/woke-uniswap-v2/src/UniswapV2Router02.sol#24)

        Args:
            _factory: address
            _WETH: address
        """
        ...

    @overload
    @classmethod
    def deploy(cls, _factory: Union[Account, Address], _WETH: Union[Account, Address], *, from_: Optional[Union[Account, Address, str]] = None, value: Union[int, str] = 0, gas_limit: Optional[Union[int, Literal["max"], Literal["auto"]]] = None, return_tx: Literal[False] = False, request_type: Literal["access_list"], chain: Optional[Chain] = None, gas_price: Optional[Union[int, str]] = None, max_fee_per_gas: Optional[Union[int, str]] = None, max_priority_fee_per_gas: Optional[Union[int, str]] = None, access_list: Optional[Union[Dict[Union[Account, Address, str], List[int]], Literal["auto"]]] = None, type: Optional[int] = None, block: Optional[Union[int, Literal["latest"], Literal["pending"], Literal["earliest"], Literal["safe"], Literal["finalized"]]] = None, confirmations: Optional[int] = None) -> Tuple[Dict[Address, List[int]], int]:
        """
        [Source code](file:///Users/dteiml/p/hacker-dom/woke-uniswap-v2/src/UniswapV2Router02.sol#24)

        Args:
            _factory: address
            _WETH: address
        """
        ...

    @overload
    @classmethod
    def deploy(cls, _factory: Union[Account, Address], _WETH: Union[Account, Address], *, from_: Optional[Union[Account, Address, str]] = None, value: Union[int, str] = 0, gas_limit: Optional[Union[int, Literal["max"], Literal["auto"]]] = None, return_tx: Literal[True], request_type: Literal["tx"] = "tx", chain: Optional[Chain] = None, gas_price: Optional[Union[int, str]] = None, max_fee_per_gas: Optional[Union[int, str]] = None, max_priority_fee_per_gas: Optional[Union[int, str]] = None, access_list: Optional[Union[Dict[Union[Account, Address, str], List[int]], Literal["auto"]]] = None, type: Optional[int] = None, block: Optional[Union[int, Literal["latest"], Literal["pending"], Literal["earliest"], Literal["safe"], Literal["finalized"]]] = None, confirmations: Optional[int] = None) -> TransactionAbc[UniswapV2Router02]:
        """
        [Source code](file:///Users/dteiml/p/hacker-dom/woke-uniswap-v2/src/UniswapV2Router02.sol#24)

        Args:
            _factory: address
            _WETH: address
        """
        ...

    @classmethod
    def deploy(cls, _factory: Union[Account, Address], _WETH: Union[Account, Address], *, from_: Optional[Union[Account, Address, str]] = None, value: Union[int, str] = 0, gas_limit: Optional[Union[int, Literal["max"], Literal["auto"]]] = None, return_tx: bool = False, request_type: RequestType = "tx", chain: Optional[Chain] = None, gas_price: Optional[Union[int, str]] = None, max_fee_per_gas: Optional[Union[int, str]] = None, max_priority_fee_per_gas: Optional[Union[int, str]] = None, access_list: Optional[Union[Dict[Union[Account, Address, str], List[int]], Literal["auto"]]] = None, type: Optional[int] = None, block: Optional[Union[int, Literal["latest"], Literal["pending"], Literal["earliest"], Literal["safe"], Literal["finalized"]]] = None, confirmations: Optional[int] = None) -> Union[bytearray, UniswapV2Router02, int, Tuple[Dict[Address, List[int]], int], TransactionAbc[UniswapV2Router02]]:
        """
        [Source code](file:///Users/dteiml/p/hacker-dom/woke-uniswap-v2/src/UniswapV2Router02.sol#24)

        Args:
            _factory: address
            _WETH: address
        """
        return cls._deploy(request_type, [_factory, _WETH], return_tx, UniswapV2Router02, from_, value, gas_limit, {}, chain, gas_price, max_fee_per_gas, max_priority_fee_per_gas, access_list, type, block, confirmations)

    @classmethod
    def get_creation_code(cls) -> bytes:
        return cls._get_creation_code({})

    @overload
    def factory(self, *, from_: Optional[Union[Account, Address, str]] = None, to: Optional[Union[Account, Address, str]] = None, value: Union[int, str] = 0, gas_limit: Optional[Union[int, Literal["max"], Literal["auto"]]] = None, request_type: Literal["call"] = "call", gas_price: Optional[Union[int, str]] = None, max_fee_per_gas: Optional[Union[int, str]] = None, max_priority_fee_per_gas: Optional[Union[int, str]] = None, access_list: Optional[Union[Dict[Union[Account, Address, str], List[int]], Literal["auto"]]] = None, type: Optional[int] = None, block: Optional[Union[int, Literal["latest"], Literal["pending"], Literal["earliest"], Literal["safe"], Literal["finalized"]]] = None, confirmations: Optional[int] = None) -> Address:
        """
        [Source code](file:///Users/dteiml/p/hacker-dom/woke-uniswap-v2/src/UniswapV2Router02.sol#16)

        Returns:
            address
        """
        ...

    @overload
    def factory(self, *, from_: Optional[Union[Account, Address, str]] = None, to: Optional[Union[Account, Address, str]] = None, value: Union[int, str] = 0, gas_limit: Optional[Union[int, Literal["max"], Literal["auto"]]] = None, request_type: Literal["estimate"], gas_price: Optional[Union[int, str]] = None, max_fee_per_gas: Optional[Union[int, str]] = None, max_priority_fee_per_gas: Optional[Union[int, str]] = None, access_list: Optional[Union[Dict[Union[Account, Address, str], List[int]], Literal["auto"]]] = None, type: Optional[int] = None, block: Optional[Union[int, Literal["latest"], Literal["pending"], Literal["earliest"], Literal["safe"], Literal["finalized"]]] = None, confirmations: Optional[int] = None) -> int:
        """
        [Source code](file:///Users/dteiml/p/hacker-dom/woke-uniswap-v2/src/UniswapV2Router02.sol#16)

        Returns:
            address
        """
        ...

    @overload
    def factory(self, *, from_: Optional[Union[Account, Address, str]] = None, to: Optional[Union[Account, Address, str]] = None, value: Union[int, str] = 0, gas_limit: Optional[Union[int, Literal["max"], Literal["auto"]]] = None, request_type: Literal["access_list"], gas_price: Optional[Union[int, str]] = None, max_fee_per_gas: Optional[Union[int, str]] = None, max_priority_fee_per_gas: Optional[Union[int, str]] = None, access_list: Optional[Union[Dict[Union[Account, Address, str], List[int]], Literal["auto"]]] = None, type: Optional[int] = None, block: Optional[Union[int, Literal["latest"], Literal["pending"], Literal["earliest"], Literal["safe"], Literal["finalized"]]] = None, confirmations: Optional[int] = None) -> Tuple[Dict[Address, List[int]], int]:
        """
        [Source code](file:///Users/dteiml/p/hacker-dom/woke-uniswap-v2/src/UniswapV2Router02.sol#16)

        Returns:
            address
        """
        ...

    @overload
    def factory(self, *, from_: Optional[Union[Account, Address, str]] = None, to: Optional[Union[Account, Address, str]] = None, value: Union[int, str] = 0, gas_limit: Optional[Union[int, Literal["max"], Literal["auto"]]] = None, request_type: Literal["tx"], gas_price: Optional[Union[int, str]] = None, max_fee_per_gas: Optional[Union[int, str]] = None, max_priority_fee_per_gas: Optional[Union[int, str]] = None, access_list: Optional[Union[Dict[Union[Account, Address, str], List[int]], Literal["auto"]]] = None, type: Optional[int] = None, block: Optional[Union[int, Literal["latest"], Literal["pending"], Literal["earliest"], Literal["safe"], Literal["finalized"]]] = None, confirmations: Optional[int] = None) -> TransactionAbc[Address]:
        """
        [Source code](file:///Users/dteiml/p/hacker-dom/woke-uniswap-v2/src/UniswapV2Router02.sol#16)

        Returns:
            address
        """
        ...

    def factory(self, *, from_: Optional[Union[Account, Address, str]] = None, to: Optional[Union[Account, Address, str]] = None, value: Union[int, str] = 0, gas_limit: Optional[Union[int, Literal["max"], Literal["auto"]]] = None, request_type: RequestType = 'call', gas_price: Optional[Union[int, str]] = None, max_fee_per_gas: Optional[Union[int, str]] = None, max_priority_fee_per_gas: Optional[Union[int, str]] = None, access_list: Optional[Union[Dict[Union[Account, Address, str], List[int]], Literal["auto"]]] = None, type: Optional[int] = None, block: Optional[Union[int, Literal["latest"], Literal["pending"], Literal["earliest"], Literal["safe"], Literal["finalized"]]] = None, confirmations: Optional[int] = None) -> Union[Address, TransactionAbc[Address], int, Tuple[Dict[Address, List[int]], int]]:
        """
        [Source code](file:///Users/dteiml/p/hacker-dom/woke-uniswap-v2/src/UniswapV2Router02.sol#16)

        Returns:
            address
        """
        return self._execute(self.chain, request_type, "c45a0155", [], True if request_type == "tx" else False, Address, from_, to if to is not None else str(self.address), value, gas_limit, gas_price, max_fee_per_gas, max_priority_fee_per_gas, access_list, type, block, confirmations)

    @overload
    def WETH(self, *, from_: Optional[Union[Account, Address, str]] = None, to: Optional[Union[Account, Address, str]] = None, value: Union[int, str] = 0, gas_limit: Optional[Union[int, Literal["max"], Literal["auto"]]] = None, request_type: Literal["call"] = "call", gas_price: Optional[Union[int, str]] = None, max_fee_per_gas: Optional[Union[int, str]] = None, max_priority_fee_per_gas: Optional[Union[int, str]] = None, access_list: Optional[Union[Dict[Union[Account, Address, str], List[int]], Literal["auto"]]] = None, type: Optional[int] = None, block: Optional[Union[int, Literal["latest"], Literal["pending"], Literal["earliest"], Literal["safe"], Literal["finalized"]]] = None, confirmations: Optional[int] = None) -> Address:
        """
        [Source code](file:///Users/dteiml/p/hacker-dom/woke-uniswap-v2/src/UniswapV2Router02.sol#17)

        Returns:
            address
        """
        ...

    @overload
    def WETH(self, *, from_: Optional[Union[Account, Address, str]] = None, to: Optional[Union[Account, Address, str]] = None, value: Union[int, str] = 0, gas_limit: Optional[Union[int, Literal["max"], Literal["auto"]]] = None, request_type: Literal["estimate"], gas_price: Optional[Union[int, str]] = None, max_fee_per_gas: Optional[Union[int, str]] = None, max_priority_fee_per_gas: Optional[Union[int, str]] = None, access_list: Optional[Union[Dict[Union[Account, Address, str], List[int]], Literal["auto"]]] = None, type: Optional[int] = None, block: Optional[Union[int, Literal["latest"], Literal["pending"], Literal["earliest"], Literal["safe"], Literal["finalized"]]] = None, confirmations: Optional[int] = None) -> int:
        """
        [Source code](file:///Users/dteiml/p/hacker-dom/woke-uniswap-v2/src/UniswapV2Router02.sol#17)

        Returns:
            address
        """
        ...

    @overload
    def WETH(self, *, from_: Optional[Union[Account, Address, str]] = None, to: Optional[Union[Account, Address, str]] = None, value: Union[int, str] = 0, gas_limit: Optional[Union[int, Literal["max"], Literal["auto"]]] = None, request_type: Literal["access_list"], gas_price: Optional[Union[int, str]] = None, max_fee_per_gas: Optional[Union[int, str]] = None, max_priority_fee_per_gas: Optional[Union[int, str]] = None, access_list: Optional[Union[Dict[Union[Account, Address, str], List[int]], Literal["auto"]]] = None, type: Optional[int] = None, block: Optional[Union[int, Literal["latest"], Literal["pending"], Literal["earliest"], Literal["safe"], Literal["finalized"]]] = None, confirmations: Optional[int] = None) -> Tuple[Dict[Address, List[int]], int]:
        """
        [Source code](file:///Users/dteiml/p/hacker-dom/woke-uniswap-v2/src/UniswapV2Router02.sol#17)

        Returns:
            address
        """
        ...

    @overload
    def WETH(self, *, from_: Optional[Union[Account, Address, str]] = None, to: Optional[Union[Account, Address, str]] = None, value: Union[int, str] = 0, gas_limit: Optional[Union[int, Literal["max"], Literal["auto"]]] = None, request_type: Literal["tx"], gas_price: Optional[Union[int, str]] = None, max_fee_per_gas: Optional[Union[int, str]] = None, max_priority_fee_per_gas: Optional[Union[int, str]] = None, access_list: Optional[Union[Dict[Union[Account, Address, str], List[int]], Literal["auto"]]] = None, type: Optional[int] = None, block: Optional[Union[int, Literal["latest"], Literal["pending"], Literal["earliest"], Literal["safe"], Literal["finalized"]]] = None, confirmations: Optional[int] = None) -> TransactionAbc[Address]:
        """
        [Source code](file:///Users/dteiml/p/hacker-dom/woke-uniswap-v2/src/UniswapV2Router02.sol#17)

        Returns:
            address
        """
        ...

    def WETH(self, *, from_: Optional[Union[Account, Address, str]] = None, to: Optional[Union[Account, Address, str]] = None, value: Union[int, str] = 0, gas_limit: Optional[Union[int, Literal["max"], Literal["auto"]]] = None, request_type: RequestType = 'call', gas_price: Optional[Union[int, str]] = None, max_fee_per_gas: Optional[Union[int, str]] = None, max_priority_fee_per_gas: Optional[Union[int, str]] = None, access_list: Optional[Union[Dict[Union[Account, Address, str], List[int]], Literal["auto"]]] = None, type: Optional[int] = None, block: Optional[Union[int, Literal["latest"], Literal["pending"], Literal["earliest"], Literal["safe"], Literal["finalized"]]] = None, confirmations: Optional[int] = None) -> Union[Address, TransactionAbc[Address], int, Tuple[Dict[Address, List[int]], int]]:
        """
        [Source code](file:///Users/dteiml/p/hacker-dom/woke-uniswap-v2/src/UniswapV2Router02.sol#17)

        Returns:
            address
        """
        return self._execute(self.chain, request_type, "ad5c4648", [], True if request_type == "tx" else False, Address, from_, to if to is not None else str(self.address), value, gas_limit, gas_price, max_fee_per_gas, max_priority_fee_per_gas, access_list, type, block, confirmations)

    @overload
    def addLiquidity(self, tokenA: Union[Account, Address], tokenB: Union[Account, Address], amountADesired: uint256, amountBDesired: uint256, amountAMin: uint256, amountBMin: uint256, to_: Union[Account, Address], deadline: uint256, *, from_: Optional[Union[Account, Address, str]] = None, to: Optional[Union[Account, Address, str]] = None, value: Union[int, str] = 0, gas_limit: Optional[Union[int, Literal["max"], Literal["auto"]]] = None, request_type: Literal["call"], gas_price: Optional[Union[int, str]] = None, max_fee_per_gas: Optional[Union[int, str]] = None, max_priority_fee_per_gas: Optional[Union[int, str]] = None, access_list: Optional[Union[Dict[Union[Account, Address, str], List[int]], Literal["auto"]]] = None, type: Optional[int] = None, block: Optional[Union[int, Literal["latest"], Literal["pending"], Literal["earliest"], Literal["safe"], Literal["finalized"]]] = None, confirmations: Optional[int] = None) -> Tuple[uint256, uint256, uint256]:
        """
        [Source code](file:///Users/dteiml/p/hacker-dom/woke-uniswap-v2/src/UniswapV2Router02.sol#62)

        Args:
            tokenA: address
            tokenB: address
            amountADesired: uint256
            amountBDesired: uint256
            amountAMin: uint256
            amountBMin: uint256
            to_: address
            deadline: uint256
        Returns:
            (uint256, uint256, uint256)
        """
        ...

    @overload
    def addLiquidity(self, tokenA: Union[Account, Address], tokenB: Union[Account, Address], amountADesired: uint256, amountBDesired: uint256, amountAMin: uint256, amountBMin: uint256, to_: Union[Account, Address], deadline: uint256, *, from_: Optional[Union[Account, Address, str]] = None, to: Optional[Union[Account, Address, str]] = None, value: Union[int, str] = 0, gas_limit: Optional[Union[int, Literal["max"], Literal["auto"]]] = None, request_type: Literal["estimate"], gas_price: Optional[Union[int, str]] = None, max_fee_per_gas: Optional[Union[int, str]] = None, max_priority_fee_per_gas: Optional[Union[int, str]] = None, access_list: Optional[Union[Dict[Union[Account, Address, str], List[int]], Literal["auto"]]] = None, type: Optional[int] = None, block: Optional[Union[int, Literal["latest"], Literal["pending"], Literal["earliest"], Literal["safe"], Literal["finalized"]]] = None, confirmations: Optional[int] = None) -> int:
        """
        [Source code](file:///Users/dteiml/p/hacker-dom/woke-uniswap-v2/src/UniswapV2Router02.sol#62)

        Args:
            tokenA: address
            tokenB: address
            amountADesired: uint256
            amountBDesired: uint256
            amountAMin: uint256
            amountBMin: uint256
            to_: address
            deadline: uint256
        Returns:
            (uint256, uint256, uint256)
        """
        ...

    @overload
    def addLiquidity(self, tokenA: Union[Account, Address], tokenB: Union[Account, Address], amountADesired: uint256, amountBDesired: uint256, amountAMin: uint256, amountBMin: uint256, to_: Union[Account, Address], deadline: uint256, *, from_: Optional[Union[Account, Address, str]] = None, to: Optional[Union[Account, Address, str]] = None, value: Union[int, str] = 0, gas_limit: Optional[Union[int, Literal["max"], Literal["auto"]]] = None, request_type: Literal["access_list"], gas_price: Optional[Union[int, str]] = None, max_fee_per_gas: Optional[Union[int, str]] = None, max_priority_fee_per_gas: Optional[Union[int, str]] = None, access_list: Optional[Union[Dict[Union[Account, Address, str], List[int]], Literal["auto"]]] = None, type: Optional[int] = None, block: Optional[Union[int, Literal["latest"], Literal["pending"], Literal["earliest"], Literal["safe"], Literal["finalized"]]] = None, confirmations: Optional[int] = None) -> Tuple[Dict[Address, List[int]], int]:
        """
        [Source code](file:///Users/dteiml/p/hacker-dom/woke-uniswap-v2/src/UniswapV2Router02.sol#62)

        Args:
            tokenA: address
            tokenB: address
            amountADesired: uint256
            amountBDesired: uint256
            amountAMin: uint256
            amountBMin: uint256
            to_: address
            deadline: uint256
        Returns:
            (uint256, uint256, uint256)
        """
        ...

    @overload
    def addLiquidity(self, tokenA: Union[Account, Address], tokenB: Union[Account, Address], amountADesired: uint256, amountBDesired: uint256, amountAMin: uint256, amountBMin: uint256, to_: Union[Account, Address], deadline: uint256, *, from_: Optional[Union[Account, Address, str]] = None, to: Optional[Union[Account, Address, str]] = None, value: Union[int, str] = 0, gas_limit: Optional[Union[int, Literal["max"], Literal["auto"]]] = None, request_type: Literal["tx"] = "tx", gas_price: Optional[Union[int, str]] = None, max_fee_per_gas: Optional[Union[int, str]] = None, max_priority_fee_per_gas: Optional[Union[int, str]] = None, access_list: Optional[Union[Dict[Union[Account, Address, str], List[int]], Literal["auto"]]] = None, type: Optional[int] = None, block: Optional[Union[int, Literal["latest"], Literal["pending"], Literal["earliest"], Literal["safe"], Literal["finalized"]]] = None, confirmations: Optional[int] = None) -> TransactionAbc[Tuple[uint256, uint256, uint256]]:
        """
        [Source code](file:///Users/dteiml/p/hacker-dom/woke-uniswap-v2/src/UniswapV2Router02.sol#62)

        Args:
            tokenA: address
            tokenB: address
            amountADesired: uint256
            amountBDesired: uint256
            amountAMin: uint256
            amountBMin: uint256
            to_: address
            deadline: uint256
        Returns:
            (uint256, uint256, uint256)
        """
        ...

    def addLiquidity(self, tokenA: Union[Account, Address], tokenB: Union[Account, Address], amountADesired: uint256, amountBDesired: uint256, amountAMin: uint256, amountBMin: uint256, to_: Union[Account, Address], deadline: uint256, *, from_: Optional[Union[Account, Address, str]] = None, to: Optional[Union[Account, Address, str]] = None, value: Union[int, str] = 0, gas_limit: Optional[Union[int, Literal["max"], Literal["auto"]]] = None, request_type: RequestType = 'tx', gas_price: Optional[Union[int, str]] = None, max_fee_per_gas: Optional[Union[int, str]] = None, max_priority_fee_per_gas: Optional[Union[int, str]] = None, access_list: Optional[Union[Dict[Union[Account, Address, str], List[int]], Literal["auto"]]] = None, type: Optional[int] = None, block: Optional[Union[int, Literal["latest"], Literal["pending"], Literal["earliest"], Literal["safe"], Literal["finalized"]]] = None, confirmations: Optional[int] = None) -> Union[Tuple[uint256, uint256, uint256], TransactionAbc[Tuple[uint256, uint256, uint256]], int, Tuple[Dict[Address, List[int]], int]]:
        """
        [Source code](file:///Users/dteiml/p/hacker-dom/woke-uniswap-v2/src/UniswapV2Router02.sol#62)

        Args:
            tokenA: address
            tokenB: address
            amountADesired: uint256
            amountBDesired: uint256
            amountAMin: uint256
            amountBMin: uint256
            to_: address
            deadline: uint256
        Returns:
            (uint256, uint256, uint256)
        """
        return self._execute(self.chain, request_type, "e8e33700", [tokenA, tokenB, amountADesired, amountBDesired, amountAMin, amountBMin, to_, deadline], True if request_type == "tx" else False, Tuple[uint256, uint256, uint256], from_, to if to is not None else str(self.address), value, gas_limit, gas_price, max_fee_per_gas, max_priority_fee_per_gas, access_list, type, block, confirmations)

    @overload
    def addLiquidityETH(self, token: Union[Account, Address], amountTokenDesired: uint256, amountTokenMin: uint256, amountETHMin: uint256, to_: Union[Account, Address], deadline: uint256, *, from_: Optional[Union[Account, Address, str]] = None, to: Optional[Union[Account, Address, str]] = None, value: Union[int, str] = 0, gas_limit: Optional[Union[int, Literal["max"], Literal["auto"]]] = None, request_type: Literal["call"], gas_price: Optional[Union[int, str]] = None, max_fee_per_gas: Optional[Union[int, str]] = None, max_priority_fee_per_gas: Optional[Union[int, str]] = None, access_list: Optional[Union[Dict[Union[Account, Address, str], List[int]], Literal["auto"]]] = None, type: Optional[int] = None, block: Optional[Union[int, Literal["latest"], Literal["pending"], Literal["earliest"], Literal["safe"], Literal["finalized"]]] = None, confirmations: Optional[int] = None) -> Tuple[uint256, uint256, uint256]:
        """
        [Source code](file:///Users/dteiml/p/hacker-dom/woke-uniswap-v2/src/UniswapV2Router02.sol#78)

        Args:
            token: address
            amountTokenDesired: uint256
            amountTokenMin: uint256
            amountETHMin: uint256
            to_: address
            deadline: uint256
        Returns:
            (uint256, uint256, uint256)
        """
        ...

    @overload
    def addLiquidityETH(self, token: Union[Account, Address], amountTokenDesired: uint256, amountTokenMin: uint256, amountETHMin: uint256, to_: Union[Account, Address], deadline: uint256, *, from_: Optional[Union[Account, Address, str]] = None, to: Optional[Union[Account, Address, str]] = None, value: Union[int, str] = 0, gas_limit: Optional[Union[int, Literal["max"], Literal["auto"]]] = None, request_type: Literal["estimate"], gas_price: Optional[Union[int, str]] = None, max_fee_per_gas: Optional[Union[int, str]] = None, max_priority_fee_per_gas: Optional[Union[int, str]] = None, access_list: Optional[Union[Dict[Union[Account, Address, str], List[int]], Literal["auto"]]] = None, type: Optional[int] = None, block: Optional[Union[int, Literal["latest"], Literal["pending"], Literal["earliest"], Literal["safe"], Literal["finalized"]]] = None, confirmations: Optional[int] = None) -> int:
        """
        [Source code](file:///Users/dteiml/p/hacker-dom/woke-uniswap-v2/src/UniswapV2Router02.sol#78)

        Args:
            token: address
            amountTokenDesired: uint256
            amountTokenMin: uint256
            amountETHMin: uint256
            to_: address
            deadline: uint256
        Returns:
            (uint256, uint256, uint256)
        """
        ...

    @overload
    def addLiquidityETH(self, token: Union[Account, Address], amountTokenDesired: uint256, amountTokenMin: uint256, amountETHMin: uint256, to_: Union[Account, Address], deadline: uint256, *, from_: Optional[Union[Account, Address, str]] = None, to: Optional[Union[Account, Address, str]] = None, value: Union[int, str] = 0, gas_limit: Optional[Union[int, Literal["max"], Literal["auto"]]] = None, request_type: Literal["access_list"], gas_price: Optional[Union[int, str]] = None, max_fee_per_gas: Optional[Union[int, str]] = None, max_priority_fee_per_gas: Optional[Union[int, str]] = None, access_list: Optional[Union[Dict[Union[Account, Address, str], List[int]], Literal["auto"]]] = None, type: Optional[int] = None, block: Optional[Union[int, Literal["latest"], Literal["pending"], Literal["earliest"], Literal["safe"], Literal["finalized"]]] = None, confirmations: Optional[int] = None) -> Tuple[Dict[Address, List[int]], int]:
        """
        [Source code](file:///Users/dteiml/p/hacker-dom/woke-uniswap-v2/src/UniswapV2Router02.sol#78)

        Args:
            token: address
            amountTokenDesired: uint256
            amountTokenMin: uint256
            amountETHMin: uint256
            to_: address
            deadline: uint256
        Returns:
            (uint256, uint256, uint256)
        """
        ...

    @overload
    def addLiquidityETH(self, token: Union[Account, Address], amountTokenDesired: uint256, amountTokenMin: uint256, amountETHMin: uint256, to_: Union[Account, Address], deadline: uint256, *, from_: Optional[Union[Account, Address, str]] = None, to: Optional[Union[Account, Address, str]] = None, value: Union[int, str] = 0, gas_limit: Optional[Union[int, Literal["max"], Literal["auto"]]] = None, request_type: Literal["tx"] = "tx", gas_price: Optional[Union[int, str]] = None, max_fee_per_gas: Optional[Union[int, str]] = None, max_priority_fee_per_gas: Optional[Union[int, str]] = None, access_list: Optional[Union[Dict[Union[Account, Address, str], List[int]], Literal["auto"]]] = None, type: Optional[int] = None, block: Optional[Union[int, Literal["latest"], Literal["pending"], Literal["earliest"], Literal["safe"], Literal["finalized"]]] = None, confirmations: Optional[int] = None) -> TransactionAbc[Tuple[uint256, uint256, uint256]]:
        """
        [Source code](file:///Users/dteiml/p/hacker-dom/woke-uniswap-v2/src/UniswapV2Router02.sol#78)

        Args:
            token: address
            amountTokenDesired: uint256
            amountTokenMin: uint256
            amountETHMin: uint256
            to_: address
            deadline: uint256
        Returns:
            (uint256, uint256, uint256)
        """
        ...

    def addLiquidityETH(self, token: Union[Account, Address], amountTokenDesired: uint256, amountTokenMin: uint256, amountETHMin: uint256, to_: Union[Account, Address], deadline: uint256, *, from_: Optional[Union[Account, Address, str]] = None, to: Optional[Union[Account, Address, str]] = None, value: Union[int, str] = 0, gas_limit: Optional[Union[int, Literal["max"], Literal["auto"]]] = None, request_type: RequestType = 'tx', gas_price: Optional[Union[int, str]] = None, max_fee_per_gas: Optional[Union[int, str]] = None, max_priority_fee_per_gas: Optional[Union[int, str]] = None, access_list: Optional[Union[Dict[Union[Account, Address, str], List[int]], Literal["auto"]]] = None, type: Optional[int] = None, block: Optional[Union[int, Literal["latest"], Literal["pending"], Literal["earliest"], Literal["safe"], Literal["finalized"]]] = None, confirmations: Optional[int] = None) -> Union[Tuple[uint256, uint256, uint256], TransactionAbc[Tuple[uint256, uint256, uint256]], int, Tuple[Dict[Address, List[int]], int]]:
        """
        [Source code](file:///Users/dteiml/p/hacker-dom/woke-uniswap-v2/src/UniswapV2Router02.sol#78)

        Args:
            token: address
            amountTokenDesired: uint256
            amountTokenMin: uint256
            amountETHMin: uint256
            to_: address
            deadline: uint256
        Returns:
            (uint256, uint256, uint256)
        """
        return self._execute(self.chain, request_type, "f305d719", [token, amountTokenDesired, amountTokenMin, amountETHMin, to_, deadline], True if request_type == "tx" else False, Tuple[uint256, uint256, uint256], from_, to if to is not None else str(self.address), value, gas_limit, gas_price, max_fee_per_gas, max_priority_fee_per_gas, access_list, type, block, confirmations)

    @overload
    def removeLiquidity(self, tokenA: Union[Account, Address], tokenB: Union[Account, Address], liquidity: uint256, amountAMin: uint256, amountBMin: uint256, to_: Union[Account, Address], deadline: uint256, *, from_: Optional[Union[Account, Address, str]] = None, to: Optional[Union[Account, Address, str]] = None, value: Union[int, str] = 0, gas_limit: Optional[Union[int, Literal["max"], Literal["auto"]]] = None, request_type: Literal["call"], gas_price: Optional[Union[int, str]] = None, max_fee_per_gas: Optional[Union[int, str]] = None, max_priority_fee_per_gas: Optional[Union[int, str]] = None, access_list: Optional[Union[Dict[Union[Account, Address, str], List[int]], Literal["auto"]]] = None, type: Optional[int] = None, block: Optional[Union[int, Literal["latest"], Literal["pending"], Literal["earliest"], Literal["safe"], Literal["finalized"]]] = None, confirmations: Optional[int] = None) -> Tuple[uint256, uint256]:
        """
        [Source code](file:///Users/dteiml/p/hacker-dom/woke-uniswap-v2/src/UniswapV2Router02.sol#104)

        Args:
            tokenA: address
            tokenB: address
            liquidity: uint256
            amountAMin: uint256
            amountBMin: uint256
            to_: address
            deadline: uint256
        Returns:
            (uint256, uint256)
        """
        ...

    @overload
    def removeLiquidity(self, tokenA: Union[Account, Address], tokenB: Union[Account, Address], liquidity: uint256, amountAMin: uint256, amountBMin: uint256, to_: Union[Account, Address], deadline: uint256, *, from_: Optional[Union[Account, Address, str]] = None, to: Optional[Union[Account, Address, str]] = None, value: Union[int, str] = 0, gas_limit: Optional[Union[int, Literal["max"], Literal["auto"]]] = None, request_type: Literal["estimate"], gas_price: Optional[Union[int, str]] = None, max_fee_per_gas: Optional[Union[int, str]] = None, max_priority_fee_per_gas: Optional[Union[int, str]] = None, access_list: Optional[Union[Dict[Union[Account, Address, str], List[int]], Literal["auto"]]] = None, type: Optional[int] = None, block: Optional[Union[int, Literal["latest"], Literal["pending"], Literal["earliest"], Literal["safe"], Literal["finalized"]]] = None, confirmations: Optional[int] = None) -> int:
        """
        [Source code](file:///Users/dteiml/p/hacker-dom/woke-uniswap-v2/src/UniswapV2Router02.sol#104)

        Args:
            tokenA: address
            tokenB: address
            liquidity: uint256
            amountAMin: uint256
            amountBMin: uint256
            to_: address
            deadline: uint256
        Returns:
            (uint256, uint256)
        """
        ...

    @overload
    def removeLiquidity(self, tokenA: Union[Account, Address], tokenB: Union[Account, Address], liquidity: uint256, amountAMin: uint256, amountBMin: uint256, to_: Union[Account, Address], deadline: uint256, *, from_: Optional[Union[Account, Address, str]] = None, to: Optional[Union[Account, Address, str]] = None, value: Union[int, str] = 0, gas_limit: Optional[Union[int, Literal["max"], Literal["auto"]]] = None, request_type: Literal["access_list"], gas_price: Optional[Union[int, str]] = None, max_fee_per_gas: Optional[Union[int, str]] = None, max_priority_fee_per_gas: Optional[Union[int, str]] = None, access_list: Optional[Union[Dict[Union[Account, Address, str], List[int]], Literal["auto"]]] = None, type: Optional[int] = None, block: Optional[Union[int, Literal["latest"], Literal["pending"], Literal["earliest"], Literal["safe"], Literal["finalized"]]] = None, confirmations: Optional[int] = None) -> Tuple[Dict[Address, List[int]], int]:
        """
        [Source code](file:///Users/dteiml/p/hacker-dom/woke-uniswap-v2/src/UniswapV2Router02.sol#104)

        Args:
            tokenA: address
            tokenB: address
            liquidity: uint256
            amountAMin: uint256
            amountBMin: uint256
            to_: address
            deadline: uint256
        Returns:
            (uint256, uint256)
        """
        ...

    @overload
    def removeLiquidity(self, tokenA: Union[Account, Address], tokenB: Union[Account, Address], liquidity: uint256, amountAMin: uint256, amountBMin: uint256, to_: Union[Account, Address], deadline: uint256, *, from_: Optional[Union[Account, Address, str]] = None, to: Optional[Union[Account, Address, str]] = None, value: Union[int, str] = 0, gas_limit: Optional[Union[int, Literal["max"], Literal["auto"]]] = None, request_type: Literal["tx"] = "tx", gas_price: Optional[Union[int, str]] = None, max_fee_per_gas: Optional[Union[int, str]] = None, max_priority_fee_per_gas: Optional[Union[int, str]] = None, access_list: Optional[Union[Dict[Union[Account, Address, str], List[int]], Literal["auto"]]] = None, type: Optional[int] = None, block: Optional[Union[int, Literal["latest"], Literal["pending"], Literal["earliest"], Literal["safe"], Literal["finalized"]]] = None, confirmations: Optional[int] = None) -> TransactionAbc[Tuple[uint256, uint256]]:
        """
        [Source code](file:///Users/dteiml/p/hacker-dom/woke-uniswap-v2/src/UniswapV2Router02.sol#104)

        Args:
            tokenA: address
            tokenB: address
            liquidity: uint256
            amountAMin: uint256
            amountBMin: uint256
            to_: address
            deadline: uint256
        Returns:
            (uint256, uint256)
        """
        ...

    def removeLiquidity(self, tokenA: Union[Account, Address], tokenB: Union[Account, Address], liquidity: uint256, amountAMin: uint256, amountBMin: uint256, to_: Union[Account, Address], deadline: uint256, *, from_: Optional[Union[Account, Address, str]] = None, to: Optional[Union[Account, Address, str]] = None, value: Union[int, str] = 0, gas_limit: Optional[Union[int, Literal["max"], Literal["auto"]]] = None, request_type: RequestType = 'tx', gas_price: Optional[Union[int, str]] = None, max_fee_per_gas: Optional[Union[int, str]] = None, max_priority_fee_per_gas: Optional[Union[int, str]] = None, access_list: Optional[Union[Dict[Union[Account, Address, str], List[int]], Literal["auto"]]] = None, type: Optional[int] = None, block: Optional[Union[int, Literal["latest"], Literal["pending"], Literal["earliest"], Literal["safe"], Literal["finalized"]]] = None, confirmations: Optional[int] = None) -> Union[Tuple[uint256, uint256], TransactionAbc[Tuple[uint256, uint256]], int, Tuple[Dict[Address, List[int]], int]]:
        """
        [Source code](file:///Users/dteiml/p/hacker-dom/woke-uniswap-v2/src/UniswapV2Router02.sol#104)

        Args:
            tokenA: address
            tokenB: address
            liquidity: uint256
            amountAMin: uint256
            amountBMin: uint256
            to_: address
            deadline: uint256
        Returns:
            (uint256, uint256)
        """
        return self._execute(self.chain, request_type, "baa2abde", [tokenA, tokenB, liquidity, amountAMin, amountBMin, to_, deadline], True if request_type == "tx" else False, Tuple[uint256, uint256], from_, to if to is not None else str(self.address), value, gas_limit, gas_price, max_fee_per_gas, max_priority_fee_per_gas, access_list, type, block, confirmations)

    @overload
    def removeLiquidityETH(self, token: Union[Account, Address], liquidity: uint256, amountTokenMin: uint256, amountETHMin: uint256, to_: Union[Account, Address], deadline: uint256, *, from_: Optional[Union[Account, Address, str]] = None, to: Optional[Union[Account, Address, str]] = None, value: Union[int, str] = 0, gas_limit: Optional[Union[int, Literal["max"], Literal["auto"]]] = None, request_type: Literal["call"], gas_price: Optional[Union[int, str]] = None, max_fee_per_gas: Optional[Union[int, str]] = None, max_priority_fee_per_gas: Optional[Union[int, str]] = None, access_list: Optional[Union[Dict[Union[Account, Address, str], List[int]], Literal["auto"]]] = None, type: Optional[int] = None, block: Optional[Union[int, Literal["latest"], Literal["pending"], Literal["earliest"], Literal["safe"], Literal["finalized"]]] = None, confirmations: Optional[int] = None) -> Tuple[uint256, uint256]:
        """
        [Source code](file:///Users/dteiml/p/hacker-dom/woke-uniswap-v2/src/UniswapV2Router02.sol#121)

        Args:
            token: address
            liquidity: uint256
            amountTokenMin: uint256
            amountETHMin: uint256
            to_: address
            deadline: uint256
        Returns:
            (uint256, uint256)
        """
        ...

    @overload
    def removeLiquidityETH(self, token: Union[Account, Address], liquidity: uint256, amountTokenMin: uint256, amountETHMin: uint256, to_: Union[Account, Address], deadline: uint256, *, from_: Optional[Union[Account, Address, str]] = None, to: Optional[Union[Account, Address, str]] = None, value: Union[int, str] = 0, gas_limit: Optional[Union[int, Literal["max"], Literal["auto"]]] = None, request_type: Literal["estimate"], gas_price: Optional[Union[int, str]] = None, max_fee_per_gas: Optional[Union[int, str]] = None, max_priority_fee_per_gas: Optional[Union[int, str]] = None, access_list: Optional[Union[Dict[Union[Account, Address, str], List[int]], Literal["auto"]]] = None, type: Optional[int] = None, block: Optional[Union[int, Literal["latest"], Literal["pending"], Literal["earliest"], Literal["safe"], Literal["finalized"]]] = None, confirmations: Optional[int] = None) -> int:
        """
        [Source code](file:///Users/dteiml/p/hacker-dom/woke-uniswap-v2/src/UniswapV2Router02.sol#121)

        Args:
            token: address
            liquidity: uint256
            amountTokenMin: uint256
            amountETHMin: uint256
            to_: address
            deadline: uint256
        Returns:
            (uint256, uint256)
        """
        ...

    @overload
    def removeLiquidityETH(self, token: Union[Account, Address], liquidity: uint256, amountTokenMin: uint256, amountETHMin: uint256, to_: Union[Account, Address], deadline: uint256, *, from_: Optional[Union[Account, Address, str]] = None, to: Optional[Union[Account, Address, str]] = None, value: Union[int, str] = 0, gas_limit: Optional[Union[int, Literal["max"], Literal["auto"]]] = None, request_type: Literal["access_list"], gas_price: Optional[Union[int, str]] = None, max_fee_per_gas: Optional[Union[int, str]] = None, max_priority_fee_per_gas: Optional[Union[int, str]] = None, access_list: Optional[Union[Dict[Union[Account, Address, str], List[int]], Literal["auto"]]] = None, type: Optional[int] = None, block: Optional[Union[int, Literal["latest"], Literal["pending"], Literal["earliest"], Literal["safe"], Literal["finalized"]]] = None, confirmations: Optional[int] = None) -> Tuple[Dict[Address, List[int]], int]:
        """
        [Source code](file:///Users/dteiml/p/hacker-dom/woke-uniswap-v2/src/UniswapV2Router02.sol#121)

        Args:
            token: address
            liquidity: uint256
            amountTokenMin: uint256
            amountETHMin: uint256
            to_: address
            deadline: uint256
        Returns:
            (uint256, uint256)
        """
        ...

    @overload
    def removeLiquidityETH(self, token: Union[Account, Address], liquidity: uint256, amountTokenMin: uint256, amountETHMin: uint256, to_: Union[Account, Address], deadline: uint256, *, from_: Optional[Union[Account, Address, str]] = None, to: Optional[Union[Account, Address, str]] = None, value: Union[int, str] = 0, gas_limit: Optional[Union[int, Literal["max"], Literal["auto"]]] = None, request_type: Literal["tx"] = "tx", gas_price: Optional[Union[int, str]] = None, max_fee_per_gas: Optional[Union[int, str]] = None, max_priority_fee_per_gas: Optional[Union[int, str]] = None, access_list: Optional[Union[Dict[Union[Account, Address, str], List[int]], Literal["auto"]]] = None, type: Optional[int] = None, block: Optional[Union[int, Literal["latest"], Literal["pending"], Literal["earliest"], Literal["safe"], Literal["finalized"]]] = None, confirmations: Optional[int] = None) -> TransactionAbc[Tuple[uint256, uint256]]:
        """
        [Source code](file:///Users/dteiml/p/hacker-dom/woke-uniswap-v2/src/UniswapV2Router02.sol#121)

        Args:
            token: address
            liquidity: uint256
            amountTokenMin: uint256
            amountETHMin: uint256
            to_: address
            deadline: uint256
        Returns:
            (uint256, uint256)
        """
        ...

    def removeLiquidityETH(self, token: Union[Account, Address], liquidity: uint256, amountTokenMin: uint256, amountETHMin: uint256, to_: Union[Account, Address], deadline: uint256, *, from_: Optional[Union[Account, Address, str]] = None, to: Optional[Union[Account, Address, str]] = None, value: Union[int, str] = 0, gas_limit: Optional[Union[int, Literal["max"], Literal["auto"]]] = None, request_type: RequestType = 'tx', gas_price: Optional[Union[int, str]] = None, max_fee_per_gas: Optional[Union[int, str]] = None, max_priority_fee_per_gas: Optional[Union[int, str]] = None, access_list: Optional[Union[Dict[Union[Account, Address, str], List[int]], Literal["auto"]]] = None, type: Optional[int] = None, block: Optional[Union[int, Literal["latest"], Literal["pending"], Literal["earliest"], Literal["safe"], Literal["finalized"]]] = None, confirmations: Optional[int] = None) -> Union[Tuple[uint256, uint256], TransactionAbc[Tuple[uint256, uint256]], int, Tuple[Dict[Address, List[int]], int]]:
        """
        [Source code](file:///Users/dteiml/p/hacker-dom/woke-uniswap-v2/src/UniswapV2Router02.sol#121)

        Args:
            token: address
            liquidity: uint256
            amountTokenMin: uint256
            amountETHMin: uint256
            to_: address
            deadline: uint256
        Returns:
            (uint256, uint256)
        """
        return self._execute(self.chain, request_type, "02751cec", [token, liquidity, amountTokenMin, amountETHMin, to_, deadline], True if request_type == "tx" else False, Tuple[uint256, uint256], from_, to if to is not None else str(self.address), value, gas_limit, gas_price, max_fee_per_gas, max_priority_fee_per_gas, access_list, type, block, confirmations)

    @overload
    def removeLiquidityWithPermit(self, tokenA: Union[Account, Address], tokenB: Union[Account, Address], liquidity: uint256, amountAMin: uint256, amountBMin: uint256, to_: Union[Account, Address], deadline: uint256, approveMax: bool, v: uint8, r: bytes32, s: bytes32, *, from_: Optional[Union[Account, Address, str]] = None, to: Optional[Union[Account, Address, str]] = None, value: Union[int, str] = 0, gas_limit: Optional[Union[int, Literal["max"], Literal["auto"]]] = None, request_type: Literal["call"], gas_price: Optional[Union[int, str]] = None, max_fee_per_gas: Optional[Union[int, str]] = None, max_priority_fee_per_gas: Optional[Union[int, str]] = None, access_list: Optional[Union[Dict[Union[Account, Address, str], List[int]], Literal["auto"]]] = None, type: Optional[int] = None, block: Optional[Union[int, Literal["latest"], Literal["pending"], Literal["earliest"], Literal["safe"], Literal["finalized"]]] = None, confirmations: Optional[int] = None) -> Tuple[uint256, uint256]:
        """
        [Source code](file:///Users/dteiml/p/hacker-dom/woke-uniswap-v2/src/UniswapV2Router02.sol#142)

        Args:
            tokenA: address
            tokenB: address
            liquidity: uint256
            amountAMin: uint256
            amountBMin: uint256
            to_: address
            deadline: uint256
            approveMax: bool
            v: uint8
            r: bytes32
            s: bytes32
        Returns:
            (uint256, uint256)
        """
        ...

    @overload
    def removeLiquidityWithPermit(self, tokenA: Union[Account, Address], tokenB: Union[Account, Address], liquidity: uint256, amountAMin: uint256, amountBMin: uint256, to_: Union[Account, Address], deadline: uint256, approveMax: bool, v: uint8, r: bytes32, s: bytes32, *, from_: Optional[Union[Account, Address, str]] = None, to: Optional[Union[Account, Address, str]] = None, value: Union[int, str] = 0, gas_limit: Optional[Union[int, Literal["max"], Literal["auto"]]] = None, request_type: Literal["estimate"], gas_price: Optional[Union[int, str]] = None, max_fee_per_gas: Optional[Union[int, str]] = None, max_priority_fee_per_gas: Optional[Union[int, str]] = None, access_list: Optional[Union[Dict[Union[Account, Address, str], List[int]], Literal["auto"]]] = None, type: Optional[int] = None, block: Optional[Union[int, Literal["latest"], Literal["pending"], Literal["earliest"], Literal["safe"], Literal["finalized"]]] = None, confirmations: Optional[int] = None) -> int:
        """
        [Source code](file:///Users/dteiml/p/hacker-dom/woke-uniswap-v2/src/UniswapV2Router02.sol#142)

        Args:
            tokenA: address
            tokenB: address
            liquidity: uint256
            amountAMin: uint256
            amountBMin: uint256
            to_: address
            deadline: uint256
            approveMax: bool
            v: uint8
            r: bytes32
            s: bytes32
        Returns:
            (uint256, uint256)
        """
        ...

    @overload
    def removeLiquidityWithPermit(self, tokenA: Union[Account, Address], tokenB: Union[Account, Address], liquidity: uint256, amountAMin: uint256, amountBMin: uint256, to_: Union[Account, Address], deadline: uint256, approveMax: bool, v: uint8, r: bytes32, s: bytes32, *, from_: Optional[Union[Account, Address, str]] = None, to: Optional[Union[Account, Address, str]] = None, value: Union[int, str] = 0, gas_limit: Optional[Union[int, Literal["max"], Literal["auto"]]] = None, request_type: Literal["access_list"], gas_price: Optional[Union[int, str]] = None, max_fee_per_gas: Optional[Union[int, str]] = None, max_priority_fee_per_gas: Optional[Union[int, str]] = None, access_list: Optional[Union[Dict[Union[Account, Address, str], List[int]], Literal["auto"]]] = None, type: Optional[int] = None, block: Optional[Union[int, Literal["latest"], Literal["pending"], Literal["earliest"], Literal["safe"], Literal["finalized"]]] = None, confirmations: Optional[int] = None) -> Tuple[Dict[Address, List[int]], int]:
        """
        [Source code](file:///Users/dteiml/p/hacker-dom/woke-uniswap-v2/src/UniswapV2Router02.sol#142)

        Args:
            tokenA: address
            tokenB: address
            liquidity: uint256
            amountAMin: uint256
            amountBMin: uint256
            to_: address
            deadline: uint256
            approveMax: bool
            v: uint8
            r: bytes32
            s: bytes32
        Returns:
            (uint256, uint256)
        """
        ...

    @overload
    def removeLiquidityWithPermit(self, tokenA: Union[Account, Address], tokenB: Union[Account, Address], liquidity: uint256, amountAMin: uint256, amountBMin: uint256, to_: Union[Account, Address], deadline: uint256, approveMax: bool, v: uint8, r: bytes32, s: bytes32, *, from_: Optional[Union[Account, Address, str]] = None, to: Optional[Union[Account, Address, str]] = None, value: Union[int, str] = 0, gas_limit: Optional[Union[int, Literal["max"], Literal["auto"]]] = None, request_type: Literal["tx"] = "tx", gas_price: Optional[Union[int, str]] = None, max_fee_per_gas: Optional[Union[int, str]] = None, max_priority_fee_per_gas: Optional[Union[int, str]] = None, access_list: Optional[Union[Dict[Union[Account, Address, str], List[int]], Literal["auto"]]] = None, type: Optional[int] = None, block: Optional[Union[int, Literal["latest"], Literal["pending"], Literal["earliest"], Literal["safe"], Literal["finalized"]]] = None, confirmations: Optional[int] = None) -> TransactionAbc[Tuple[uint256, uint256]]:
        """
        [Source code](file:///Users/dteiml/p/hacker-dom/woke-uniswap-v2/src/UniswapV2Router02.sol#142)

        Args:
            tokenA: address
            tokenB: address
            liquidity: uint256
            amountAMin: uint256
            amountBMin: uint256
            to_: address
            deadline: uint256
            approveMax: bool
            v: uint8
            r: bytes32
            s: bytes32
        Returns:
            (uint256, uint256)
        """
        ...

    def removeLiquidityWithPermit(self, tokenA: Union[Account, Address], tokenB: Union[Account, Address], liquidity: uint256, amountAMin: uint256, amountBMin: uint256, to_: Union[Account, Address], deadline: uint256, approveMax: bool, v: uint8, r: bytes32, s: bytes32, *, from_: Optional[Union[Account, Address, str]] = None, to: Optional[Union[Account, Address, str]] = None, value: Union[int, str] = 0, gas_limit: Optional[Union[int, Literal["max"], Literal["auto"]]] = None, request_type: RequestType = 'tx', gas_price: Optional[Union[int, str]] = None, max_fee_per_gas: Optional[Union[int, str]] = None, max_priority_fee_per_gas: Optional[Union[int, str]] = None, access_list: Optional[Union[Dict[Union[Account, Address, str], List[int]], Literal["auto"]]] = None, type: Optional[int] = None, block: Optional[Union[int, Literal["latest"], Literal["pending"], Literal["earliest"], Literal["safe"], Literal["finalized"]]] = None, confirmations: Optional[int] = None) -> Union[Tuple[uint256, uint256], TransactionAbc[Tuple[uint256, uint256]], int, Tuple[Dict[Address, List[int]], int]]:
        """
        [Source code](file:///Users/dteiml/p/hacker-dom/woke-uniswap-v2/src/UniswapV2Router02.sol#142)

        Args:
            tokenA: address
            tokenB: address
            liquidity: uint256
            amountAMin: uint256
            amountBMin: uint256
            to_: address
            deadline: uint256
            approveMax: bool
            v: uint8
            r: bytes32
            s: bytes32
        Returns:
            (uint256, uint256)
        """
        return self._execute(self.chain, request_type, "2195995c", [tokenA, tokenB, liquidity, amountAMin, amountBMin, to_, deadline, approveMax, v, r, s], True if request_type == "tx" else False, Tuple[uint256, uint256], from_, to if to is not None else str(self.address), value, gas_limit, gas_price, max_fee_per_gas, max_priority_fee_per_gas, access_list, type, block, confirmations)

    @overload
    def removeLiquidityETHWithPermit(self, token: Union[Account, Address], liquidity: uint256, amountTokenMin: uint256, amountETHMin: uint256, to_: Union[Account, Address], deadline: uint256, approveMax: bool, v: uint8, r: bytes32, s: bytes32, *, from_: Optional[Union[Account, Address, str]] = None, to: Optional[Union[Account, Address, str]] = None, value: Union[int, str] = 0, gas_limit: Optional[Union[int, Literal["max"], Literal["auto"]]] = None, request_type: Literal["call"], gas_price: Optional[Union[int, str]] = None, max_fee_per_gas: Optional[Union[int, str]] = None, max_priority_fee_per_gas: Optional[Union[int, str]] = None, access_list: Optional[Union[Dict[Union[Account, Address, str], List[int]], Literal["auto"]]] = None, type: Optional[int] = None, block: Optional[Union[int, Literal["latest"], Literal["pending"], Literal["earliest"], Literal["safe"], Literal["finalized"]]] = None, confirmations: Optional[int] = None) -> Tuple[uint256, uint256]:
        """
        [Source code](file:///Users/dteiml/p/hacker-dom/woke-uniswap-v2/src/UniswapV2Router02.sol#157)

        Args:
            token: address
            liquidity: uint256
            amountTokenMin: uint256
            amountETHMin: uint256
            to_: address
            deadline: uint256
            approveMax: bool
            v: uint8
            r: bytes32
            s: bytes32
        Returns:
            (uint256, uint256)
        """
        ...

    @overload
    def removeLiquidityETHWithPermit(self, token: Union[Account, Address], liquidity: uint256, amountTokenMin: uint256, amountETHMin: uint256, to_: Union[Account, Address], deadline: uint256, approveMax: bool, v: uint8, r: bytes32, s: bytes32, *, from_: Optional[Union[Account, Address, str]] = None, to: Optional[Union[Account, Address, str]] = None, value: Union[int, str] = 0, gas_limit: Optional[Union[int, Literal["max"], Literal["auto"]]] = None, request_type: Literal["estimate"], gas_price: Optional[Union[int, str]] = None, max_fee_per_gas: Optional[Union[int, str]] = None, max_priority_fee_per_gas: Optional[Union[int, str]] = None, access_list: Optional[Union[Dict[Union[Account, Address, str], List[int]], Literal["auto"]]] = None, type: Optional[int] = None, block: Optional[Union[int, Literal["latest"], Literal["pending"], Literal["earliest"], Literal["safe"], Literal["finalized"]]] = None, confirmations: Optional[int] = None) -> int:
        """
        [Source code](file:///Users/dteiml/p/hacker-dom/woke-uniswap-v2/src/UniswapV2Router02.sol#157)

        Args:
            token: address
            liquidity: uint256
            amountTokenMin: uint256
            amountETHMin: uint256
            to_: address
            deadline: uint256
            approveMax: bool
            v: uint8
            r: bytes32
            s: bytes32
        Returns:
            (uint256, uint256)
        """
        ...

    @overload
    def removeLiquidityETHWithPermit(self, token: Union[Account, Address], liquidity: uint256, amountTokenMin: uint256, amountETHMin: uint256, to_: Union[Account, Address], deadline: uint256, approveMax: bool, v: uint8, r: bytes32, s: bytes32, *, from_: Optional[Union[Account, Address, str]] = None, to: Optional[Union[Account, Address, str]] = None, value: Union[int, str] = 0, gas_limit: Optional[Union[int, Literal["max"], Literal["auto"]]] = None, request_type: Literal["access_list"], gas_price: Optional[Union[int, str]] = None, max_fee_per_gas: Optional[Union[int, str]] = None, max_priority_fee_per_gas: Optional[Union[int, str]] = None, access_list: Optional[Union[Dict[Union[Account, Address, str], List[int]], Literal["auto"]]] = None, type: Optional[int] = None, block: Optional[Union[int, Literal["latest"], Literal["pending"], Literal["earliest"], Literal["safe"], Literal["finalized"]]] = None, confirmations: Optional[int] = None) -> Tuple[Dict[Address, List[int]], int]:
        """
        [Source code](file:///Users/dteiml/p/hacker-dom/woke-uniswap-v2/src/UniswapV2Router02.sol#157)

        Args:
            token: address
            liquidity: uint256
            amountTokenMin: uint256
            amountETHMin: uint256
            to_: address
            deadline: uint256
            approveMax: bool
            v: uint8
            r: bytes32
            s: bytes32
        Returns:
            (uint256, uint256)
        """
        ...

    @overload
    def removeLiquidityETHWithPermit(self, token: Union[Account, Address], liquidity: uint256, amountTokenMin: uint256, amountETHMin: uint256, to_: Union[Account, Address], deadline: uint256, approveMax: bool, v: uint8, r: bytes32, s: bytes32, *, from_: Optional[Union[Account, Address, str]] = None, to: Optional[Union[Account, Address, str]] = None, value: Union[int, str] = 0, gas_limit: Optional[Union[int, Literal["max"], Literal["auto"]]] = None, request_type: Literal["tx"] = "tx", gas_price: Optional[Union[int, str]] = None, max_fee_per_gas: Optional[Union[int, str]] = None, max_priority_fee_per_gas: Optional[Union[int, str]] = None, access_list: Optional[Union[Dict[Union[Account, Address, str], List[int]], Literal["auto"]]] = None, type: Optional[int] = None, block: Optional[Union[int, Literal["latest"], Literal["pending"], Literal["earliest"], Literal["safe"], Literal["finalized"]]] = None, confirmations: Optional[int] = None) -> TransactionAbc[Tuple[uint256, uint256]]:
        """
        [Source code](file:///Users/dteiml/p/hacker-dom/woke-uniswap-v2/src/UniswapV2Router02.sol#157)

        Args:
            token: address
            liquidity: uint256
            amountTokenMin: uint256
            amountETHMin: uint256
            to_: address
            deadline: uint256
            approveMax: bool
            v: uint8
            r: bytes32
            s: bytes32
        Returns:
            (uint256, uint256)
        """
        ...

    def removeLiquidityETHWithPermit(self, token: Union[Account, Address], liquidity: uint256, amountTokenMin: uint256, amountETHMin: uint256, to_: Union[Account, Address], deadline: uint256, approveMax: bool, v: uint8, r: bytes32, s: bytes32, *, from_: Optional[Union[Account, Address, str]] = None, to: Optional[Union[Account, Address, str]] = None, value: Union[int, str] = 0, gas_limit: Optional[Union[int, Literal["max"], Literal["auto"]]] = None, request_type: RequestType = 'tx', gas_price: Optional[Union[int, str]] = None, max_fee_per_gas: Optional[Union[int, str]] = None, max_priority_fee_per_gas: Optional[Union[int, str]] = None, access_list: Optional[Union[Dict[Union[Account, Address, str], List[int]], Literal["auto"]]] = None, type: Optional[int] = None, block: Optional[Union[int, Literal["latest"], Literal["pending"], Literal["earliest"], Literal["safe"], Literal["finalized"]]] = None, confirmations: Optional[int] = None) -> Union[Tuple[uint256, uint256], TransactionAbc[Tuple[uint256, uint256]], int, Tuple[Dict[Address, List[int]], int]]:
        """
        [Source code](file:///Users/dteiml/p/hacker-dom/woke-uniswap-v2/src/UniswapV2Router02.sol#157)

        Args:
            token: address
            liquidity: uint256
            amountTokenMin: uint256
            amountETHMin: uint256
            to_: address
            deadline: uint256
            approveMax: bool
            v: uint8
            r: bytes32
            s: bytes32
        Returns:
            (uint256, uint256)
        """
        return self._execute(self.chain, request_type, "ded9382a", [token, liquidity, amountTokenMin, amountETHMin, to_, deadline, approveMax, v, r, s], True if request_type == "tx" else False, Tuple[uint256, uint256], from_, to if to is not None else str(self.address), value, gas_limit, gas_price, max_fee_per_gas, max_priority_fee_per_gas, access_list, type, block, confirmations)

    @overload
    def removeLiquidityETHSupportingFeeOnTransferTokens(self, token: Union[Account, Address], liquidity: uint256, amountTokenMin: uint256, amountETHMin: uint256, to_: Union[Account, Address], deadline: uint256, *, from_: Optional[Union[Account, Address, str]] = None, to: Optional[Union[Account, Address, str]] = None, value: Union[int, str] = 0, gas_limit: Optional[Union[int, Literal["max"], Literal["auto"]]] = None, request_type: Literal["call"], gas_price: Optional[Union[int, str]] = None, max_fee_per_gas: Optional[Union[int, str]] = None, max_priority_fee_per_gas: Optional[Union[int, str]] = None, access_list: Optional[Union[Dict[Union[Account, Address, str], List[int]], Literal["auto"]]] = None, type: Optional[int] = None, block: Optional[Union[int, Literal["latest"], Literal["pending"], Literal["earliest"], Literal["safe"], Literal["finalized"]]] = None, confirmations: Optional[int] = None) -> uint256:
        """
        [Source code](file:///Users/dteiml/p/hacker-dom/woke-uniswap-v2/src/UniswapV2Router02.sol#173)

        Args:
            token: address
            liquidity: uint256
            amountTokenMin: uint256
            amountETHMin: uint256
            to_: address
            deadline: uint256
        Returns:
            uint256
        """
        ...

    @overload
    def removeLiquidityETHSupportingFeeOnTransferTokens(self, token: Union[Account, Address], liquidity: uint256, amountTokenMin: uint256, amountETHMin: uint256, to_: Union[Account, Address], deadline: uint256, *, from_: Optional[Union[Account, Address, str]] = None, to: Optional[Union[Account, Address, str]] = None, value: Union[int, str] = 0, gas_limit: Optional[Union[int, Literal["max"], Literal["auto"]]] = None, request_type: Literal["estimate"], gas_price: Optional[Union[int, str]] = None, max_fee_per_gas: Optional[Union[int, str]] = None, max_priority_fee_per_gas: Optional[Union[int, str]] = None, access_list: Optional[Union[Dict[Union[Account, Address, str], List[int]], Literal["auto"]]] = None, type: Optional[int] = None, block: Optional[Union[int, Literal["latest"], Literal["pending"], Literal["earliest"], Literal["safe"], Literal["finalized"]]] = None, confirmations: Optional[int] = None) -> int:
        """
        [Source code](file:///Users/dteiml/p/hacker-dom/woke-uniswap-v2/src/UniswapV2Router02.sol#173)

        Args:
            token: address
            liquidity: uint256
            amountTokenMin: uint256
            amountETHMin: uint256
            to_: address
            deadline: uint256
        Returns:
            uint256
        """
        ...

    @overload
    def removeLiquidityETHSupportingFeeOnTransferTokens(self, token: Union[Account, Address], liquidity: uint256, amountTokenMin: uint256, amountETHMin: uint256, to_: Union[Account, Address], deadline: uint256, *, from_: Optional[Union[Account, Address, str]] = None, to: Optional[Union[Account, Address, str]] = None, value: Union[int, str] = 0, gas_limit: Optional[Union[int, Literal["max"], Literal["auto"]]] = None, request_type: Literal["access_list"], gas_price: Optional[Union[int, str]] = None, max_fee_per_gas: Optional[Union[int, str]] = None, max_priority_fee_per_gas: Optional[Union[int, str]] = None, access_list: Optional[Union[Dict[Union[Account, Address, str], List[int]], Literal["auto"]]] = None, type: Optional[int] = None, block: Optional[Union[int, Literal["latest"], Literal["pending"], Literal["earliest"], Literal["safe"], Literal["finalized"]]] = None, confirmations: Optional[int] = None) -> Tuple[Dict[Address, List[int]], int]:
        """
        [Source code](file:///Users/dteiml/p/hacker-dom/woke-uniswap-v2/src/UniswapV2Router02.sol#173)

        Args:
            token: address
            liquidity: uint256
            amountTokenMin: uint256
            amountETHMin: uint256
            to_: address
            deadline: uint256
        Returns:
            uint256
        """
        ...

    @overload
    def removeLiquidityETHSupportingFeeOnTransferTokens(self, token: Union[Account, Address], liquidity: uint256, amountTokenMin: uint256, amountETHMin: uint256, to_: Union[Account, Address], deadline: uint256, *, from_: Optional[Union[Account, Address, str]] = None, to: Optional[Union[Account, Address, str]] = None, value: Union[int, str] = 0, gas_limit: Optional[Union[int, Literal["max"], Literal["auto"]]] = None, request_type: Literal["tx"] = "tx", gas_price: Optional[Union[int, str]] = None, max_fee_per_gas: Optional[Union[int, str]] = None, max_priority_fee_per_gas: Optional[Union[int, str]] = None, access_list: Optional[Union[Dict[Union[Account, Address, str], List[int]], Literal["auto"]]] = None, type: Optional[int] = None, block: Optional[Union[int, Literal["latest"], Literal["pending"], Literal["earliest"], Literal["safe"], Literal["finalized"]]] = None, confirmations: Optional[int] = None) -> TransactionAbc[uint256]:
        """
        [Source code](file:///Users/dteiml/p/hacker-dom/woke-uniswap-v2/src/UniswapV2Router02.sol#173)

        Args:
            token: address
            liquidity: uint256
            amountTokenMin: uint256
            amountETHMin: uint256
            to_: address
            deadline: uint256
        Returns:
            uint256
        """
        ...

    def removeLiquidityETHSupportingFeeOnTransferTokens(self, token: Union[Account, Address], liquidity: uint256, amountTokenMin: uint256, amountETHMin: uint256, to_: Union[Account, Address], deadline: uint256, *, from_: Optional[Union[Account, Address, str]] = None, to: Optional[Union[Account, Address, str]] = None, value: Union[int, str] = 0, gas_limit: Optional[Union[int, Literal["max"], Literal["auto"]]] = None, request_type: RequestType = 'tx', gas_price: Optional[Union[int, str]] = None, max_fee_per_gas: Optional[Union[int, str]] = None, max_priority_fee_per_gas: Optional[Union[int, str]] = None, access_list: Optional[Union[Dict[Union[Account, Address, str], List[int]], Literal["auto"]]] = None, type: Optional[int] = None, block: Optional[Union[int, Literal["latest"], Literal["pending"], Literal["earliest"], Literal["safe"], Literal["finalized"]]] = None, confirmations: Optional[int] = None) -> Union[uint256, TransactionAbc[uint256], int, Tuple[Dict[Address, List[int]], int]]:
        """
        [Source code](file:///Users/dteiml/p/hacker-dom/woke-uniswap-v2/src/UniswapV2Router02.sol#173)

        Args:
            token: address
            liquidity: uint256
            amountTokenMin: uint256
            amountETHMin: uint256
            to_: address
            deadline: uint256
        Returns:
            uint256
        """
        return self._execute(self.chain, request_type, "af2979eb", [token, liquidity, amountTokenMin, amountETHMin, to_, deadline], True if request_type == "tx" else False, uint256, from_, to if to is not None else str(self.address), value, gas_limit, gas_price, max_fee_per_gas, max_priority_fee_per_gas, access_list, type, block, confirmations)

    @overload
    def removeLiquidityETHWithPermitSupportingFeeOnTransferTokens(self, token: Union[Account, Address], liquidity: uint256, amountTokenMin: uint256, amountETHMin: uint256, to_: Union[Account, Address], deadline: uint256, approveMax: bool, v: uint8, r: bytes32, s: bytes32, *, from_: Optional[Union[Account, Address, str]] = None, to: Optional[Union[Account, Address, str]] = None, value: Union[int, str] = 0, gas_limit: Optional[Union[int, Literal["max"], Literal["auto"]]] = None, request_type: Literal["call"], gas_price: Optional[Union[int, str]] = None, max_fee_per_gas: Optional[Union[int, str]] = None, max_priority_fee_per_gas: Optional[Union[int, str]] = None, access_list: Optional[Union[Dict[Union[Account, Address, str], List[int]], Literal["auto"]]] = None, type: Optional[int] = None, block: Optional[Union[int, Literal["latest"], Literal["pending"], Literal["earliest"], Literal["safe"], Literal["finalized"]]] = None, confirmations: Optional[int] = None) -> uint256:
        """
        [Source code](file:///Users/dteiml/p/hacker-dom/woke-uniswap-v2/src/UniswapV2Router02.sol#194)

        Args:
            token: address
            liquidity: uint256
            amountTokenMin: uint256
            amountETHMin: uint256
            to_: address
            deadline: uint256
            approveMax: bool
            v: uint8
            r: bytes32
            s: bytes32
        Returns:
            uint256
        """
        ...

    @overload
    def removeLiquidityETHWithPermitSupportingFeeOnTransferTokens(self, token: Union[Account, Address], liquidity: uint256, amountTokenMin: uint256, amountETHMin: uint256, to_: Union[Account, Address], deadline: uint256, approveMax: bool, v: uint8, r: bytes32, s: bytes32, *, from_: Optional[Union[Account, Address, str]] = None, to: Optional[Union[Account, Address, str]] = None, value: Union[int, str] = 0, gas_limit: Optional[Union[int, Literal["max"], Literal["auto"]]] = None, request_type: Literal["estimate"], gas_price: Optional[Union[int, str]] = None, max_fee_per_gas: Optional[Union[int, str]] = None, max_priority_fee_per_gas: Optional[Union[int, str]] = None, access_list: Optional[Union[Dict[Union[Account, Address, str], List[int]], Literal["auto"]]] = None, type: Optional[int] = None, block: Optional[Union[int, Literal["latest"], Literal["pending"], Literal["earliest"], Literal["safe"], Literal["finalized"]]] = None, confirmations: Optional[int] = None) -> int:
        """
        [Source code](file:///Users/dteiml/p/hacker-dom/woke-uniswap-v2/src/UniswapV2Router02.sol#194)

        Args:
            token: address
            liquidity: uint256
            amountTokenMin: uint256
            amountETHMin: uint256
            to_: address
            deadline: uint256
            approveMax: bool
            v: uint8
            r: bytes32
            s: bytes32
        Returns:
            uint256
        """
        ...

    @overload
    def removeLiquidityETHWithPermitSupportingFeeOnTransferTokens(self, token: Union[Account, Address], liquidity: uint256, amountTokenMin: uint256, amountETHMin: uint256, to_: Union[Account, Address], deadline: uint256, approveMax: bool, v: uint8, r: bytes32, s: bytes32, *, from_: Optional[Union[Account, Address, str]] = None, to: Optional[Union[Account, Address, str]] = None, value: Union[int, str] = 0, gas_limit: Optional[Union[int, Literal["max"], Literal["auto"]]] = None, request_type: Literal["access_list"], gas_price: Optional[Union[int, str]] = None, max_fee_per_gas: Optional[Union[int, str]] = None, max_priority_fee_per_gas: Optional[Union[int, str]] = None, access_list: Optional[Union[Dict[Union[Account, Address, str], List[int]], Literal["auto"]]] = None, type: Optional[int] = None, block: Optional[Union[int, Literal["latest"], Literal["pending"], Literal["earliest"], Literal["safe"], Literal["finalized"]]] = None, confirmations: Optional[int] = None) -> Tuple[Dict[Address, List[int]], int]:
        """
        [Source code](file:///Users/dteiml/p/hacker-dom/woke-uniswap-v2/src/UniswapV2Router02.sol#194)

        Args:
            token: address
            liquidity: uint256
            amountTokenMin: uint256
            amountETHMin: uint256
            to_: address
            deadline: uint256
            approveMax: bool
            v: uint8
            r: bytes32
            s: bytes32
        Returns:
            uint256
        """
        ...

    @overload
    def removeLiquidityETHWithPermitSupportingFeeOnTransferTokens(self, token: Union[Account, Address], liquidity: uint256, amountTokenMin: uint256, amountETHMin: uint256, to_: Union[Account, Address], deadline: uint256, approveMax: bool, v: uint8, r: bytes32, s: bytes32, *, from_: Optional[Union[Account, Address, str]] = None, to: Optional[Union[Account, Address, str]] = None, value: Union[int, str] = 0, gas_limit: Optional[Union[int, Literal["max"], Literal["auto"]]] = None, request_type: Literal["tx"] = "tx", gas_price: Optional[Union[int, str]] = None, max_fee_per_gas: Optional[Union[int, str]] = None, max_priority_fee_per_gas: Optional[Union[int, str]] = None, access_list: Optional[Union[Dict[Union[Account, Address, str], List[int]], Literal["auto"]]] = None, type: Optional[int] = None, block: Optional[Union[int, Literal["latest"], Literal["pending"], Literal["earliest"], Literal["safe"], Literal["finalized"]]] = None, confirmations: Optional[int] = None) -> TransactionAbc[uint256]:
        """
        [Source code](file:///Users/dteiml/p/hacker-dom/woke-uniswap-v2/src/UniswapV2Router02.sol#194)

        Args:
            token: address
            liquidity: uint256
            amountTokenMin: uint256
            amountETHMin: uint256
            to_: address
            deadline: uint256
            approveMax: bool
            v: uint8
            r: bytes32
            s: bytes32
        Returns:
            uint256
        """
        ...

    def removeLiquidityETHWithPermitSupportingFeeOnTransferTokens(self, token: Union[Account, Address], liquidity: uint256, amountTokenMin: uint256, amountETHMin: uint256, to_: Union[Account, Address], deadline: uint256, approveMax: bool, v: uint8, r: bytes32, s: bytes32, *, from_: Optional[Union[Account, Address, str]] = None, to: Optional[Union[Account, Address, str]] = None, value: Union[int, str] = 0, gas_limit: Optional[Union[int, Literal["max"], Literal["auto"]]] = None, request_type: RequestType = 'tx', gas_price: Optional[Union[int, str]] = None, max_fee_per_gas: Optional[Union[int, str]] = None, max_priority_fee_per_gas: Optional[Union[int, str]] = None, access_list: Optional[Union[Dict[Union[Account, Address, str], List[int]], Literal["auto"]]] = None, type: Optional[int] = None, block: Optional[Union[int, Literal["latest"], Literal["pending"], Literal["earliest"], Literal["safe"], Literal["finalized"]]] = None, confirmations: Optional[int] = None) -> Union[uint256, TransactionAbc[uint256], int, Tuple[Dict[Address, List[int]], int]]:
        """
        [Source code](file:///Users/dteiml/p/hacker-dom/woke-uniswap-v2/src/UniswapV2Router02.sol#194)

        Args:
            token: address
            liquidity: uint256
            amountTokenMin: uint256
            amountETHMin: uint256
            to_: address
            deadline: uint256
            approveMax: bool
            v: uint8
            r: bytes32
            s: bytes32
        Returns:
            uint256
        """
        return self._execute(self.chain, request_type, "5b0d5984", [token, liquidity, amountTokenMin, amountETHMin, to_, deadline, approveMax, v, r, s], True if request_type == "tx" else False, uint256, from_, to if to is not None else str(self.address), value, gas_limit, gas_price, max_fee_per_gas, max_priority_fee_per_gas, access_list, type, block, confirmations)

    @overload
    def swapExactTokensForTokens(self, amountIn: uint256, amountOutMin: uint256, path: List[Union[Account, Address]], to_: Union[Account, Address], deadline: uint256, *, from_: Optional[Union[Account, Address, str]] = None, to: Optional[Union[Account, Address, str]] = None, value: Union[int, str] = 0, gas_limit: Optional[Union[int, Literal["max"], Literal["auto"]]] = None, request_type: Literal["call"], gas_price: Optional[Union[int, str]] = None, max_fee_per_gas: Optional[Union[int, str]] = None, max_priority_fee_per_gas: Optional[Union[int, str]] = None, access_list: Optional[Union[Dict[Union[Account, Address, str], List[int]], Literal["auto"]]] = None, type: Optional[int] = None, block: Optional[Union[int, Literal["latest"], Literal["pending"], Literal["earliest"], Literal["safe"], Literal["finalized"]]] = None, confirmations: Optional[int] = None) -> List[uint256]:
        """
        [Source code](file:///Users/dteiml/p/hacker-dom/woke-uniswap-v2/src/UniswapV2Router02.sol#244)

        Args:
            amountIn: uint256
            amountOutMin: uint256
            path: address[]
            to_: address
            deadline: uint256
        Returns:
            uint256[]
        """
        ...

    @overload
    def swapExactTokensForTokens(self, amountIn: uint256, amountOutMin: uint256, path: List[Union[Account, Address]], to_: Union[Account, Address], deadline: uint256, *, from_: Optional[Union[Account, Address, str]] = None, to: Optional[Union[Account, Address, str]] = None, value: Union[int, str] = 0, gas_limit: Optional[Union[int, Literal["max"], Literal["auto"]]] = None, request_type: Literal["estimate"], gas_price: Optional[Union[int, str]] = None, max_fee_per_gas: Optional[Union[int, str]] = None, max_priority_fee_per_gas: Optional[Union[int, str]] = None, access_list: Optional[Union[Dict[Union[Account, Address, str], List[int]], Literal["auto"]]] = None, type: Optional[int] = None, block: Optional[Union[int, Literal["latest"], Literal["pending"], Literal["earliest"], Literal["safe"], Literal["finalized"]]] = None, confirmations: Optional[int] = None) -> int:
        """
        [Source code](file:///Users/dteiml/p/hacker-dom/woke-uniswap-v2/src/UniswapV2Router02.sol#244)

        Args:
            amountIn: uint256
            amountOutMin: uint256
            path: address[]
            to_: address
            deadline: uint256
        Returns:
            uint256[]
        """
        ...

    @overload
    def swapExactTokensForTokens(self, amountIn: uint256, amountOutMin: uint256, path: List[Union[Account, Address]], to_: Union[Account, Address], deadline: uint256, *, from_: Optional[Union[Account, Address, str]] = None, to: Optional[Union[Account, Address, str]] = None, value: Union[int, str] = 0, gas_limit: Optional[Union[int, Literal["max"], Literal["auto"]]] = None, request_type: Literal["access_list"], gas_price: Optional[Union[int, str]] = None, max_fee_per_gas: Optional[Union[int, str]] = None, max_priority_fee_per_gas: Optional[Union[int, str]] = None, access_list: Optional[Union[Dict[Union[Account, Address, str], List[int]], Literal["auto"]]] = None, type: Optional[int] = None, block: Optional[Union[int, Literal["latest"], Literal["pending"], Literal["earliest"], Literal["safe"], Literal["finalized"]]] = None, confirmations: Optional[int] = None) -> Tuple[Dict[Address, List[int]], int]:
        """
        [Source code](file:///Users/dteiml/p/hacker-dom/woke-uniswap-v2/src/UniswapV2Router02.sol#244)

        Args:
            amountIn: uint256
            amountOutMin: uint256
            path: address[]
            to_: address
            deadline: uint256
        Returns:
            uint256[]
        """
        ...

    @overload
    def swapExactTokensForTokens(self, amountIn: uint256, amountOutMin: uint256, path: List[Union[Account, Address]], to_: Union[Account, Address], deadline: uint256, *, from_: Optional[Union[Account, Address, str]] = None, to: Optional[Union[Account, Address, str]] = None, value: Union[int, str] = 0, gas_limit: Optional[Union[int, Literal["max"], Literal["auto"]]] = None, request_type: Literal["tx"] = "tx", gas_price: Optional[Union[int, str]] = None, max_fee_per_gas: Optional[Union[int, str]] = None, max_priority_fee_per_gas: Optional[Union[int, str]] = None, access_list: Optional[Union[Dict[Union[Account, Address, str], List[int]], Literal["auto"]]] = None, type: Optional[int] = None, block: Optional[Union[int, Literal["latest"], Literal["pending"], Literal["earliest"], Literal["safe"], Literal["finalized"]]] = None, confirmations: Optional[int] = None) -> TransactionAbc[List[uint256]]:
        """
        [Source code](file:///Users/dteiml/p/hacker-dom/woke-uniswap-v2/src/UniswapV2Router02.sol#244)

        Args:
            amountIn: uint256
            amountOutMin: uint256
            path: address[]
            to_: address
            deadline: uint256
        Returns:
            uint256[]
        """
        ...

    def swapExactTokensForTokens(self, amountIn: uint256, amountOutMin: uint256, path: List[Union[Account, Address]], to_: Union[Account, Address], deadline: uint256, *, from_: Optional[Union[Account, Address, str]] = None, to: Optional[Union[Account, Address, str]] = None, value: Union[int, str] = 0, gas_limit: Optional[Union[int, Literal["max"], Literal["auto"]]] = None, request_type: RequestType = 'tx', gas_price: Optional[Union[int, str]] = None, max_fee_per_gas: Optional[Union[int, str]] = None, max_priority_fee_per_gas: Optional[Union[int, str]] = None, access_list: Optional[Union[Dict[Union[Account, Address, str], List[int]], Literal["auto"]]] = None, type: Optional[int] = None, block: Optional[Union[int, Literal["latest"], Literal["pending"], Literal["earliest"], Literal["safe"], Literal["finalized"]]] = None, confirmations: Optional[int] = None) -> Union[List[uint256], TransactionAbc[List[uint256]], int, Tuple[Dict[Address, List[int]], int]]:
        """
        [Source code](file:///Users/dteiml/p/hacker-dom/woke-uniswap-v2/src/UniswapV2Router02.sol#244)

        Args:
            amountIn: uint256
            amountOutMin: uint256
            path: address[]
            to_: address
            deadline: uint256
        Returns:
            uint256[]
        """
        return self._execute(self.chain, request_type, "38ed1739", [amountIn, amountOutMin, path, to_, deadline], True if request_type == "tx" else False, List[uint256], from_, to if to is not None else str(self.address), value, gas_limit, gas_price, max_fee_per_gas, max_priority_fee_per_gas, access_list, type, block, confirmations)

    @overload
    def swapExactTokensForTokens_noFee(self, amountIn: uint256, amountOutMin: uint256, path: List[Union[Account, Address]], to_: Union[Account, Address], deadline: uint256, *, from_: Optional[Union[Account, Address, str]] = None, to: Optional[Union[Account, Address, str]] = None, value: Union[int, str] = 0, gas_limit: Optional[Union[int, Literal["max"], Literal["auto"]]] = None, request_type: Literal["call"], gas_price: Optional[Union[int, str]] = None, max_fee_per_gas: Optional[Union[int, str]] = None, max_priority_fee_per_gas: Optional[Union[int, str]] = None, access_list: Optional[Union[Dict[Union[Account, Address, str], List[int]], Literal["auto"]]] = None, type: Optional[int] = None, block: Optional[Union[int, Literal["latest"], Literal["pending"], Literal["earliest"], Literal["safe"], Literal["finalized"]]] = None, confirmations: Optional[int] = None) -> List[uint256]:
        """
        [Source code](file:///Users/dteiml/p/hacker-dom/woke-uniswap-v2/src/UniswapV2Router02.sol#261)

        Args:
            amountIn: uint256
            amountOutMin: uint256
            path: address[]
            to_: address
            deadline: uint256
        Returns:
            uint256[]
        """
        ...

    @overload
    def swapExactTokensForTokens_noFee(self, amountIn: uint256, amountOutMin: uint256, path: List[Union[Account, Address]], to_: Union[Account, Address], deadline: uint256, *, from_: Optional[Union[Account, Address, str]] = None, to: Optional[Union[Account, Address, str]] = None, value: Union[int, str] = 0, gas_limit: Optional[Union[int, Literal["max"], Literal["auto"]]] = None, request_type: Literal["estimate"], gas_price: Optional[Union[int, str]] = None, max_fee_per_gas: Optional[Union[int, str]] = None, max_priority_fee_per_gas: Optional[Union[int, str]] = None, access_list: Optional[Union[Dict[Union[Account, Address, str], List[int]], Literal["auto"]]] = None, type: Optional[int] = None, block: Optional[Union[int, Literal["latest"], Literal["pending"], Literal["earliest"], Literal["safe"], Literal["finalized"]]] = None, confirmations: Optional[int] = None) -> int:
        """
        [Source code](file:///Users/dteiml/p/hacker-dom/woke-uniswap-v2/src/UniswapV2Router02.sol#261)

        Args:
            amountIn: uint256
            amountOutMin: uint256
            path: address[]
            to_: address
            deadline: uint256
        Returns:
            uint256[]
        """
        ...

    @overload
    def swapExactTokensForTokens_noFee(self, amountIn: uint256, amountOutMin: uint256, path: List[Union[Account, Address]], to_: Union[Account, Address], deadline: uint256, *, from_: Optional[Union[Account, Address, str]] = None, to: Optional[Union[Account, Address, str]] = None, value: Union[int, str] = 0, gas_limit: Optional[Union[int, Literal["max"], Literal["auto"]]] = None, request_type: Literal["access_list"], gas_price: Optional[Union[int, str]] = None, max_fee_per_gas: Optional[Union[int, str]] = None, max_priority_fee_per_gas: Optional[Union[int, str]] = None, access_list: Optional[Union[Dict[Union[Account, Address, str], List[int]], Literal["auto"]]] = None, type: Optional[int] = None, block: Optional[Union[int, Literal["latest"], Literal["pending"], Literal["earliest"], Literal["safe"], Literal["finalized"]]] = None, confirmations: Optional[int] = None) -> Tuple[Dict[Address, List[int]], int]:
        """
        [Source code](file:///Users/dteiml/p/hacker-dom/woke-uniswap-v2/src/UniswapV2Router02.sol#261)

        Args:
            amountIn: uint256
            amountOutMin: uint256
            path: address[]
            to_: address
            deadline: uint256
        Returns:
            uint256[]
        """
        ...

    @overload
    def swapExactTokensForTokens_noFee(self, amountIn: uint256, amountOutMin: uint256, path: List[Union[Account, Address]], to_: Union[Account, Address], deadline: uint256, *, from_: Optional[Union[Account, Address, str]] = None, to: Optional[Union[Account, Address, str]] = None, value: Union[int, str] = 0, gas_limit: Optional[Union[int, Literal["max"], Literal["auto"]]] = None, request_type: Literal["tx"] = "tx", gas_price: Optional[Union[int, str]] = None, max_fee_per_gas: Optional[Union[int, str]] = None, max_priority_fee_per_gas: Optional[Union[int, str]] = None, access_list: Optional[Union[Dict[Union[Account, Address, str], List[int]], Literal["auto"]]] = None, type: Optional[int] = None, block: Optional[Union[int, Literal["latest"], Literal["pending"], Literal["earliest"], Literal["safe"], Literal["finalized"]]] = None, confirmations: Optional[int] = None) -> TransactionAbc[List[uint256]]:
        """
        [Source code](file:///Users/dteiml/p/hacker-dom/woke-uniswap-v2/src/UniswapV2Router02.sol#261)

        Args:
            amountIn: uint256
            amountOutMin: uint256
            path: address[]
            to_: address
            deadline: uint256
        Returns:
            uint256[]
        """
        ...

    def swapExactTokensForTokens_noFee(self, amountIn: uint256, amountOutMin: uint256, path: List[Union[Account, Address]], to_: Union[Account, Address], deadline: uint256, *, from_: Optional[Union[Account, Address, str]] = None, to: Optional[Union[Account, Address, str]] = None, value: Union[int, str] = 0, gas_limit: Optional[Union[int, Literal["max"], Literal["auto"]]] = None, request_type: RequestType = 'tx', gas_price: Optional[Union[int, str]] = None, max_fee_per_gas: Optional[Union[int, str]] = None, max_priority_fee_per_gas: Optional[Union[int, str]] = None, access_list: Optional[Union[Dict[Union[Account, Address, str], List[int]], Literal["auto"]]] = None, type: Optional[int] = None, block: Optional[Union[int, Literal["latest"], Literal["pending"], Literal["earliest"], Literal["safe"], Literal["finalized"]]] = None, confirmations: Optional[int] = None) -> Union[List[uint256], TransactionAbc[List[uint256]], int, Tuple[Dict[Address, List[int]], int]]:
        """
        [Source code](file:///Users/dteiml/p/hacker-dom/woke-uniswap-v2/src/UniswapV2Router02.sol#261)

        Args:
            amountIn: uint256
            amountOutMin: uint256
            path: address[]
            to_: address
            deadline: uint256
        Returns:
            uint256[]
        """
        return self._execute(self.chain, request_type, "9539cab8", [amountIn, amountOutMin, path, to_, deadline], True if request_type == "tx" else False, List[uint256], from_, to if to is not None else str(self.address), value, gas_limit, gas_price, max_fee_per_gas, max_priority_fee_per_gas, access_list, type, block, confirmations)

    @overload
    def swapTokensForExactTokens(self, amountOut: uint256, amountInMax: uint256, path: List[Union[Account, Address]], to_: Union[Account, Address], deadline: uint256, *, from_: Optional[Union[Account, Address, str]] = None, to: Optional[Union[Account, Address, str]] = None, value: Union[int, str] = 0, gas_limit: Optional[Union[int, Literal["max"], Literal["auto"]]] = None, request_type: Literal["call"], gas_price: Optional[Union[int, str]] = None, max_fee_per_gas: Optional[Union[int, str]] = None, max_priority_fee_per_gas: Optional[Union[int, str]] = None, access_list: Optional[Union[Dict[Union[Account, Address, str], List[int]], Literal["auto"]]] = None, type: Optional[int] = None, block: Optional[Union[int, Literal["latest"], Literal["pending"], Literal["earliest"], Literal["safe"], Literal["finalized"]]] = None, confirmations: Optional[int] = None) -> List[uint256]:
        """
        [Source code](file:///Users/dteiml/p/hacker-dom/woke-uniswap-v2/src/UniswapV2Router02.sol#277)

        Args:
            amountOut: uint256
            amountInMax: uint256
            path: address[]
            to_: address
            deadline: uint256
        Returns:
            uint256[]
        """
        ...

    @overload
    def swapTokensForExactTokens(self, amountOut: uint256, amountInMax: uint256, path: List[Union[Account, Address]], to_: Union[Account, Address], deadline: uint256, *, from_: Optional[Union[Account, Address, str]] = None, to: Optional[Union[Account, Address, str]] = None, value: Union[int, str] = 0, gas_limit: Optional[Union[int, Literal["max"], Literal["auto"]]] = None, request_type: Literal["estimate"], gas_price: Optional[Union[int, str]] = None, max_fee_per_gas: Optional[Union[int, str]] = None, max_priority_fee_per_gas: Optional[Union[int, str]] = None, access_list: Optional[Union[Dict[Union[Account, Address, str], List[int]], Literal["auto"]]] = None, type: Optional[int] = None, block: Optional[Union[int, Literal["latest"], Literal["pending"], Literal["earliest"], Literal["safe"], Literal["finalized"]]] = None, confirmations: Optional[int] = None) -> int:
        """
        [Source code](file:///Users/dteiml/p/hacker-dom/woke-uniswap-v2/src/UniswapV2Router02.sol#277)

        Args:
            amountOut: uint256
            amountInMax: uint256
            path: address[]
            to_: address
            deadline: uint256
        Returns:
            uint256[]
        """
        ...

    @overload
    def swapTokensForExactTokens(self, amountOut: uint256, amountInMax: uint256, path: List[Union[Account, Address]], to_: Union[Account, Address], deadline: uint256, *, from_: Optional[Union[Account, Address, str]] = None, to: Optional[Union[Account, Address, str]] = None, value: Union[int, str] = 0, gas_limit: Optional[Union[int, Literal["max"], Literal["auto"]]] = None, request_type: Literal["access_list"], gas_price: Optional[Union[int, str]] = None, max_fee_per_gas: Optional[Union[int, str]] = None, max_priority_fee_per_gas: Optional[Union[int, str]] = None, access_list: Optional[Union[Dict[Union[Account, Address, str], List[int]], Literal["auto"]]] = None, type: Optional[int] = None, block: Optional[Union[int, Literal["latest"], Literal["pending"], Literal["earliest"], Literal["safe"], Literal["finalized"]]] = None, confirmations: Optional[int] = None) -> Tuple[Dict[Address, List[int]], int]:
        """
        [Source code](file:///Users/dteiml/p/hacker-dom/woke-uniswap-v2/src/UniswapV2Router02.sol#277)

        Args:
            amountOut: uint256
            amountInMax: uint256
            path: address[]
            to_: address
            deadline: uint256
        Returns:
            uint256[]
        """
        ...

    @overload
    def swapTokensForExactTokens(self, amountOut: uint256, amountInMax: uint256, path: List[Union[Account, Address]], to_: Union[Account, Address], deadline: uint256, *, from_: Optional[Union[Account, Address, str]] = None, to: Optional[Union[Account, Address, str]] = None, value: Union[int, str] = 0, gas_limit: Optional[Union[int, Literal["max"], Literal["auto"]]] = None, request_type: Literal["tx"] = "tx", gas_price: Optional[Union[int, str]] = None, max_fee_per_gas: Optional[Union[int, str]] = None, max_priority_fee_per_gas: Optional[Union[int, str]] = None, access_list: Optional[Union[Dict[Union[Account, Address, str], List[int]], Literal["auto"]]] = None, type: Optional[int] = None, block: Optional[Union[int, Literal["latest"], Literal["pending"], Literal["earliest"], Literal["safe"], Literal["finalized"]]] = None, confirmations: Optional[int] = None) -> TransactionAbc[List[uint256]]:
        """
        [Source code](file:///Users/dteiml/p/hacker-dom/woke-uniswap-v2/src/UniswapV2Router02.sol#277)

        Args:
            amountOut: uint256
            amountInMax: uint256
            path: address[]
            to_: address
            deadline: uint256
        Returns:
            uint256[]
        """
        ...

    def swapTokensForExactTokens(self, amountOut: uint256, amountInMax: uint256, path: List[Union[Account, Address]], to_: Union[Account, Address], deadline: uint256, *, from_: Optional[Union[Account, Address, str]] = None, to: Optional[Union[Account, Address, str]] = None, value: Union[int, str] = 0, gas_limit: Optional[Union[int, Literal["max"], Literal["auto"]]] = None, request_type: RequestType = 'tx', gas_price: Optional[Union[int, str]] = None, max_fee_per_gas: Optional[Union[int, str]] = None, max_priority_fee_per_gas: Optional[Union[int, str]] = None, access_list: Optional[Union[Dict[Union[Account, Address, str], List[int]], Literal["auto"]]] = None, type: Optional[int] = None, block: Optional[Union[int, Literal["latest"], Literal["pending"], Literal["earliest"], Literal["safe"], Literal["finalized"]]] = None, confirmations: Optional[int] = None) -> Union[List[uint256], TransactionAbc[List[uint256]], int, Tuple[Dict[Address, List[int]], int]]:
        """
        [Source code](file:///Users/dteiml/p/hacker-dom/woke-uniswap-v2/src/UniswapV2Router02.sol#277)

        Args:
            amountOut: uint256
            amountInMax: uint256
            path: address[]
            to_: address
            deadline: uint256
        Returns:
            uint256[]
        """
        return self._execute(self.chain, request_type, "8803dbee", [amountOut, amountInMax, path, to_, deadline], True if request_type == "tx" else False, List[uint256], from_, to if to is not None else str(self.address), value, gas_limit, gas_price, max_fee_per_gas, max_priority_fee_per_gas, access_list, type, block, confirmations)

    @overload
    def swapTokensForExactTokens_noFee(self, amountOut: uint256, amountInMax: uint256, path: List[Union[Account, Address]], to_: Union[Account, Address], deadline: uint256, *, from_: Optional[Union[Account, Address, str]] = None, to: Optional[Union[Account, Address, str]] = None, value: Union[int, str] = 0, gas_limit: Optional[Union[int, Literal["max"], Literal["auto"]]] = None, request_type: Literal["call"], gas_price: Optional[Union[int, str]] = None, max_fee_per_gas: Optional[Union[int, str]] = None, max_priority_fee_per_gas: Optional[Union[int, str]] = None, access_list: Optional[Union[Dict[Union[Account, Address, str], List[int]], Literal["auto"]]] = None, type: Optional[int] = None, block: Optional[Union[int, Literal["latest"], Literal["pending"], Literal["earliest"], Literal["safe"], Literal["finalized"]]] = None, confirmations: Optional[int] = None) -> List[uint256]:
        """
        [Source code](file:///Users/dteiml/p/hacker-dom/woke-uniswap-v2/src/UniswapV2Router02.sol#292)

        Args:
            amountOut: uint256
            amountInMax: uint256
            path: address[]
            to_: address
            deadline: uint256
        Returns:
            uint256[]
        """
        ...

    @overload
    def swapTokensForExactTokens_noFee(self, amountOut: uint256, amountInMax: uint256, path: List[Union[Account, Address]], to_: Union[Account, Address], deadline: uint256, *, from_: Optional[Union[Account, Address, str]] = None, to: Optional[Union[Account, Address, str]] = None, value: Union[int, str] = 0, gas_limit: Optional[Union[int, Literal["max"], Literal["auto"]]] = None, request_type: Literal["estimate"], gas_price: Optional[Union[int, str]] = None, max_fee_per_gas: Optional[Union[int, str]] = None, max_priority_fee_per_gas: Optional[Union[int, str]] = None, access_list: Optional[Union[Dict[Union[Account, Address, str], List[int]], Literal["auto"]]] = None, type: Optional[int] = None, block: Optional[Union[int, Literal["latest"], Literal["pending"], Literal["earliest"], Literal["safe"], Literal["finalized"]]] = None, confirmations: Optional[int] = None) -> int:
        """
        [Source code](file:///Users/dteiml/p/hacker-dom/woke-uniswap-v2/src/UniswapV2Router02.sol#292)

        Args:
            amountOut: uint256
            amountInMax: uint256
            path: address[]
            to_: address
            deadline: uint256
        Returns:
            uint256[]
        """
        ...

    @overload
    def swapTokensForExactTokens_noFee(self, amountOut: uint256, amountInMax: uint256, path: List[Union[Account, Address]], to_: Union[Account, Address], deadline: uint256, *, from_: Optional[Union[Account, Address, str]] = None, to: Optional[Union[Account, Address, str]] = None, value: Union[int, str] = 0, gas_limit: Optional[Union[int, Literal["max"], Literal["auto"]]] = None, request_type: Literal["access_list"], gas_price: Optional[Union[int, str]] = None, max_fee_per_gas: Optional[Union[int, str]] = None, max_priority_fee_per_gas: Optional[Union[int, str]] = None, access_list: Optional[Union[Dict[Union[Account, Address, str], List[int]], Literal["auto"]]] = None, type: Optional[int] = None, block: Optional[Union[int, Literal["latest"], Literal["pending"], Literal["earliest"], Literal["safe"], Literal["finalized"]]] = None, confirmations: Optional[int] = None) -> Tuple[Dict[Address, List[int]], int]:
        """
        [Source code](file:///Users/dteiml/p/hacker-dom/woke-uniswap-v2/src/UniswapV2Router02.sol#292)

        Args:
            amountOut: uint256
            amountInMax: uint256
            path: address[]
            to_: address
            deadline: uint256
        Returns:
            uint256[]
        """
        ...

    @overload
    def swapTokensForExactTokens_noFee(self, amountOut: uint256, amountInMax: uint256, path: List[Union[Account, Address]], to_: Union[Account, Address], deadline: uint256, *, from_: Optional[Union[Account, Address, str]] = None, to: Optional[Union[Account, Address, str]] = None, value: Union[int, str] = 0, gas_limit: Optional[Union[int, Literal["max"], Literal["auto"]]] = None, request_type: Literal["tx"] = "tx", gas_price: Optional[Union[int, str]] = None, max_fee_per_gas: Optional[Union[int, str]] = None, max_priority_fee_per_gas: Optional[Union[int, str]] = None, access_list: Optional[Union[Dict[Union[Account, Address, str], List[int]], Literal["auto"]]] = None, type: Optional[int] = None, block: Optional[Union[int, Literal["latest"], Literal["pending"], Literal["earliest"], Literal["safe"], Literal["finalized"]]] = None, confirmations: Optional[int] = None) -> TransactionAbc[List[uint256]]:
        """
        [Source code](file:///Users/dteiml/p/hacker-dom/woke-uniswap-v2/src/UniswapV2Router02.sol#292)

        Args:
            amountOut: uint256
            amountInMax: uint256
            path: address[]
            to_: address
            deadline: uint256
        Returns:
            uint256[]
        """
        ...

    def swapTokensForExactTokens_noFee(self, amountOut: uint256, amountInMax: uint256, path: List[Union[Account, Address]], to_: Union[Account, Address], deadline: uint256, *, from_: Optional[Union[Account, Address, str]] = None, to: Optional[Union[Account, Address, str]] = None, value: Union[int, str] = 0, gas_limit: Optional[Union[int, Literal["max"], Literal["auto"]]] = None, request_type: RequestType = 'tx', gas_price: Optional[Union[int, str]] = None, max_fee_per_gas: Optional[Union[int, str]] = None, max_priority_fee_per_gas: Optional[Union[int, str]] = None, access_list: Optional[Union[Dict[Union[Account, Address, str], List[int]], Literal["auto"]]] = None, type: Optional[int] = None, block: Optional[Union[int, Literal["latest"], Literal["pending"], Literal["earliest"], Literal["safe"], Literal["finalized"]]] = None, confirmations: Optional[int] = None) -> Union[List[uint256], TransactionAbc[List[uint256]], int, Tuple[Dict[Address, List[int]], int]]:
        """
        [Source code](file:///Users/dteiml/p/hacker-dom/woke-uniswap-v2/src/UniswapV2Router02.sol#292)

        Args:
            amountOut: uint256
            amountInMax: uint256
            path: address[]
            to_: address
            deadline: uint256
        Returns:
            uint256[]
        """
        return self._execute(self.chain, request_type, "e3b34154", [amountOut, amountInMax, path, to_, deadline], True if request_type == "tx" else False, List[uint256], from_, to if to is not None else str(self.address), value, gas_limit, gas_price, max_fee_per_gas, max_priority_fee_per_gas, access_list, type, block, confirmations)

    @overload
    def swapExactETHForTokens(self, amountOutMin: uint256, path: List[Union[Account, Address]], to_: Union[Account, Address], deadline: uint256, *, from_: Optional[Union[Account, Address, str]] = None, to: Optional[Union[Account, Address, str]] = None, value: Union[int, str] = 0, gas_limit: Optional[Union[int, Literal["max"], Literal["auto"]]] = None, request_type: Literal["call"], gas_price: Optional[Union[int, str]] = None, max_fee_per_gas: Optional[Union[int, str]] = None, max_priority_fee_per_gas: Optional[Union[int, str]] = None, access_list: Optional[Union[Dict[Union[Account, Address, str], List[int]], Literal["auto"]]] = None, type: Optional[int] = None, block: Optional[Union[int, Literal["latest"], Literal["pending"], Literal["earliest"], Literal["safe"], Literal["finalized"]]] = None, confirmations: Optional[int] = None) -> List[uint256]:
        """
        [Source code](file:///Users/dteiml/p/hacker-dom/woke-uniswap-v2/src/UniswapV2Router02.sol#307)

        Args:
            amountOutMin: uint256
            path: address[]
            to_: address
            deadline: uint256
        Returns:
            uint256[]
        """
        ...

    @overload
    def swapExactETHForTokens(self, amountOutMin: uint256, path: List[Union[Account, Address]], to_: Union[Account, Address], deadline: uint256, *, from_: Optional[Union[Account, Address, str]] = None, to: Optional[Union[Account, Address, str]] = None, value: Union[int, str] = 0, gas_limit: Optional[Union[int, Literal["max"], Literal["auto"]]] = None, request_type: Literal["estimate"], gas_price: Optional[Union[int, str]] = None, max_fee_per_gas: Optional[Union[int, str]] = None, max_priority_fee_per_gas: Optional[Union[int, str]] = None, access_list: Optional[Union[Dict[Union[Account, Address, str], List[int]], Literal["auto"]]] = None, type: Optional[int] = None, block: Optional[Union[int, Literal["latest"], Literal["pending"], Literal["earliest"], Literal["safe"], Literal["finalized"]]] = None, confirmations: Optional[int] = None) -> int:
        """
        [Source code](file:///Users/dteiml/p/hacker-dom/woke-uniswap-v2/src/UniswapV2Router02.sol#307)

        Args:
            amountOutMin: uint256
            path: address[]
            to_: address
            deadline: uint256
        Returns:
            uint256[]
        """
        ...

    @overload
    def swapExactETHForTokens(self, amountOutMin: uint256, path: List[Union[Account, Address]], to_: Union[Account, Address], deadline: uint256, *, from_: Optional[Union[Account, Address, str]] = None, to: Optional[Union[Account, Address, str]] = None, value: Union[int, str] = 0, gas_limit: Optional[Union[int, Literal["max"], Literal["auto"]]] = None, request_type: Literal["access_list"], gas_price: Optional[Union[int, str]] = None, max_fee_per_gas: Optional[Union[int, str]] = None, max_priority_fee_per_gas: Optional[Union[int, str]] = None, access_list: Optional[Union[Dict[Union[Account, Address, str], List[int]], Literal["auto"]]] = None, type: Optional[int] = None, block: Optional[Union[int, Literal["latest"], Literal["pending"], Literal["earliest"], Literal["safe"], Literal["finalized"]]] = None, confirmations: Optional[int] = None) -> Tuple[Dict[Address, List[int]], int]:
        """
        [Source code](file:///Users/dteiml/p/hacker-dom/woke-uniswap-v2/src/UniswapV2Router02.sol#307)

        Args:
            amountOutMin: uint256
            path: address[]
            to_: address
            deadline: uint256
        Returns:
            uint256[]
        """
        ...

    @overload
    def swapExactETHForTokens(self, amountOutMin: uint256, path: List[Union[Account, Address]], to_: Union[Account, Address], deadline: uint256, *, from_: Optional[Union[Account, Address, str]] = None, to: Optional[Union[Account, Address, str]] = None, value: Union[int, str] = 0, gas_limit: Optional[Union[int, Literal["max"], Literal["auto"]]] = None, request_type: Literal["tx"] = "tx", gas_price: Optional[Union[int, str]] = None, max_fee_per_gas: Optional[Union[int, str]] = None, max_priority_fee_per_gas: Optional[Union[int, str]] = None, access_list: Optional[Union[Dict[Union[Account, Address, str], List[int]], Literal["auto"]]] = None, type: Optional[int] = None, block: Optional[Union[int, Literal["latest"], Literal["pending"], Literal["earliest"], Literal["safe"], Literal["finalized"]]] = None, confirmations: Optional[int] = None) -> TransactionAbc[List[uint256]]:
        """
        [Source code](file:///Users/dteiml/p/hacker-dom/woke-uniswap-v2/src/UniswapV2Router02.sol#307)

        Args:
            amountOutMin: uint256
            path: address[]
            to_: address
            deadline: uint256
        Returns:
            uint256[]
        """
        ...

    def swapExactETHForTokens(self, amountOutMin: uint256, path: List[Union[Account, Address]], to_: Union[Account, Address], deadline: uint256, *, from_: Optional[Union[Account, Address, str]] = None, to: Optional[Union[Account, Address, str]] = None, value: Union[int, str] = 0, gas_limit: Optional[Union[int, Literal["max"], Literal["auto"]]] = None, request_type: RequestType = 'tx', gas_price: Optional[Union[int, str]] = None, max_fee_per_gas: Optional[Union[int, str]] = None, max_priority_fee_per_gas: Optional[Union[int, str]] = None, access_list: Optional[Union[Dict[Union[Account, Address, str], List[int]], Literal["auto"]]] = None, type: Optional[int] = None, block: Optional[Union[int, Literal["latest"], Literal["pending"], Literal["earliest"], Literal["safe"], Literal["finalized"]]] = None, confirmations: Optional[int] = None) -> Union[List[uint256], TransactionAbc[List[uint256]], int, Tuple[Dict[Address, List[int]], int]]:
        """
        [Source code](file:///Users/dteiml/p/hacker-dom/woke-uniswap-v2/src/UniswapV2Router02.sol#307)

        Args:
            amountOutMin: uint256
            path: address[]
            to_: address
            deadline: uint256
        Returns:
            uint256[]
        """
        return self._execute(self.chain, request_type, "7ff36ab5", [amountOutMin, path, to_, deadline], True if request_type == "tx" else False, List[uint256], from_, to if to is not None else str(self.address), value, gas_limit, gas_price, max_fee_per_gas, max_priority_fee_per_gas, access_list, type, block, confirmations)

    @overload
    def swapTokensForExactETH(self, amountOut: uint256, amountInMax: uint256, path: List[Union[Account, Address]], to_: Union[Account, Address], deadline: uint256, *, from_: Optional[Union[Account, Address, str]] = None, to: Optional[Union[Account, Address, str]] = None, value: Union[int, str] = 0, gas_limit: Optional[Union[int, Literal["max"], Literal["auto"]]] = None, request_type: Literal["call"], gas_price: Optional[Union[int, str]] = None, max_fee_per_gas: Optional[Union[int, str]] = None, max_priority_fee_per_gas: Optional[Union[int, str]] = None, access_list: Optional[Union[Dict[Union[Account, Address, str], List[int]], Literal["auto"]]] = None, type: Optional[int] = None, block: Optional[Union[int, Literal["latest"], Literal["pending"], Literal["earliest"], Literal["safe"], Literal["finalized"]]] = None, confirmations: Optional[int] = None) -> List[uint256]:
        """
        [Source code](file:///Users/dteiml/p/hacker-dom/woke-uniswap-v2/src/UniswapV2Router02.sol#321)

        Args:
            amountOut: uint256
            amountInMax: uint256
            path: address[]
            to_: address
            deadline: uint256
        Returns:
            uint256[]
        """
        ...

    @overload
    def swapTokensForExactETH(self, amountOut: uint256, amountInMax: uint256, path: List[Union[Account, Address]], to_: Union[Account, Address], deadline: uint256, *, from_: Optional[Union[Account, Address, str]] = None, to: Optional[Union[Account, Address, str]] = None, value: Union[int, str] = 0, gas_limit: Optional[Union[int, Literal["max"], Literal["auto"]]] = None, request_type: Literal["estimate"], gas_price: Optional[Union[int, str]] = None, max_fee_per_gas: Optional[Union[int, str]] = None, max_priority_fee_per_gas: Optional[Union[int, str]] = None, access_list: Optional[Union[Dict[Union[Account, Address, str], List[int]], Literal["auto"]]] = None, type: Optional[int] = None, block: Optional[Union[int, Literal["latest"], Literal["pending"], Literal["earliest"], Literal["safe"], Literal["finalized"]]] = None, confirmations: Optional[int] = None) -> int:
        """
        [Source code](file:///Users/dteiml/p/hacker-dom/woke-uniswap-v2/src/UniswapV2Router02.sol#321)

        Args:
            amountOut: uint256
            amountInMax: uint256
            path: address[]
            to_: address
            deadline: uint256
        Returns:
            uint256[]
        """
        ...

    @overload
    def swapTokensForExactETH(self, amountOut: uint256, amountInMax: uint256, path: List[Union[Account, Address]], to_: Union[Account, Address], deadline: uint256, *, from_: Optional[Union[Account, Address, str]] = None, to: Optional[Union[Account, Address, str]] = None, value: Union[int, str] = 0, gas_limit: Optional[Union[int, Literal["max"], Literal["auto"]]] = None, request_type: Literal["access_list"], gas_price: Optional[Union[int, str]] = None, max_fee_per_gas: Optional[Union[int, str]] = None, max_priority_fee_per_gas: Optional[Union[int, str]] = None, access_list: Optional[Union[Dict[Union[Account, Address, str], List[int]], Literal["auto"]]] = None, type: Optional[int] = None, block: Optional[Union[int, Literal["latest"], Literal["pending"], Literal["earliest"], Literal["safe"], Literal["finalized"]]] = None, confirmations: Optional[int] = None) -> Tuple[Dict[Address, List[int]], int]:
        """
        [Source code](file:///Users/dteiml/p/hacker-dom/woke-uniswap-v2/src/UniswapV2Router02.sol#321)

        Args:
            amountOut: uint256
            amountInMax: uint256
            path: address[]
            to_: address
            deadline: uint256
        Returns:
            uint256[]
        """
        ...

    @overload
    def swapTokensForExactETH(self, amountOut: uint256, amountInMax: uint256, path: List[Union[Account, Address]], to_: Union[Account, Address], deadline: uint256, *, from_: Optional[Union[Account, Address, str]] = None, to: Optional[Union[Account, Address, str]] = None, value: Union[int, str] = 0, gas_limit: Optional[Union[int, Literal["max"], Literal["auto"]]] = None, request_type: Literal["tx"] = "tx", gas_price: Optional[Union[int, str]] = None, max_fee_per_gas: Optional[Union[int, str]] = None, max_priority_fee_per_gas: Optional[Union[int, str]] = None, access_list: Optional[Union[Dict[Union[Account, Address, str], List[int]], Literal["auto"]]] = None, type: Optional[int] = None, block: Optional[Union[int, Literal["latest"], Literal["pending"], Literal["earliest"], Literal["safe"], Literal["finalized"]]] = None, confirmations: Optional[int] = None) -> TransactionAbc[List[uint256]]:
        """
        [Source code](file:///Users/dteiml/p/hacker-dom/woke-uniswap-v2/src/UniswapV2Router02.sol#321)

        Args:
            amountOut: uint256
            amountInMax: uint256
            path: address[]
            to_: address
            deadline: uint256
        Returns:
            uint256[]
        """
        ...

    def swapTokensForExactETH(self, amountOut: uint256, amountInMax: uint256, path: List[Union[Account, Address]], to_: Union[Account, Address], deadline: uint256, *, from_: Optional[Union[Account, Address, str]] = None, to: Optional[Union[Account, Address, str]] = None, value: Union[int, str] = 0, gas_limit: Optional[Union[int, Literal["max"], Literal["auto"]]] = None, request_type: RequestType = 'tx', gas_price: Optional[Union[int, str]] = None, max_fee_per_gas: Optional[Union[int, str]] = None, max_priority_fee_per_gas: Optional[Union[int, str]] = None, access_list: Optional[Union[Dict[Union[Account, Address, str], List[int]], Literal["auto"]]] = None, type: Optional[int] = None, block: Optional[Union[int, Literal["latest"], Literal["pending"], Literal["earliest"], Literal["safe"], Literal["finalized"]]] = None, confirmations: Optional[int] = None) -> Union[List[uint256], TransactionAbc[List[uint256]], int, Tuple[Dict[Address, List[int]], int]]:
        """
        [Source code](file:///Users/dteiml/p/hacker-dom/woke-uniswap-v2/src/UniswapV2Router02.sol#321)

        Args:
            amountOut: uint256
            amountInMax: uint256
            path: address[]
            to_: address
            deadline: uint256
        Returns:
            uint256[]
        """
        return self._execute(self.chain, request_type, "4a25d94a", [amountOut, amountInMax, path, to_, deadline], True if request_type == "tx" else False, List[uint256], from_, to if to is not None else str(self.address), value, gas_limit, gas_price, max_fee_per_gas, max_priority_fee_per_gas, access_list, type, block, confirmations)

    @overload
    def swapExactTokensForETH(self, amountIn: uint256, amountOutMin: uint256, path: List[Union[Account, Address]], to_: Union[Account, Address], deadline: uint256, *, from_: Optional[Union[Account, Address, str]] = None, to: Optional[Union[Account, Address, str]] = None, value: Union[int, str] = 0, gas_limit: Optional[Union[int, Literal["max"], Literal["auto"]]] = None, request_type: Literal["call"], gas_price: Optional[Union[int, str]] = None, max_fee_per_gas: Optional[Union[int, str]] = None, max_priority_fee_per_gas: Optional[Union[int, str]] = None, access_list: Optional[Union[Dict[Union[Account, Address, str], List[int]], Literal["auto"]]] = None, type: Optional[int] = None, block: Optional[Union[int, Literal["latest"], Literal["pending"], Literal["earliest"], Literal["safe"], Literal["finalized"]]] = None, confirmations: Optional[int] = None) -> List[uint256]:
        """
        [Source code](file:///Users/dteiml/p/hacker-dom/woke-uniswap-v2/src/UniswapV2Router02.sol#337)

        Args:
            amountIn: uint256
            amountOutMin: uint256
            path: address[]
            to_: address
            deadline: uint256
        Returns:
            uint256[]
        """
        ...

    @overload
    def swapExactTokensForETH(self, amountIn: uint256, amountOutMin: uint256, path: List[Union[Account, Address]], to_: Union[Account, Address], deadline: uint256, *, from_: Optional[Union[Account, Address, str]] = None, to: Optional[Union[Account, Address, str]] = None, value: Union[int, str] = 0, gas_limit: Optional[Union[int, Literal["max"], Literal["auto"]]] = None, request_type: Literal["estimate"], gas_price: Optional[Union[int, str]] = None, max_fee_per_gas: Optional[Union[int, str]] = None, max_priority_fee_per_gas: Optional[Union[int, str]] = None, access_list: Optional[Union[Dict[Union[Account, Address, str], List[int]], Literal["auto"]]] = None, type: Optional[int] = None, block: Optional[Union[int, Literal["latest"], Literal["pending"], Literal["earliest"], Literal["safe"], Literal["finalized"]]] = None, confirmations: Optional[int] = None) -> int:
        """
        [Source code](file:///Users/dteiml/p/hacker-dom/woke-uniswap-v2/src/UniswapV2Router02.sol#337)

        Args:
            amountIn: uint256
            amountOutMin: uint256
            path: address[]
            to_: address
            deadline: uint256
        Returns:
            uint256[]
        """
        ...

    @overload
    def swapExactTokensForETH(self, amountIn: uint256, amountOutMin: uint256, path: List[Union[Account, Address]], to_: Union[Account, Address], deadline: uint256, *, from_: Optional[Union[Account, Address, str]] = None, to: Optional[Union[Account, Address, str]] = None, value: Union[int, str] = 0, gas_limit: Optional[Union[int, Literal["max"], Literal["auto"]]] = None, request_type: Literal["access_list"], gas_price: Optional[Union[int, str]] = None, max_fee_per_gas: Optional[Union[int, str]] = None, max_priority_fee_per_gas: Optional[Union[int, str]] = None, access_list: Optional[Union[Dict[Union[Account, Address, str], List[int]], Literal["auto"]]] = None, type: Optional[int] = None, block: Optional[Union[int, Literal["latest"], Literal["pending"], Literal["earliest"], Literal["safe"], Literal["finalized"]]] = None, confirmations: Optional[int] = None) -> Tuple[Dict[Address, List[int]], int]:
        """
        [Source code](file:///Users/dteiml/p/hacker-dom/woke-uniswap-v2/src/UniswapV2Router02.sol#337)

        Args:
            amountIn: uint256
            amountOutMin: uint256
            path: address[]
            to_: address
            deadline: uint256
        Returns:
            uint256[]
        """
        ...

    @overload
    def swapExactTokensForETH(self, amountIn: uint256, amountOutMin: uint256, path: List[Union[Account, Address]], to_: Union[Account, Address], deadline: uint256, *, from_: Optional[Union[Account, Address, str]] = None, to: Optional[Union[Account, Address, str]] = None, value: Union[int, str] = 0, gas_limit: Optional[Union[int, Literal["max"], Literal["auto"]]] = None, request_type: Literal["tx"] = "tx", gas_price: Optional[Union[int, str]] = None, max_fee_per_gas: Optional[Union[int, str]] = None, max_priority_fee_per_gas: Optional[Union[int, str]] = None, access_list: Optional[Union[Dict[Union[Account, Address, str], List[int]], Literal["auto"]]] = None, type: Optional[int] = None, block: Optional[Union[int, Literal["latest"], Literal["pending"], Literal["earliest"], Literal["safe"], Literal["finalized"]]] = None, confirmations: Optional[int] = None) -> TransactionAbc[List[uint256]]:
        """
        [Source code](file:///Users/dteiml/p/hacker-dom/woke-uniswap-v2/src/UniswapV2Router02.sol#337)

        Args:
            amountIn: uint256
            amountOutMin: uint256
            path: address[]
            to_: address
            deadline: uint256
        Returns:
            uint256[]
        """
        ...

    def swapExactTokensForETH(self, amountIn: uint256, amountOutMin: uint256, path: List[Union[Account, Address]], to_: Union[Account, Address], deadline: uint256, *, from_: Optional[Union[Account, Address, str]] = None, to: Optional[Union[Account, Address, str]] = None, value: Union[int, str] = 0, gas_limit: Optional[Union[int, Literal["max"], Literal["auto"]]] = None, request_type: RequestType = 'tx', gas_price: Optional[Union[int, str]] = None, max_fee_per_gas: Optional[Union[int, str]] = None, max_priority_fee_per_gas: Optional[Union[int, str]] = None, access_list: Optional[Union[Dict[Union[Account, Address, str], List[int]], Literal["auto"]]] = None, type: Optional[int] = None, block: Optional[Union[int, Literal["latest"], Literal["pending"], Literal["earliest"], Literal["safe"], Literal["finalized"]]] = None, confirmations: Optional[int] = None) -> Union[List[uint256], TransactionAbc[List[uint256]], int, Tuple[Dict[Address, List[int]], int]]:
        """
        [Source code](file:///Users/dteiml/p/hacker-dom/woke-uniswap-v2/src/UniswapV2Router02.sol#337)

        Args:
            amountIn: uint256
            amountOutMin: uint256
            path: address[]
            to_: address
            deadline: uint256
        Returns:
            uint256[]
        """
        return self._execute(self.chain, request_type, "18cbafe5", [amountIn, amountOutMin, path, to_, deadline], True if request_type == "tx" else False, List[uint256], from_, to if to is not None else str(self.address), value, gas_limit, gas_price, max_fee_per_gas, max_priority_fee_per_gas, access_list, type, block, confirmations)

    @overload
    def swapETHForExactTokens(self, amountOut: uint256, path: List[Union[Account, Address]], to_: Union[Account, Address], deadline: uint256, *, from_: Optional[Union[Account, Address, str]] = None, to: Optional[Union[Account, Address, str]] = None, value: Union[int, str] = 0, gas_limit: Optional[Union[int, Literal["max"], Literal["auto"]]] = None, request_type: Literal["call"], gas_price: Optional[Union[int, str]] = None, max_fee_per_gas: Optional[Union[int, str]] = None, max_priority_fee_per_gas: Optional[Union[int, str]] = None, access_list: Optional[Union[Dict[Union[Account, Address, str], List[int]], Literal["auto"]]] = None, type: Optional[int] = None, block: Optional[Union[int, Literal["latest"], Literal["pending"], Literal["earliest"], Literal["safe"], Literal["finalized"]]] = None, confirmations: Optional[int] = None) -> List[uint256]:
        """
        [Source code](file:///Users/dteiml/p/hacker-dom/woke-uniswap-v2/src/UniswapV2Router02.sol#353)

        Args:
            amountOut: uint256
            path: address[]
            to_: address
            deadline: uint256
        Returns:
            uint256[]
        """
        ...

    @overload
    def swapETHForExactTokens(self, amountOut: uint256, path: List[Union[Account, Address]], to_: Union[Account, Address], deadline: uint256, *, from_: Optional[Union[Account, Address, str]] = None, to: Optional[Union[Account, Address, str]] = None, value: Union[int, str] = 0, gas_limit: Optional[Union[int, Literal["max"], Literal["auto"]]] = None, request_type: Literal["estimate"], gas_price: Optional[Union[int, str]] = None, max_fee_per_gas: Optional[Union[int, str]] = None, max_priority_fee_per_gas: Optional[Union[int, str]] = None, access_list: Optional[Union[Dict[Union[Account, Address, str], List[int]], Literal["auto"]]] = None, type: Optional[int] = None, block: Optional[Union[int, Literal["latest"], Literal["pending"], Literal["earliest"], Literal["safe"], Literal["finalized"]]] = None, confirmations: Optional[int] = None) -> int:
        """
        [Source code](file:///Users/dteiml/p/hacker-dom/woke-uniswap-v2/src/UniswapV2Router02.sol#353)

        Args:
            amountOut: uint256
            path: address[]
            to_: address
            deadline: uint256
        Returns:
            uint256[]
        """
        ...

    @overload
    def swapETHForExactTokens(self, amountOut: uint256, path: List[Union[Account, Address]], to_: Union[Account, Address], deadline: uint256, *, from_: Optional[Union[Account, Address, str]] = None, to: Optional[Union[Account, Address, str]] = None, value: Union[int, str] = 0, gas_limit: Optional[Union[int, Literal["max"], Literal["auto"]]] = None, request_type: Literal["access_list"], gas_price: Optional[Union[int, str]] = None, max_fee_per_gas: Optional[Union[int, str]] = None, max_priority_fee_per_gas: Optional[Union[int, str]] = None, access_list: Optional[Union[Dict[Union[Account, Address, str], List[int]], Literal["auto"]]] = None, type: Optional[int] = None, block: Optional[Union[int, Literal["latest"], Literal["pending"], Literal["earliest"], Literal["safe"], Literal["finalized"]]] = None, confirmations: Optional[int] = None) -> Tuple[Dict[Address, List[int]], int]:
        """
        [Source code](file:///Users/dteiml/p/hacker-dom/woke-uniswap-v2/src/UniswapV2Router02.sol#353)

        Args:
            amountOut: uint256
            path: address[]
            to_: address
            deadline: uint256
        Returns:
            uint256[]
        """
        ...

    @overload
    def swapETHForExactTokens(self, amountOut: uint256, path: List[Union[Account, Address]], to_: Union[Account, Address], deadline: uint256, *, from_: Optional[Union[Account, Address, str]] = None, to: Optional[Union[Account, Address, str]] = None, value: Union[int, str] = 0, gas_limit: Optional[Union[int, Literal["max"], Literal["auto"]]] = None, request_type: Literal["tx"] = "tx", gas_price: Optional[Union[int, str]] = None, max_fee_per_gas: Optional[Union[int, str]] = None, max_priority_fee_per_gas: Optional[Union[int, str]] = None, access_list: Optional[Union[Dict[Union[Account, Address, str], List[int]], Literal["auto"]]] = None, type: Optional[int] = None, block: Optional[Union[int, Literal["latest"], Literal["pending"], Literal["earliest"], Literal["safe"], Literal["finalized"]]] = None, confirmations: Optional[int] = None) -> TransactionAbc[List[uint256]]:
        """
        [Source code](file:///Users/dteiml/p/hacker-dom/woke-uniswap-v2/src/UniswapV2Router02.sol#353)

        Args:
            amountOut: uint256
            path: address[]
            to_: address
            deadline: uint256
        Returns:
            uint256[]
        """
        ...

    def swapETHForExactTokens(self, amountOut: uint256, path: List[Union[Account, Address]], to_: Union[Account, Address], deadline: uint256, *, from_: Optional[Union[Account, Address, str]] = None, to: Optional[Union[Account, Address, str]] = None, value: Union[int, str] = 0, gas_limit: Optional[Union[int, Literal["max"], Literal["auto"]]] = None, request_type: RequestType = 'tx', gas_price: Optional[Union[int, str]] = None, max_fee_per_gas: Optional[Union[int, str]] = None, max_priority_fee_per_gas: Optional[Union[int, str]] = None, access_list: Optional[Union[Dict[Union[Account, Address, str], List[int]], Literal["auto"]]] = None, type: Optional[int] = None, block: Optional[Union[int, Literal["latest"], Literal["pending"], Literal["earliest"], Literal["safe"], Literal["finalized"]]] = None, confirmations: Optional[int] = None) -> Union[List[uint256], TransactionAbc[List[uint256]], int, Tuple[Dict[Address, List[int]], int]]:
        """
        [Source code](file:///Users/dteiml/p/hacker-dom/woke-uniswap-v2/src/UniswapV2Router02.sol#353)

        Args:
            amountOut: uint256
            path: address[]
            to_: address
            deadline: uint256
        Returns:
            uint256[]
        """
        return self._execute(self.chain, request_type, "fb3bdb41", [amountOut, path, to_, deadline], True if request_type == "tx" else False, List[uint256], from_, to if to is not None else str(self.address), value, gas_limit, gas_price, max_fee_per_gas, max_priority_fee_per_gas, access_list, type, block, confirmations)

    @overload
    def swapExactTokensForTokensSupportingFeeOnTransferTokens(self, amountIn: uint256, amountOutMin: uint256, path: List[Union[Account, Address]], to_: Union[Account, Address], deadline: uint256, *, from_: Optional[Union[Account, Address, str]] = None, to: Optional[Union[Account, Address, str]] = None, value: Union[int, str] = 0, gas_limit: Optional[Union[int, Literal["max"], Literal["auto"]]] = None, request_type: Literal["call"], gas_price: Optional[Union[int, str]] = None, max_fee_per_gas: Optional[Union[int, str]] = None, max_priority_fee_per_gas: Optional[Union[int, str]] = None, access_list: Optional[Union[Dict[Union[Account, Address, str], List[int]], Literal["auto"]]] = None, type: Optional[int] = None, block: Optional[Union[int, Literal["latest"], Literal["pending"], Literal["earliest"], Literal["safe"], Literal["finalized"]]] = None, confirmations: Optional[int] = None) -> None:
        """
        [Source code](file:///Users/dteiml/p/hacker-dom/woke-uniswap-v2/src/UniswapV2Router02.sol#390)

        Args:
            amountIn: uint256
            amountOutMin: uint256
            path: address[]
            to_: address
            deadline: uint256
        """
        ...

    @overload
    def swapExactTokensForTokensSupportingFeeOnTransferTokens(self, amountIn: uint256, amountOutMin: uint256, path: List[Union[Account, Address]], to_: Union[Account, Address], deadline: uint256, *, from_: Optional[Union[Account, Address, str]] = None, to: Optional[Union[Account, Address, str]] = None, value: Union[int, str] = 0, gas_limit: Optional[Union[int, Literal["max"], Literal["auto"]]] = None, request_type: Literal["estimate"], gas_price: Optional[Union[int, str]] = None, max_fee_per_gas: Optional[Union[int, str]] = None, max_priority_fee_per_gas: Optional[Union[int, str]] = None, access_list: Optional[Union[Dict[Union[Account, Address, str], List[int]], Literal["auto"]]] = None, type: Optional[int] = None, block: Optional[Union[int, Literal["latest"], Literal["pending"], Literal["earliest"], Literal["safe"], Literal["finalized"]]] = None, confirmations: Optional[int] = None) -> int:
        """
        [Source code](file:///Users/dteiml/p/hacker-dom/woke-uniswap-v2/src/UniswapV2Router02.sol#390)

        Args:
            amountIn: uint256
            amountOutMin: uint256
            path: address[]
            to_: address
            deadline: uint256
        """
        ...

    @overload
    def swapExactTokensForTokensSupportingFeeOnTransferTokens(self, amountIn: uint256, amountOutMin: uint256, path: List[Union[Account, Address]], to_: Union[Account, Address], deadline: uint256, *, from_: Optional[Union[Account, Address, str]] = None, to: Optional[Union[Account, Address, str]] = None, value: Union[int, str] = 0, gas_limit: Optional[Union[int, Literal["max"], Literal["auto"]]] = None, request_type: Literal["access_list"], gas_price: Optional[Union[int, str]] = None, max_fee_per_gas: Optional[Union[int, str]] = None, max_priority_fee_per_gas: Optional[Union[int, str]] = None, access_list: Optional[Union[Dict[Union[Account, Address, str], List[int]], Literal["auto"]]] = None, type: Optional[int] = None, block: Optional[Union[int, Literal["latest"], Literal["pending"], Literal["earliest"], Literal["safe"], Literal["finalized"]]] = None, confirmations: Optional[int] = None) -> Tuple[Dict[Address, List[int]], int]:
        """
        [Source code](file:///Users/dteiml/p/hacker-dom/woke-uniswap-v2/src/UniswapV2Router02.sol#390)

        Args:
            amountIn: uint256
            amountOutMin: uint256
            path: address[]
            to_: address
            deadline: uint256
        """
        ...

    @overload
    def swapExactTokensForTokensSupportingFeeOnTransferTokens(self, amountIn: uint256, amountOutMin: uint256, path: List[Union[Account, Address]], to_: Union[Account, Address], deadline: uint256, *, from_: Optional[Union[Account, Address, str]] = None, to: Optional[Union[Account, Address, str]] = None, value: Union[int, str] = 0, gas_limit: Optional[Union[int, Literal["max"], Literal["auto"]]] = None, request_type: Literal["tx"] = "tx", gas_price: Optional[Union[int, str]] = None, max_fee_per_gas: Optional[Union[int, str]] = None, max_priority_fee_per_gas: Optional[Union[int, str]] = None, access_list: Optional[Union[Dict[Union[Account, Address, str], List[int]], Literal["auto"]]] = None, type: Optional[int] = None, block: Optional[Union[int, Literal["latest"], Literal["pending"], Literal["earliest"], Literal["safe"], Literal["finalized"]]] = None, confirmations: Optional[int] = None) -> TransactionAbc[None]:
        """
        [Source code](file:///Users/dteiml/p/hacker-dom/woke-uniswap-v2/src/UniswapV2Router02.sol#390)

        Args:
            amountIn: uint256
            amountOutMin: uint256
            path: address[]
            to_: address
            deadline: uint256
        """
        ...

    def swapExactTokensForTokensSupportingFeeOnTransferTokens(self, amountIn: uint256, amountOutMin: uint256, path: List[Union[Account, Address]], to_: Union[Account, Address], deadline: uint256, *, from_: Optional[Union[Account, Address, str]] = None, to: Optional[Union[Account, Address, str]] = None, value: Union[int, str] = 0, gas_limit: Optional[Union[int, Literal["max"], Literal["auto"]]] = None, request_type: RequestType = 'tx', gas_price: Optional[Union[int, str]] = None, max_fee_per_gas: Optional[Union[int, str]] = None, max_priority_fee_per_gas: Optional[Union[int, str]] = None, access_list: Optional[Union[Dict[Union[Account, Address, str], List[int]], Literal["auto"]]] = None, type: Optional[int] = None, block: Optional[Union[int, Literal["latest"], Literal["pending"], Literal["earliest"], Literal["safe"], Literal["finalized"]]] = None, confirmations: Optional[int] = None) -> Union[None, TransactionAbc[None], int, Tuple[Dict[Address, List[int]], int]]:
        """
        [Source code](file:///Users/dteiml/p/hacker-dom/woke-uniswap-v2/src/UniswapV2Router02.sol#390)

        Args:
            amountIn: uint256
            amountOutMin: uint256
            path: address[]
            to_: address
            deadline: uint256
        """
        return self._execute(self.chain, request_type, "5c11d795", [amountIn, amountOutMin, path, to_, deadline], True if request_type == "tx" else False, NoneType, from_, to if to is not None else str(self.address), value, gas_limit, gas_price, max_fee_per_gas, max_priority_fee_per_gas, access_list, type, block, confirmations)

    @overload
    def swapExactETHForTokensSupportingFeeOnTransferTokens(self, amountOutMin: uint256, path: List[Union[Account, Address]], to_: Union[Account, Address], deadline: uint256, *, from_: Optional[Union[Account, Address, str]] = None, to: Optional[Union[Account, Address, str]] = None, value: Union[int, str] = 0, gas_limit: Optional[Union[int, Literal["max"], Literal["auto"]]] = None, request_type: Literal["call"], gas_price: Optional[Union[int, str]] = None, max_fee_per_gas: Optional[Union[int, str]] = None, max_priority_fee_per_gas: Optional[Union[int, str]] = None, access_list: Optional[Union[Dict[Union[Account, Address, str], List[int]], Literal["auto"]]] = None, type: Optional[int] = None, block: Optional[Union[int, Literal["latest"], Literal["pending"], Literal["earliest"], Literal["safe"], Literal["finalized"]]] = None, confirmations: Optional[int] = None) -> None:
        """
        [Source code](file:///Users/dteiml/p/hacker-dom/woke-uniswap-v2/src/UniswapV2Router02.sol#407)

        Args:
            amountOutMin: uint256
            path: address[]
            to_: address
            deadline: uint256
        """
        ...

    @overload
    def swapExactETHForTokensSupportingFeeOnTransferTokens(self, amountOutMin: uint256, path: List[Union[Account, Address]], to_: Union[Account, Address], deadline: uint256, *, from_: Optional[Union[Account, Address, str]] = None, to: Optional[Union[Account, Address, str]] = None, value: Union[int, str] = 0, gas_limit: Optional[Union[int, Literal["max"], Literal["auto"]]] = None, request_type: Literal["estimate"], gas_price: Optional[Union[int, str]] = None, max_fee_per_gas: Optional[Union[int, str]] = None, max_priority_fee_per_gas: Optional[Union[int, str]] = None, access_list: Optional[Union[Dict[Union[Account, Address, str], List[int]], Literal["auto"]]] = None, type: Optional[int] = None, block: Optional[Union[int, Literal["latest"], Literal["pending"], Literal["earliest"], Literal["safe"], Literal["finalized"]]] = None, confirmations: Optional[int] = None) -> int:
        """
        [Source code](file:///Users/dteiml/p/hacker-dom/woke-uniswap-v2/src/UniswapV2Router02.sol#407)

        Args:
            amountOutMin: uint256
            path: address[]
            to_: address
            deadline: uint256
        """
        ...

    @overload
    def swapExactETHForTokensSupportingFeeOnTransferTokens(self, amountOutMin: uint256, path: List[Union[Account, Address]], to_: Union[Account, Address], deadline: uint256, *, from_: Optional[Union[Account, Address, str]] = None, to: Optional[Union[Account, Address, str]] = None, value: Union[int, str] = 0, gas_limit: Optional[Union[int, Literal["max"], Literal["auto"]]] = None, request_type: Literal["access_list"], gas_price: Optional[Union[int, str]] = None, max_fee_per_gas: Optional[Union[int, str]] = None, max_priority_fee_per_gas: Optional[Union[int, str]] = None, access_list: Optional[Union[Dict[Union[Account, Address, str], List[int]], Literal["auto"]]] = None, type: Optional[int] = None, block: Optional[Union[int, Literal["latest"], Literal["pending"], Literal["earliest"], Literal["safe"], Literal["finalized"]]] = None, confirmations: Optional[int] = None) -> Tuple[Dict[Address, List[int]], int]:
        """
        [Source code](file:///Users/dteiml/p/hacker-dom/woke-uniswap-v2/src/UniswapV2Router02.sol#407)

        Args:
            amountOutMin: uint256
            path: address[]
            to_: address
            deadline: uint256
        """
        ...

    @overload
    def swapExactETHForTokensSupportingFeeOnTransferTokens(self, amountOutMin: uint256, path: List[Union[Account, Address]], to_: Union[Account, Address], deadline: uint256, *, from_: Optional[Union[Account, Address, str]] = None, to: Optional[Union[Account, Address, str]] = None, value: Union[int, str] = 0, gas_limit: Optional[Union[int, Literal["max"], Literal["auto"]]] = None, request_type: Literal["tx"] = "tx", gas_price: Optional[Union[int, str]] = None, max_fee_per_gas: Optional[Union[int, str]] = None, max_priority_fee_per_gas: Optional[Union[int, str]] = None, access_list: Optional[Union[Dict[Union[Account, Address, str], List[int]], Literal["auto"]]] = None, type: Optional[int] = None, block: Optional[Union[int, Literal["latest"], Literal["pending"], Literal["earliest"], Literal["safe"], Literal["finalized"]]] = None, confirmations: Optional[int] = None) -> TransactionAbc[None]:
        """
        [Source code](file:///Users/dteiml/p/hacker-dom/woke-uniswap-v2/src/UniswapV2Router02.sol#407)

        Args:
            amountOutMin: uint256
            path: address[]
            to_: address
            deadline: uint256
        """
        ...

    def swapExactETHForTokensSupportingFeeOnTransferTokens(self, amountOutMin: uint256, path: List[Union[Account, Address]], to_: Union[Account, Address], deadline: uint256, *, from_: Optional[Union[Account, Address, str]] = None, to: Optional[Union[Account, Address, str]] = None, value: Union[int, str] = 0, gas_limit: Optional[Union[int, Literal["max"], Literal["auto"]]] = None, request_type: RequestType = 'tx', gas_price: Optional[Union[int, str]] = None, max_fee_per_gas: Optional[Union[int, str]] = None, max_priority_fee_per_gas: Optional[Union[int, str]] = None, access_list: Optional[Union[Dict[Union[Account, Address, str], List[int]], Literal["auto"]]] = None, type: Optional[int] = None, block: Optional[Union[int, Literal["latest"], Literal["pending"], Literal["earliest"], Literal["safe"], Literal["finalized"]]] = None, confirmations: Optional[int] = None) -> Union[None, TransactionAbc[None], int, Tuple[Dict[Address, List[int]], int]]:
        """
        [Source code](file:///Users/dteiml/p/hacker-dom/woke-uniswap-v2/src/UniswapV2Router02.sol#407)

        Args:
            amountOutMin: uint256
            path: address[]
            to_: address
            deadline: uint256
        """
        return self._execute(self.chain, request_type, "b6f9de95", [amountOutMin, path, to_, deadline], True if request_type == "tx" else False, NoneType, from_, to if to is not None else str(self.address), value, gas_limit, gas_price, max_fee_per_gas, max_priority_fee_per_gas, access_list, type, block, confirmations)

    @overload
    def swapExactTokensForETHSupportingFeeOnTransferTokens(self, amountIn: uint256, amountOutMin: uint256, path: List[Union[Account, Address]], to_: Union[Account, Address], deadline: uint256, *, from_: Optional[Union[Account, Address, str]] = None, to: Optional[Union[Account, Address, str]] = None, value: Union[int, str] = 0, gas_limit: Optional[Union[int, Literal["max"], Literal["auto"]]] = None, request_type: Literal["call"], gas_price: Optional[Union[int, str]] = None, max_fee_per_gas: Optional[Union[int, str]] = None, max_priority_fee_per_gas: Optional[Union[int, str]] = None, access_list: Optional[Union[Dict[Union[Account, Address, str], List[int]], Literal["auto"]]] = None, type: Optional[int] = None, block: Optional[Union[int, Literal["latest"], Literal["pending"], Literal["earliest"], Literal["safe"], Literal["finalized"]]] = None, confirmations: Optional[int] = None) -> None:
        """
        [Source code](file:///Users/dteiml/p/hacker-dom/woke-uniswap-v2/src/UniswapV2Router02.sol#429)

        Args:
            amountIn: uint256
            amountOutMin: uint256
            path: address[]
            to_: address
            deadline: uint256
        """
        ...

    @overload
    def swapExactTokensForETHSupportingFeeOnTransferTokens(self, amountIn: uint256, amountOutMin: uint256, path: List[Union[Account, Address]], to_: Union[Account, Address], deadline: uint256, *, from_: Optional[Union[Account, Address, str]] = None, to: Optional[Union[Account, Address, str]] = None, value: Union[int, str] = 0, gas_limit: Optional[Union[int, Literal["max"], Literal["auto"]]] = None, request_type: Literal["estimate"], gas_price: Optional[Union[int, str]] = None, max_fee_per_gas: Optional[Union[int, str]] = None, max_priority_fee_per_gas: Optional[Union[int, str]] = None, access_list: Optional[Union[Dict[Union[Account, Address, str], List[int]], Literal["auto"]]] = None, type: Optional[int] = None, block: Optional[Union[int, Literal["latest"], Literal["pending"], Literal["earliest"], Literal["safe"], Literal["finalized"]]] = None, confirmations: Optional[int] = None) -> int:
        """
        [Source code](file:///Users/dteiml/p/hacker-dom/woke-uniswap-v2/src/UniswapV2Router02.sol#429)

        Args:
            amountIn: uint256
            amountOutMin: uint256
            path: address[]
            to_: address
            deadline: uint256
        """
        ...

    @overload
    def swapExactTokensForETHSupportingFeeOnTransferTokens(self, amountIn: uint256, amountOutMin: uint256, path: List[Union[Account, Address]], to_: Union[Account, Address], deadline: uint256, *, from_: Optional[Union[Account, Address, str]] = None, to: Optional[Union[Account, Address, str]] = None, value: Union[int, str] = 0, gas_limit: Optional[Union[int, Literal["max"], Literal["auto"]]] = None, request_type: Literal["access_list"], gas_price: Optional[Union[int, str]] = None, max_fee_per_gas: Optional[Union[int, str]] = None, max_priority_fee_per_gas: Optional[Union[int, str]] = None, access_list: Optional[Union[Dict[Union[Account, Address, str], List[int]], Literal["auto"]]] = None, type: Optional[int] = None, block: Optional[Union[int, Literal["latest"], Literal["pending"], Literal["earliest"], Literal["safe"], Literal["finalized"]]] = None, confirmations: Optional[int] = None) -> Tuple[Dict[Address, List[int]], int]:
        """
        [Source code](file:///Users/dteiml/p/hacker-dom/woke-uniswap-v2/src/UniswapV2Router02.sol#429)

        Args:
            amountIn: uint256
            amountOutMin: uint256
            path: address[]
            to_: address
            deadline: uint256
        """
        ...

    @overload
    def swapExactTokensForETHSupportingFeeOnTransferTokens(self, amountIn: uint256, amountOutMin: uint256, path: List[Union[Account, Address]], to_: Union[Account, Address], deadline: uint256, *, from_: Optional[Union[Account, Address, str]] = None, to: Optional[Union[Account, Address, str]] = None, value: Union[int, str] = 0, gas_limit: Optional[Union[int, Literal["max"], Literal["auto"]]] = None, request_type: Literal["tx"] = "tx", gas_price: Optional[Union[int, str]] = None, max_fee_per_gas: Optional[Union[int, str]] = None, max_priority_fee_per_gas: Optional[Union[int, str]] = None, access_list: Optional[Union[Dict[Union[Account, Address, str], List[int]], Literal["auto"]]] = None, type: Optional[int] = None, block: Optional[Union[int, Literal["latest"], Literal["pending"], Literal["earliest"], Literal["safe"], Literal["finalized"]]] = None, confirmations: Optional[int] = None) -> TransactionAbc[None]:
        """
        [Source code](file:///Users/dteiml/p/hacker-dom/woke-uniswap-v2/src/UniswapV2Router02.sol#429)

        Args:
            amountIn: uint256
            amountOutMin: uint256
            path: address[]
            to_: address
            deadline: uint256
        """
        ...

    def swapExactTokensForETHSupportingFeeOnTransferTokens(self, amountIn: uint256, amountOutMin: uint256, path: List[Union[Account, Address]], to_: Union[Account, Address], deadline: uint256, *, from_: Optional[Union[Account, Address, str]] = None, to: Optional[Union[Account, Address, str]] = None, value: Union[int, str] = 0, gas_limit: Optional[Union[int, Literal["max"], Literal["auto"]]] = None, request_type: RequestType = 'tx', gas_price: Optional[Union[int, str]] = None, max_fee_per_gas: Optional[Union[int, str]] = None, max_priority_fee_per_gas: Optional[Union[int, str]] = None, access_list: Optional[Union[Dict[Union[Account, Address, str], List[int]], Literal["auto"]]] = None, type: Optional[int] = None, block: Optional[Union[int, Literal["latest"], Literal["pending"], Literal["earliest"], Literal["safe"], Literal["finalized"]]] = None, confirmations: Optional[int] = None) -> Union[None, TransactionAbc[None], int, Tuple[Dict[Address, List[int]], int]]:
        """
        [Source code](file:///Users/dteiml/p/hacker-dom/woke-uniswap-v2/src/UniswapV2Router02.sol#429)

        Args:
            amountIn: uint256
            amountOutMin: uint256
            path: address[]
            to_: address
            deadline: uint256
        """
        return self._execute(self.chain, request_type, "791ac947", [amountIn, amountOutMin, path, to_, deadline], True if request_type == "tx" else False, NoneType, from_, to if to is not None else str(self.address), value, gas_limit, gas_price, max_fee_per_gas, max_priority_fee_per_gas, access_list, type, block, confirmations)

    @overload
    def quote(self, amountA: uint256, reserveA: uint256, reserveB: uint256, *, from_: Optional[Union[Account, Address, str]] = None, to: Optional[Union[Account, Address, str]] = None, value: Union[int, str] = 0, gas_limit: Optional[Union[int, Literal["max"], Literal["auto"]]] = None, request_type: Literal["call"] = "call", gas_price: Optional[Union[int, str]] = None, max_fee_per_gas: Optional[Union[int, str]] = None, max_priority_fee_per_gas: Optional[Union[int, str]] = None, access_list: Optional[Union[Dict[Union[Account, Address, str], List[int]], Literal["auto"]]] = None, type: Optional[int] = None, block: Optional[Union[int, Literal["latest"], Literal["pending"], Literal["earliest"], Literal["safe"], Literal["finalized"]]] = None, confirmations: Optional[int] = None) -> uint256:
        """
        [Source code](file:///Users/dteiml/p/hacker-dom/woke-uniswap-v2/src/UniswapV2Router02.sol#452)

        Args:
            amountA: uint256
            reserveA: uint256
            reserveB: uint256
        Returns:
            uint256
        """
        ...

    @overload
    def quote(self, amountA: uint256, reserveA: uint256, reserveB: uint256, *, from_: Optional[Union[Account, Address, str]] = None, to: Optional[Union[Account, Address, str]] = None, value: Union[int, str] = 0, gas_limit: Optional[Union[int, Literal["max"], Literal["auto"]]] = None, request_type: Literal["estimate"], gas_price: Optional[Union[int, str]] = None, max_fee_per_gas: Optional[Union[int, str]] = None, max_priority_fee_per_gas: Optional[Union[int, str]] = None, access_list: Optional[Union[Dict[Union[Account, Address, str], List[int]], Literal["auto"]]] = None, type: Optional[int] = None, block: Optional[Union[int, Literal["latest"], Literal["pending"], Literal["earliest"], Literal["safe"], Literal["finalized"]]] = None, confirmations: Optional[int] = None) -> int:
        """
        [Source code](file:///Users/dteiml/p/hacker-dom/woke-uniswap-v2/src/UniswapV2Router02.sol#452)

        Args:
            amountA: uint256
            reserveA: uint256
            reserveB: uint256
        Returns:
            uint256
        """
        ...

    @overload
    def quote(self, amountA: uint256, reserveA: uint256, reserveB: uint256, *, from_: Optional[Union[Account, Address, str]] = None, to: Optional[Union[Account, Address, str]] = None, value: Union[int, str] = 0, gas_limit: Optional[Union[int, Literal["max"], Literal["auto"]]] = None, request_type: Literal["access_list"], gas_price: Optional[Union[int, str]] = None, max_fee_per_gas: Optional[Union[int, str]] = None, max_priority_fee_per_gas: Optional[Union[int, str]] = None, access_list: Optional[Union[Dict[Union[Account, Address, str], List[int]], Literal["auto"]]] = None, type: Optional[int] = None, block: Optional[Union[int, Literal["latest"], Literal["pending"], Literal["earliest"], Literal["safe"], Literal["finalized"]]] = None, confirmations: Optional[int] = None) -> Tuple[Dict[Address, List[int]], int]:
        """
        [Source code](file:///Users/dteiml/p/hacker-dom/woke-uniswap-v2/src/UniswapV2Router02.sol#452)

        Args:
            amountA: uint256
            reserveA: uint256
            reserveB: uint256
        Returns:
            uint256
        """
        ...

    @overload
    def quote(self, amountA: uint256, reserveA: uint256, reserveB: uint256, *, from_: Optional[Union[Account, Address, str]] = None, to: Optional[Union[Account, Address, str]] = None, value: Union[int, str] = 0, gas_limit: Optional[Union[int, Literal["max"], Literal["auto"]]] = None, request_type: Literal["tx"], gas_price: Optional[Union[int, str]] = None, max_fee_per_gas: Optional[Union[int, str]] = None, max_priority_fee_per_gas: Optional[Union[int, str]] = None, access_list: Optional[Union[Dict[Union[Account, Address, str], List[int]], Literal["auto"]]] = None, type: Optional[int] = None, block: Optional[Union[int, Literal["latest"], Literal["pending"], Literal["earliest"], Literal["safe"], Literal["finalized"]]] = None, confirmations: Optional[int] = None) -> TransactionAbc[uint256]:
        """
        [Source code](file:///Users/dteiml/p/hacker-dom/woke-uniswap-v2/src/UniswapV2Router02.sol#452)

        Args:
            amountA: uint256
            reserveA: uint256
            reserveB: uint256
        Returns:
            uint256
        """
        ...

    def quote(self, amountA: uint256, reserveA: uint256, reserveB: uint256, *, from_: Optional[Union[Account, Address, str]] = None, to: Optional[Union[Account, Address, str]] = None, value: Union[int, str] = 0, gas_limit: Optional[Union[int, Literal["max"], Literal["auto"]]] = None, request_type: RequestType = 'call', gas_price: Optional[Union[int, str]] = None, max_fee_per_gas: Optional[Union[int, str]] = None, max_priority_fee_per_gas: Optional[Union[int, str]] = None, access_list: Optional[Union[Dict[Union[Account, Address, str], List[int]], Literal["auto"]]] = None, type: Optional[int] = None, block: Optional[Union[int, Literal["latest"], Literal["pending"], Literal["earliest"], Literal["safe"], Literal["finalized"]]] = None, confirmations: Optional[int] = None) -> Union[uint256, TransactionAbc[uint256], int, Tuple[Dict[Address, List[int]], int]]:
        """
        [Source code](file:///Users/dteiml/p/hacker-dom/woke-uniswap-v2/src/UniswapV2Router02.sol#452)

        Args:
            amountA: uint256
            reserveA: uint256
            reserveB: uint256
        Returns:
            uint256
        """
        return self._execute(self.chain, request_type, "ad615dec", [amountA, reserveA, reserveB], True if request_type == "tx" else False, uint256, from_, to if to is not None else str(self.address), value, gas_limit, gas_price, max_fee_per_gas, max_priority_fee_per_gas, access_list, type, block, confirmations)

    @overload
    def getAmountOut(self, amountIn: uint256, reserveIn: uint256, reserveOut: uint256, *, from_: Optional[Union[Account, Address, str]] = None, to: Optional[Union[Account, Address, str]] = None, value: Union[int, str] = 0, gas_limit: Optional[Union[int, Literal["max"], Literal["auto"]]] = None, request_type: Literal["call"] = "call", gas_price: Optional[Union[int, str]] = None, max_fee_per_gas: Optional[Union[int, str]] = None, max_priority_fee_per_gas: Optional[Union[int, str]] = None, access_list: Optional[Union[Dict[Union[Account, Address, str], List[int]], Literal["auto"]]] = None, type: Optional[int] = None, block: Optional[Union[int, Literal["latest"], Literal["pending"], Literal["earliest"], Literal["safe"], Literal["finalized"]]] = None, confirmations: Optional[int] = None) -> uint256:
        """
        [Source code](file:///Users/dteiml/p/hacker-dom/woke-uniswap-v2/src/UniswapV2Router02.sol#456)

        Args:
            amountIn: uint256
            reserveIn: uint256
            reserveOut: uint256
        Returns:
            uint256
        """
        ...

    @overload
    def getAmountOut(self, amountIn: uint256, reserveIn: uint256, reserveOut: uint256, *, from_: Optional[Union[Account, Address, str]] = None, to: Optional[Union[Account, Address, str]] = None, value: Union[int, str] = 0, gas_limit: Optional[Union[int, Literal["max"], Literal["auto"]]] = None, request_type: Literal["estimate"], gas_price: Optional[Union[int, str]] = None, max_fee_per_gas: Optional[Union[int, str]] = None, max_priority_fee_per_gas: Optional[Union[int, str]] = None, access_list: Optional[Union[Dict[Union[Account, Address, str], List[int]], Literal["auto"]]] = None, type: Optional[int] = None, block: Optional[Union[int, Literal["latest"], Literal["pending"], Literal["earliest"], Literal["safe"], Literal["finalized"]]] = None, confirmations: Optional[int] = None) -> int:
        """
        [Source code](file:///Users/dteiml/p/hacker-dom/woke-uniswap-v2/src/UniswapV2Router02.sol#456)

        Args:
            amountIn: uint256
            reserveIn: uint256
            reserveOut: uint256
        Returns:
            uint256
        """
        ...

    @overload
    def getAmountOut(self, amountIn: uint256, reserveIn: uint256, reserveOut: uint256, *, from_: Optional[Union[Account, Address, str]] = None, to: Optional[Union[Account, Address, str]] = None, value: Union[int, str] = 0, gas_limit: Optional[Union[int, Literal["max"], Literal["auto"]]] = None, request_type: Literal["access_list"], gas_price: Optional[Union[int, str]] = None, max_fee_per_gas: Optional[Union[int, str]] = None, max_priority_fee_per_gas: Optional[Union[int, str]] = None, access_list: Optional[Union[Dict[Union[Account, Address, str], List[int]], Literal["auto"]]] = None, type: Optional[int] = None, block: Optional[Union[int, Literal["latest"], Literal["pending"], Literal["earliest"], Literal["safe"], Literal["finalized"]]] = None, confirmations: Optional[int] = None) -> Tuple[Dict[Address, List[int]], int]:
        """
        [Source code](file:///Users/dteiml/p/hacker-dom/woke-uniswap-v2/src/UniswapV2Router02.sol#456)

        Args:
            amountIn: uint256
            reserveIn: uint256
            reserveOut: uint256
        Returns:
            uint256
        """
        ...

    @overload
    def getAmountOut(self, amountIn: uint256, reserveIn: uint256, reserveOut: uint256, *, from_: Optional[Union[Account, Address, str]] = None, to: Optional[Union[Account, Address, str]] = None, value: Union[int, str] = 0, gas_limit: Optional[Union[int, Literal["max"], Literal["auto"]]] = None, request_type: Literal["tx"], gas_price: Optional[Union[int, str]] = None, max_fee_per_gas: Optional[Union[int, str]] = None, max_priority_fee_per_gas: Optional[Union[int, str]] = None, access_list: Optional[Union[Dict[Union[Account, Address, str], List[int]], Literal["auto"]]] = None, type: Optional[int] = None, block: Optional[Union[int, Literal["latest"], Literal["pending"], Literal["earliest"], Literal["safe"], Literal["finalized"]]] = None, confirmations: Optional[int] = None) -> TransactionAbc[uint256]:
        """
        [Source code](file:///Users/dteiml/p/hacker-dom/woke-uniswap-v2/src/UniswapV2Router02.sol#456)

        Args:
            amountIn: uint256
            reserveIn: uint256
            reserveOut: uint256
        Returns:
            uint256
        """
        ...

    def getAmountOut(self, amountIn: uint256, reserveIn: uint256, reserveOut: uint256, *, from_: Optional[Union[Account, Address, str]] = None, to: Optional[Union[Account, Address, str]] = None, value: Union[int, str] = 0, gas_limit: Optional[Union[int, Literal["max"], Literal["auto"]]] = None, request_type: RequestType = 'call', gas_price: Optional[Union[int, str]] = None, max_fee_per_gas: Optional[Union[int, str]] = None, max_priority_fee_per_gas: Optional[Union[int, str]] = None, access_list: Optional[Union[Dict[Union[Account, Address, str], List[int]], Literal["auto"]]] = None, type: Optional[int] = None, block: Optional[Union[int, Literal["latest"], Literal["pending"], Literal["earliest"], Literal["safe"], Literal["finalized"]]] = None, confirmations: Optional[int] = None) -> Union[uint256, TransactionAbc[uint256], int, Tuple[Dict[Address, List[int]], int]]:
        """
        [Source code](file:///Users/dteiml/p/hacker-dom/woke-uniswap-v2/src/UniswapV2Router02.sol#456)

        Args:
            amountIn: uint256
            reserveIn: uint256
            reserveOut: uint256
        Returns:
            uint256
        """
        return self._execute(self.chain, request_type, "054d50d4", [amountIn, reserveIn, reserveOut], True if request_type == "tx" else False, uint256, from_, to if to is not None else str(self.address), value, gas_limit, gas_price, max_fee_per_gas, max_priority_fee_per_gas, access_list, type, block, confirmations)

    @overload
    def getAmountIn(self, amountOut: uint256, reserveIn: uint256, reserveOut: uint256, *, from_: Optional[Union[Account, Address, str]] = None, to: Optional[Union[Account, Address, str]] = None, value: Union[int, str] = 0, gas_limit: Optional[Union[int, Literal["max"], Literal["auto"]]] = None, request_type: Literal["call"] = "call", gas_price: Optional[Union[int, str]] = None, max_fee_per_gas: Optional[Union[int, str]] = None, max_priority_fee_per_gas: Optional[Union[int, str]] = None, access_list: Optional[Union[Dict[Union[Account, Address, str], List[int]], Literal["auto"]]] = None, type: Optional[int] = None, block: Optional[Union[int, Literal["latest"], Literal["pending"], Literal["earliest"], Literal["safe"], Literal["finalized"]]] = None, confirmations: Optional[int] = None) -> uint256:
        """
        [Source code](file:///Users/dteiml/p/hacker-dom/woke-uniswap-v2/src/UniswapV2Router02.sol#465)

        Args:
            amountOut: uint256
            reserveIn: uint256
            reserveOut: uint256
        Returns:
            uint256
        """
        ...

    @overload
    def getAmountIn(self, amountOut: uint256, reserveIn: uint256, reserveOut: uint256, *, from_: Optional[Union[Account, Address, str]] = None, to: Optional[Union[Account, Address, str]] = None, value: Union[int, str] = 0, gas_limit: Optional[Union[int, Literal["max"], Literal["auto"]]] = None, request_type: Literal["estimate"], gas_price: Optional[Union[int, str]] = None, max_fee_per_gas: Optional[Union[int, str]] = None, max_priority_fee_per_gas: Optional[Union[int, str]] = None, access_list: Optional[Union[Dict[Union[Account, Address, str], List[int]], Literal["auto"]]] = None, type: Optional[int] = None, block: Optional[Union[int, Literal["latest"], Literal["pending"], Literal["earliest"], Literal["safe"], Literal["finalized"]]] = None, confirmations: Optional[int] = None) -> int:
        """
        [Source code](file:///Users/dteiml/p/hacker-dom/woke-uniswap-v2/src/UniswapV2Router02.sol#465)

        Args:
            amountOut: uint256
            reserveIn: uint256
            reserveOut: uint256
        Returns:
            uint256
        """
        ...

    @overload
    def getAmountIn(self, amountOut: uint256, reserveIn: uint256, reserveOut: uint256, *, from_: Optional[Union[Account, Address, str]] = None, to: Optional[Union[Account, Address, str]] = None, value: Union[int, str] = 0, gas_limit: Optional[Union[int, Literal["max"], Literal["auto"]]] = None, request_type: Literal["access_list"], gas_price: Optional[Union[int, str]] = None, max_fee_per_gas: Optional[Union[int, str]] = None, max_priority_fee_per_gas: Optional[Union[int, str]] = None, access_list: Optional[Union[Dict[Union[Account, Address, str], List[int]], Literal["auto"]]] = None, type: Optional[int] = None, block: Optional[Union[int, Literal["latest"], Literal["pending"], Literal["earliest"], Literal["safe"], Literal["finalized"]]] = None, confirmations: Optional[int] = None) -> Tuple[Dict[Address, List[int]], int]:
        """
        [Source code](file:///Users/dteiml/p/hacker-dom/woke-uniswap-v2/src/UniswapV2Router02.sol#465)

        Args:
            amountOut: uint256
            reserveIn: uint256
            reserveOut: uint256
        Returns:
            uint256
        """
        ...

    @overload
    def getAmountIn(self, amountOut: uint256, reserveIn: uint256, reserveOut: uint256, *, from_: Optional[Union[Account, Address, str]] = None, to: Optional[Union[Account, Address, str]] = None, value: Union[int, str] = 0, gas_limit: Optional[Union[int, Literal["max"], Literal["auto"]]] = None, request_type: Literal["tx"], gas_price: Optional[Union[int, str]] = None, max_fee_per_gas: Optional[Union[int, str]] = None, max_priority_fee_per_gas: Optional[Union[int, str]] = None, access_list: Optional[Union[Dict[Union[Account, Address, str], List[int]], Literal["auto"]]] = None, type: Optional[int] = None, block: Optional[Union[int, Literal["latest"], Literal["pending"], Literal["earliest"], Literal["safe"], Literal["finalized"]]] = None, confirmations: Optional[int] = None) -> TransactionAbc[uint256]:
        """
        [Source code](file:///Users/dteiml/p/hacker-dom/woke-uniswap-v2/src/UniswapV2Router02.sol#465)

        Args:
            amountOut: uint256
            reserveIn: uint256
            reserveOut: uint256
        Returns:
            uint256
        """
        ...

    def getAmountIn(self, amountOut: uint256, reserveIn: uint256, reserveOut: uint256, *, from_: Optional[Union[Account, Address, str]] = None, to: Optional[Union[Account, Address, str]] = None, value: Union[int, str] = 0, gas_limit: Optional[Union[int, Literal["max"], Literal["auto"]]] = None, request_type: RequestType = 'call', gas_price: Optional[Union[int, str]] = None, max_fee_per_gas: Optional[Union[int, str]] = None, max_priority_fee_per_gas: Optional[Union[int, str]] = None, access_list: Optional[Union[Dict[Union[Account, Address, str], List[int]], Literal["auto"]]] = None, type: Optional[int] = None, block: Optional[Union[int, Literal["latest"], Literal["pending"], Literal["earliest"], Literal["safe"], Literal["finalized"]]] = None, confirmations: Optional[int] = None) -> Union[uint256, TransactionAbc[uint256], int, Tuple[Dict[Address, List[int]], int]]:
        """
        [Source code](file:///Users/dteiml/p/hacker-dom/woke-uniswap-v2/src/UniswapV2Router02.sol#465)

        Args:
            amountOut: uint256
            reserveIn: uint256
            reserveOut: uint256
        Returns:
            uint256
        """
        return self._execute(self.chain, request_type, "85f8c259", [amountOut, reserveIn, reserveOut], True if request_type == "tx" else False, uint256, from_, to if to is not None else str(self.address), value, gas_limit, gas_price, max_fee_per_gas, max_priority_fee_per_gas, access_list, type, block, confirmations)

    @overload
    def getAmountsOut(self, amountIn: uint256, path: List[Union[Account, Address]], *, from_: Optional[Union[Account, Address, str]] = None, to: Optional[Union[Account, Address, str]] = None, value: Union[int, str] = 0, gas_limit: Optional[Union[int, Literal["max"], Literal["auto"]]] = None, request_type: Literal["call"] = "call", gas_price: Optional[Union[int, str]] = None, max_fee_per_gas: Optional[Union[int, str]] = None, max_priority_fee_per_gas: Optional[Union[int, str]] = None, access_list: Optional[Union[Dict[Union[Account, Address, str], List[int]], Literal["auto"]]] = None, type: Optional[int] = None, block: Optional[Union[int, Literal["latest"], Literal["pending"], Literal["earliest"], Literal["safe"], Literal["finalized"]]] = None, confirmations: Optional[int] = None) -> List[uint256]:
        """
        [Source code](file:///Users/dteiml/p/hacker-dom/woke-uniswap-v2/src/UniswapV2Router02.sol#474)

        Args:
            amountIn: uint256
            path: address[]
        Returns:
            uint256[]
        """
        ...

    @overload
    def getAmountsOut(self, amountIn: uint256, path: List[Union[Account, Address]], *, from_: Optional[Union[Account, Address, str]] = None, to: Optional[Union[Account, Address, str]] = None, value: Union[int, str] = 0, gas_limit: Optional[Union[int, Literal["max"], Literal["auto"]]] = None, request_type: Literal["estimate"], gas_price: Optional[Union[int, str]] = None, max_fee_per_gas: Optional[Union[int, str]] = None, max_priority_fee_per_gas: Optional[Union[int, str]] = None, access_list: Optional[Union[Dict[Union[Account, Address, str], List[int]], Literal["auto"]]] = None, type: Optional[int] = None, block: Optional[Union[int, Literal["latest"], Literal["pending"], Literal["earliest"], Literal["safe"], Literal["finalized"]]] = None, confirmations: Optional[int] = None) -> int:
        """
        [Source code](file:///Users/dteiml/p/hacker-dom/woke-uniswap-v2/src/UniswapV2Router02.sol#474)

        Args:
            amountIn: uint256
            path: address[]
        Returns:
            uint256[]
        """
        ...

    @overload
    def getAmountsOut(self, amountIn: uint256, path: List[Union[Account, Address]], *, from_: Optional[Union[Account, Address, str]] = None, to: Optional[Union[Account, Address, str]] = None, value: Union[int, str] = 0, gas_limit: Optional[Union[int, Literal["max"], Literal["auto"]]] = None, request_type: Literal["access_list"], gas_price: Optional[Union[int, str]] = None, max_fee_per_gas: Optional[Union[int, str]] = None, max_priority_fee_per_gas: Optional[Union[int, str]] = None, access_list: Optional[Union[Dict[Union[Account, Address, str], List[int]], Literal["auto"]]] = None, type: Optional[int] = None, block: Optional[Union[int, Literal["latest"], Literal["pending"], Literal["earliest"], Literal["safe"], Literal["finalized"]]] = None, confirmations: Optional[int] = None) -> Tuple[Dict[Address, List[int]], int]:
        """
        [Source code](file:///Users/dteiml/p/hacker-dom/woke-uniswap-v2/src/UniswapV2Router02.sol#474)

        Args:
            amountIn: uint256
            path: address[]
        Returns:
            uint256[]
        """
        ...

    @overload
    def getAmountsOut(self, amountIn: uint256, path: List[Union[Account, Address]], *, from_: Optional[Union[Account, Address, str]] = None, to: Optional[Union[Account, Address, str]] = None, value: Union[int, str] = 0, gas_limit: Optional[Union[int, Literal["max"], Literal["auto"]]] = None, request_type: Literal["tx"], gas_price: Optional[Union[int, str]] = None, max_fee_per_gas: Optional[Union[int, str]] = None, max_priority_fee_per_gas: Optional[Union[int, str]] = None, access_list: Optional[Union[Dict[Union[Account, Address, str], List[int]], Literal["auto"]]] = None, type: Optional[int] = None, block: Optional[Union[int, Literal["latest"], Literal["pending"], Literal["earliest"], Literal["safe"], Literal["finalized"]]] = None, confirmations: Optional[int] = None) -> TransactionAbc[List[uint256]]:
        """
        [Source code](file:///Users/dteiml/p/hacker-dom/woke-uniswap-v2/src/UniswapV2Router02.sol#474)

        Args:
            amountIn: uint256
            path: address[]
        Returns:
            uint256[]
        """
        ...

    def getAmountsOut(self, amountIn: uint256, path: List[Union[Account, Address]], *, from_: Optional[Union[Account, Address, str]] = None, to: Optional[Union[Account, Address, str]] = None, value: Union[int, str] = 0, gas_limit: Optional[Union[int, Literal["max"], Literal["auto"]]] = None, request_type: RequestType = 'call', gas_price: Optional[Union[int, str]] = None, max_fee_per_gas: Optional[Union[int, str]] = None, max_priority_fee_per_gas: Optional[Union[int, str]] = None, access_list: Optional[Union[Dict[Union[Account, Address, str], List[int]], Literal["auto"]]] = None, type: Optional[int] = None, block: Optional[Union[int, Literal["latest"], Literal["pending"], Literal["earliest"], Literal["safe"], Literal["finalized"]]] = None, confirmations: Optional[int] = None) -> Union[List[uint256], TransactionAbc[List[uint256]], int, Tuple[Dict[Address, List[int]], int]]:
        """
        [Source code](file:///Users/dteiml/p/hacker-dom/woke-uniswap-v2/src/UniswapV2Router02.sol#474)

        Args:
            amountIn: uint256
            path: address[]
        Returns:
            uint256[]
        """
        return self._execute(self.chain, request_type, "d06ca61f", [amountIn, path], True if request_type == "tx" else False, List[uint256], from_, to if to is not None else str(self.address), value, gas_limit, gas_price, max_fee_per_gas, max_priority_fee_per_gas, access_list, type, block, confirmations)

    @overload
    def getAmountsIn(self, amountOut: uint256, path: List[Union[Account, Address]], *, from_: Optional[Union[Account, Address, str]] = None, to: Optional[Union[Account, Address, str]] = None, value: Union[int, str] = 0, gas_limit: Optional[Union[int, Literal["max"], Literal["auto"]]] = None, request_type: Literal["call"] = "call", gas_price: Optional[Union[int, str]] = None, max_fee_per_gas: Optional[Union[int, str]] = None, max_priority_fee_per_gas: Optional[Union[int, str]] = None, access_list: Optional[Union[Dict[Union[Account, Address, str], List[int]], Literal["auto"]]] = None, type: Optional[int] = None, block: Optional[Union[int, Literal["latest"], Literal["pending"], Literal["earliest"], Literal["safe"], Literal["finalized"]]] = None, confirmations: Optional[int] = None) -> List[uint256]:
        """
        [Source code](file:///Users/dteiml/p/hacker-dom/woke-uniswap-v2/src/UniswapV2Router02.sol#483)

        Args:
            amountOut: uint256
            path: address[]
        Returns:
            uint256[]
        """
        ...

    @overload
    def getAmountsIn(self, amountOut: uint256, path: List[Union[Account, Address]], *, from_: Optional[Union[Account, Address, str]] = None, to: Optional[Union[Account, Address, str]] = None, value: Union[int, str] = 0, gas_limit: Optional[Union[int, Literal["max"], Literal["auto"]]] = None, request_type: Literal["estimate"], gas_price: Optional[Union[int, str]] = None, max_fee_per_gas: Optional[Union[int, str]] = None, max_priority_fee_per_gas: Optional[Union[int, str]] = None, access_list: Optional[Union[Dict[Union[Account, Address, str], List[int]], Literal["auto"]]] = None, type: Optional[int] = None, block: Optional[Union[int, Literal["latest"], Literal["pending"], Literal["earliest"], Literal["safe"], Literal["finalized"]]] = None, confirmations: Optional[int] = None) -> int:
        """
        [Source code](file:///Users/dteiml/p/hacker-dom/woke-uniswap-v2/src/UniswapV2Router02.sol#483)

        Args:
            amountOut: uint256
            path: address[]
        Returns:
            uint256[]
        """
        ...

    @overload
    def getAmountsIn(self, amountOut: uint256, path: List[Union[Account, Address]], *, from_: Optional[Union[Account, Address, str]] = None, to: Optional[Union[Account, Address, str]] = None, value: Union[int, str] = 0, gas_limit: Optional[Union[int, Literal["max"], Literal["auto"]]] = None, request_type: Literal["access_list"], gas_price: Optional[Union[int, str]] = None, max_fee_per_gas: Optional[Union[int, str]] = None, max_priority_fee_per_gas: Optional[Union[int, str]] = None, access_list: Optional[Union[Dict[Union[Account, Address, str], List[int]], Literal["auto"]]] = None, type: Optional[int] = None, block: Optional[Union[int, Literal["latest"], Literal["pending"], Literal["earliest"], Literal["safe"], Literal["finalized"]]] = None, confirmations: Optional[int] = None) -> Tuple[Dict[Address, List[int]], int]:
        """
        [Source code](file:///Users/dteiml/p/hacker-dom/woke-uniswap-v2/src/UniswapV2Router02.sol#483)

        Args:
            amountOut: uint256
            path: address[]
        Returns:
            uint256[]
        """
        ...

    @overload
    def getAmountsIn(self, amountOut: uint256, path: List[Union[Account, Address]], *, from_: Optional[Union[Account, Address, str]] = None, to: Optional[Union[Account, Address, str]] = None, value: Union[int, str] = 0, gas_limit: Optional[Union[int, Literal["max"], Literal["auto"]]] = None, request_type: Literal["tx"], gas_price: Optional[Union[int, str]] = None, max_fee_per_gas: Optional[Union[int, str]] = None, max_priority_fee_per_gas: Optional[Union[int, str]] = None, access_list: Optional[Union[Dict[Union[Account, Address, str], List[int]], Literal["auto"]]] = None, type: Optional[int] = None, block: Optional[Union[int, Literal["latest"], Literal["pending"], Literal["earliest"], Literal["safe"], Literal["finalized"]]] = None, confirmations: Optional[int] = None) -> TransactionAbc[List[uint256]]:
        """
        [Source code](file:///Users/dteiml/p/hacker-dom/woke-uniswap-v2/src/UniswapV2Router02.sol#483)

        Args:
            amountOut: uint256
            path: address[]
        Returns:
            uint256[]
        """
        ...

    def getAmountsIn(self, amountOut: uint256, path: List[Union[Account, Address]], *, from_: Optional[Union[Account, Address, str]] = None, to: Optional[Union[Account, Address, str]] = None, value: Union[int, str] = 0, gas_limit: Optional[Union[int, Literal["max"], Literal["auto"]]] = None, request_type: RequestType = 'call', gas_price: Optional[Union[int, str]] = None, max_fee_per_gas: Optional[Union[int, str]] = None, max_priority_fee_per_gas: Optional[Union[int, str]] = None, access_list: Optional[Union[Dict[Union[Account, Address, str], List[int]], Literal["auto"]]] = None, type: Optional[int] = None, block: Optional[Union[int, Literal["latest"], Literal["pending"], Literal["earliest"], Literal["safe"], Literal["finalized"]]] = None, confirmations: Optional[int] = None) -> Union[List[uint256], TransactionAbc[List[uint256]], int, Tuple[Dict[Address, List[int]], int]]:
        """
        [Source code](file:///Users/dteiml/p/hacker-dom/woke-uniswap-v2/src/UniswapV2Router02.sol#483)

        Args:
            amountOut: uint256
            path: address[]
        Returns:
            uint256[]
        """
        return self._execute(self.chain, request_type, "1f00ca74", [amountOut, path], True if request_type == "tx" else False, List[uint256], from_, to if to is not None else str(self.address), value, gas_limit, gas_price, max_fee_per_gas, max_priority_fee_per_gas, access_list, type, block, confirmations)

UniswapV2Router02.factory.selector = b'\xc4Z\x01U'
UniswapV2Router02.WETH.selector = b'\xad\\FH'
UniswapV2Router02.addLiquidity.selector = b'\xe8\xe37\x00'
UniswapV2Router02.addLiquidityETH.selector = b'\xf3\x05\xd7\x19'
UniswapV2Router02.removeLiquidity.selector = b'\xba\xa2\xab\xde'
UniswapV2Router02.removeLiquidityETH.selector = b'\x02u\x1c\xec'
UniswapV2Router02.removeLiquidityWithPermit.selector = b'!\x95\x99\\'
UniswapV2Router02.removeLiquidityETHWithPermit.selector = b'\xde\xd98*'
UniswapV2Router02.removeLiquidityETHSupportingFeeOnTransferTokens.selector = b'\xaf)y\xeb'
UniswapV2Router02.removeLiquidityETHWithPermitSupportingFeeOnTransferTokens.selector = b'[\rY\x84'
UniswapV2Router02.swapExactTokensForTokens.selector = b'8\xed\x179'
UniswapV2Router02.swapExactTokensForTokens_noFee.selector = b'\x959\xca\xb8'
UniswapV2Router02.swapTokensForExactTokens.selector = b'\x88\x03\xdb\xee'
UniswapV2Router02.swapTokensForExactTokens_noFee.selector = b'\xe3\xb3AT'
UniswapV2Router02.swapExactETHForTokens.selector = b'\x7f\xf3j\xb5'
UniswapV2Router02.swapTokensForExactETH.selector = b'J%\xd9J'
UniswapV2Router02.swapExactTokensForETH.selector = b'\x18\xcb\xaf\xe5'
UniswapV2Router02.swapETHForExactTokens.selector = b'\xfb;\xdbA'
UniswapV2Router02.swapExactTokensForTokensSupportingFeeOnTransferTokens.selector = b'\\\x11\xd7\x95'
UniswapV2Router02.swapExactETHForTokensSupportingFeeOnTransferTokens.selector = b'\xb6\xf9\xde\x95'
UniswapV2Router02.swapExactTokensForETHSupportingFeeOnTransferTokens.selector = b'y\x1a\xc9G'
UniswapV2Router02.quote.selector = b'\xada]\xec'
UniswapV2Router02.getAmountOut.selector = b'\x05MP\xd4'
UniswapV2Router02.getAmountIn.selector = b'\x85\xf8\xc2Y'
UniswapV2Router02.getAmountsOut.selector = b'\xd0l\xa6\x1f'
UniswapV2Router02.getAmountsIn.selector = b'\x1f\x00\xcat'
