
from __future__ import annotations

import dataclasses
from typing import List, Dict, Optional, overload, Union, Callable, Tuple
from typing_extensions import Literal

from woke.development.core import Contract, Library, Address, Account, Chain, RequestType
from woke.development.primitive_types import *
from woke.development.transactions import TransactionAbc, TransactionRevertedError

from enum import IntEnum



class UniswapV2Router02(Contract):
    """
    [Source code](file:///Users/dteiml/p/hacker-dom/woke-uniswap-v2/src/UniswapV2Router02.sol#13)
    """
    _abi = {'constructor': {'inputs': [{'internalType': 'address', 'name': '_factory', 'type': 'address'}, {'internalType': 'address', 'name': '_WETH', 'type': 'address'}], 'stateMutability': 'nonpayable', 'type': 'constructor'}, b'\xad\\FH': {'inputs': [], 'name': 'WETH', 'outputs': [{'internalType': 'address', 'name': '', 'type': 'address'}], 'stateMutability': 'view', 'type': 'function'}, b'\xe8\xe37\x00': {'inputs': [{'internalType': 'address', 'name': 'tokenA', 'type': 'address'}, {'internalType': 'address', 'name': 'tokenB', 'type': 'address'}, {'internalType': 'uint256', 'name': 'amountADesired', 'type': 'uint256'}, {'internalType': 'uint256', 'name': 'amountBDesired', 'type': 'uint256'}, {'internalType': 'uint256', 'name': 'amountAMin', 'type': 'uint256'}, {'internalType': 'uint256', 'name': 'amountBMin', 'type': 'uint256'}, {'internalType': 'address', 'name': 'to', 'type': 'address'}, {'internalType': 'uint256', 'name': 'deadline', 'type': 'uint256'}], 'name': 'addLiquidity', 'outputs': [{'internalType': 'uint256', 'name': 'amountA', 'type': 'uint256'}, {'internalType': 'uint256', 'name': 'amountB', 'type': 'uint256'}, {'internalType': 'uint256', 'name': 'liquidity', 'type': 'uint256'}], 'stateMutability': 'nonpayable', 'type': 'function'}, b'\xf3\x05\xd7\x19': {'inputs': [{'internalType': 'address', 'name': 'token', 'type': 'address'}, {'internalType': 'uint256', 'name': 'amountTokenDesired', 'type': 'uint256'}, {'internalType': 'uint256', 'name': 'amountTokenMin', 'type': 'uint256'}, {'internalType': 'uint256', 'name': 'amountETHMin', 'type': 'uint256'}, {'internalType': 'address', 'name': 'to', 'type': 'address'}, {'internalType': 'uint256', 'name': 'deadline', 'type': 'uint256'}], 'name': 'addLiquidityETH', 'outputs': [{'internalType': 'uint256', 'name': 'amountToken', 'type': 'uint256'}, {'internalType': 'uint256', 'name': 'amountETH', 'type': 'uint256'}, {'internalType': 'uint256', 'name': 'liquidity', 'type': 'uint256'}], 'stateMutability': 'payable', 'type': 'function'}, b'\xc4Z\x01U': {'inputs': [], 'name': 'factory', 'outputs': [{'internalType': 'address', 'name': '', 'type': 'address'}], 'stateMutability': 'view', 'type': 'function'}, b'\x85\xf8\xc2Y': {'inputs': [{'internalType': 'uint256', 'name': 'amountOut', 'type': 'uint256'}, {'internalType': 'uint256', 'name': 'reserveIn', 'type': 'uint256'}, {'internalType': 'uint256', 'name': 'reserveOut', 'type': 'uint256'}], 'name': 'getAmountIn', 'outputs': [{'internalType': 'uint256', 'name': 'amountIn', 'type': 'uint256'}], 'stateMutability': 'pure', 'type': 'function'}, b'\x05MP\xd4': {'inputs': [{'internalType': 'uint256', 'name': 'amountIn', 'type': 'uint256'}, {'internalType': 'uint256', 'name': 'reserveIn', 'type': 'uint256'}, {'internalType': 'uint256', 'name': 'reserveOut', 'type': 'uint256'}], 'name': 'getAmountOut', 'outputs': [{'internalType': 'uint256', 'name': 'amountOut', 'type': 'uint256'}], 'stateMutability': 'pure', 'type': 'function'}, b'\x1f\x00\xcat': {'inputs': [{'internalType': 'uint256', 'name': 'amountOut', 'type': 'uint256'}, {'internalType': 'address[]', 'name': 'path', 'type': 'address[]'}], 'name': 'getAmountsIn', 'outputs': [{'internalType': 'uint256[]', 'name': 'amounts', 'type': 'uint256[]'}], 'stateMutability': 'view', 'type': 'function'}, b'\xd0l\xa6\x1f': {'inputs': [{'internalType': 'uint256', 'name': 'amountIn', 'type': 'uint256'}, {'internalType': 'address[]', 'name': 'path', 'type': 'address[]'}], 'name': 'getAmountsOut', 'outputs': [{'internalType': 'uint256[]', 'name': 'amounts', 'type': 'uint256[]'}], 'stateMutability': 'view', 'type': 'function'}, b'\xada]\xec': {'inputs': [{'internalType': 'uint256', 'name': 'amountA', 'type': 'uint256'}, {'internalType': 'uint256', 'name': 'reserveA', 'type': 'uint256'}, {'internalType': 'uint256', 'name': 'reserveB', 'type': 'uint256'}], 'name': 'quote', 'outputs': [{'internalType': 'uint256', 'name': 'amountB', 'type': 'uint256'}], 'stateMutability': 'pure', 'type': 'function'}, b'\xba\xa2\xab\xde': {'inputs': [{'internalType': 'address', 'name': 'tokenA', 'type': 'address'}, {'internalType': 'address', 'name': 'tokenB', 'type': 'address'}, {'internalType': 'uint256', 'name': 'liquidity', 'type': 'uint256'}, {'internalType': 'uint256', 'name': 'amountAMin', 'type': 'uint256'}, {'internalType': 'uint256', 'name': 'amountBMin', 'type': 'uint256'}, {'internalType': 'address', 'name': 'to', 'type': 'address'}, {'internalType': 'uint256', 'name': 'deadline', 'type': 'uint256'}], 'name': 'removeLiquidity', 'outputs': [{'internalType': 'uint256', 'name': 'amountA', 'type': 'uint256'}, {'internalType': 'uint256', 'name': 'amountB', 'type': 'uint256'}], 'stateMutability': 'nonpayable', 'type': 'function'}, b'\x02u\x1c\xec': {'inputs': [{'internalType': 'address', 'name': 'token', 'type': 'address'}, {'internalType': 'uint256', 'name': 'liquidity', 'type': 'uint256'}, {'internalType': 'uint256', 'name': 'amountTokenMin', 'type': 'uint256'}, {'internalType': 'uint256', 'name': 'amountETHMin', 'type': 'uint256'}, {'internalType': 'address', 'name': 'to', 'type': 'address'}, {'internalType': 'uint256', 'name': 'deadline', 'type': 'uint256'}], 'name': 'removeLiquidityETH', 'outputs': [{'internalType': 'uint256', 'name': 'amountToken', 'type': 'uint256'}, {'internalType': 'uint256', 'name': 'amountETH', 'type': 'uint256'}], 'stateMutability': 'nonpayable', 'type': 'function'}, b'\xaf)y\xeb': {'inputs': [{'internalType': 'address', 'name': 'token', 'type': 'address'}, {'internalType': 'uint256', 'name': 'liquidity', 'type': 'uint256'}, {'internalType': 'uint256', 'name': 'amountTokenMin', 'type': 'uint256'}, {'internalType': 'uint256', 'name': 'amountETHMin', 'type': 'uint256'}, {'internalType': 'address', 'name': 'to', 'type': 'address'}, {'internalType': 'uint256', 'name': 'deadline', 'type': 'uint256'}], 'name': 'removeLiquidityETHSupportingFeeOnTransferTokens', 'outputs': [{'internalType': 'uint256', 'name': 'amountETH', 'type': 'uint256'}], 'stateMutability': 'nonpayable', 'type': 'function'}, b'\xde\xd98*': {'inputs': [{'internalType': 'address', 'name': 'token', 'type': 'address'}, {'internalType': 'uint256', 'name': 'liquidity', 'type': 'uint256'}, {'internalType': 'uint256', 'name': 'amountTokenMin', 'type': 'uint256'}, {'internalType': 'uint256', 'name': 'amountETHMin', 'type': 'uint256'}, {'internalType': 'address', 'name': 'to', 'type': 'address'}, {'internalType': 'uint256', 'name': 'deadline', 'type': 'uint256'}, {'internalType': 'bool', 'name': 'approveMax', 'type': 'bool'}, {'internalType': 'uint8', 'name': 'v', 'type': 'uint8'}, {'internalType': 'bytes32', 'name': 'r', 'type': 'bytes32'}, {'internalType': 'bytes32', 'name': 's', 'type': 'bytes32'}], 'name': 'removeLiquidityETHWithPermit', 'outputs': [{'internalType': 'uint256', 'name': 'amountToken', 'type': 'uint256'}, {'internalType': 'uint256', 'name': 'amountETH', 'type': 'uint256'}], 'stateMutability': 'nonpayable', 'type': 'function'}, b'[\rY\x84': {'inputs': [{'internalType': 'address', 'name': 'token', 'type': 'address'}, {'internalType': 'uint256', 'name': 'liquidity', 'type': 'uint256'}, {'internalType': 'uint256', 'name': 'amountTokenMin', 'type': 'uint256'}, {'internalType': 'uint256', 'name': 'amountETHMin', 'type': 'uint256'}, {'internalType': 'address', 'name': 'to', 'type': 'address'}, {'internalType': 'uint256', 'name': 'deadline', 'type': 'uint256'}, {'internalType': 'bool', 'name': 'approveMax', 'type': 'bool'}, {'internalType': 'uint8', 'name': 'v', 'type': 'uint8'}, {'internalType': 'bytes32', 'name': 'r', 'type': 'bytes32'}, {'internalType': 'bytes32', 'name': 's', 'type': 'bytes32'}], 'name': 'removeLiquidityETHWithPermitSupportingFeeOnTransferTokens', 'outputs': [{'internalType': 'uint256', 'name': 'amountETH', 'type': 'uint256'}], 'stateMutability': 'nonpayable', 'type': 'function'}, b'!\x95\x99\\': {'inputs': [{'internalType': 'address', 'name': 'tokenA', 'type': 'address'}, {'internalType': 'address', 'name': 'tokenB', 'type': 'address'}, {'internalType': 'uint256', 'name': 'liquidity', 'type': 'uint256'}, {'internalType': 'uint256', 'name': 'amountAMin', 'type': 'uint256'}, {'internalType': 'uint256', 'name': 'amountBMin', 'type': 'uint256'}, {'internalType': 'address', 'name': 'to', 'type': 'address'}, {'internalType': 'uint256', 'name': 'deadline', 'type': 'uint256'}, {'internalType': 'bool', 'name': 'approveMax', 'type': 'bool'}, {'internalType': 'uint8', 'name': 'v', 'type': 'uint8'}, {'internalType': 'bytes32', 'name': 'r', 'type': 'bytes32'}, {'internalType': 'bytes32', 'name': 's', 'type': 'bytes32'}], 'name': 'removeLiquidityWithPermit', 'outputs': [{'internalType': 'uint256', 'name': 'amountA', 'type': 'uint256'}, {'internalType': 'uint256', 'name': 'amountB', 'type': 'uint256'}], 'stateMutability': 'nonpayable', 'type': 'function'}, b'\xfb;\xdbA': {'inputs': [{'internalType': 'uint256', 'name': 'amountOut', 'type': 'uint256'}, {'internalType': 'address[]', 'name': 'path', 'type': 'address[]'}, {'internalType': 'address', 'name': 'to', 'type': 'address'}, {'internalType': 'uint256', 'name': 'deadline', 'type': 'uint256'}], 'name': 'swapETHForExactTokens', 'outputs': [{'internalType': 'uint256[]', 'name': 'amounts', 'type': 'uint256[]'}], 'stateMutability': 'payable', 'type': 'function'}, b'\x7f\xf3j\xb5': {'inputs': [{'internalType': 'uint256', 'name': 'amountOutMin', 'type': 'uint256'}, {'internalType': 'address[]', 'name': 'path', 'type': 'address[]'}, {'internalType': 'address', 'name': 'to', 'type': 'address'}, {'internalType': 'uint256', 'name': 'deadline', 'type': 'uint256'}], 'name': 'swapExactETHForTokens', 'outputs': [{'internalType': 'uint256[]', 'name': 'amounts', 'type': 'uint256[]'}], 'stateMutability': 'payable', 'type': 'function'}, b'\xb6\xf9\xde\x95': {'inputs': [{'internalType': 'uint256', 'name': 'amountOutMin', 'type': 'uint256'}, {'internalType': 'address[]', 'name': 'path', 'type': 'address[]'}, {'internalType': 'address', 'name': 'to', 'type': 'address'}, {'internalType': 'uint256', 'name': 'deadline', 'type': 'uint256'}], 'name': 'swapExactETHForTokensSupportingFeeOnTransferTokens', 'outputs': [], 'stateMutability': 'payable', 'type': 'function'}, b'\x18\xcb\xaf\xe5': {'inputs': [{'internalType': 'uint256', 'name': 'amountIn', 'type': 'uint256'}, {'internalType': 'uint256', 'name': 'amountOutMin', 'type': 'uint256'}, {'internalType': 'address[]', 'name': 'path', 'type': 'address[]'}, {'internalType': 'address', 'name': 'to', 'type': 'address'}, {'internalType': 'uint256', 'name': 'deadline', 'type': 'uint256'}], 'name': 'swapExactTokensForETH', 'outputs': [{'internalType': 'uint256[]', 'name': 'amounts', 'type': 'uint256[]'}], 'stateMutability': 'nonpayable', 'type': 'function'}, b'y\x1a\xc9G': {'inputs': [{'internalType': 'uint256', 'name': 'amountIn', 'type': 'uint256'}, {'internalType': 'uint256', 'name': 'amountOutMin', 'type': 'uint256'}, {'internalType': 'address[]', 'name': 'path', 'type': 'address[]'}, {'internalType': 'address', 'name': 'to', 'type': 'address'}, {'internalType': 'uint256', 'name': 'deadline', 'type': 'uint256'}], 'name': 'swapExactTokensForETHSupportingFeeOnTransferTokens', 'outputs': [], 'stateMutability': 'nonpayable', 'type': 'function'}, b'8\xed\x179': {'inputs': [{'internalType': 'uint256', 'name': 'amountIn', 'type': 'uint256'}, {'internalType': 'uint256', 'name': 'amountOutMin', 'type': 'uint256'}, {'internalType': 'address[]', 'name': 'path', 'type': 'address[]'}, {'internalType': 'address', 'name': 'to', 'type': 'address'}, {'internalType': 'uint256', 'name': 'deadline', 'type': 'uint256'}], 'name': 'swapExactTokensForTokens', 'outputs': [{'internalType': 'uint256[]', 'name': 'amounts', 'type': 'uint256[]'}], 'stateMutability': 'nonpayable', 'type': 'function'}, b'\\\x11\xd7\x95': {'inputs': [{'internalType': 'uint256', 'name': 'amountIn', 'type': 'uint256'}, {'internalType': 'uint256', 'name': 'amountOutMin', 'type': 'uint256'}, {'internalType': 'address[]', 'name': 'path', 'type': 'address[]'}, {'internalType': 'address', 'name': 'to', 'type': 'address'}, {'internalType': 'uint256', 'name': 'deadline', 'type': 'uint256'}], 'name': 'swapExactTokensForTokensSupportingFeeOnTransferTokens', 'outputs': [], 'stateMutability': 'nonpayable', 'type': 'function'}, b'J%\xd9J': {'inputs': [{'internalType': 'uint256', 'name': 'amountOut', 'type': 'uint256'}, {'internalType': 'uint256', 'name': 'amountInMax', 'type': 'uint256'}, {'internalType': 'address[]', 'name': 'path', 'type': 'address[]'}, {'internalType': 'address', 'name': 'to', 'type': 'address'}, {'internalType': 'uint256', 'name': 'deadline', 'type': 'uint256'}], 'name': 'swapTokensForExactETH', 'outputs': [{'internalType': 'uint256[]', 'name': 'amounts', 'type': 'uint256[]'}], 'stateMutability': 'nonpayable', 'type': 'function'}, b'\x88\x03\xdb\xee': {'inputs': [{'internalType': 'uint256', 'name': 'amountOut', 'type': 'uint256'}, {'internalType': 'uint256', 'name': 'amountInMax', 'type': 'uint256'}, {'internalType': 'address[]', 'name': 'path', 'type': 'address[]'}, {'internalType': 'address', 'name': 'to', 'type': 'address'}, {'internalType': 'uint256', 'name': 'deadline', 'type': 'uint256'}], 'name': 'swapTokensForExactTokens', 'outputs': [{'internalType': 'uint256[]', 'name': 'amounts', 'type': 'uint256[]'}], 'stateMutability': 'nonpayable', 'type': 'function'}, 'receive': {'stateMutability': 'payable', 'type': 'receive'}}
    _creation_code = "60c060405234801562000010575f80fd5b506040516200436e3803806200436e833981016040819052620000339162000067565b6001600160a01b039182166080521660a0526200009d565b80516001600160a01b038116811462000062575f80fd5b919050565b5f806040838503121562000079575f80fd5b62000084836200004b565b915062000094602084016200004b565b90509250929050565b60805160a0516141436200022b5f395f818161015a0152818161035a01528181610507015281816105560152818161060c0152818161082a01528181610bf401528181610d2c0152818161106d0152818161114d015281816111f601528181611284015281816113a001528181611429015281816116660152818161171c015281816117a8015281816118230152818161189301528181611cc601528181611ea801528181611efd01528181611f3101528181611fc2015281816120f501528181612204015261228d01525f818161041501528181610688015281816107580152818161090b0152818161094201528181610a6b01528181610c7001528181610d0a01528181610e39015281816112fe0152818161145b0152818161159f015281816118c501528181611ada01528181611c7601528181611ca401528181611dc301528181611edb0152818161216f015281816122bf01528181612b6101528181612bb101528181612f0101528181613060015281816133ff0152818161349f015261351201526141435ff3fe60806040526004361061014a575f3560e01c80638803dbee116100b3578063c45a01551161006d578063c45a015514610404578063d06ca61f14610437578063ded9382a14610456578063e8e3370014610475578063f305d719146104af578063fb3bdb41146104c2575f80fd5b80638803dbee1461032a578063ad5c464814610349578063ad615dec14610394578063af2979eb146103b3578063b6f9de95146103d2578063baa2abde146103e5575f80fd5b80634a25d94a116101045780634a25d94a1461027c5780635b0d59841461029b5780635c11d795146102ba578063791ac947146102d95780637ff36ab5146102f857806385f8c2591461030b575f80fd5b806302751cec1461018d578063054d50d4146101c657806318cbafe5146101f35780631f00ca741461021f5780632195995c1461023e57806338ed17391461025d575f80fd5b3661018957336001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016146101875761018761378b565b005b5f80fd5b348015610198575f80fd5b506101ac6101a73660046137c3565b6104d5565b604080519283526020830191909152015b60405180910390f35b3480156101d1575f80fd5b506101e56101e036600461381d565b6105cb565b6040519081526020016101bd565b3480156101fe575f80fd5b5061021261020d366004613887565b6105df565b6040516101bd91906138f5565b34801561022a575f80fd5b5061021261023936600461394c565b610904565b348015610249575f80fd5b506101ac610258366004613a35565b61093a565b348015610268575f80fd5b50610212610277366004613887565b610a0a565b348015610287575f80fd5b50610212610296366004613887565b610bc7565b3480156102a6575f80fd5b506101e56102b5366004613ad8565b610d03565b3480156102c5575f80fd5b506101876102d4366004613887565b610de8565b3480156102e4575f80fd5b506101876102f3366004613887565b611042565b610212610306366004613b68565b61125f565b348015610316575f80fd5b506101e561032536600461381d565b61156b565b348015610335575f80fd5b50610212610344366004613887565b611577565b348015610354575f80fd5b5061037c7f000000000000000000000000000000000000000000000000000000000000000081565b6040516001600160a01b0390911681526020016101bd565b34801561039f575f80fd5b506101e56103ae36600461381d565b611632565b3480156103be575f80fd5b506101e56103cd3660046137c3565b61163e565b6101876103e0366004613b68565b611785565b3480156103f0575f80fd5b506101ac6103ff366004613bca565b611ab1565b34801561040f575f80fd5b5061037c7f000000000000000000000000000000000000000000000000000000000000000081565b348015610442575f80fd5b5061021261045136600461394c565b611c6f565b348015610461575f80fd5b506101ac610470366004613ad8565b611c9c565b348015610480575f80fd5b5061049461048f366004613c37565b611d86565b604080519384526020840192909252908201526060016101bd565b6104946104bd3660046137c3565b611e7e565b6102126104d0366004613b68565b6120d0565b5f8082428110156105015760405162461bcd60e51b81526004016104f890613cae565b60405180910390fd5b610530897f00000000000000000000000000000000000000000000000000000000000000008a8a8a308a611ab1565b909350915061054089868561240f565b604051632e1a7d4d60e01b8152600481018390527f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031690632e1a7d4d906024015f604051808303815f87803b15801561059f575f80fd5b505af11580156105b1573d5f803e3d5ffd5b505050506105bf858361253b565b50965096945050505050565b5f6105d7848484612616565b949350505050565b606081428110156106025760405162461bcd60e51b81526004016104f890613cae565b6001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000168686610639600182613cf9565b81811061064857610648613d0c565b905060200201602081019061065d9190613d20565b6001600160a01b0316146106835760405162461bcd60e51b81526004016104f890613d42565b6106e07f0000000000000000000000000000000000000000000000000000000000000000898888808060200260200160405190810160405280939291908181526020018383602002808284375f920191909152506126ee92505050565b91508682600184516106f29190613cf9565b8151811061070257610702613d0c565b602002602001015110156107285760405162461bcd60e51b81526004016104f890613d79565b6107ea86865f81811061073d5761073d613d0c565b90506020020160208101906107529190613d20565b336107cb7f00000000000000000000000000000000000000000000000000000000000000008a8a5f81811061078957610789613d0c565b905060200201602081019061079e9190613d20565b8b8b60018181106107b1576107b1613d0c565b90506020020160208101906107c69190613d20565b612876565b855f815181106107dd576107dd613d0c565b602002602001015161294d565b610828828787808060200260200160405190810160405280939291908181526020018383602002808284375f92019190915250309250612a86915050565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316632e1a7d4d83600185516108669190613cf9565b8151811061087657610876613d0c565b60200260200101516040518263ffffffff1660e01b815260040161089c91815260200190565b5f604051808303815f87803b1580156108b3575f80fd5b505af11580156108c5573d5f803e3d5ffd5b505050506108f98483600185516108dc9190613cf9565b815181106108ec576108ec613d0c565b602002602001015161253b565b509695505050505050565b60606109317f00000000000000000000000000000000000000000000000000000000000000008484612c80565b90505b92915050565b5f805f6109687f00000000000000000000000000000000000000000000000000000000000000008f8f612876565b90505f87610976578c610979565b5f195b60405163d505accf60e01b81529091506001600160a01b0383169063d505accf906109b4903390309086908f908e908e908e90600401613dc4565b5f604051808303815f87803b1580156109cb575f80fd5b505af11580156109dd573d5f803e3d5ffd5b505050506109f08f8f8f8f8f8f8f611ab1565b809450819550505050509b509b9950505050505050505050565b60608142811015610a2d5760405162461bcd60e51b81526004016104f890613cae565b610a6660405180604001604052806018815260200177737761704578616374546f6b656e73466f72546f6b656e7360401b815250612dff565b610ac37f0000000000000000000000000000000000000000000000000000000000000000898888808060200260200160405190810160405280939291908181526020018383602002808284375f920191909152506126ee92505050565b9150610afe60405180604001604052806018815260200177737761704578616374546f6b656e73466f72546f6b656e7360401b815250612dff565b610b2e8260018451610b109190613cf9565b81518110610b2057610b20613d0c565b602002602001015188612e45565b868260018451610b3e9190613cf9565b81518110610b4e57610b4e613d0c565b60200260200101511015610b745760405162461bcd60e51b81526004016104f890613d79565b610b8986865f81811061073d5761073d613d0c565b6108f9828787808060200260200160405190810160405280939291908181526020018383602002808284375f92019190915250899250612a86915050565b60608142811015610bea5760405162461bcd60e51b81526004016104f890613cae565b6001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000168686610c21600182613cf9565b818110610c3057610c30613d0c565b9050602002016020810190610c459190613d20565b6001600160a01b031614610c6b5760405162461bcd60e51b81526004016104f890613d42565b610cc87f0000000000000000000000000000000000000000000000000000000000000000898888808060200260200160405190810160405280939291908181526020018383602002808284375f92019190915250612c8092505050565b915086825f81518110610cdd57610cdd613d0c565b602002602001015111156107285760405162461bcd60e51b81526004016104f890613e05565b5f80610d507f00000000000000000000000000000000000000000000000000000000000000008d7f0000000000000000000000000000000000000000000000000000000000000000612876565b90505f86610d5e578b610d61565b5f195b60405163d505accf60e01b81529091506001600160a01b0383169063d505accf90610d9c903390309086908e908d908d908d90600401613dc4565b5f604051808303815f87803b158015610db3575f80fd5b505af1158015610dc5573d5f803e3d5ffd5b50505050610dd78d8d8d8d8d8d61163e565b9d9c50505050505050505050505050565b8042811015610e095760405162461bcd60e51b81526004016104f890613cae565b610e9885855f818110610e1e57610e1e613d0c565b9050602002016020810190610e339190613d20565b33610e927f000000000000000000000000000000000000000000000000000000000000000089895f818110610e6a57610e6a613d0c565b9050602002016020810190610e7f9190613d20565b8a8a60018181106107b1576107b1613d0c565b8a61294d565b5f8585610ea6600182613cf9565b818110610eb557610eb5613d0c565b9050602002016020810190610eca9190613d20565b6040516370a0823160e01b81526001600160a01b03868116600483015291909116906370a0823190602401602060405180830381865afa158015610f10573d5f803e3d5ffd5b505050506040513d601f19601f82011682018060405250810190610f349190613e4c565b9050610f738686808060200260200160405190810160405280939291908181526020018383602002808284375f92019190915250889250612e90915050565b8661101a828888610f85600182613cf9565b818110610f9457610f94613d0c565b9050602002016020810190610fa99190613d20565b6040516370a0823160e01b81526001600160a01b03898116600483015291909116906370a08231906024015b602060405180830381865afa158015610ff0573d5f803e3d5ffd5b505050506040513d601f19601f820116820180604052508101906110149190613e4c565b90613116565b10156110385760405162461bcd60e51b81526004016104f890613d79565b5050505050505050565b80428110156110635760405162461bcd60e51b81526004016104f890613cae565b6001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016858561109a600182613cf9565b8181106110a9576110a9613d0c565b90506020020160208101906110be9190613d20565b6001600160a01b0316146110e45760405162461bcd60e51b81526004016104f890613d42565b6110f985855f818110610e1e57610e1e613d0c565b6111368585808060200260200160405190810160405280939291908181526020018383602002808284375f92019190915250309250612e90915050565b6040516370a0823160e01b81523060048201525f907f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316906370a0823190602401602060405180830381865afa15801561119a573d5f803e3d5ffd5b505050506040513d601f19601f820116820180604052508101906111be9190613e4c565b9050868110156111e05760405162461bcd60e51b81526004016104f890613d79565b604051632e1a7d4d60e01b8152600481018290527f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031690632e1a7d4d906024015f604051808303815f87803b15801561123f575f80fd5b505af1158015611251573d5f803e3d5ffd5b50505050611038848261253b565b606081428110156112825760405162461bcd60e51b81526004016104f890613cae565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031686865f8181106112be576112be613d0c565b90506020020160208101906112d39190613d20565b6001600160a01b0316146112f95760405162461bcd60e51b81526004016104f890613d42565b6113567f0000000000000000000000000000000000000000000000000000000000000000348888808060200260200160405190810160405280939291908181526020018383602002808284375f920191909152506126ee92505050565b91508682600184516113689190613cf9565b8151811061137857611378613d0c565b6020026020010151101561139e5760405162461bcd60e51b81526004016104f890613d79565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663d0e30db0835f815181106113df576113df613d0c565b60200260200101516040518263ffffffff1660e01b81526004015f604051808303818588803b158015611410575f80fd5b505af1158015611422573d5f803e3d5ffd5b50505050507f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663a9059cbb61148c7f000000000000000000000000000000000000000000000000000000000000000089895f818110610e6a57610e6a613d0c565b845f8151811061149e5761149e613d0c565b60200260200101516040518363ffffffff1660e01b81526004016114d79291906001600160a01b03929092168252602082015260400190565b6020604051808303815f875af11580156114f3573d5f803e3d5ffd5b505050506040513d601f19601f820116820180604052508101906115179190613e63565b6115235761152361378b565b611561828787808060200260200160405190810160405280939291908181526020018383602002808284375f92019190915250899250612a86915050565b5095945050505050565b5f6105d784848461316b565b6060814281101561159a5760405162461bcd60e51b81526004016104f890613cae565b6115f77f0000000000000000000000000000000000000000000000000000000000000000898888808060200260200160405190810160405280939291908181526020018383602002808284375f92019190915250612c8092505050565b915086825f8151811061160c5761160c613d0c565b60200260200101511115610b745760405162461bcd60e51b81526004016104f890613e05565b5f6105d784848461323f565b5f81428110156116605760405162461bcd60e51b81526004016104f890613cae565b61168f887f00000000000000000000000000000000000000000000000000000000000000008989893089611ab1565b6040516370a0823160e01b81523060048201529093506117069150899086906001600160a01b038316906370a0823190602401602060405180830381865afa1580156116dd573d5f803e3d5ffd5b505050506040513d601f19601f820116820180604052508101906117019190613e4c565b61240f565b604051632e1a7d4d60e01b8152600481018390527f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031690632e1a7d4d906024015f604051808303815f87803b158015611765575f80fd5b505af1158015611777573d5f803e3d5ffd5b505050506108f9848361253b565b80428110156117a65760405162461bcd60e51b81526004016104f890613cae565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031685855f8181106117e2576117e2613d0c565b90506020020160208101906117f79190613d20565b6001600160a01b03161461181d5760405162461bcd60e51b81526004016104f890613d42565b5f3490507f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663d0e30db0826040518263ffffffff1660e01b81526004015f604051808303818588803b15801561187a575f80fd5b505af115801561188c573d5f803e3d5ffd5b50505050507f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663a9059cbb6118f67f000000000000000000000000000000000000000000000000000000000000000089895f818110610e6a57610e6a613d0c565b6040516001600160e01b031960e084901b1681526001600160a01b039091166004820152602481018490526044016020604051808303815f875af1158015611940573d5f803e3d5ffd5b505050506040513d601f19601f820116820180604052508101906119649190613e63565b6119705761197061378b565b5f868661197e600182613cf9565b81811061198d5761198d613d0c565b90506020020160208101906119a29190613d20565b6040516370a0823160e01b81526001600160a01b03878116600483015291909116906370a0823190602401602060405180830381865afa1580156119e8573d5f803e3d5ffd5b505050506040513d601f19601f82011682018060405250810190611a0c9190613e4c565b9050611a4b8787808060200260200160405190810160405280939291908181526020018383602002808284375f92019190915250899250612e90915050565b8761101a828989611a5d600182613cf9565b818110611a6c57611a6c613d0c565b9050602002016020810190611a819190613d20565b6040516370a0823160e01b81526001600160a01b038a8116600483015291909116906370a0823190602401610fd5565b5f808242811015611ad45760405162461bcd60e51b81526004016104f890613cae565b5f611b007f00000000000000000000000000000000000000000000000000000000000000008c8c612876565b6040516323b872dd60e01b81523360048201526001600160a01b03821660248201819052604482018c90529192506323b872dd906064016020604051808303815f875af1158015611b53573d5f803e3d5ffd5b505050506040513d601f19601f82011682018060405250810190611b779190613e63565b5060405163226bf2d160e21b81526001600160a01b0387811660048301525f9182918416906389afcb449060240160408051808303815f875af1158015611bc0573d5f803e3d5ffd5b505050506040513d601f19601f82011682018060405250810190611be49190613e7e565b915091505f611bf38e8e6132dc565b509050806001600160a01b03168e6001600160a01b031614611c16578183611c19565b82825b90975095508a871015611c3e5760405162461bcd60e51b81526004016104f890613ea0565b89861015611c5e5760405162461bcd60e51b81526004016104f890613ee6565b505050505097509795505050505050565b60606109317f000000000000000000000000000000000000000000000000000000000000000084846126ee565b5f805f611cea7f00000000000000000000000000000000000000000000000000000000000000008e7f0000000000000000000000000000000000000000000000000000000000000000612876565b90505f87611cf8578c611cfb565b5f195b60405163d505accf60e01b81529091506001600160a01b0383169063d505accf90611d36903390309086908f908e908e908e90600401613dc4565b5f604051808303815f87803b158015611d4d575f80fd5b505af1158015611d5f573d5f803e3d5ffd5b50505050611d718e8e8e8e8e8e6104d5565b909f909e509c50505050505050505050505050565b5f805f8342811015611daa5760405162461bcd60e51b81526004016104f890613cae565b611db88c8c8c8c8c8c6133d2565b90945092505f611de97f00000000000000000000000000000000000000000000000000000000000000008e8e612876565b9050611df78d33838861294d565b611e038c33838761294d565b6040516335313c2160e11b81526001600160a01b038881166004830152821690636a627842906024016020604051808303815f875af1158015611e48573d5f803e3d5ffd5b505050506040513d601f19601f82011682018060405250810190611e6c9190613e4c565b92505050985098509895505050505050565b5f805f8342811015611ea25760405162461bcd60e51b81526004016104f890613cae565b611ed08a7f00000000000000000000000000000000000000000000000000000000000000008b348c8c6133d2565b90945092505f611f217f00000000000000000000000000000000000000000000000000000000000000008c7f0000000000000000000000000000000000000000000000000000000000000000612876565b9050611f2f8b33838861294d565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663d0e30db0856040518263ffffffff1660e01b81526004015f604051808303818588803b158015611f88575f80fd5b505af1158015611f9a573d5f803e3d5ffd5b505060405163a9059cbb60e01b81526001600160a01b038581166004830152602482018990527f000000000000000000000000000000000000000000000000000000000000000016935063a9059cbb925060440190506020604051808303815f875af115801561200c573d5f803e3d5ffd5b505050506040513d601f19601f820116820180604052508101906120309190613e63565b61203c5761203c61378b565b6040516335313c2160e11b81526001600160a01b038881166004830152821690636a627842906024016020604051808303815f875af1158015612081573d5f803e3d5ffd5b505050506040513d601f19601f820116820180604052508101906120a59190613e4c565b9250833411156120c2576120c2336120bd8634613cf9565b61253b565b505096509650969350505050565b606081428110156120f35760405162461bcd60e51b81526004016104f890613cae565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031686865f81811061212f5761212f613d0c565b90506020020160208101906121449190613d20565b6001600160a01b03161461216a5760405162461bcd60e51b81526004016104f890613d42565b6121c77f0000000000000000000000000000000000000000000000000000000000000000888888808060200260200160405190810160405280939291908181526020018383602002808284375f92019190915250612c8092505050565b915034825f815181106121dc576121dc613d0c565b602002602001015111156122025760405162461bcd60e51b81526004016104f890613e05565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663d0e30db0835f8151811061224357612243613d0c565b60200260200101516040518263ffffffff1660e01b81526004015f604051808303818588803b158015612274575f80fd5b505af1158015612286573d5f803e3d5ffd5b50505050507f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663a9059cbb6122f07f000000000000000000000000000000000000000000000000000000000000000089895f818110610e6a57610e6a613d0c565b845f8151811061230257612302613d0c565b60200260200101516040518363ffffffff1660e01b815260040161233b9291906001600160a01b03929092168252602082015260400190565b6020604051808303815f875af1158015612357573d5f803e3d5ffd5b505050506040513d601f19601f8201168201806040525081019061237b9190613e63565b6123875761238761378b565b6123c5828787808060200260200160405190810160405280939291908181526020018383602002808284375f92019190915250899250612a86915050565b815f815181106123d7576123d7613d0c565b60200260200101513411156115615761156133835f815181106123fc576123fc613d0c565b6020026020010151346120bd9190613cf9565b604080516001600160a01b038481166024830152604480830185905283518084039091018152606490920183526020820180516001600160e01b031663a9059cbb60e01b17905291515f9283929087169161246a9190613f4e565b5f604051808303815f865af19150503d805f81146124a3576040519150601f19603f3d011682016040523d82523d5f602084013e6124a8565b606091505b50915091508180156124d25750805115806124d25750808060200190518101906124d29190613e63565b6125345760405162461bcd60e51b815260206004820152602d60248201527f5472616e7366657248656c7065723a3a736166655472616e736665723a20747260448201526c185b9cd9995c8819985a5b1959609a1b60648201526084016104f8565b5050505050565b604080515f808252602082019092526001600160a01b0384169083906040516125649190613f4e565b5f6040518083038185875af1925050503d805f811461259e576040519150601f19603f3d011682016040523d82523d5f602084013e6125a3565b606091505b50509050806126115760405162461bcd60e51b815260206004820152603460248201527f5472616e7366657248656c7065723a3a736166655472616e736665724554483a60448201527308115512081d1c985b9cd9995c8819985a5b195960621b60648201526084016104f8565b505050565b5f80841161267a5760405162461bcd60e51b815260206004820152602b60248201527f556e697377617056324c6962726172793a20494e53554646494349454e545f4960448201526a1394155517d05353d5539560aa1b60648201526084016104f8565b5f8311801561268857505f82115b6126a45760405162461bcd60e51b81526004016104f890613f69565b5f6126b1856103e56135ec565b90505f6126be82856135ec565b90505f6126d7836126d1886103e86135ec565b90613652565b90506126e38183613fb1565b979650505050505050565b60606002825110156127425760405162461bcd60e51b815260206004820152601e60248201527f556e697377617056324c6962726172793a20494e56414c49445f50415448000060448201526064016104f8565b815167ffffffffffffffff81111561275c5761275c613938565b604051908082528060200260200182016040528015612785578160200160208202803683370190505b50905082815f8151811061279b5761279b613d0c565b6020026020010181815250505f5b600183516127b79190613cf9565b81101561286e575f80612809878685815181106127d6576127d6613d0c565b6020026020010151878660016127ec9190613fd0565b815181106127fc576127fc613d0c565b60200260200101516136a6565b9150915061283184848151811061282257612822613d0c565b60200260200101518383612616565b8461283d856001613fd0565b8151811061284d5761284d613d0c565b6020026020010181815250505050808061286690613fe3565b9150506127a9565b509392505050565b5f805f61288385856132dc565b6040516bffffffffffffffffffffffff19606084811b8216602084015283901b166034820152919350915086906048016040516020818303038152906040528051906020012060405160200161292b9291906001600160f81b0319815260609290921b6bffffffffffffffffffffffff1916600183015260158201527f96e8ac4277198ff8b6f785478aa9a39f403cb768dd02cbee326c3e7da348845f603582015260550190565b60408051601f1981840301815291905280516020909101209695505050505050565b604080516001600160a01b0385811660248301528481166044830152606480830185905283518084039091018152608490920183526020820180516001600160e01b03166323b872dd60e01b17905291515f928392908816916129b09190613f4e565b5f604051808303815f865af19150503d805f81146129e9576040519150601f19603f3d011682016040523d82523d5f602084013e6129ee565b606091505b5091509150818015612a18575080511580612a18575080806020019051810190612a189190613e63565b612a7e5760405162461bcd60e51b815260206004820152603160248201527f5472616e7366657248656c7065723a3a7472616e7366657246726f6d3a207472604482015270185b9cd9995c919c9bdb4819985a5b1959607a1b60648201526084016104f8565b505050505050565b5f5b60018351612a969190613cf9565b811015612c7a575f80848381518110612ab157612ab1613d0c565b602002602001015185846001612ac79190613fd0565b81518110612ad757612ad7613d0c565b6020026020010151915091505f612aee83836132dc565b5090505f87612afe866001613fd0565b81518110612b0e57612b0e613d0c565b602002602001015190505f80836001600160a01b0316866001600160a01b031614612b3a57825f612b3d565b5f835b915091505f60028a51612b509190613cf9565b8810612b5c5788612baa565b612baa7f0000000000000000000000000000000000000000000000000000000000000000878c612b8d8c6002613fd0565b81518110612b9d57612b9d613d0c565b6020026020010151612876565b9050612bd77f00000000000000000000000000000000000000000000000000000000000000008888612876565b6001600160a01b031663022c0d9f8484845f6040519080825280601f01601f191660200182016040528015612c13576020820181803683370190505b506040518563ffffffff1660e01b8152600401612c339493929190614026565b5f604051808303815f87803b158015612c4a575f80fd5b505af1158015612c5c573d5f803e3d5ffd5b50505050505050505050508080612c7290613fe3565b915050612a88565b50505050565b6060600282511015612cd45760405162461bcd60e51b815260206004820152601e60248201527f556e697377617056324c6962726172793a20494e56414c49445f50415448000060448201526064016104f8565b815167ffffffffffffffff811115612cee57612cee613938565b604051908082528060200260200182016040528015612d17578160200160208202803683370190505b509050828160018351612d2a9190613cf9565b81518110612d3a57612d3a613d0c565b6020026020010181815250505f60018351612d559190613cf9565b90505b801561286e575f80612d9a8786612d70600187613cf9565b81518110612d8057612d80613d0c565b60200260200101518786815181106127fc576127fc613d0c565b91509150612dc2848481518110612db357612db3613d0c565b6020026020010151838361316b565b84612dce600186613cf9565b81518110612dde57612dde613d0c565b60200260200101818152505050508080612df790614052565b915050612d58565b612e4281604051602401612e139190614067565b60408051601f198184030181529190526020810180516001600160e01b031663104c13eb60e21b17905261376b565b50565b6040516024810183905260448101829052612e8c9060640160408051601f198184030181529190526020810180516001600160e01b0316637b3338ad60e11b17905261376b565b5050565b5f5b60018351612ea09190613cf9565b811015612611575f80848381518110612ebb57612ebb613d0c565b602002602001015185846001612ed19190613fd0565b81518110612ee157612ee1613d0c565b6020026020010151915091505f612ef883836132dc565b5090505f612f277f00000000000000000000000000000000000000000000000000000000000000008585612876565b90505f805f80846001600160a01b0316630902f1ac6040518163ffffffff1660e01b8152600401606060405180830381865afa158015612f69573d5f803e3d5ffd5b505050506040513d601f19601f82011682018060405250810190612f8d919061408f565b506001600160701b031691506001600160701b031691505f80876001600160a01b03168a6001600160a01b031614612fc6578284612fc9565b83835b6040516370a0823160e01b81526001600160a01b038a81166004830152929450909250613004918491908d16906370a0823190602401610fd5565b9550613011868383612616565b9450505050505f80856001600160a01b0316886001600160a01b03161461303957825f61303c565b5f835b915091505f60028c5161304f9190613cf9565b8a1061305b578a61308c565b61308c7f0000000000000000000000000000000000000000000000000000000000000000898e612b8d8e6002613fd0565b604080515f8152602081019182905263022c0d9f60e01b9091529091506001600160a01b0387169063022c0d9f906130cd9086908690869060248101614026565b5f604051808303815f87803b1580156130e4575f80fd5b505af11580156130f6573d5f803e3d5ffd5b50505050505050505050505050808061310e90613fe3565b915050612e92565b5f826131228382613cf9565b91508111156109345760405162461bcd60e51b815260206004820152601560248201527464732d6d6174682d7375622d756e646572666c6f7760581b60448201526064016104f8565b5f8084116131d05760405162461bcd60e51b815260206004820152602c60248201527f556e697377617056324c6962726172793a20494e53554646494349454e545f4f60448201526b155514155517d05353d5539560a21b60648201526084016104f8565b5f831180156131de57505f82115b6131fa5760405162461bcd60e51b81526004016104f890613f69565b5f6132116103e861320b86886135ec565b906135ec565b90505f6132246103e561320b8689613116565b905061323560016126d18385613fb1565b9695505050505050565b5f80841161329d5760405162461bcd60e51b815260206004820152602560248201527f556e697377617056324c6962726172793a20494e53554646494349454e545f416044820152641353d5539560da1b60648201526084016104f8565b5f831180156132ab57505f82115b6132c75760405162461bcd60e51b81526004016104f890613f69565b826132d285846135ec565b6105d79190613fb1565b5f80826001600160a01b0316846001600160a01b03160361334d5760405162461bcd60e51b815260206004820152602560248201527f556e697377617056324c6962726172793a204944454e544943414c5f41444452604482015264455353455360d81b60648201526084016104f8565b826001600160a01b0316846001600160a01b03161061336d578284613370565b83835b90925090506001600160a01b0382166133cb5760405162461bcd60e51b815260206004820152601e60248201527f556e697377617056324c6962726172793a205a45524f5f41444452455353000060448201526064016104f8565b9250929050565b60405163e6a4390560e01b81526001600160a01b03878116600483015286811660248301525f91829182917f00000000000000000000000000000000000000000000000000000000000000009091169063e6a4390590604401602060405180830381865afa158015613446573d5f803e3d5ffd5b505050506040513d601f19601f8201168201806040525081019061346a91906140db565b6001600160a01b03160361350b576040516364e329cb60e11b81526001600160a01b03898116600483015288811660248301527f0000000000000000000000000000000000000000000000000000000000000000169063c9c65396906044016020604051808303815f875af11580156134e5573d5f803e3d5ffd5b505050506040513d601f19601f8201168201806040525081019061350991906140db565b505b5f806135387f00000000000000000000000000000000000000000000000000000000000000008b8b6136a6565b91509150815f148015613549575080155b15613559578793508692506135df565b5f61356589848461323f565b9050878111613599578581101561358e5760405162461bcd60e51b81526004016104f890613ee6565b8894509250826135dd565b5f6135a589848661323f565b9050898111156135b7576135b761378b565b878110156135d75760405162461bcd60e51b81526004016104f890613ea0565b94508793505b505b5050965096945050505050565b5f81158061360f5750828261360181836140f6565b925061360d9083613fb1565b145b6109345760405162461bcd60e51b815260206004820152601460248201527364732d6d6174682d6d756c2d6f766572666c6f7760601b60448201526064016104f8565b5f8261365e8382613fd0565b91508110156109345760405162461bcd60e51b815260206004820152601460248201527364732d6d6174682d6164642d6f766572666c6f7760601b60448201526064016104f8565b5f805f6136b385856132dc565b5090505f806136c3888888612876565b6001600160a01b0316630902f1ac6040518163ffffffff1660e01b8152600401606060405180830381865afa1580156136fe573d5f803e3d5ffd5b505050506040513d601f19601f82011682018060405250810190613722919061408f565b506001600160701b031691506001600160701b03169150826001600160a01b0316876001600160a01b03161461375957808261375c565b81815b90999098509650505050505050565b80516a636f6e736f6c652e6c6f67602083015f808483855afa5050505050565b634e487b7160e01b5f52600160045260245ffd5b6001600160a01b0381168114612e42575f80fd5b80356137be8161379f565b919050565b5f805f805f8060c087890312156137d8575f80fd5b86356137e38161379f565b955060208701359450604087013593506060870135925060808701356138088161379f565b8092505060a087013590509295509295509295565b5f805f6060848603121561382f575f80fd5b505081359360208301359350604090920135919050565b5f8083601f840112613856575f80fd5b50813567ffffffffffffffff81111561386d575f80fd5b6020830191508360208260051b85010111156133cb575f80fd5b5f805f805f8060a0878903121561389c575f80fd5b8635955060208701359450604087013567ffffffffffffffff8111156138c0575f80fd5b6138cc89828a01613846565b90955093505060608701356138e08161379f565b80925050608087013590509295509295509295565b602080825282518282018190525f9190848201906040850190845b8181101561392c57835183529284019291840191600101613910565b50909695505050505050565b634e487b7160e01b5f52604160045260245ffd5b5f806040838503121561395d575f80fd5b8235915060208084013567ffffffffffffffff8082111561397c575f80fd5b818601915086601f83011261398f575f80fd5b8135818111156139a1576139a1613938565b8060051b604051601f19603f830116810181811085821117156139c6576139c6613938565b6040529182528482019250838101850191898311156139e3575f80fd5b938501935b82851015613a08576139f9856137b3565b845293850193928501926139e8565b8096505050505050509250929050565b8015158114612e42575f80fd5b803560ff811681146137be575f80fd5b5f805f805f805f805f805f6101608c8e031215613a50575f80fd5b8b35613a5b8161379f565b9a5060208c0135613a6b8161379f565b995060408c0135985060608c0135975060808c0135965060a08c0135613a908161379f565b955060c08c0135945060e08c0135613aa781613a18565b9350613ab66101008d01613a25565b92506101208c013591506101408c013590509295989b509295989b9093969950565b5f805f805f805f805f806101408b8d031215613af2575f80fd5b8a35613afd8161379f565b995060208b0135985060408b0135975060608b0135965060808b0135613b228161379f565b955060a08b0135945060c08b0135613b3981613a18565b9350613b4760e08c01613a25565b92506101008b013591506101208b013590509295989b9194979a5092959850565b5f805f805f60808688031215613b7c575f80fd5b85359450602086013567ffffffffffffffff811115613b99575f80fd5b613ba588828901613846565b9095509350506040860135613bb98161379f565b949793965091946060013592915050565b5f805f805f805f60e0888a031215613be0575f80fd5b8735613beb8161379f565b96506020880135613bfb8161379f565b955060408801359450606088013593506080880135925060a0880135613c208161379f565b8092505060c0880135905092959891949750929550565b5f805f805f805f80610100898b031215613c4f575f80fd5b8835613c5a8161379f565b97506020890135613c6a8161379f565b965060408901359550606089013594506080890135935060a0890135925060c0890135613c968161379f565b8092505060e089013590509295985092959890939650565b60208082526018908201527f556e69737761705632526f757465723a20455850495245440000000000000000604082015260600190565b634e487b7160e01b5f52601160045260245ffd5b8181038181111561093457610934613ce5565b634e487b7160e01b5f52603260045260245ffd5b5f60208284031215613d30575f80fd5b8135613d3b8161379f565b9392505050565b6020808252601d908201527f556e69737761705632526f757465723a20494e56414c49445f50415448000000604082015260600190565b6020808252602b908201527f556e69737761705632526f757465723a20494e53554646494349454e545f4f5560408201526a1514155517d05353d5539560aa1b606082015260800190565b6001600160a01b0397881681529590961660208601526040850193909352606084019190915260ff16608083015260a082015260c081019190915260e00190565b60208082526027908201527f556e69737761705632526f757465723a204558434553534956455f494e50555460408201526617d05353d5539560ca1b606082015260800190565b5f60208284031215613e5c575f80fd5b5051919050565b5f60208284031215613e73575f80fd5b8151613d3b81613a18565b5f8060408385031215613e8f575f80fd5b505080516020909101519092909150565b60208082526026908201527f556e69737761705632526f757465723a20494e53554646494349454e545f415f604082015265105353d5539560d21b606082015260800190565b60208082526026908201527f556e69737761705632526f757465723a20494e53554646494349454e545f425f604082015265105353d5539560d21b606082015260800190565b5f5b83811015613f46578181015183820152602001613f2e565b50505f910152565b5f8251613f5f818460208701613f2c565b9190910192915050565b60208082526028908201527f556e697377617056324c6962726172793a20494e53554646494349454e545f4c604082015267495155494449545960c01b606082015260800190565b5f82613fcb57634e487b7160e01b5f52601260045260245ffd5b500490565b8082018082111561093457610934613ce5565b5f60018201613ff457613ff4613ce5565b5060010190565b5f8151808452614012816020860160208601613f2c565b601f01601f19169290920160200192915050565b84815283602082015260018060a01b0383166040820152608060608201525f6132356080830184613ffb565b5f8161406057614060613ce5565b505f190190565b602081525f6109316020830184613ffb565b80516001600160701b03811681146137be575f80fd5b5f805f606084860312156140a1575f80fd5b6140aa84614079565b92506140b860208501614079565b9150604084015163ffffffff811681146140d0575f80fd5b809150509250925092565b5f602082840312156140eb575f80fd5b8151613d3b8161379f565b808202811582820484141761093457610934613ce556fea2646970667358221220c9464b1a767a114d5d89c0138db034b87b3a5725f7ac873520273b29bb0b0d3764736f6c63430008140033"

    @overload
    @classmethod
    def deploy(cls, _factory: Union[Account, Address], _WETH: Union[Account, Address], *, from_: Optional[Union[Account, Address, str]] = None, value: Union[int, str] = 0, gas_limit: Optional[Union[int, Literal["max"], Literal["auto"]]] = None, return_tx: Literal[False] = False, request_type: Literal["call"], chain: Optional[Chain] = None, gas_price: Optional[Union[int, str]] = None, max_fee_per_gas: Optional[Union[int, str]] = None, max_priority_fee_per_gas: Optional[Union[int, str]] = None, access_list: Optional[Union[Dict[Union[Account, Address, str], List[int]], Literal["auto"]]] = None, type: Optional[int] = None, block: Optional[Union[int, Literal["latest"], Literal["pending"], Literal["earliest"], Literal["safe"], Literal["finalized"]]] = None, confirmations: Optional[int] = None) -> bytearray:
        """
        [Source code](file:///Users/dteiml/p/hacker-dom/woke-uniswap-v2/src/UniswapV2Router02.sol#24)

        Args:
            _factory: address
            _WETH: address
        """
        ...

    @overload
    @classmethod
    def deploy(cls, _factory: Union[Account, Address], _WETH: Union[Account, Address], *, from_: Optional[Union[Account, Address, str]] = None, value: Union[int, str] = 0, gas_limit: Optional[Union[int, Literal["max"], Literal["auto"]]] = None, return_tx: Literal[False] = False, request_type: Literal["tx"] = "tx", chain: Optional[Chain] = None, gas_price: Optional[Union[int, str]] = None, max_fee_per_gas: Optional[Union[int, str]] = None, max_priority_fee_per_gas: Optional[Union[int, str]] = None, access_list: Optional[Union[Dict[Union[Account, Address, str], List[int]], Literal["auto"]]] = None, type: Optional[int] = None, block: Optional[Union[int, Literal["latest"], Literal["pending"], Literal["earliest"], Literal["safe"], Literal["finalized"]]] = None, confirmations: Optional[int] = None) -> UniswapV2Router02:
        """
        [Source code](file:///Users/dteiml/p/hacker-dom/woke-uniswap-v2/src/UniswapV2Router02.sol#24)

        Args:
            _factory: address
            _WETH: address
        """
        ...

    @overload
    @classmethod
    def deploy(cls, _factory: Union[Account, Address], _WETH: Union[Account, Address], *, from_: Optional[Union[Account, Address, str]] = None, value: Union[int, str] = 0, gas_limit: Optional[Union[int, Literal["max"], Literal["auto"]]] = None, return_tx: Literal[False] = False, request_type: Literal["estimate"], chain: Optional[Chain] = None, gas_price: Optional[Union[int, str]] = None, max_fee_per_gas: Optional[Union[int, str]] = None, max_priority_fee_per_gas: Optional[Union[int, str]] = None, access_list: Optional[Union[Dict[Union[Account, Address, str], List[int]], Literal["auto"]]] = None, type: Optional[int] = None, block: Optional[Union[int, Literal["latest"], Literal["pending"], Literal["earliest"], Literal["safe"], Literal["finalized"]]] = None, confirmations: Optional[int] = None) -> int:
        """
        [Source code](file:///Users/dteiml/p/hacker-dom/woke-uniswap-v2/src/UniswapV2Router02.sol#24)

        Args:
            _factory: address
            _WETH: address
        """
        ...

    @overload
    @classmethod
    def deploy(cls, _factory: Union[Account, Address], _WETH: Union[Account, Address], *, from_: Optional[Union[Account, Address, str]] = None, value: Union[int, str] = 0, gas_limit: Optional[Union[int, Literal["max"], Literal["auto"]]] = None, return_tx: Literal[False] = False, request_type: Literal["access_list"], chain: Optional[Chain] = None, gas_price: Optional[Union[int, str]] = None, max_fee_per_gas: Optional[Union[int, str]] = None, max_priority_fee_per_gas: Optional[Union[int, str]] = None, access_list: Optional[Union[Dict[Union[Account, Address, str], List[int]], Literal["auto"]]] = None, type: Optional[int] = None, block: Optional[Union[int, Literal["latest"], Literal["pending"], Literal["earliest"], Literal["safe"], Literal["finalized"]]] = None, confirmations: Optional[int] = None) -> Tuple[Dict[Address, List[int]], int]:
        """
        [Source code](file:///Users/dteiml/p/hacker-dom/woke-uniswap-v2/src/UniswapV2Router02.sol#24)

        Args:
            _factory: address
            _WETH: address
        """
        ...

    @overload
    @classmethod
    def deploy(cls, _factory: Union[Account, Address], _WETH: Union[Account, Address], *, from_: Optional[Union[Account, Address, str]] = None, value: Union[int, str] = 0, gas_limit: Optional[Union[int, Literal["max"], Literal["auto"]]] = None, return_tx: Literal[True], request_type: Literal["tx"] = "tx", chain: Optional[Chain] = None, gas_price: Optional[Union[int, str]] = None, max_fee_per_gas: Optional[Union[int, str]] = None, max_priority_fee_per_gas: Optional[Union[int, str]] = None, access_list: Optional[Union[Dict[Union[Account, Address, str], List[int]], Literal["auto"]]] = None, type: Optional[int] = None, block: Optional[Union[int, Literal["latest"], Literal["pending"], Literal["earliest"], Literal["safe"], Literal["finalized"]]] = None, confirmations: Optional[int] = None) -> TransactionAbc[UniswapV2Router02]:
        """
        [Source code](file:///Users/dteiml/p/hacker-dom/woke-uniswap-v2/src/UniswapV2Router02.sol#24)

        Args:
            _factory: address
            _WETH: address
        """
        ...

    @classmethod
    def deploy(cls, _factory: Union[Account, Address], _WETH: Union[Account, Address], *, from_: Optional[Union[Account, Address, str]] = None, value: Union[int, str] = 0, gas_limit: Optional[Union[int, Literal["max"], Literal["auto"]]] = None, return_tx: bool = False, request_type: RequestType = "tx", chain: Optional[Chain] = None, gas_price: Optional[Union[int, str]] = None, max_fee_per_gas: Optional[Union[int, str]] = None, max_priority_fee_per_gas: Optional[Union[int, str]] = None, access_list: Optional[Union[Dict[Union[Account, Address, str], List[int]], Literal["auto"]]] = None, type: Optional[int] = None, block: Optional[Union[int, Literal["latest"], Literal["pending"], Literal["earliest"], Literal["safe"], Literal["finalized"]]] = None, confirmations: Optional[int] = None) -> Union[bytearray, UniswapV2Router02, int, Tuple[Dict[Address, List[int]], int], TransactionAbc[UniswapV2Router02]]:
        """
        [Source code](file:///Users/dteiml/p/hacker-dom/woke-uniswap-v2/src/UniswapV2Router02.sol#24)

        Args:
            _factory: address
            _WETH: address
        """
        return cls._deploy(request_type, [_factory, _WETH], return_tx, UniswapV2Router02, from_, value, gas_limit, {}, chain, gas_price, max_fee_per_gas, max_priority_fee_per_gas, access_list, type, block, confirmations)

    @classmethod
    def get_creation_code(cls) -> bytes:
        return cls._get_creation_code({})

    @overload
    def factory(self, *, from_: Optional[Union[Account, Address, str]] = None, to: Optional[Union[Account, Address, str]] = None, value: Union[int, str] = 0, gas_limit: Optional[Union[int, Literal["max"], Literal["auto"]]] = None, request_type: Literal["call"] = "call", gas_price: Optional[Union[int, str]] = None, max_fee_per_gas: Optional[Union[int, str]] = None, max_priority_fee_per_gas: Optional[Union[int, str]] = None, access_list: Optional[Union[Dict[Union[Account, Address, str], List[int]], Literal["auto"]]] = None, type: Optional[int] = None, block: Optional[Union[int, Literal["latest"], Literal["pending"], Literal["earliest"], Literal["safe"], Literal["finalized"]]] = None, confirmations: Optional[int] = None) -> Address:
        """
        [Source code](file:///Users/dteiml/p/hacker-dom/woke-uniswap-v2/src/UniswapV2Router02.sol#16)

        Returns:
            address
        """
        ...

    @overload
    def factory(self, *, from_: Optional[Union[Account, Address, str]] = None, to: Optional[Union[Account, Address, str]] = None, value: Union[int, str] = 0, gas_limit: Optional[Union[int, Literal["max"], Literal["auto"]]] = None, request_type: Literal["estimate"], gas_price: Optional[Union[int, str]] = None, max_fee_per_gas: Optional[Union[int, str]] = None, max_priority_fee_per_gas: Optional[Union[int, str]] = None, access_list: Optional[Union[Dict[Union[Account, Address, str], List[int]], Literal["auto"]]] = None, type: Optional[int] = None, block: Optional[Union[int, Literal["latest"], Literal["pending"], Literal["earliest"], Literal["safe"], Literal["finalized"]]] = None, confirmations: Optional[int] = None) -> int:
        """
        [Source code](file:///Users/dteiml/p/hacker-dom/woke-uniswap-v2/src/UniswapV2Router02.sol#16)

        Returns:
            address
        """
        ...

    @overload
    def factory(self, *, from_: Optional[Union[Account, Address, str]] = None, to: Optional[Union[Account, Address, str]] = None, value: Union[int, str] = 0, gas_limit: Optional[Union[int, Literal["max"], Literal["auto"]]] = None, request_type: Literal["access_list"], gas_price: Optional[Union[int, str]] = None, max_fee_per_gas: Optional[Union[int, str]] = None, max_priority_fee_per_gas: Optional[Union[int, str]] = None, access_list: Optional[Union[Dict[Union[Account, Address, str], List[int]], Literal["auto"]]] = None, type: Optional[int] = None, block: Optional[Union[int, Literal["latest"], Literal["pending"], Literal["earliest"], Literal["safe"], Literal["finalized"]]] = None, confirmations: Optional[int] = None) -> Tuple[Dict[Address, List[int]], int]:
        """
        [Source code](file:///Users/dteiml/p/hacker-dom/woke-uniswap-v2/src/UniswapV2Router02.sol#16)

        Returns:
            address
        """
        ...

    @overload
    def factory(self, *, from_: Optional[Union[Account, Address, str]] = None, to: Optional[Union[Account, Address, str]] = None, value: Union[int, str] = 0, gas_limit: Optional[Union[int, Literal["max"], Literal["auto"]]] = None, request_type: Literal["tx"], gas_price: Optional[Union[int, str]] = None, max_fee_per_gas: Optional[Union[int, str]] = None, max_priority_fee_per_gas: Optional[Union[int, str]] = None, access_list: Optional[Union[Dict[Union[Account, Address, str], List[int]], Literal["auto"]]] = None, type: Optional[int] = None, block: Optional[Union[int, Literal["latest"], Literal["pending"], Literal["earliest"], Literal["safe"], Literal["finalized"]]] = None, confirmations: Optional[int] = None) -> TransactionAbc[Address]:
        """
        [Source code](file:///Users/dteiml/p/hacker-dom/woke-uniswap-v2/src/UniswapV2Router02.sol#16)

        Returns:
            address
        """
        ...

    def factory(self, *, from_: Optional[Union[Account, Address, str]] = None, to: Optional[Union[Account, Address, str]] = None, value: Union[int, str] = 0, gas_limit: Optional[Union[int, Literal["max"], Literal["auto"]]] = None, request_type: RequestType = 'call', gas_price: Optional[Union[int, str]] = None, max_fee_per_gas: Optional[Union[int, str]] = None, max_priority_fee_per_gas: Optional[Union[int, str]] = None, access_list: Optional[Union[Dict[Union[Account, Address, str], List[int]], Literal["auto"]]] = None, type: Optional[int] = None, block: Optional[Union[int, Literal["latest"], Literal["pending"], Literal["earliest"], Literal["safe"], Literal["finalized"]]] = None, confirmations: Optional[int] = None) -> Union[Address, TransactionAbc[Address], int, Tuple[Dict[Address, List[int]], int]]:
        """
        [Source code](file:///Users/dteiml/p/hacker-dom/woke-uniswap-v2/src/UniswapV2Router02.sol#16)

        Returns:
            address
        """
        return self._execute(self.chain, request_type, "c45a0155", [], True if request_type == "tx" else False, Address, from_, to if to is not None else str(self.address), value, gas_limit, gas_price, max_fee_per_gas, max_priority_fee_per_gas, access_list, type, block, confirmations)

    @overload
    def WETH(self, *, from_: Optional[Union[Account, Address, str]] = None, to: Optional[Union[Account, Address, str]] = None, value: Union[int, str] = 0, gas_limit: Optional[Union[int, Literal["max"], Literal["auto"]]] = None, request_type: Literal["call"] = "call", gas_price: Optional[Union[int, str]] = None, max_fee_per_gas: Optional[Union[int, str]] = None, max_priority_fee_per_gas: Optional[Union[int, str]] = None, access_list: Optional[Union[Dict[Union[Account, Address, str], List[int]], Literal["auto"]]] = None, type: Optional[int] = None, block: Optional[Union[int, Literal["latest"], Literal["pending"], Literal["earliest"], Literal["safe"], Literal["finalized"]]] = None, confirmations: Optional[int] = None) -> Address:
        """
        [Source code](file:///Users/dteiml/p/hacker-dom/woke-uniswap-v2/src/UniswapV2Router02.sol#17)

        Returns:
            address
        """
        ...

    @overload
    def WETH(self, *, from_: Optional[Union[Account, Address, str]] = None, to: Optional[Union[Account, Address, str]] = None, value: Union[int, str] = 0, gas_limit: Optional[Union[int, Literal["max"], Literal["auto"]]] = None, request_type: Literal["estimate"], gas_price: Optional[Union[int, str]] = None, max_fee_per_gas: Optional[Union[int, str]] = None, max_priority_fee_per_gas: Optional[Union[int, str]] = None, access_list: Optional[Union[Dict[Union[Account, Address, str], List[int]], Literal["auto"]]] = None, type: Optional[int] = None, block: Optional[Union[int, Literal["latest"], Literal["pending"], Literal["earliest"], Literal["safe"], Literal["finalized"]]] = None, confirmations: Optional[int] = None) -> int:
        """
        [Source code](file:///Users/dteiml/p/hacker-dom/woke-uniswap-v2/src/UniswapV2Router02.sol#17)

        Returns:
            address
        """
        ...

    @overload
    def WETH(self, *, from_: Optional[Union[Account, Address, str]] = None, to: Optional[Union[Account, Address, str]] = None, value: Union[int, str] = 0, gas_limit: Optional[Union[int, Literal["max"], Literal["auto"]]] = None, request_type: Literal["access_list"], gas_price: Optional[Union[int, str]] = None, max_fee_per_gas: Optional[Union[int, str]] = None, max_priority_fee_per_gas: Optional[Union[int, str]] = None, access_list: Optional[Union[Dict[Union[Account, Address, str], List[int]], Literal["auto"]]] = None, type: Optional[int] = None, block: Optional[Union[int, Literal["latest"], Literal["pending"], Literal["earliest"], Literal["safe"], Literal["finalized"]]] = None, confirmations: Optional[int] = None) -> Tuple[Dict[Address, List[int]], int]:
        """
        [Source code](file:///Users/dteiml/p/hacker-dom/woke-uniswap-v2/src/UniswapV2Router02.sol#17)

        Returns:
            address
        """
        ...

    @overload
    def WETH(self, *, from_: Optional[Union[Account, Address, str]] = None, to: Optional[Union[Account, Address, str]] = None, value: Union[int, str] = 0, gas_limit: Optional[Union[int, Literal["max"], Literal["auto"]]] = None, request_type: Literal["tx"], gas_price: Optional[Union[int, str]] = None, max_fee_per_gas: Optional[Union[int, str]] = None, max_priority_fee_per_gas: Optional[Union[int, str]] = None, access_list: Optional[Union[Dict[Union[Account, Address, str], List[int]], Literal["auto"]]] = None, type: Optional[int] = None, block: Optional[Union[int, Literal["latest"], Literal["pending"], Literal["earliest"], Literal["safe"], Literal["finalized"]]] = None, confirmations: Optional[int] = None) -> TransactionAbc[Address]:
        """
        [Source code](file:///Users/dteiml/p/hacker-dom/woke-uniswap-v2/src/UniswapV2Router02.sol#17)

        Returns:
            address
        """
        ...

    def WETH(self, *, from_: Optional[Union[Account, Address, str]] = None, to: Optional[Union[Account, Address, str]] = None, value: Union[int, str] = 0, gas_limit: Optional[Union[int, Literal["max"], Literal["auto"]]] = None, request_type: RequestType = 'call', gas_price: Optional[Union[int, str]] = None, max_fee_per_gas: Optional[Union[int, str]] = None, max_priority_fee_per_gas: Optional[Union[int, str]] = None, access_list: Optional[Union[Dict[Union[Account, Address, str], List[int]], Literal["auto"]]] = None, type: Optional[int] = None, block: Optional[Union[int, Literal["latest"], Literal["pending"], Literal["earliest"], Literal["safe"], Literal["finalized"]]] = None, confirmations: Optional[int] = None) -> Union[Address, TransactionAbc[Address], int, Tuple[Dict[Address, List[int]], int]]:
        """
        [Source code](file:///Users/dteiml/p/hacker-dom/woke-uniswap-v2/src/UniswapV2Router02.sol#17)

        Returns:
            address
        """
        return self._execute(self.chain, request_type, "ad5c4648", [], True if request_type == "tx" else False, Address, from_, to if to is not None else str(self.address), value, gas_limit, gas_price, max_fee_per_gas, max_priority_fee_per_gas, access_list, type, block, confirmations)

    @overload
    def addLiquidity(self, tokenA: Union[Account, Address], tokenB: Union[Account, Address], amountADesired: uint256, amountBDesired: uint256, amountAMin: uint256, amountBMin: uint256, to_: Union[Account, Address], deadline: uint256, *, from_: Optional[Union[Account, Address, str]] = None, to: Optional[Union[Account, Address, str]] = None, value: Union[int, str] = 0, gas_limit: Optional[Union[int, Literal["max"], Literal["auto"]]] = None, request_type: Literal["call"], gas_price: Optional[Union[int, str]] = None, max_fee_per_gas: Optional[Union[int, str]] = None, max_priority_fee_per_gas: Optional[Union[int, str]] = None, access_list: Optional[Union[Dict[Union[Account, Address, str], List[int]], Literal["auto"]]] = None, type: Optional[int] = None, block: Optional[Union[int, Literal["latest"], Literal["pending"], Literal["earliest"], Literal["safe"], Literal["finalized"]]] = None, confirmations: Optional[int] = None) -> Tuple[uint256, uint256, uint256]:
        """
        [Source code](file:///Users/dteiml/p/hacker-dom/woke-uniswap-v2/src/UniswapV2Router02.sol#62)

        Args:
            tokenA: address
            tokenB: address
            amountADesired: uint256
            amountBDesired: uint256
            amountAMin: uint256
            amountBMin: uint256
            to_: address
            deadline: uint256
        Returns:
            (uint256, uint256, uint256)
        """
        ...

    @overload
    def addLiquidity(self, tokenA: Union[Account, Address], tokenB: Union[Account, Address], amountADesired: uint256, amountBDesired: uint256, amountAMin: uint256, amountBMin: uint256, to_: Union[Account, Address], deadline: uint256, *, from_: Optional[Union[Account, Address, str]] = None, to: Optional[Union[Account, Address, str]] = None, value: Union[int, str] = 0, gas_limit: Optional[Union[int, Literal["max"], Literal["auto"]]] = None, request_type: Literal["estimate"], gas_price: Optional[Union[int, str]] = None, max_fee_per_gas: Optional[Union[int, str]] = None, max_priority_fee_per_gas: Optional[Union[int, str]] = None, access_list: Optional[Union[Dict[Union[Account, Address, str], List[int]], Literal["auto"]]] = None, type: Optional[int] = None, block: Optional[Union[int, Literal["latest"], Literal["pending"], Literal["earliest"], Literal["safe"], Literal["finalized"]]] = None, confirmations: Optional[int] = None) -> int:
        """
        [Source code](file:///Users/dteiml/p/hacker-dom/woke-uniswap-v2/src/UniswapV2Router02.sol#62)

        Args:
            tokenA: address
            tokenB: address
            amountADesired: uint256
            amountBDesired: uint256
            amountAMin: uint256
            amountBMin: uint256
            to_: address
            deadline: uint256
        Returns:
            (uint256, uint256, uint256)
        """
        ...

    @overload
    def addLiquidity(self, tokenA: Union[Account, Address], tokenB: Union[Account, Address], amountADesired: uint256, amountBDesired: uint256, amountAMin: uint256, amountBMin: uint256, to_: Union[Account, Address], deadline: uint256, *, from_: Optional[Union[Account, Address, str]] = None, to: Optional[Union[Account, Address, str]] = None, value: Union[int, str] = 0, gas_limit: Optional[Union[int, Literal["max"], Literal["auto"]]] = None, request_type: Literal["access_list"], gas_price: Optional[Union[int, str]] = None, max_fee_per_gas: Optional[Union[int, str]] = None, max_priority_fee_per_gas: Optional[Union[int, str]] = None, access_list: Optional[Union[Dict[Union[Account, Address, str], List[int]], Literal["auto"]]] = None, type: Optional[int] = None, block: Optional[Union[int, Literal["latest"], Literal["pending"], Literal["earliest"], Literal["safe"], Literal["finalized"]]] = None, confirmations: Optional[int] = None) -> Tuple[Dict[Address, List[int]], int]:
        """
        [Source code](file:///Users/dteiml/p/hacker-dom/woke-uniswap-v2/src/UniswapV2Router02.sol#62)

        Args:
            tokenA: address
            tokenB: address
            amountADesired: uint256
            amountBDesired: uint256
            amountAMin: uint256
            amountBMin: uint256
            to_: address
            deadline: uint256
        Returns:
            (uint256, uint256, uint256)
        """
        ...

    @overload
    def addLiquidity(self, tokenA: Union[Account, Address], tokenB: Union[Account, Address], amountADesired: uint256, amountBDesired: uint256, amountAMin: uint256, amountBMin: uint256, to_: Union[Account, Address], deadline: uint256, *, from_: Optional[Union[Account, Address, str]] = None, to: Optional[Union[Account, Address, str]] = None, value: Union[int, str] = 0, gas_limit: Optional[Union[int, Literal["max"], Literal["auto"]]] = None, request_type: Literal["tx"] = "tx", gas_price: Optional[Union[int, str]] = None, max_fee_per_gas: Optional[Union[int, str]] = None, max_priority_fee_per_gas: Optional[Union[int, str]] = None, access_list: Optional[Union[Dict[Union[Account, Address, str], List[int]], Literal["auto"]]] = None, type: Optional[int] = None, block: Optional[Union[int, Literal["latest"], Literal["pending"], Literal["earliest"], Literal["safe"], Literal["finalized"]]] = None, confirmations: Optional[int] = None) -> TransactionAbc[Tuple[uint256, uint256, uint256]]:
        """
        [Source code](file:///Users/dteiml/p/hacker-dom/woke-uniswap-v2/src/UniswapV2Router02.sol#62)

        Args:
            tokenA: address
            tokenB: address
            amountADesired: uint256
            amountBDesired: uint256
            amountAMin: uint256
            amountBMin: uint256
            to_: address
            deadline: uint256
        Returns:
            (uint256, uint256, uint256)
        """
        ...

    def addLiquidity(self, tokenA: Union[Account, Address], tokenB: Union[Account, Address], amountADesired: uint256, amountBDesired: uint256, amountAMin: uint256, amountBMin: uint256, to_: Union[Account, Address], deadline: uint256, *, from_: Optional[Union[Account, Address, str]] = None, to: Optional[Union[Account, Address, str]] = None, value: Union[int, str] = 0, gas_limit: Optional[Union[int, Literal["max"], Literal["auto"]]] = None, request_type: RequestType = 'tx', gas_price: Optional[Union[int, str]] = None, max_fee_per_gas: Optional[Union[int, str]] = None, max_priority_fee_per_gas: Optional[Union[int, str]] = None, access_list: Optional[Union[Dict[Union[Account, Address, str], List[int]], Literal["auto"]]] = None, type: Optional[int] = None, block: Optional[Union[int, Literal["latest"], Literal["pending"], Literal["earliest"], Literal["safe"], Literal["finalized"]]] = None, confirmations: Optional[int] = None) -> Union[Tuple[uint256, uint256, uint256], TransactionAbc[Tuple[uint256, uint256, uint256]], int, Tuple[Dict[Address, List[int]], int]]:
        """
        [Source code](file:///Users/dteiml/p/hacker-dom/woke-uniswap-v2/src/UniswapV2Router02.sol#62)

        Args:
            tokenA: address
            tokenB: address
            amountADesired: uint256
            amountBDesired: uint256
            amountAMin: uint256
            amountBMin: uint256
            to_: address
            deadline: uint256
        Returns:
            (uint256, uint256, uint256)
        """
        return self._execute(self.chain, request_type, "e8e33700", [tokenA, tokenB, amountADesired, amountBDesired, amountAMin, amountBMin, to_, deadline], True if request_type == "tx" else False, Tuple[uint256, uint256, uint256], from_, to if to is not None else str(self.address), value, gas_limit, gas_price, max_fee_per_gas, max_priority_fee_per_gas, access_list, type, block, confirmations)

    @overload
    def addLiquidityETH(self, token: Union[Account, Address], amountTokenDesired: uint256, amountTokenMin: uint256, amountETHMin: uint256, to_: Union[Account, Address], deadline: uint256, *, from_: Optional[Union[Account, Address, str]] = None, to: Optional[Union[Account, Address, str]] = None, value: Union[int, str] = 0, gas_limit: Optional[Union[int, Literal["max"], Literal["auto"]]] = None, request_type: Literal["call"], gas_price: Optional[Union[int, str]] = None, max_fee_per_gas: Optional[Union[int, str]] = None, max_priority_fee_per_gas: Optional[Union[int, str]] = None, access_list: Optional[Union[Dict[Union[Account, Address, str], List[int]], Literal["auto"]]] = None, type: Optional[int] = None, block: Optional[Union[int, Literal["latest"], Literal["pending"], Literal["earliest"], Literal["safe"], Literal["finalized"]]] = None, confirmations: Optional[int] = None) -> Tuple[uint256, uint256, uint256]:
        """
        [Source code](file:///Users/dteiml/p/hacker-dom/woke-uniswap-v2/src/UniswapV2Router02.sol#78)

        Args:
            token: address
            amountTokenDesired: uint256
            amountTokenMin: uint256
            amountETHMin: uint256
            to_: address
            deadline: uint256
        Returns:
            (uint256, uint256, uint256)
        """
        ...

    @overload
    def addLiquidityETH(self, token: Union[Account, Address], amountTokenDesired: uint256, amountTokenMin: uint256, amountETHMin: uint256, to_: Union[Account, Address], deadline: uint256, *, from_: Optional[Union[Account, Address, str]] = None, to: Optional[Union[Account, Address, str]] = None, value: Union[int, str] = 0, gas_limit: Optional[Union[int, Literal["max"], Literal["auto"]]] = None, request_type: Literal["estimate"], gas_price: Optional[Union[int, str]] = None, max_fee_per_gas: Optional[Union[int, str]] = None, max_priority_fee_per_gas: Optional[Union[int, str]] = None, access_list: Optional[Union[Dict[Union[Account, Address, str], List[int]], Literal["auto"]]] = None, type: Optional[int] = None, block: Optional[Union[int, Literal["latest"], Literal["pending"], Literal["earliest"], Literal["safe"], Literal["finalized"]]] = None, confirmations: Optional[int] = None) -> int:
        """
        [Source code](file:///Users/dteiml/p/hacker-dom/woke-uniswap-v2/src/UniswapV2Router02.sol#78)

        Args:
            token: address
            amountTokenDesired: uint256
            amountTokenMin: uint256
            amountETHMin: uint256
            to_: address
            deadline: uint256
        Returns:
            (uint256, uint256, uint256)
        """
        ...

    @overload
    def addLiquidityETH(self, token: Union[Account, Address], amountTokenDesired: uint256, amountTokenMin: uint256, amountETHMin: uint256, to_: Union[Account, Address], deadline: uint256, *, from_: Optional[Union[Account, Address, str]] = None, to: Optional[Union[Account, Address, str]] = None, value: Union[int, str] = 0, gas_limit: Optional[Union[int, Literal["max"], Literal["auto"]]] = None, request_type: Literal["access_list"], gas_price: Optional[Union[int, str]] = None, max_fee_per_gas: Optional[Union[int, str]] = None, max_priority_fee_per_gas: Optional[Union[int, str]] = None, access_list: Optional[Union[Dict[Union[Account, Address, str], List[int]], Literal["auto"]]] = None, type: Optional[int] = None, block: Optional[Union[int, Literal["latest"], Literal["pending"], Literal["earliest"], Literal["safe"], Literal["finalized"]]] = None, confirmations: Optional[int] = None) -> Tuple[Dict[Address, List[int]], int]:
        """
        [Source code](file:///Users/dteiml/p/hacker-dom/woke-uniswap-v2/src/UniswapV2Router02.sol#78)

        Args:
            token: address
            amountTokenDesired: uint256
            amountTokenMin: uint256
            amountETHMin: uint256
            to_: address
            deadline: uint256
        Returns:
            (uint256, uint256, uint256)
        """
        ...

    @overload
    def addLiquidityETH(self, token: Union[Account, Address], amountTokenDesired: uint256, amountTokenMin: uint256, amountETHMin: uint256, to_: Union[Account, Address], deadline: uint256, *, from_: Optional[Union[Account, Address, str]] = None, to: Optional[Union[Account, Address, str]] = None, value: Union[int, str] = 0, gas_limit: Optional[Union[int, Literal["max"], Literal["auto"]]] = None, request_type: Literal["tx"] = "tx", gas_price: Optional[Union[int, str]] = None, max_fee_per_gas: Optional[Union[int, str]] = None, max_priority_fee_per_gas: Optional[Union[int, str]] = None, access_list: Optional[Union[Dict[Union[Account, Address, str], List[int]], Literal["auto"]]] = None, type: Optional[int] = None, block: Optional[Union[int, Literal["latest"], Literal["pending"], Literal["earliest"], Literal["safe"], Literal["finalized"]]] = None, confirmations: Optional[int] = None) -> TransactionAbc[Tuple[uint256, uint256, uint256]]:
        """
        [Source code](file:///Users/dteiml/p/hacker-dom/woke-uniswap-v2/src/UniswapV2Router02.sol#78)

        Args:
            token: address
            amountTokenDesired: uint256
            amountTokenMin: uint256
            amountETHMin: uint256
            to_: address
            deadline: uint256
        Returns:
            (uint256, uint256, uint256)
        """
        ...

    def addLiquidityETH(self, token: Union[Account, Address], amountTokenDesired: uint256, amountTokenMin: uint256, amountETHMin: uint256, to_: Union[Account, Address], deadline: uint256, *, from_: Optional[Union[Account, Address, str]] = None, to: Optional[Union[Account, Address, str]] = None, value: Union[int, str] = 0, gas_limit: Optional[Union[int, Literal["max"], Literal["auto"]]] = None, request_type: RequestType = 'tx', gas_price: Optional[Union[int, str]] = None, max_fee_per_gas: Optional[Union[int, str]] = None, max_priority_fee_per_gas: Optional[Union[int, str]] = None, access_list: Optional[Union[Dict[Union[Account, Address, str], List[int]], Literal["auto"]]] = None, type: Optional[int] = None, block: Optional[Union[int, Literal["latest"], Literal["pending"], Literal["earliest"], Literal["safe"], Literal["finalized"]]] = None, confirmations: Optional[int] = None) -> Union[Tuple[uint256, uint256, uint256], TransactionAbc[Tuple[uint256, uint256, uint256]], int, Tuple[Dict[Address, List[int]], int]]:
        """
        [Source code](file:///Users/dteiml/p/hacker-dom/woke-uniswap-v2/src/UniswapV2Router02.sol#78)

        Args:
            token: address
            amountTokenDesired: uint256
            amountTokenMin: uint256
            amountETHMin: uint256
            to_: address
            deadline: uint256
        Returns:
            (uint256, uint256, uint256)
        """
        return self._execute(self.chain, request_type, "f305d719", [token, amountTokenDesired, amountTokenMin, amountETHMin, to_, deadline], True if request_type == "tx" else False, Tuple[uint256, uint256, uint256], from_, to if to is not None else str(self.address), value, gas_limit, gas_price, max_fee_per_gas, max_priority_fee_per_gas, access_list, type, block, confirmations)

    @overload
    def removeLiquidity(self, tokenA: Union[Account, Address], tokenB: Union[Account, Address], liquidity: uint256, amountAMin: uint256, amountBMin: uint256, to_: Union[Account, Address], deadline: uint256, *, from_: Optional[Union[Account, Address, str]] = None, to: Optional[Union[Account, Address, str]] = None, value: Union[int, str] = 0, gas_limit: Optional[Union[int, Literal["max"], Literal["auto"]]] = None, request_type: Literal["call"], gas_price: Optional[Union[int, str]] = None, max_fee_per_gas: Optional[Union[int, str]] = None, max_priority_fee_per_gas: Optional[Union[int, str]] = None, access_list: Optional[Union[Dict[Union[Account, Address, str], List[int]], Literal["auto"]]] = None, type: Optional[int] = None, block: Optional[Union[int, Literal["latest"], Literal["pending"], Literal["earliest"], Literal["safe"], Literal["finalized"]]] = None, confirmations: Optional[int] = None) -> Tuple[uint256, uint256]:
        """
        [Source code](file:///Users/dteiml/p/hacker-dom/woke-uniswap-v2/src/UniswapV2Router02.sol#104)

        Args:
            tokenA: address
            tokenB: address
            liquidity: uint256
            amountAMin: uint256
            amountBMin: uint256
            to_: address
            deadline: uint256
        Returns:
            (uint256, uint256)
        """
        ...

    @overload
    def removeLiquidity(self, tokenA: Union[Account, Address], tokenB: Union[Account, Address], liquidity: uint256, amountAMin: uint256, amountBMin: uint256, to_: Union[Account, Address], deadline: uint256, *, from_: Optional[Union[Account, Address, str]] = None, to: Optional[Union[Account, Address, str]] = None, value: Union[int, str] = 0, gas_limit: Optional[Union[int, Literal["max"], Literal["auto"]]] = None, request_type: Literal["estimate"], gas_price: Optional[Union[int, str]] = None, max_fee_per_gas: Optional[Union[int, str]] = None, max_priority_fee_per_gas: Optional[Union[int, str]] = None, access_list: Optional[Union[Dict[Union[Account, Address, str], List[int]], Literal["auto"]]] = None, type: Optional[int] = None, block: Optional[Union[int, Literal["latest"], Literal["pending"], Literal["earliest"], Literal["safe"], Literal["finalized"]]] = None, confirmations: Optional[int] = None) -> int:
        """
        [Source code](file:///Users/dteiml/p/hacker-dom/woke-uniswap-v2/src/UniswapV2Router02.sol#104)

        Args:
            tokenA: address
            tokenB: address
            liquidity: uint256
            amountAMin: uint256
            amountBMin: uint256
            to_: address
            deadline: uint256
        Returns:
            (uint256, uint256)
        """
        ...

    @overload
    def removeLiquidity(self, tokenA: Union[Account, Address], tokenB: Union[Account, Address], liquidity: uint256, amountAMin: uint256, amountBMin: uint256, to_: Union[Account, Address], deadline: uint256, *, from_: Optional[Union[Account, Address, str]] = None, to: Optional[Union[Account, Address, str]] = None, value: Union[int, str] = 0, gas_limit: Optional[Union[int, Literal["max"], Literal["auto"]]] = None, request_type: Literal["access_list"], gas_price: Optional[Union[int, str]] = None, max_fee_per_gas: Optional[Union[int, str]] = None, max_priority_fee_per_gas: Optional[Union[int, str]] = None, access_list: Optional[Union[Dict[Union[Account, Address, str], List[int]], Literal["auto"]]] = None, type: Optional[int] = None, block: Optional[Union[int, Literal["latest"], Literal["pending"], Literal["earliest"], Literal["safe"], Literal["finalized"]]] = None, confirmations: Optional[int] = None) -> Tuple[Dict[Address, List[int]], int]:
        """
        [Source code](file:///Users/dteiml/p/hacker-dom/woke-uniswap-v2/src/UniswapV2Router02.sol#104)

        Args:
            tokenA: address
            tokenB: address
            liquidity: uint256
            amountAMin: uint256
            amountBMin: uint256
            to_: address
            deadline: uint256
        Returns:
            (uint256, uint256)
        """
        ...

    @overload
    def removeLiquidity(self, tokenA: Union[Account, Address], tokenB: Union[Account, Address], liquidity: uint256, amountAMin: uint256, amountBMin: uint256, to_: Union[Account, Address], deadline: uint256, *, from_: Optional[Union[Account, Address, str]] = None, to: Optional[Union[Account, Address, str]] = None, value: Union[int, str] = 0, gas_limit: Optional[Union[int, Literal["max"], Literal["auto"]]] = None, request_type: Literal["tx"] = "tx", gas_price: Optional[Union[int, str]] = None, max_fee_per_gas: Optional[Union[int, str]] = None, max_priority_fee_per_gas: Optional[Union[int, str]] = None, access_list: Optional[Union[Dict[Union[Account, Address, str], List[int]], Literal["auto"]]] = None, type: Optional[int] = None, block: Optional[Union[int, Literal["latest"], Literal["pending"], Literal["earliest"], Literal["safe"], Literal["finalized"]]] = None, confirmations: Optional[int] = None) -> TransactionAbc[Tuple[uint256, uint256]]:
        """
        [Source code](file:///Users/dteiml/p/hacker-dom/woke-uniswap-v2/src/UniswapV2Router02.sol#104)

        Args:
            tokenA: address
            tokenB: address
            liquidity: uint256
            amountAMin: uint256
            amountBMin: uint256
            to_: address
            deadline: uint256
        Returns:
            (uint256, uint256)
        """
        ...

    def removeLiquidity(self, tokenA: Union[Account, Address], tokenB: Union[Account, Address], liquidity: uint256, amountAMin: uint256, amountBMin: uint256, to_: Union[Account, Address], deadline: uint256, *, from_: Optional[Union[Account, Address, str]] = None, to: Optional[Union[Account, Address, str]] = None, value: Union[int, str] = 0, gas_limit: Optional[Union[int, Literal["max"], Literal["auto"]]] = None, request_type: RequestType = 'tx', gas_price: Optional[Union[int, str]] = None, max_fee_per_gas: Optional[Union[int, str]] = None, max_priority_fee_per_gas: Optional[Union[int, str]] = None, access_list: Optional[Union[Dict[Union[Account, Address, str], List[int]], Literal["auto"]]] = None, type: Optional[int] = None, block: Optional[Union[int, Literal["latest"], Literal["pending"], Literal["earliest"], Literal["safe"], Literal["finalized"]]] = None, confirmations: Optional[int] = None) -> Union[Tuple[uint256, uint256], TransactionAbc[Tuple[uint256, uint256]], int, Tuple[Dict[Address, List[int]], int]]:
        """
        [Source code](file:///Users/dteiml/p/hacker-dom/woke-uniswap-v2/src/UniswapV2Router02.sol#104)

        Args:
            tokenA: address
            tokenB: address
            liquidity: uint256
            amountAMin: uint256
            amountBMin: uint256
            to_: address
            deadline: uint256
        Returns:
            (uint256, uint256)
        """
        return self._execute(self.chain, request_type, "baa2abde", [tokenA, tokenB, liquidity, amountAMin, amountBMin, to_, deadline], True if request_type == "tx" else False, Tuple[uint256, uint256], from_, to if to is not None else str(self.address), value, gas_limit, gas_price, max_fee_per_gas, max_priority_fee_per_gas, access_list, type, block, confirmations)

    @overload
    def removeLiquidityETH(self, token: Union[Account, Address], liquidity: uint256, amountTokenMin: uint256, amountETHMin: uint256, to_: Union[Account, Address], deadline: uint256, *, from_: Optional[Union[Account, Address, str]] = None, to: Optional[Union[Account, Address, str]] = None, value: Union[int, str] = 0, gas_limit: Optional[Union[int, Literal["max"], Literal["auto"]]] = None, request_type: Literal["call"], gas_price: Optional[Union[int, str]] = None, max_fee_per_gas: Optional[Union[int, str]] = None, max_priority_fee_per_gas: Optional[Union[int, str]] = None, access_list: Optional[Union[Dict[Union[Account, Address, str], List[int]], Literal["auto"]]] = None, type: Optional[int] = None, block: Optional[Union[int, Literal["latest"], Literal["pending"], Literal["earliest"], Literal["safe"], Literal["finalized"]]] = None, confirmations: Optional[int] = None) -> Tuple[uint256, uint256]:
        """
        [Source code](file:///Users/dteiml/p/hacker-dom/woke-uniswap-v2/src/UniswapV2Router02.sol#121)

        Args:
            token: address
            liquidity: uint256
            amountTokenMin: uint256
            amountETHMin: uint256
            to_: address
            deadline: uint256
        Returns:
            (uint256, uint256)
        """
        ...

    @overload
    def removeLiquidityETH(self, token: Union[Account, Address], liquidity: uint256, amountTokenMin: uint256, amountETHMin: uint256, to_: Union[Account, Address], deadline: uint256, *, from_: Optional[Union[Account, Address, str]] = None, to: Optional[Union[Account, Address, str]] = None, value: Union[int, str] = 0, gas_limit: Optional[Union[int, Literal["max"], Literal["auto"]]] = None, request_type: Literal["estimate"], gas_price: Optional[Union[int, str]] = None, max_fee_per_gas: Optional[Union[int, str]] = None, max_priority_fee_per_gas: Optional[Union[int, str]] = None, access_list: Optional[Union[Dict[Union[Account, Address, str], List[int]], Literal["auto"]]] = None, type: Optional[int] = None, block: Optional[Union[int, Literal["latest"], Literal["pending"], Literal["earliest"], Literal["safe"], Literal["finalized"]]] = None, confirmations: Optional[int] = None) -> int:
        """
        [Source code](file:///Users/dteiml/p/hacker-dom/woke-uniswap-v2/src/UniswapV2Router02.sol#121)

        Args:
            token: address
            liquidity: uint256
            amountTokenMin: uint256
            amountETHMin: uint256
            to_: address
            deadline: uint256
        Returns:
            (uint256, uint256)
        """
        ...

    @overload
    def removeLiquidityETH(self, token: Union[Account, Address], liquidity: uint256, amountTokenMin: uint256, amountETHMin: uint256, to_: Union[Account, Address], deadline: uint256, *, from_: Optional[Union[Account, Address, str]] = None, to: Optional[Union[Account, Address, str]] = None, value: Union[int, str] = 0, gas_limit: Optional[Union[int, Literal["max"], Literal["auto"]]] = None, request_type: Literal["access_list"], gas_price: Optional[Union[int, str]] = None, max_fee_per_gas: Optional[Union[int, str]] = None, max_priority_fee_per_gas: Optional[Union[int, str]] = None, access_list: Optional[Union[Dict[Union[Account, Address, str], List[int]], Literal["auto"]]] = None, type: Optional[int] = None, block: Optional[Union[int, Literal["latest"], Literal["pending"], Literal["earliest"], Literal["safe"], Literal["finalized"]]] = None, confirmations: Optional[int] = None) -> Tuple[Dict[Address, List[int]], int]:
        """
        [Source code](file:///Users/dteiml/p/hacker-dom/woke-uniswap-v2/src/UniswapV2Router02.sol#121)

        Args:
            token: address
            liquidity: uint256
            amountTokenMin: uint256
            amountETHMin: uint256
            to_: address
            deadline: uint256
        Returns:
            (uint256, uint256)
        """
        ...

    @overload
    def removeLiquidityETH(self, token: Union[Account, Address], liquidity: uint256, amountTokenMin: uint256, amountETHMin: uint256, to_: Union[Account, Address], deadline: uint256, *, from_: Optional[Union[Account, Address, str]] = None, to: Optional[Union[Account, Address, str]] = None, value: Union[int, str] = 0, gas_limit: Optional[Union[int, Literal["max"], Literal["auto"]]] = None, request_type: Literal["tx"] = "tx", gas_price: Optional[Union[int, str]] = None, max_fee_per_gas: Optional[Union[int, str]] = None, max_priority_fee_per_gas: Optional[Union[int, str]] = None, access_list: Optional[Union[Dict[Union[Account, Address, str], List[int]], Literal["auto"]]] = None, type: Optional[int] = None, block: Optional[Union[int, Literal["latest"], Literal["pending"], Literal["earliest"], Literal["safe"], Literal["finalized"]]] = None, confirmations: Optional[int] = None) -> TransactionAbc[Tuple[uint256, uint256]]:
        """
        [Source code](file:///Users/dteiml/p/hacker-dom/woke-uniswap-v2/src/UniswapV2Router02.sol#121)

        Args:
            token: address
            liquidity: uint256
            amountTokenMin: uint256
            amountETHMin: uint256
            to_: address
            deadline: uint256
        Returns:
            (uint256, uint256)
        """
        ...

    def removeLiquidityETH(self, token: Union[Account, Address], liquidity: uint256, amountTokenMin: uint256, amountETHMin: uint256, to_: Union[Account, Address], deadline: uint256, *, from_: Optional[Union[Account, Address, str]] = None, to: Optional[Union[Account, Address, str]] = None, value: Union[int, str] = 0, gas_limit: Optional[Union[int, Literal["max"], Literal["auto"]]] = None, request_type: RequestType = 'tx', gas_price: Optional[Union[int, str]] = None, max_fee_per_gas: Optional[Union[int, str]] = None, max_priority_fee_per_gas: Optional[Union[int, str]] = None, access_list: Optional[Union[Dict[Union[Account, Address, str], List[int]], Literal["auto"]]] = None, type: Optional[int] = None, block: Optional[Union[int, Literal["latest"], Literal["pending"], Literal["earliest"], Literal["safe"], Literal["finalized"]]] = None, confirmations: Optional[int] = None) -> Union[Tuple[uint256, uint256], TransactionAbc[Tuple[uint256, uint256]], int, Tuple[Dict[Address, List[int]], int]]:
        """
        [Source code](file:///Users/dteiml/p/hacker-dom/woke-uniswap-v2/src/UniswapV2Router02.sol#121)

        Args:
            token: address
            liquidity: uint256
            amountTokenMin: uint256
            amountETHMin: uint256
            to_: address
            deadline: uint256
        Returns:
            (uint256, uint256)
        """
        return self._execute(self.chain, request_type, "02751cec", [token, liquidity, amountTokenMin, amountETHMin, to_, deadline], True if request_type == "tx" else False, Tuple[uint256, uint256], from_, to if to is not None else str(self.address), value, gas_limit, gas_price, max_fee_per_gas, max_priority_fee_per_gas, access_list, type, block, confirmations)

    @overload
    def removeLiquidityWithPermit(self, tokenA: Union[Account, Address], tokenB: Union[Account, Address], liquidity: uint256, amountAMin: uint256, amountBMin: uint256, to_: Union[Account, Address], deadline: uint256, approveMax: bool, v: uint8, r: bytes32, s: bytes32, *, from_: Optional[Union[Account, Address, str]] = None, to: Optional[Union[Account, Address, str]] = None, value: Union[int, str] = 0, gas_limit: Optional[Union[int, Literal["max"], Literal["auto"]]] = None, request_type: Literal["call"], gas_price: Optional[Union[int, str]] = None, max_fee_per_gas: Optional[Union[int, str]] = None, max_priority_fee_per_gas: Optional[Union[int, str]] = None, access_list: Optional[Union[Dict[Union[Account, Address, str], List[int]], Literal["auto"]]] = None, type: Optional[int] = None, block: Optional[Union[int, Literal["latest"], Literal["pending"], Literal["earliest"], Literal["safe"], Literal["finalized"]]] = None, confirmations: Optional[int] = None) -> Tuple[uint256, uint256]:
        """
        [Source code](file:///Users/dteiml/p/hacker-dom/woke-uniswap-v2/src/UniswapV2Router02.sol#142)

        Args:
            tokenA: address
            tokenB: address
            liquidity: uint256
            amountAMin: uint256
            amountBMin: uint256
            to_: address
            deadline: uint256
            approveMax: bool
            v: uint8
            r: bytes32
            s: bytes32
        Returns:
            (uint256, uint256)
        """
        ...

    @overload
    def removeLiquidityWithPermit(self, tokenA: Union[Account, Address], tokenB: Union[Account, Address], liquidity: uint256, amountAMin: uint256, amountBMin: uint256, to_: Union[Account, Address], deadline: uint256, approveMax: bool, v: uint8, r: bytes32, s: bytes32, *, from_: Optional[Union[Account, Address, str]] = None, to: Optional[Union[Account, Address, str]] = None, value: Union[int, str] = 0, gas_limit: Optional[Union[int, Literal["max"], Literal["auto"]]] = None, request_type: Literal["estimate"], gas_price: Optional[Union[int, str]] = None, max_fee_per_gas: Optional[Union[int, str]] = None, max_priority_fee_per_gas: Optional[Union[int, str]] = None, access_list: Optional[Union[Dict[Union[Account, Address, str], List[int]], Literal["auto"]]] = None, type: Optional[int] = None, block: Optional[Union[int, Literal["latest"], Literal["pending"], Literal["earliest"], Literal["safe"], Literal["finalized"]]] = None, confirmations: Optional[int] = None) -> int:
        """
        [Source code](file:///Users/dteiml/p/hacker-dom/woke-uniswap-v2/src/UniswapV2Router02.sol#142)

        Args:
            tokenA: address
            tokenB: address
            liquidity: uint256
            amountAMin: uint256
            amountBMin: uint256
            to_: address
            deadline: uint256
            approveMax: bool
            v: uint8
            r: bytes32
            s: bytes32
        Returns:
            (uint256, uint256)
        """
        ...

    @overload
    def removeLiquidityWithPermit(self, tokenA: Union[Account, Address], tokenB: Union[Account, Address], liquidity: uint256, amountAMin: uint256, amountBMin: uint256, to_: Union[Account, Address], deadline: uint256, approveMax: bool, v: uint8, r: bytes32, s: bytes32, *, from_: Optional[Union[Account, Address, str]] = None, to: Optional[Union[Account, Address, str]] = None, value: Union[int, str] = 0, gas_limit: Optional[Union[int, Literal["max"], Literal["auto"]]] = None, request_type: Literal["access_list"], gas_price: Optional[Union[int, str]] = None, max_fee_per_gas: Optional[Union[int, str]] = None, max_priority_fee_per_gas: Optional[Union[int, str]] = None, access_list: Optional[Union[Dict[Union[Account, Address, str], List[int]], Literal["auto"]]] = None, type: Optional[int] = None, block: Optional[Union[int, Literal["latest"], Literal["pending"], Literal["earliest"], Literal["safe"], Literal["finalized"]]] = None, confirmations: Optional[int] = None) -> Tuple[Dict[Address, List[int]], int]:
        """
        [Source code](file:///Users/dteiml/p/hacker-dom/woke-uniswap-v2/src/UniswapV2Router02.sol#142)

        Args:
            tokenA: address
            tokenB: address
            liquidity: uint256
            amountAMin: uint256
            amountBMin: uint256
            to_: address
            deadline: uint256
            approveMax: bool
            v: uint8
            r: bytes32
            s: bytes32
        Returns:
            (uint256, uint256)
        """
        ...

    @overload
    def removeLiquidityWithPermit(self, tokenA: Union[Account, Address], tokenB: Union[Account, Address], liquidity: uint256, amountAMin: uint256, amountBMin: uint256, to_: Union[Account, Address], deadline: uint256, approveMax: bool, v: uint8, r: bytes32, s: bytes32, *, from_: Optional[Union[Account, Address, str]] = None, to: Optional[Union[Account, Address, str]] = None, value: Union[int, str] = 0, gas_limit: Optional[Union[int, Literal["max"], Literal["auto"]]] = None, request_type: Literal["tx"] = "tx", gas_price: Optional[Union[int, str]] = None, max_fee_per_gas: Optional[Union[int, str]] = None, max_priority_fee_per_gas: Optional[Union[int, str]] = None, access_list: Optional[Union[Dict[Union[Account, Address, str], List[int]], Literal["auto"]]] = None, type: Optional[int] = None, block: Optional[Union[int, Literal["latest"], Literal["pending"], Literal["earliest"], Literal["safe"], Literal["finalized"]]] = None, confirmations: Optional[int] = None) -> TransactionAbc[Tuple[uint256, uint256]]:
        """
        [Source code](file:///Users/dteiml/p/hacker-dom/woke-uniswap-v2/src/UniswapV2Router02.sol#142)

        Args:
            tokenA: address
            tokenB: address
            liquidity: uint256
            amountAMin: uint256
            amountBMin: uint256
            to_: address
            deadline: uint256
            approveMax: bool
            v: uint8
            r: bytes32
            s: bytes32
        Returns:
            (uint256, uint256)
        """
        ...

    def removeLiquidityWithPermit(self, tokenA: Union[Account, Address], tokenB: Union[Account, Address], liquidity: uint256, amountAMin: uint256, amountBMin: uint256, to_: Union[Account, Address], deadline: uint256, approveMax: bool, v: uint8, r: bytes32, s: bytes32, *, from_: Optional[Union[Account, Address, str]] = None, to: Optional[Union[Account, Address, str]] = None, value: Union[int, str] = 0, gas_limit: Optional[Union[int, Literal["max"], Literal["auto"]]] = None, request_type: RequestType = 'tx', gas_price: Optional[Union[int, str]] = None, max_fee_per_gas: Optional[Union[int, str]] = None, max_priority_fee_per_gas: Optional[Union[int, str]] = None, access_list: Optional[Union[Dict[Union[Account, Address, str], List[int]], Literal["auto"]]] = None, type: Optional[int] = None, block: Optional[Union[int, Literal["latest"], Literal["pending"], Literal["earliest"], Literal["safe"], Literal["finalized"]]] = None, confirmations: Optional[int] = None) -> Union[Tuple[uint256, uint256], TransactionAbc[Tuple[uint256, uint256]], int, Tuple[Dict[Address, List[int]], int]]:
        """
        [Source code](file:///Users/dteiml/p/hacker-dom/woke-uniswap-v2/src/UniswapV2Router02.sol#142)

        Args:
            tokenA: address
            tokenB: address
            liquidity: uint256
            amountAMin: uint256
            amountBMin: uint256
            to_: address
            deadline: uint256
            approveMax: bool
            v: uint8
            r: bytes32
            s: bytes32
        Returns:
            (uint256, uint256)
        """
        return self._execute(self.chain, request_type, "2195995c", [tokenA, tokenB, liquidity, amountAMin, amountBMin, to_, deadline, approveMax, v, r, s], True if request_type == "tx" else False, Tuple[uint256, uint256], from_, to if to is not None else str(self.address), value, gas_limit, gas_price, max_fee_per_gas, max_priority_fee_per_gas, access_list, type, block, confirmations)

    @overload
    def removeLiquidityETHWithPermit(self, token: Union[Account, Address], liquidity: uint256, amountTokenMin: uint256, amountETHMin: uint256, to_: Union[Account, Address], deadline: uint256, approveMax: bool, v: uint8, r: bytes32, s: bytes32, *, from_: Optional[Union[Account, Address, str]] = None, to: Optional[Union[Account, Address, str]] = None, value: Union[int, str] = 0, gas_limit: Optional[Union[int, Literal["max"], Literal["auto"]]] = None, request_type: Literal["call"], gas_price: Optional[Union[int, str]] = None, max_fee_per_gas: Optional[Union[int, str]] = None, max_priority_fee_per_gas: Optional[Union[int, str]] = None, access_list: Optional[Union[Dict[Union[Account, Address, str], List[int]], Literal["auto"]]] = None, type: Optional[int] = None, block: Optional[Union[int, Literal["latest"], Literal["pending"], Literal["earliest"], Literal["safe"], Literal["finalized"]]] = None, confirmations: Optional[int] = None) -> Tuple[uint256, uint256]:
        """
        [Source code](file:///Users/dteiml/p/hacker-dom/woke-uniswap-v2/src/UniswapV2Router02.sol#157)

        Args:
            token: address
            liquidity: uint256
            amountTokenMin: uint256
            amountETHMin: uint256
            to_: address
            deadline: uint256
            approveMax: bool
            v: uint8
            r: bytes32
            s: bytes32
        Returns:
            (uint256, uint256)
        """
        ...

    @overload
    def removeLiquidityETHWithPermit(self, token: Union[Account, Address], liquidity: uint256, amountTokenMin: uint256, amountETHMin: uint256, to_: Union[Account, Address], deadline: uint256, approveMax: bool, v: uint8, r: bytes32, s: bytes32, *, from_: Optional[Union[Account, Address, str]] = None, to: Optional[Union[Account, Address, str]] = None, value: Union[int, str] = 0, gas_limit: Optional[Union[int, Literal["max"], Literal["auto"]]] = None, request_type: Literal["estimate"], gas_price: Optional[Union[int, str]] = None, max_fee_per_gas: Optional[Union[int, str]] = None, max_priority_fee_per_gas: Optional[Union[int, str]] = None, access_list: Optional[Union[Dict[Union[Account, Address, str], List[int]], Literal["auto"]]] = None, type: Optional[int] = None, block: Optional[Union[int, Literal["latest"], Literal["pending"], Literal["earliest"], Literal["safe"], Literal["finalized"]]] = None, confirmations: Optional[int] = None) -> int:
        """
        [Source code](file:///Users/dteiml/p/hacker-dom/woke-uniswap-v2/src/UniswapV2Router02.sol#157)

        Args:
            token: address
            liquidity: uint256
            amountTokenMin: uint256
            amountETHMin: uint256
            to_: address
            deadline: uint256
            approveMax: bool
            v: uint8
            r: bytes32
            s: bytes32
        Returns:
            (uint256, uint256)
        """
        ...

    @overload
    def removeLiquidityETHWithPermit(self, token: Union[Account, Address], liquidity: uint256, amountTokenMin: uint256, amountETHMin: uint256, to_: Union[Account, Address], deadline: uint256, approveMax: bool, v: uint8, r: bytes32, s: bytes32, *, from_: Optional[Union[Account, Address, str]] = None, to: Optional[Union[Account, Address, str]] = None, value: Union[int, str] = 0, gas_limit: Optional[Union[int, Literal["max"], Literal["auto"]]] = None, request_type: Literal["access_list"], gas_price: Optional[Union[int, str]] = None, max_fee_per_gas: Optional[Union[int, str]] = None, max_priority_fee_per_gas: Optional[Union[int, str]] = None, access_list: Optional[Union[Dict[Union[Account, Address, str], List[int]], Literal["auto"]]] = None, type: Optional[int] = None, block: Optional[Union[int, Literal["latest"], Literal["pending"], Literal["earliest"], Literal["safe"], Literal["finalized"]]] = None, confirmations: Optional[int] = None) -> Tuple[Dict[Address, List[int]], int]:
        """
        [Source code](file:///Users/dteiml/p/hacker-dom/woke-uniswap-v2/src/UniswapV2Router02.sol#157)

        Args:
            token: address
            liquidity: uint256
            amountTokenMin: uint256
            amountETHMin: uint256
            to_: address
            deadline: uint256
            approveMax: bool
            v: uint8
            r: bytes32
            s: bytes32
        Returns:
            (uint256, uint256)
        """
        ...

    @overload
    def removeLiquidityETHWithPermit(self, token: Union[Account, Address], liquidity: uint256, amountTokenMin: uint256, amountETHMin: uint256, to_: Union[Account, Address], deadline: uint256, approveMax: bool, v: uint8, r: bytes32, s: bytes32, *, from_: Optional[Union[Account, Address, str]] = None, to: Optional[Union[Account, Address, str]] = None, value: Union[int, str] = 0, gas_limit: Optional[Union[int, Literal["max"], Literal["auto"]]] = None, request_type: Literal["tx"] = "tx", gas_price: Optional[Union[int, str]] = None, max_fee_per_gas: Optional[Union[int, str]] = None, max_priority_fee_per_gas: Optional[Union[int, str]] = None, access_list: Optional[Union[Dict[Union[Account, Address, str], List[int]], Literal["auto"]]] = None, type: Optional[int] = None, block: Optional[Union[int, Literal["latest"], Literal["pending"], Literal["earliest"], Literal["safe"], Literal["finalized"]]] = None, confirmations: Optional[int] = None) -> TransactionAbc[Tuple[uint256, uint256]]:
        """
        [Source code](file:///Users/dteiml/p/hacker-dom/woke-uniswap-v2/src/UniswapV2Router02.sol#157)

        Args:
            token: address
            liquidity: uint256
            amountTokenMin: uint256
            amountETHMin: uint256
            to_: address
            deadline: uint256
            approveMax: bool
            v: uint8
            r: bytes32
            s: bytes32
        Returns:
            (uint256, uint256)
        """
        ...

    def removeLiquidityETHWithPermit(self, token: Union[Account, Address], liquidity: uint256, amountTokenMin: uint256, amountETHMin: uint256, to_: Union[Account, Address], deadline: uint256, approveMax: bool, v: uint8, r: bytes32, s: bytes32, *, from_: Optional[Union[Account, Address, str]] = None, to: Optional[Union[Account, Address, str]] = None, value: Union[int, str] = 0, gas_limit: Optional[Union[int, Literal["max"], Literal["auto"]]] = None, request_type: RequestType = 'tx', gas_price: Optional[Union[int, str]] = None, max_fee_per_gas: Optional[Union[int, str]] = None, max_priority_fee_per_gas: Optional[Union[int, str]] = None, access_list: Optional[Union[Dict[Union[Account, Address, str], List[int]], Literal["auto"]]] = None, type: Optional[int] = None, block: Optional[Union[int, Literal["latest"], Literal["pending"], Literal["earliest"], Literal["safe"], Literal["finalized"]]] = None, confirmations: Optional[int] = None) -> Union[Tuple[uint256, uint256], TransactionAbc[Tuple[uint256, uint256]], int, Tuple[Dict[Address, List[int]], int]]:
        """
        [Source code](file:///Users/dteiml/p/hacker-dom/woke-uniswap-v2/src/UniswapV2Router02.sol#157)

        Args:
            token: address
            liquidity: uint256
            amountTokenMin: uint256
            amountETHMin: uint256
            to_: address
            deadline: uint256
            approveMax: bool
            v: uint8
            r: bytes32
            s: bytes32
        Returns:
            (uint256, uint256)
        """
        return self._execute(self.chain, request_type, "ded9382a", [token, liquidity, amountTokenMin, amountETHMin, to_, deadline, approveMax, v, r, s], True if request_type == "tx" else False, Tuple[uint256, uint256], from_, to if to is not None else str(self.address), value, gas_limit, gas_price, max_fee_per_gas, max_priority_fee_per_gas, access_list, type, block, confirmations)

    @overload
    def removeLiquidityETHSupportingFeeOnTransferTokens(self, token: Union[Account, Address], liquidity: uint256, amountTokenMin: uint256, amountETHMin: uint256, to_: Union[Account, Address], deadline: uint256, *, from_: Optional[Union[Account, Address, str]] = None, to: Optional[Union[Account, Address, str]] = None, value: Union[int, str] = 0, gas_limit: Optional[Union[int, Literal["max"], Literal["auto"]]] = None, request_type: Literal["call"], gas_price: Optional[Union[int, str]] = None, max_fee_per_gas: Optional[Union[int, str]] = None, max_priority_fee_per_gas: Optional[Union[int, str]] = None, access_list: Optional[Union[Dict[Union[Account, Address, str], List[int]], Literal["auto"]]] = None, type: Optional[int] = None, block: Optional[Union[int, Literal["latest"], Literal["pending"], Literal["earliest"], Literal["safe"], Literal["finalized"]]] = None, confirmations: Optional[int] = None) -> uint256:
        """
        [Source code](file:///Users/dteiml/p/hacker-dom/woke-uniswap-v2/src/UniswapV2Router02.sol#173)

        Args:
            token: address
            liquidity: uint256
            amountTokenMin: uint256
            amountETHMin: uint256
            to_: address
            deadline: uint256
        Returns:
            uint256
        """
        ...

    @overload
    def removeLiquidityETHSupportingFeeOnTransferTokens(self, token: Union[Account, Address], liquidity: uint256, amountTokenMin: uint256, amountETHMin: uint256, to_: Union[Account, Address], deadline: uint256, *, from_: Optional[Union[Account, Address, str]] = None, to: Optional[Union[Account, Address, str]] = None, value: Union[int, str] = 0, gas_limit: Optional[Union[int, Literal["max"], Literal["auto"]]] = None, request_type: Literal["estimate"], gas_price: Optional[Union[int, str]] = None, max_fee_per_gas: Optional[Union[int, str]] = None, max_priority_fee_per_gas: Optional[Union[int, str]] = None, access_list: Optional[Union[Dict[Union[Account, Address, str], List[int]], Literal["auto"]]] = None, type: Optional[int] = None, block: Optional[Union[int, Literal["latest"], Literal["pending"], Literal["earliest"], Literal["safe"], Literal["finalized"]]] = None, confirmations: Optional[int] = None) -> int:
        """
        [Source code](file:///Users/dteiml/p/hacker-dom/woke-uniswap-v2/src/UniswapV2Router02.sol#173)

        Args:
            token: address
            liquidity: uint256
            amountTokenMin: uint256
            amountETHMin: uint256
            to_: address
            deadline: uint256
        Returns:
            uint256
        """
        ...

    @overload
    def removeLiquidityETHSupportingFeeOnTransferTokens(self, token: Union[Account, Address], liquidity: uint256, amountTokenMin: uint256, amountETHMin: uint256, to_: Union[Account, Address], deadline: uint256, *, from_: Optional[Union[Account, Address, str]] = None, to: Optional[Union[Account, Address, str]] = None, value: Union[int, str] = 0, gas_limit: Optional[Union[int, Literal["max"], Literal["auto"]]] = None, request_type: Literal["access_list"], gas_price: Optional[Union[int, str]] = None, max_fee_per_gas: Optional[Union[int, str]] = None, max_priority_fee_per_gas: Optional[Union[int, str]] = None, access_list: Optional[Union[Dict[Union[Account, Address, str], List[int]], Literal["auto"]]] = None, type: Optional[int] = None, block: Optional[Union[int, Literal["latest"], Literal["pending"], Literal["earliest"], Literal["safe"], Literal["finalized"]]] = None, confirmations: Optional[int] = None) -> Tuple[Dict[Address, List[int]], int]:
        """
        [Source code](file:///Users/dteiml/p/hacker-dom/woke-uniswap-v2/src/UniswapV2Router02.sol#173)

        Args:
            token: address
            liquidity: uint256
            amountTokenMin: uint256
            amountETHMin: uint256
            to_: address
            deadline: uint256
        Returns:
            uint256
        """
        ...

    @overload
    def removeLiquidityETHSupportingFeeOnTransferTokens(self, token: Union[Account, Address], liquidity: uint256, amountTokenMin: uint256, amountETHMin: uint256, to_: Union[Account, Address], deadline: uint256, *, from_: Optional[Union[Account, Address, str]] = None, to: Optional[Union[Account, Address, str]] = None, value: Union[int, str] = 0, gas_limit: Optional[Union[int, Literal["max"], Literal["auto"]]] = None, request_type: Literal["tx"] = "tx", gas_price: Optional[Union[int, str]] = None, max_fee_per_gas: Optional[Union[int, str]] = None, max_priority_fee_per_gas: Optional[Union[int, str]] = None, access_list: Optional[Union[Dict[Union[Account, Address, str], List[int]], Literal["auto"]]] = None, type: Optional[int] = None, block: Optional[Union[int, Literal["latest"], Literal["pending"], Literal["earliest"], Literal["safe"], Literal["finalized"]]] = None, confirmations: Optional[int] = None) -> TransactionAbc[uint256]:
        """
        [Source code](file:///Users/dteiml/p/hacker-dom/woke-uniswap-v2/src/UniswapV2Router02.sol#173)

        Args:
            token: address
            liquidity: uint256
            amountTokenMin: uint256
            amountETHMin: uint256
            to_: address
            deadline: uint256
        Returns:
            uint256
        """
        ...

    def removeLiquidityETHSupportingFeeOnTransferTokens(self, token: Union[Account, Address], liquidity: uint256, amountTokenMin: uint256, amountETHMin: uint256, to_: Union[Account, Address], deadline: uint256, *, from_: Optional[Union[Account, Address, str]] = None, to: Optional[Union[Account, Address, str]] = None, value: Union[int, str] = 0, gas_limit: Optional[Union[int, Literal["max"], Literal["auto"]]] = None, request_type: RequestType = 'tx', gas_price: Optional[Union[int, str]] = None, max_fee_per_gas: Optional[Union[int, str]] = None, max_priority_fee_per_gas: Optional[Union[int, str]] = None, access_list: Optional[Union[Dict[Union[Account, Address, str], List[int]], Literal["auto"]]] = None, type: Optional[int] = None, block: Optional[Union[int, Literal["latest"], Literal["pending"], Literal["earliest"], Literal["safe"], Literal["finalized"]]] = None, confirmations: Optional[int] = None) -> Union[uint256, TransactionAbc[uint256], int, Tuple[Dict[Address, List[int]], int]]:
        """
        [Source code](file:///Users/dteiml/p/hacker-dom/woke-uniswap-v2/src/UniswapV2Router02.sol#173)

        Args:
            token: address
            liquidity: uint256
            amountTokenMin: uint256
            amountETHMin: uint256
            to_: address
            deadline: uint256
        Returns:
            uint256
        """
        return self._execute(self.chain, request_type, "af2979eb", [token, liquidity, amountTokenMin, amountETHMin, to_, deadline], True if request_type == "tx" else False, uint256, from_, to if to is not None else str(self.address), value, gas_limit, gas_price, max_fee_per_gas, max_priority_fee_per_gas, access_list, type, block, confirmations)

    @overload
    def removeLiquidityETHWithPermitSupportingFeeOnTransferTokens(self, token: Union[Account, Address], liquidity: uint256, amountTokenMin: uint256, amountETHMin: uint256, to_: Union[Account, Address], deadline: uint256, approveMax: bool, v: uint8, r: bytes32, s: bytes32, *, from_: Optional[Union[Account, Address, str]] = None, to: Optional[Union[Account, Address, str]] = None, value: Union[int, str] = 0, gas_limit: Optional[Union[int, Literal["max"], Literal["auto"]]] = None, request_type: Literal["call"], gas_price: Optional[Union[int, str]] = None, max_fee_per_gas: Optional[Union[int, str]] = None, max_priority_fee_per_gas: Optional[Union[int, str]] = None, access_list: Optional[Union[Dict[Union[Account, Address, str], List[int]], Literal["auto"]]] = None, type: Optional[int] = None, block: Optional[Union[int, Literal["latest"], Literal["pending"], Literal["earliest"], Literal["safe"], Literal["finalized"]]] = None, confirmations: Optional[int] = None) -> uint256:
        """
        [Source code](file:///Users/dteiml/p/hacker-dom/woke-uniswap-v2/src/UniswapV2Router02.sol#194)

        Args:
            token: address
            liquidity: uint256
            amountTokenMin: uint256
            amountETHMin: uint256
            to_: address
            deadline: uint256
            approveMax: bool
            v: uint8
            r: bytes32
            s: bytes32
        Returns:
            uint256
        """
        ...

    @overload
    def removeLiquidityETHWithPermitSupportingFeeOnTransferTokens(self, token: Union[Account, Address], liquidity: uint256, amountTokenMin: uint256, amountETHMin: uint256, to_: Union[Account, Address], deadline: uint256, approveMax: bool, v: uint8, r: bytes32, s: bytes32, *, from_: Optional[Union[Account, Address, str]] = None, to: Optional[Union[Account, Address, str]] = None, value: Union[int, str] = 0, gas_limit: Optional[Union[int, Literal["max"], Literal["auto"]]] = None, request_type: Literal["estimate"], gas_price: Optional[Union[int, str]] = None, max_fee_per_gas: Optional[Union[int, str]] = None, max_priority_fee_per_gas: Optional[Union[int, str]] = None, access_list: Optional[Union[Dict[Union[Account, Address, str], List[int]], Literal["auto"]]] = None, type: Optional[int] = None, block: Optional[Union[int, Literal["latest"], Literal["pending"], Literal["earliest"], Literal["safe"], Literal["finalized"]]] = None, confirmations: Optional[int] = None) -> int:
        """
        [Source code](file:///Users/dteiml/p/hacker-dom/woke-uniswap-v2/src/UniswapV2Router02.sol#194)

        Args:
            token: address
            liquidity: uint256
            amountTokenMin: uint256
            amountETHMin: uint256
            to_: address
            deadline: uint256
            approveMax: bool
            v: uint8
            r: bytes32
            s: bytes32
        Returns:
            uint256
        """
        ...

    @overload
    def removeLiquidityETHWithPermitSupportingFeeOnTransferTokens(self, token: Union[Account, Address], liquidity: uint256, amountTokenMin: uint256, amountETHMin: uint256, to_: Union[Account, Address], deadline: uint256, approveMax: bool, v: uint8, r: bytes32, s: bytes32, *, from_: Optional[Union[Account, Address, str]] = None, to: Optional[Union[Account, Address, str]] = None, value: Union[int, str] = 0, gas_limit: Optional[Union[int, Literal["max"], Literal["auto"]]] = None, request_type: Literal["access_list"], gas_price: Optional[Union[int, str]] = None, max_fee_per_gas: Optional[Union[int, str]] = None, max_priority_fee_per_gas: Optional[Union[int, str]] = None, access_list: Optional[Union[Dict[Union[Account, Address, str], List[int]], Literal["auto"]]] = None, type: Optional[int] = None, block: Optional[Union[int, Literal["latest"], Literal["pending"], Literal["earliest"], Literal["safe"], Literal["finalized"]]] = None, confirmations: Optional[int] = None) -> Tuple[Dict[Address, List[int]], int]:
        """
        [Source code](file:///Users/dteiml/p/hacker-dom/woke-uniswap-v2/src/UniswapV2Router02.sol#194)

        Args:
            token: address
            liquidity: uint256
            amountTokenMin: uint256
            amountETHMin: uint256
            to_: address
            deadline: uint256
            approveMax: bool
            v: uint8
            r: bytes32
            s: bytes32
        Returns:
            uint256
        """
        ...

    @overload
    def removeLiquidityETHWithPermitSupportingFeeOnTransferTokens(self, token: Union[Account, Address], liquidity: uint256, amountTokenMin: uint256, amountETHMin: uint256, to_: Union[Account, Address], deadline: uint256, approveMax: bool, v: uint8, r: bytes32, s: bytes32, *, from_: Optional[Union[Account, Address, str]] = None, to: Optional[Union[Account, Address, str]] = None, value: Union[int, str] = 0, gas_limit: Optional[Union[int, Literal["max"], Literal["auto"]]] = None, request_type: Literal["tx"] = "tx", gas_price: Optional[Union[int, str]] = None, max_fee_per_gas: Optional[Union[int, str]] = None, max_priority_fee_per_gas: Optional[Union[int, str]] = None, access_list: Optional[Union[Dict[Union[Account, Address, str], List[int]], Literal["auto"]]] = None, type: Optional[int] = None, block: Optional[Union[int, Literal["latest"], Literal["pending"], Literal["earliest"], Literal["safe"], Literal["finalized"]]] = None, confirmations: Optional[int] = None) -> TransactionAbc[uint256]:
        """
        [Source code](file:///Users/dteiml/p/hacker-dom/woke-uniswap-v2/src/UniswapV2Router02.sol#194)

        Args:
            token: address
            liquidity: uint256
            amountTokenMin: uint256
            amountETHMin: uint256
            to_: address
            deadline: uint256
            approveMax: bool
            v: uint8
            r: bytes32
            s: bytes32
        Returns:
            uint256
        """
        ...

    def removeLiquidityETHWithPermitSupportingFeeOnTransferTokens(self, token: Union[Account, Address], liquidity: uint256, amountTokenMin: uint256, amountETHMin: uint256, to_: Union[Account, Address], deadline: uint256, approveMax: bool, v: uint8, r: bytes32, s: bytes32, *, from_: Optional[Union[Account, Address, str]] = None, to: Optional[Union[Account, Address, str]] = None, value: Union[int, str] = 0, gas_limit: Optional[Union[int, Literal["max"], Literal["auto"]]] = None, request_type: RequestType = 'tx', gas_price: Optional[Union[int, str]] = None, max_fee_per_gas: Optional[Union[int, str]] = None, max_priority_fee_per_gas: Optional[Union[int, str]] = None, access_list: Optional[Union[Dict[Union[Account, Address, str], List[int]], Literal["auto"]]] = None, type: Optional[int] = None, block: Optional[Union[int, Literal["latest"], Literal["pending"], Literal["earliest"], Literal["safe"], Literal["finalized"]]] = None, confirmations: Optional[int] = None) -> Union[uint256, TransactionAbc[uint256], int, Tuple[Dict[Address, List[int]], int]]:
        """
        [Source code](file:///Users/dteiml/p/hacker-dom/woke-uniswap-v2/src/UniswapV2Router02.sol#194)

        Args:
            token: address
            liquidity: uint256
            amountTokenMin: uint256
            amountETHMin: uint256
            to_: address
            deadline: uint256
            approveMax: bool
            v: uint8
            r: bytes32
            s: bytes32
        Returns:
            uint256
        """
        return self._execute(self.chain, request_type, "5b0d5984", [token, liquidity, amountTokenMin, amountETHMin, to_, deadline, approveMax, v, r, s], True if request_type == "tx" else False, uint256, from_, to if to is not None else str(self.address), value, gas_limit, gas_price, max_fee_per_gas, max_priority_fee_per_gas, access_list, type, block, confirmations)

    @overload
    def swapExactTokensForTokens(self, amountIn: uint256, amountOutMin: uint256, path: List[Union[Account, Address]], to_: Union[Account, Address], deadline: uint256, *, from_: Optional[Union[Account, Address, str]] = None, to: Optional[Union[Account, Address, str]] = None, value: Union[int, str] = 0, gas_limit: Optional[Union[int, Literal["max"], Literal["auto"]]] = None, request_type: Literal["call"], gas_price: Optional[Union[int, str]] = None, max_fee_per_gas: Optional[Union[int, str]] = None, max_priority_fee_per_gas: Optional[Union[int, str]] = None, access_list: Optional[Union[Dict[Union[Account, Address, str], List[int]], Literal["auto"]]] = None, type: Optional[int] = None, block: Optional[Union[int, Literal["latest"], Literal["pending"], Literal["earliest"], Literal["safe"], Literal["finalized"]]] = None, confirmations: Optional[int] = None) -> List[uint256]:
        """
        [Source code](file:///Users/dteiml/p/hacker-dom/woke-uniswap-v2/src/UniswapV2Router02.sol#225)

        Args:
            amountIn: uint256
            amountOutMin: uint256
            path: address[]
            to_: address
            deadline: uint256
        Returns:
            uint256[]
        """
        ...

    @overload
    def swapExactTokensForTokens(self, amountIn: uint256, amountOutMin: uint256, path: List[Union[Account, Address]], to_: Union[Account, Address], deadline: uint256, *, from_: Optional[Union[Account, Address, str]] = None, to: Optional[Union[Account, Address, str]] = None, value: Union[int, str] = 0, gas_limit: Optional[Union[int, Literal["max"], Literal["auto"]]] = None, request_type: Literal["estimate"], gas_price: Optional[Union[int, str]] = None, max_fee_per_gas: Optional[Union[int, str]] = None, max_priority_fee_per_gas: Optional[Union[int, str]] = None, access_list: Optional[Union[Dict[Union[Account, Address, str], List[int]], Literal["auto"]]] = None, type: Optional[int] = None, block: Optional[Union[int, Literal["latest"], Literal["pending"], Literal["earliest"], Literal["safe"], Literal["finalized"]]] = None, confirmations: Optional[int] = None) -> int:
        """
        [Source code](file:///Users/dteiml/p/hacker-dom/woke-uniswap-v2/src/UniswapV2Router02.sol#225)

        Args:
            amountIn: uint256
            amountOutMin: uint256
            path: address[]
            to_: address
            deadline: uint256
        Returns:
            uint256[]
        """
        ...

    @overload
    def swapExactTokensForTokens(self, amountIn: uint256, amountOutMin: uint256, path: List[Union[Account, Address]], to_: Union[Account, Address], deadline: uint256, *, from_: Optional[Union[Account, Address, str]] = None, to: Optional[Union[Account, Address, str]] = None, value: Union[int, str] = 0, gas_limit: Optional[Union[int, Literal["max"], Literal["auto"]]] = None, request_type: Literal["access_list"], gas_price: Optional[Union[int, str]] = None, max_fee_per_gas: Optional[Union[int, str]] = None, max_priority_fee_per_gas: Optional[Union[int, str]] = None, access_list: Optional[Union[Dict[Union[Account, Address, str], List[int]], Literal["auto"]]] = None, type: Optional[int] = None, block: Optional[Union[int, Literal["latest"], Literal["pending"], Literal["earliest"], Literal["safe"], Literal["finalized"]]] = None, confirmations: Optional[int] = None) -> Tuple[Dict[Address, List[int]], int]:
        """
        [Source code](file:///Users/dteiml/p/hacker-dom/woke-uniswap-v2/src/UniswapV2Router02.sol#225)

        Args:
            amountIn: uint256
            amountOutMin: uint256
            path: address[]
            to_: address
            deadline: uint256
        Returns:
            uint256[]
        """
        ...

    @overload
    def swapExactTokensForTokens(self, amountIn: uint256, amountOutMin: uint256, path: List[Union[Account, Address]], to_: Union[Account, Address], deadline: uint256, *, from_: Optional[Union[Account, Address, str]] = None, to: Optional[Union[Account, Address, str]] = None, value: Union[int, str] = 0, gas_limit: Optional[Union[int, Literal["max"], Literal["auto"]]] = None, request_type: Literal["tx"] = "tx", gas_price: Optional[Union[int, str]] = None, max_fee_per_gas: Optional[Union[int, str]] = None, max_priority_fee_per_gas: Optional[Union[int, str]] = None, access_list: Optional[Union[Dict[Union[Account, Address, str], List[int]], Literal["auto"]]] = None, type: Optional[int] = None, block: Optional[Union[int, Literal["latest"], Literal["pending"], Literal["earliest"], Literal["safe"], Literal["finalized"]]] = None, confirmations: Optional[int] = None) -> TransactionAbc[List[uint256]]:
        """
        [Source code](file:///Users/dteiml/p/hacker-dom/woke-uniswap-v2/src/UniswapV2Router02.sol#225)

        Args:
            amountIn: uint256
            amountOutMin: uint256
            path: address[]
            to_: address
            deadline: uint256
        Returns:
            uint256[]
        """
        ...

    def swapExactTokensForTokens(self, amountIn: uint256, amountOutMin: uint256, path: List[Union[Account, Address]], to_: Union[Account, Address], deadline: uint256, *, from_: Optional[Union[Account, Address, str]] = None, to: Optional[Union[Account, Address, str]] = None, value: Union[int, str] = 0, gas_limit: Optional[Union[int, Literal["max"], Literal["auto"]]] = None, request_type: RequestType = 'tx', gas_price: Optional[Union[int, str]] = None, max_fee_per_gas: Optional[Union[int, str]] = None, max_priority_fee_per_gas: Optional[Union[int, str]] = None, access_list: Optional[Union[Dict[Union[Account, Address, str], List[int]], Literal["auto"]]] = None, type: Optional[int] = None, block: Optional[Union[int, Literal["latest"], Literal["pending"], Literal["earliest"], Literal["safe"], Literal["finalized"]]] = None, confirmations: Optional[int] = None) -> Union[List[uint256], TransactionAbc[List[uint256]], int, Tuple[Dict[Address, List[int]], int]]:
        """
        [Source code](file:///Users/dteiml/p/hacker-dom/woke-uniswap-v2/src/UniswapV2Router02.sol#225)

        Args:
            amountIn: uint256
            amountOutMin: uint256
            path: address[]
            to_: address
            deadline: uint256
        Returns:
            uint256[]
        """
        return self._execute(self.chain, request_type, "38ed1739", [amountIn, amountOutMin, path, to_, deadline], True if request_type == "tx" else False, List[uint256], from_, to if to is not None else str(self.address), value, gas_limit, gas_price, max_fee_per_gas, max_priority_fee_per_gas, access_list, type, block, confirmations)

    @overload
    def swapTokensForExactTokens(self, amountOut: uint256, amountInMax: uint256, path: List[Union[Account, Address]], to_: Union[Account, Address], deadline: uint256, *, from_: Optional[Union[Account, Address, str]] = None, to: Optional[Union[Account, Address, str]] = None, value: Union[int, str] = 0, gas_limit: Optional[Union[int, Literal["max"], Literal["auto"]]] = None, request_type: Literal["call"], gas_price: Optional[Union[int, str]] = None, max_fee_per_gas: Optional[Union[int, str]] = None, max_priority_fee_per_gas: Optional[Union[int, str]] = None, access_list: Optional[Union[Dict[Union[Account, Address, str], List[int]], Literal["auto"]]] = None, type: Optional[int] = None, block: Optional[Union[int, Literal["latest"], Literal["pending"], Literal["earliest"], Literal["safe"], Literal["finalized"]]] = None, confirmations: Optional[int] = None) -> List[uint256]:
        """
        [Source code](file:///Users/dteiml/p/hacker-dom/woke-uniswap-v2/src/UniswapV2Router02.sol#242)

        Args:
            amountOut: uint256
            amountInMax: uint256
            path: address[]
            to_: address
            deadline: uint256
        Returns:
            uint256[]
        """
        ...

    @overload
    def swapTokensForExactTokens(self, amountOut: uint256, amountInMax: uint256, path: List[Union[Account, Address]], to_: Union[Account, Address], deadline: uint256, *, from_: Optional[Union[Account, Address, str]] = None, to: Optional[Union[Account, Address, str]] = None, value: Union[int, str] = 0, gas_limit: Optional[Union[int, Literal["max"], Literal["auto"]]] = None, request_type: Literal["estimate"], gas_price: Optional[Union[int, str]] = None, max_fee_per_gas: Optional[Union[int, str]] = None, max_priority_fee_per_gas: Optional[Union[int, str]] = None, access_list: Optional[Union[Dict[Union[Account, Address, str], List[int]], Literal["auto"]]] = None, type: Optional[int] = None, block: Optional[Union[int, Literal["latest"], Literal["pending"], Literal["earliest"], Literal["safe"], Literal["finalized"]]] = None, confirmations: Optional[int] = None) -> int:
        """
        [Source code](file:///Users/dteiml/p/hacker-dom/woke-uniswap-v2/src/UniswapV2Router02.sol#242)

        Args:
            amountOut: uint256
            amountInMax: uint256
            path: address[]
            to_: address
            deadline: uint256
        Returns:
            uint256[]
        """
        ...

    @overload
    def swapTokensForExactTokens(self, amountOut: uint256, amountInMax: uint256, path: List[Union[Account, Address]], to_: Union[Account, Address], deadline: uint256, *, from_: Optional[Union[Account, Address, str]] = None, to: Optional[Union[Account, Address, str]] = None, value: Union[int, str] = 0, gas_limit: Optional[Union[int, Literal["max"], Literal["auto"]]] = None, request_type: Literal["access_list"], gas_price: Optional[Union[int, str]] = None, max_fee_per_gas: Optional[Union[int, str]] = None, max_priority_fee_per_gas: Optional[Union[int, str]] = None, access_list: Optional[Union[Dict[Union[Account, Address, str], List[int]], Literal["auto"]]] = None, type: Optional[int] = None, block: Optional[Union[int, Literal["latest"], Literal["pending"], Literal["earliest"], Literal["safe"], Literal["finalized"]]] = None, confirmations: Optional[int] = None) -> Tuple[Dict[Address, List[int]], int]:
        """
        [Source code](file:///Users/dteiml/p/hacker-dom/woke-uniswap-v2/src/UniswapV2Router02.sol#242)

        Args:
            amountOut: uint256
            amountInMax: uint256
            path: address[]
            to_: address
            deadline: uint256
        Returns:
            uint256[]
        """
        ...

    @overload
    def swapTokensForExactTokens(self, amountOut: uint256, amountInMax: uint256, path: List[Union[Account, Address]], to_: Union[Account, Address], deadline: uint256, *, from_: Optional[Union[Account, Address, str]] = None, to: Optional[Union[Account, Address, str]] = None, value: Union[int, str] = 0, gas_limit: Optional[Union[int, Literal["max"], Literal["auto"]]] = None, request_type: Literal["tx"] = "tx", gas_price: Optional[Union[int, str]] = None, max_fee_per_gas: Optional[Union[int, str]] = None, max_priority_fee_per_gas: Optional[Union[int, str]] = None, access_list: Optional[Union[Dict[Union[Account, Address, str], List[int]], Literal["auto"]]] = None, type: Optional[int] = None, block: Optional[Union[int, Literal["latest"], Literal["pending"], Literal["earliest"], Literal["safe"], Literal["finalized"]]] = None, confirmations: Optional[int] = None) -> TransactionAbc[List[uint256]]:
        """
        [Source code](file:///Users/dteiml/p/hacker-dom/woke-uniswap-v2/src/UniswapV2Router02.sol#242)

        Args:
            amountOut: uint256
            amountInMax: uint256
            path: address[]
            to_: address
            deadline: uint256
        Returns:
            uint256[]
        """
        ...

    def swapTokensForExactTokens(self, amountOut: uint256, amountInMax: uint256, path: List[Union[Account, Address]], to_: Union[Account, Address], deadline: uint256, *, from_: Optional[Union[Account, Address, str]] = None, to: Optional[Union[Account, Address, str]] = None, value: Union[int, str] = 0, gas_limit: Optional[Union[int, Literal["max"], Literal["auto"]]] = None, request_type: RequestType = 'tx', gas_price: Optional[Union[int, str]] = None, max_fee_per_gas: Optional[Union[int, str]] = None, max_priority_fee_per_gas: Optional[Union[int, str]] = None, access_list: Optional[Union[Dict[Union[Account, Address, str], List[int]], Literal["auto"]]] = None, type: Optional[int] = None, block: Optional[Union[int, Literal["latest"], Literal["pending"], Literal["earliest"], Literal["safe"], Literal["finalized"]]] = None, confirmations: Optional[int] = None) -> Union[List[uint256], TransactionAbc[List[uint256]], int, Tuple[Dict[Address, List[int]], int]]:
        """
        [Source code](file:///Users/dteiml/p/hacker-dom/woke-uniswap-v2/src/UniswapV2Router02.sol#242)

        Args:
            amountOut: uint256
            amountInMax: uint256
            path: address[]
            to_: address
            deadline: uint256
        Returns:
            uint256[]
        """
        return self._execute(self.chain, request_type, "8803dbee", [amountOut, amountInMax, path, to_, deadline], True if request_type == "tx" else False, List[uint256], from_, to if to is not None else str(self.address), value, gas_limit, gas_price, max_fee_per_gas, max_priority_fee_per_gas, access_list, type, block, confirmations)

    @overload
    def swapExactETHForTokens(self, amountOutMin: uint256, path: List[Union[Account, Address]], to_: Union[Account, Address], deadline: uint256, *, from_: Optional[Union[Account, Address, str]] = None, to: Optional[Union[Account, Address, str]] = None, value: Union[int, str] = 0, gas_limit: Optional[Union[int, Literal["max"], Literal["auto"]]] = None, request_type: Literal["call"], gas_price: Optional[Union[int, str]] = None, max_fee_per_gas: Optional[Union[int, str]] = None, max_priority_fee_per_gas: Optional[Union[int, str]] = None, access_list: Optional[Union[Dict[Union[Account, Address, str], List[int]], Literal["auto"]]] = None, type: Optional[int] = None, block: Optional[Union[int, Literal["latest"], Literal["pending"], Literal["earliest"], Literal["safe"], Literal["finalized"]]] = None, confirmations: Optional[int] = None) -> List[uint256]:
        """
        [Source code](file:///Users/dteiml/p/hacker-dom/woke-uniswap-v2/src/UniswapV2Router02.sol#256)

        Args:
            amountOutMin: uint256
            path: address[]
            to_: address
            deadline: uint256
        Returns:
            uint256[]
        """
        ...

    @overload
    def swapExactETHForTokens(self, amountOutMin: uint256, path: List[Union[Account, Address]], to_: Union[Account, Address], deadline: uint256, *, from_: Optional[Union[Account, Address, str]] = None, to: Optional[Union[Account, Address, str]] = None, value: Union[int, str] = 0, gas_limit: Optional[Union[int, Literal["max"], Literal["auto"]]] = None, request_type: Literal["estimate"], gas_price: Optional[Union[int, str]] = None, max_fee_per_gas: Optional[Union[int, str]] = None, max_priority_fee_per_gas: Optional[Union[int, str]] = None, access_list: Optional[Union[Dict[Union[Account, Address, str], List[int]], Literal["auto"]]] = None, type: Optional[int] = None, block: Optional[Union[int, Literal["latest"], Literal["pending"], Literal["earliest"], Literal["safe"], Literal["finalized"]]] = None, confirmations: Optional[int] = None) -> int:
        """
        [Source code](file:///Users/dteiml/p/hacker-dom/woke-uniswap-v2/src/UniswapV2Router02.sol#256)

        Args:
            amountOutMin: uint256
            path: address[]
            to_: address
            deadline: uint256
        Returns:
            uint256[]
        """
        ...

    @overload
    def swapExactETHForTokens(self, amountOutMin: uint256, path: List[Union[Account, Address]], to_: Union[Account, Address], deadline: uint256, *, from_: Optional[Union[Account, Address, str]] = None, to: Optional[Union[Account, Address, str]] = None, value: Union[int, str] = 0, gas_limit: Optional[Union[int, Literal["max"], Literal["auto"]]] = None, request_type: Literal["access_list"], gas_price: Optional[Union[int, str]] = None, max_fee_per_gas: Optional[Union[int, str]] = None, max_priority_fee_per_gas: Optional[Union[int, str]] = None, access_list: Optional[Union[Dict[Union[Account, Address, str], List[int]], Literal["auto"]]] = None, type: Optional[int] = None, block: Optional[Union[int, Literal["latest"], Literal["pending"], Literal["earliest"], Literal["safe"], Literal["finalized"]]] = None, confirmations: Optional[int] = None) -> Tuple[Dict[Address, List[int]], int]:
        """
        [Source code](file:///Users/dteiml/p/hacker-dom/woke-uniswap-v2/src/UniswapV2Router02.sol#256)

        Args:
            amountOutMin: uint256
            path: address[]
            to_: address
            deadline: uint256
        Returns:
            uint256[]
        """
        ...

    @overload
    def swapExactETHForTokens(self, amountOutMin: uint256, path: List[Union[Account, Address]], to_: Union[Account, Address], deadline: uint256, *, from_: Optional[Union[Account, Address, str]] = None, to: Optional[Union[Account, Address, str]] = None, value: Union[int, str] = 0, gas_limit: Optional[Union[int, Literal["max"], Literal["auto"]]] = None, request_type: Literal["tx"] = "tx", gas_price: Optional[Union[int, str]] = None, max_fee_per_gas: Optional[Union[int, str]] = None, max_priority_fee_per_gas: Optional[Union[int, str]] = None, access_list: Optional[Union[Dict[Union[Account, Address, str], List[int]], Literal["auto"]]] = None, type: Optional[int] = None, block: Optional[Union[int, Literal["latest"], Literal["pending"], Literal["earliest"], Literal["safe"], Literal["finalized"]]] = None, confirmations: Optional[int] = None) -> TransactionAbc[List[uint256]]:
        """
        [Source code](file:///Users/dteiml/p/hacker-dom/woke-uniswap-v2/src/UniswapV2Router02.sol#256)

        Args:
            amountOutMin: uint256
            path: address[]
            to_: address
            deadline: uint256
        Returns:
            uint256[]
        """
        ...

    def swapExactETHForTokens(self, amountOutMin: uint256, path: List[Union[Account, Address]], to_: Union[Account, Address], deadline: uint256, *, from_: Optional[Union[Account, Address, str]] = None, to: Optional[Union[Account, Address, str]] = None, value: Union[int, str] = 0, gas_limit: Optional[Union[int, Literal["max"], Literal["auto"]]] = None, request_type: RequestType = 'tx', gas_price: Optional[Union[int, str]] = None, max_fee_per_gas: Optional[Union[int, str]] = None, max_priority_fee_per_gas: Optional[Union[int, str]] = None, access_list: Optional[Union[Dict[Union[Account, Address, str], List[int]], Literal["auto"]]] = None, type: Optional[int] = None, block: Optional[Union[int, Literal["latest"], Literal["pending"], Literal["earliest"], Literal["safe"], Literal["finalized"]]] = None, confirmations: Optional[int] = None) -> Union[List[uint256], TransactionAbc[List[uint256]], int, Tuple[Dict[Address, List[int]], int]]:
        """
        [Source code](file:///Users/dteiml/p/hacker-dom/woke-uniswap-v2/src/UniswapV2Router02.sol#256)

        Args:
            amountOutMin: uint256
            path: address[]
            to_: address
            deadline: uint256
        Returns:
            uint256[]
        """
        return self._execute(self.chain, request_type, "7ff36ab5", [amountOutMin, path, to_, deadline], True if request_type == "tx" else False, List[uint256], from_, to if to is not None else str(self.address), value, gas_limit, gas_price, max_fee_per_gas, max_priority_fee_per_gas, access_list, type, block, confirmations)

    @overload
    def swapTokensForExactETH(self, amountOut: uint256, amountInMax: uint256, path: List[Union[Account, Address]], to_: Union[Account, Address], deadline: uint256, *, from_: Optional[Union[Account, Address, str]] = None, to: Optional[Union[Account, Address, str]] = None, value: Union[int, str] = 0, gas_limit: Optional[Union[int, Literal["max"], Literal["auto"]]] = None, request_type: Literal["call"], gas_price: Optional[Union[int, str]] = None, max_fee_per_gas: Optional[Union[int, str]] = None, max_priority_fee_per_gas: Optional[Union[int, str]] = None, access_list: Optional[Union[Dict[Union[Account, Address, str], List[int]], Literal["auto"]]] = None, type: Optional[int] = None, block: Optional[Union[int, Literal["latest"], Literal["pending"], Literal["earliest"], Literal["safe"], Literal["finalized"]]] = None, confirmations: Optional[int] = None) -> List[uint256]:
        """
        [Source code](file:///Users/dteiml/p/hacker-dom/woke-uniswap-v2/src/UniswapV2Router02.sol#270)

        Args:
            amountOut: uint256
            amountInMax: uint256
            path: address[]
            to_: address
            deadline: uint256
        Returns:
            uint256[]
        """
        ...

    @overload
    def swapTokensForExactETH(self, amountOut: uint256, amountInMax: uint256, path: List[Union[Account, Address]], to_: Union[Account, Address], deadline: uint256, *, from_: Optional[Union[Account, Address, str]] = None, to: Optional[Union[Account, Address, str]] = None, value: Union[int, str] = 0, gas_limit: Optional[Union[int, Literal["max"], Literal["auto"]]] = None, request_type: Literal["estimate"], gas_price: Optional[Union[int, str]] = None, max_fee_per_gas: Optional[Union[int, str]] = None, max_priority_fee_per_gas: Optional[Union[int, str]] = None, access_list: Optional[Union[Dict[Union[Account, Address, str], List[int]], Literal["auto"]]] = None, type: Optional[int] = None, block: Optional[Union[int, Literal["latest"], Literal["pending"], Literal["earliest"], Literal["safe"], Literal["finalized"]]] = None, confirmations: Optional[int] = None) -> int:
        """
        [Source code](file:///Users/dteiml/p/hacker-dom/woke-uniswap-v2/src/UniswapV2Router02.sol#270)

        Args:
            amountOut: uint256
            amountInMax: uint256
            path: address[]
            to_: address
            deadline: uint256
        Returns:
            uint256[]
        """
        ...

    @overload
    def swapTokensForExactETH(self, amountOut: uint256, amountInMax: uint256, path: List[Union[Account, Address]], to_: Union[Account, Address], deadline: uint256, *, from_: Optional[Union[Account, Address, str]] = None, to: Optional[Union[Account, Address, str]] = None, value: Union[int, str] = 0, gas_limit: Optional[Union[int, Literal["max"], Literal["auto"]]] = None, request_type: Literal["access_list"], gas_price: Optional[Union[int, str]] = None, max_fee_per_gas: Optional[Union[int, str]] = None, max_priority_fee_per_gas: Optional[Union[int, str]] = None, access_list: Optional[Union[Dict[Union[Account, Address, str], List[int]], Literal["auto"]]] = None, type: Optional[int] = None, block: Optional[Union[int, Literal["latest"], Literal["pending"], Literal["earliest"], Literal["safe"], Literal["finalized"]]] = None, confirmations: Optional[int] = None) -> Tuple[Dict[Address, List[int]], int]:
        """
        [Source code](file:///Users/dteiml/p/hacker-dom/woke-uniswap-v2/src/UniswapV2Router02.sol#270)

        Args:
            amountOut: uint256
            amountInMax: uint256
            path: address[]
            to_: address
            deadline: uint256
        Returns:
            uint256[]
        """
        ...

    @overload
    def swapTokensForExactETH(self, amountOut: uint256, amountInMax: uint256, path: List[Union[Account, Address]], to_: Union[Account, Address], deadline: uint256, *, from_: Optional[Union[Account, Address, str]] = None, to: Optional[Union[Account, Address, str]] = None, value: Union[int, str] = 0, gas_limit: Optional[Union[int, Literal["max"], Literal["auto"]]] = None, request_type: Literal["tx"] = "tx", gas_price: Optional[Union[int, str]] = None, max_fee_per_gas: Optional[Union[int, str]] = None, max_priority_fee_per_gas: Optional[Union[int, str]] = None, access_list: Optional[Union[Dict[Union[Account, Address, str], List[int]], Literal["auto"]]] = None, type: Optional[int] = None, block: Optional[Union[int, Literal["latest"], Literal["pending"], Literal["earliest"], Literal["safe"], Literal["finalized"]]] = None, confirmations: Optional[int] = None) -> TransactionAbc[List[uint256]]:
        """
        [Source code](file:///Users/dteiml/p/hacker-dom/woke-uniswap-v2/src/UniswapV2Router02.sol#270)

        Args:
            amountOut: uint256
            amountInMax: uint256
            path: address[]
            to_: address
            deadline: uint256
        Returns:
            uint256[]
        """
        ...

    def swapTokensForExactETH(self, amountOut: uint256, amountInMax: uint256, path: List[Union[Account, Address]], to_: Union[Account, Address], deadline: uint256, *, from_: Optional[Union[Account, Address, str]] = None, to: Optional[Union[Account, Address, str]] = None, value: Union[int, str] = 0, gas_limit: Optional[Union[int, Literal["max"], Literal["auto"]]] = None, request_type: RequestType = 'tx', gas_price: Optional[Union[int, str]] = None, max_fee_per_gas: Optional[Union[int, str]] = None, max_priority_fee_per_gas: Optional[Union[int, str]] = None, access_list: Optional[Union[Dict[Union[Account, Address, str], List[int]], Literal["auto"]]] = None, type: Optional[int] = None, block: Optional[Union[int, Literal["latest"], Literal["pending"], Literal["earliest"], Literal["safe"], Literal["finalized"]]] = None, confirmations: Optional[int] = None) -> Union[List[uint256], TransactionAbc[List[uint256]], int, Tuple[Dict[Address, List[int]], int]]:
        """
        [Source code](file:///Users/dteiml/p/hacker-dom/woke-uniswap-v2/src/UniswapV2Router02.sol#270)

        Args:
            amountOut: uint256
            amountInMax: uint256
            path: address[]
            to_: address
            deadline: uint256
        Returns:
            uint256[]
        """
        return self._execute(self.chain, request_type, "4a25d94a", [amountOut, amountInMax, path, to_, deadline], True if request_type == "tx" else False, List[uint256], from_, to if to is not None else str(self.address), value, gas_limit, gas_price, max_fee_per_gas, max_priority_fee_per_gas, access_list, type, block, confirmations)

    @overload
    def swapExactTokensForETH(self, amountIn: uint256, amountOutMin: uint256, path: List[Union[Account, Address]], to_: Union[Account, Address], deadline: uint256, *, from_: Optional[Union[Account, Address, str]] = None, to: Optional[Union[Account, Address, str]] = None, value: Union[int, str] = 0, gas_limit: Optional[Union[int, Literal["max"], Literal["auto"]]] = None, request_type: Literal["call"], gas_price: Optional[Union[int, str]] = None, max_fee_per_gas: Optional[Union[int, str]] = None, max_priority_fee_per_gas: Optional[Union[int, str]] = None, access_list: Optional[Union[Dict[Union[Account, Address, str], List[int]], Literal["auto"]]] = None, type: Optional[int] = None, block: Optional[Union[int, Literal["latest"], Literal["pending"], Literal["earliest"], Literal["safe"], Literal["finalized"]]] = None, confirmations: Optional[int] = None) -> List[uint256]:
        """
        [Source code](file:///Users/dteiml/p/hacker-dom/woke-uniswap-v2/src/UniswapV2Router02.sol#286)

        Args:
            amountIn: uint256
            amountOutMin: uint256
            path: address[]
            to_: address
            deadline: uint256
        Returns:
            uint256[]
        """
        ...

    @overload
    def swapExactTokensForETH(self, amountIn: uint256, amountOutMin: uint256, path: List[Union[Account, Address]], to_: Union[Account, Address], deadline: uint256, *, from_: Optional[Union[Account, Address, str]] = None, to: Optional[Union[Account, Address, str]] = None, value: Union[int, str] = 0, gas_limit: Optional[Union[int, Literal["max"], Literal["auto"]]] = None, request_type: Literal["estimate"], gas_price: Optional[Union[int, str]] = None, max_fee_per_gas: Optional[Union[int, str]] = None, max_priority_fee_per_gas: Optional[Union[int, str]] = None, access_list: Optional[Union[Dict[Union[Account, Address, str], List[int]], Literal["auto"]]] = None, type: Optional[int] = None, block: Optional[Union[int, Literal["latest"], Literal["pending"], Literal["earliest"], Literal["safe"], Literal["finalized"]]] = None, confirmations: Optional[int] = None) -> int:
        """
        [Source code](file:///Users/dteiml/p/hacker-dom/woke-uniswap-v2/src/UniswapV2Router02.sol#286)

        Args:
            amountIn: uint256
            amountOutMin: uint256
            path: address[]
            to_: address
            deadline: uint256
        Returns:
            uint256[]
        """
        ...

    @overload
    def swapExactTokensForETH(self, amountIn: uint256, amountOutMin: uint256, path: List[Union[Account, Address]], to_: Union[Account, Address], deadline: uint256, *, from_: Optional[Union[Account, Address, str]] = None, to: Optional[Union[Account, Address, str]] = None, value: Union[int, str] = 0, gas_limit: Optional[Union[int, Literal["max"], Literal["auto"]]] = None, request_type: Literal["access_list"], gas_price: Optional[Union[int, str]] = None, max_fee_per_gas: Optional[Union[int, str]] = None, max_priority_fee_per_gas: Optional[Union[int, str]] = None, access_list: Optional[Union[Dict[Union[Account, Address, str], List[int]], Literal["auto"]]] = None, type: Optional[int] = None, block: Optional[Union[int, Literal["latest"], Literal["pending"], Literal["earliest"], Literal["safe"], Literal["finalized"]]] = None, confirmations: Optional[int] = None) -> Tuple[Dict[Address, List[int]], int]:
        """
        [Source code](file:///Users/dteiml/p/hacker-dom/woke-uniswap-v2/src/UniswapV2Router02.sol#286)

        Args:
            amountIn: uint256
            amountOutMin: uint256
            path: address[]
            to_: address
            deadline: uint256
        Returns:
            uint256[]
        """
        ...

    @overload
    def swapExactTokensForETH(self, amountIn: uint256, amountOutMin: uint256, path: List[Union[Account, Address]], to_: Union[Account, Address], deadline: uint256, *, from_: Optional[Union[Account, Address, str]] = None, to: Optional[Union[Account, Address, str]] = None, value: Union[int, str] = 0, gas_limit: Optional[Union[int, Literal["max"], Literal["auto"]]] = None, request_type: Literal["tx"] = "tx", gas_price: Optional[Union[int, str]] = None, max_fee_per_gas: Optional[Union[int, str]] = None, max_priority_fee_per_gas: Optional[Union[int, str]] = None, access_list: Optional[Union[Dict[Union[Account, Address, str], List[int]], Literal["auto"]]] = None, type: Optional[int] = None, block: Optional[Union[int, Literal["latest"], Literal["pending"], Literal["earliest"], Literal["safe"], Literal["finalized"]]] = None, confirmations: Optional[int] = None) -> TransactionAbc[List[uint256]]:
        """
        [Source code](file:///Users/dteiml/p/hacker-dom/woke-uniswap-v2/src/UniswapV2Router02.sol#286)

        Args:
            amountIn: uint256
            amountOutMin: uint256
            path: address[]
            to_: address
            deadline: uint256
        Returns:
            uint256[]
        """
        ...

    def swapExactTokensForETH(self, amountIn: uint256, amountOutMin: uint256, path: List[Union[Account, Address]], to_: Union[Account, Address], deadline: uint256, *, from_: Optional[Union[Account, Address, str]] = None, to: Optional[Union[Account, Address, str]] = None, value: Union[int, str] = 0, gas_limit: Optional[Union[int, Literal["max"], Literal["auto"]]] = None, request_type: RequestType = 'tx', gas_price: Optional[Union[int, str]] = None, max_fee_per_gas: Optional[Union[int, str]] = None, max_priority_fee_per_gas: Optional[Union[int, str]] = None, access_list: Optional[Union[Dict[Union[Account, Address, str], List[int]], Literal["auto"]]] = None, type: Optional[int] = None, block: Optional[Union[int, Literal["latest"], Literal["pending"], Literal["earliest"], Literal["safe"], Literal["finalized"]]] = None, confirmations: Optional[int] = None) -> Union[List[uint256], TransactionAbc[List[uint256]], int, Tuple[Dict[Address, List[int]], int]]:
        """
        [Source code](file:///Users/dteiml/p/hacker-dom/woke-uniswap-v2/src/UniswapV2Router02.sol#286)

        Args:
            amountIn: uint256
            amountOutMin: uint256
            path: address[]
            to_: address
            deadline: uint256
        Returns:
            uint256[]
        """
        return self._execute(self.chain, request_type, "18cbafe5", [amountIn, amountOutMin, path, to_, deadline], True if request_type == "tx" else False, List[uint256], from_, to if to is not None else str(self.address), value, gas_limit, gas_price, max_fee_per_gas, max_priority_fee_per_gas, access_list, type, block, confirmations)

    @overload
    def swapETHForExactTokens(self, amountOut: uint256, path: List[Union[Account, Address]], to_: Union[Account, Address], deadline: uint256, *, from_: Optional[Union[Account, Address, str]] = None, to: Optional[Union[Account, Address, str]] = None, value: Union[int, str] = 0, gas_limit: Optional[Union[int, Literal["max"], Literal["auto"]]] = None, request_type: Literal["call"], gas_price: Optional[Union[int, str]] = None, max_fee_per_gas: Optional[Union[int, str]] = None, max_priority_fee_per_gas: Optional[Union[int, str]] = None, access_list: Optional[Union[Dict[Union[Account, Address, str], List[int]], Literal["auto"]]] = None, type: Optional[int] = None, block: Optional[Union[int, Literal["latest"], Literal["pending"], Literal["earliest"], Literal["safe"], Literal["finalized"]]] = None, confirmations: Optional[int] = None) -> List[uint256]:
        """
        [Source code](file:///Users/dteiml/p/hacker-dom/woke-uniswap-v2/src/UniswapV2Router02.sol#302)

        Args:
            amountOut: uint256
            path: address[]
            to_: address
            deadline: uint256
        Returns:
            uint256[]
        """
        ...

    @overload
    def swapETHForExactTokens(self, amountOut: uint256, path: List[Union[Account, Address]], to_: Union[Account, Address], deadline: uint256, *, from_: Optional[Union[Account, Address, str]] = None, to: Optional[Union[Account, Address, str]] = None, value: Union[int, str] = 0, gas_limit: Optional[Union[int, Literal["max"], Literal["auto"]]] = None, request_type: Literal["estimate"], gas_price: Optional[Union[int, str]] = None, max_fee_per_gas: Optional[Union[int, str]] = None, max_priority_fee_per_gas: Optional[Union[int, str]] = None, access_list: Optional[Union[Dict[Union[Account, Address, str], List[int]], Literal["auto"]]] = None, type: Optional[int] = None, block: Optional[Union[int, Literal["latest"], Literal["pending"], Literal["earliest"], Literal["safe"], Literal["finalized"]]] = None, confirmations: Optional[int] = None) -> int:
        """
        [Source code](file:///Users/dteiml/p/hacker-dom/woke-uniswap-v2/src/UniswapV2Router02.sol#302)

        Args:
            amountOut: uint256
            path: address[]
            to_: address
            deadline: uint256
        Returns:
            uint256[]
        """
        ...

    @overload
    def swapETHForExactTokens(self, amountOut: uint256, path: List[Union[Account, Address]], to_: Union[Account, Address], deadline: uint256, *, from_: Optional[Union[Account, Address, str]] = None, to: Optional[Union[Account, Address, str]] = None, value: Union[int, str] = 0, gas_limit: Optional[Union[int, Literal["max"], Literal["auto"]]] = None, request_type: Literal["access_list"], gas_price: Optional[Union[int, str]] = None, max_fee_per_gas: Optional[Union[int, str]] = None, max_priority_fee_per_gas: Optional[Union[int, str]] = None, access_list: Optional[Union[Dict[Union[Account, Address, str], List[int]], Literal["auto"]]] = None, type: Optional[int] = None, block: Optional[Union[int, Literal["latest"], Literal["pending"], Literal["earliest"], Literal["safe"], Literal["finalized"]]] = None, confirmations: Optional[int] = None) -> Tuple[Dict[Address, List[int]], int]:
        """
        [Source code](file:///Users/dteiml/p/hacker-dom/woke-uniswap-v2/src/UniswapV2Router02.sol#302)

        Args:
            amountOut: uint256
            path: address[]
            to_: address
            deadline: uint256
        Returns:
            uint256[]
        """
        ...

    @overload
    def swapETHForExactTokens(self, amountOut: uint256, path: List[Union[Account, Address]], to_: Union[Account, Address], deadline: uint256, *, from_: Optional[Union[Account, Address, str]] = None, to: Optional[Union[Account, Address, str]] = None, value: Union[int, str] = 0, gas_limit: Optional[Union[int, Literal["max"], Literal["auto"]]] = None, request_type: Literal["tx"] = "tx", gas_price: Optional[Union[int, str]] = None, max_fee_per_gas: Optional[Union[int, str]] = None, max_priority_fee_per_gas: Optional[Union[int, str]] = None, access_list: Optional[Union[Dict[Union[Account, Address, str], List[int]], Literal["auto"]]] = None, type: Optional[int] = None, block: Optional[Union[int, Literal["latest"], Literal["pending"], Literal["earliest"], Literal["safe"], Literal["finalized"]]] = None, confirmations: Optional[int] = None) -> TransactionAbc[List[uint256]]:
        """
        [Source code](file:///Users/dteiml/p/hacker-dom/woke-uniswap-v2/src/UniswapV2Router02.sol#302)

        Args:
            amountOut: uint256
            path: address[]
            to_: address
            deadline: uint256
        Returns:
            uint256[]
        """
        ...

    def swapETHForExactTokens(self, amountOut: uint256, path: List[Union[Account, Address]], to_: Union[Account, Address], deadline: uint256, *, from_: Optional[Union[Account, Address, str]] = None, to: Optional[Union[Account, Address, str]] = None, value: Union[int, str] = 0, gas_limit: Optional[Union[int, Literal["max"], Literal["auto"]]] = None, request_type: RequestType = 'tx', gas_price: Optional[Union[int, str]] = None, max_fee_per_gas: Optional[Union[int, str]] = None, max_priority_fee_per_gas: Optional[Union[int, str]] = None, access_list: Optional[Union[Dict[Union[Account, Address, str], List[int]], Literal["auto"]]] = None, type: Optional[int] = None, block: Optional[Union[int, Literal["latest"], Literal["pending"], Literal["earliest"], Literal["safe"], Literal["finalized"]]] = None, confirmations: Optional[int] = None) -> Union[List[uint256], TransactionAbc[List[uint256]], int, Tuple[Dict[Address, List[int]], int]]:
        """
        [Source code](file:///Users/dteiml/p/hacker-dom/woke-uniswap-v2/src/UniswapV2Router02.sol#302)

        Args:
            amountOut: uint256
            path: address[]
            to_: address
            deadline: uint256
        Returns:
            uint256[]
        """
        return self._execute(self.chain, request_type, "fb3bdb41", [amountOut, path, to_, deadline], True if request_type == "tx" else False, List[uint256], from_, to if to is not None else str(self.address), value, gas_limit, gas_price, max_fee_per_gas, max_priority_fee_per_gas, access_list, type, block, confirmations)

    @overload
    def swapExactTokensForTokensSupportingFeeOnTransferTokens(self, amountIn: uint256, amountOutMin: uint256, path: List[Union[Account, Address]], to_: Union[Account, Address], deadline: uint256, *, from_: Optional[Union[Account, Address, str]] = None, to: Optional[Union[Account, Address, str]] = None, value: Union[int, str] = 0, gas_limit: Optional[Union[int, Literal["max"], Literal["auto"]]] = None, request_type: Literal["call"], gas_price: Optional[Union[int, str]] = None, max_fee_per_gas: Optional[Union[int, str]] = None, max_priority_fee_per_gas: Optional[Union[int, str]] = None, access_list: Optional[Union[Dict[Union[Account, Address, str], List[int]], Literal["auto"]]] = None, type: Optional[int] = None, block: Optional[Union[int, Literal["latest"], Literal["pending"], Literal["earliest"], Literal["safe"], Literal["finalized"]]] = None, confirmations: Optional[int] = None) -> None:
        """
        [Source code](file:///Users/dteiml/p/hacker-dom/woke-uniswap-v2/src/UniswapV2Router02.sol#339)

        Args:
            amountIn: uint256
            amountOutMin: uint256
            path: address[]
            to_: address
            deadline: uint256
        """
        ...

    @overload
    def swapExactTokensForTokensSupportingFeeOnTransferTokens(self, amountIn: uint256, amountOutMin: uint256, path: List[Union[Account, Address]], to_: Union[Account, Address], deadline: uint256, *, from_: Optional[Union[Account, Address, str]] = None, to: Optional[Union[Account, Address, str]] = None, value: Union[int, str] = 0, gas_limit: Optional[Union[int, Literal["max"], Literal["auto"]]] = None, request_type: Literal["estimate"], gas_price: Optional[Union[int, str]] = None, max_fee_per_gas: Optional[Union[int, str]] = None, max_priority_fee_per_gas: Optional[Union[int, str]] = None, access_list: Optional[Union[Dict[Union[Account, Address, str], List[int]], Literal["auto"]]] = None, type: Optional[int] = None, block: Optional[Union[int, Literal["latest"], Literal["pending"], Literal["earliest"], Literal["safe"], Literal["finalized"]]] = None, confirmations: Optional[int] = None) -> int:
        """
        [Source code](file:///Users/dteiml/p/hacker-dom/woke-uniswap-v2/src/UniswapV2Router02.sol#339)

        Args:
            amountIn: uint256
            amountOutMin: uint256
            path: address[]
            to_: address
            deadline: uint256
        """
        ...

    @overload
    def swapExactTokensForTokensSupportingFeeOnTransferTokens(self, amountIn: uint256, amountOutMin: uint256, path: List[Union[Account, Address]], to_: Union[Account, Address], deadline: uint256, *, from_: Optional[Union[Account, Address, str]] = None, to: Optional[Union[Account, Address, str]] = None, value: Union[int, str] = 0, gas_limit: Optional[Union[int, Literal["max"], Literal["auto"]]] = None, request_type: Literal["access_list"], gas_price: Optional[Union[int, str]] = None, max_fee_per_gas: Optional[Union[int, str]] = None, max_priority_fee_per_gas: Optional[Union[int, str]] = None, access_list: Optional[Union[Dict[Union[Account, Address, str], List[int]], Literal["auto"]]] = None, type: Optional[int] = None, block: Optional[Union[int, Literal["latest"], Literal["pending"], Literal["earliest"], Literal["safe"], Literal["finalized"]]] = None, confirmations: Optional[int] = None) -> Tuple[Dict[Address, List[int]], int]:
        """
        [Source code](file:///Users/dteiml/p/hacker-dom/woke-uniswap-v2/src/UniswapV2Router02.sol#339)

        Args:
            amountIn: uint256
            amountOutMin: uint256
            path: address[]
            to_: address
            deadline: uint256
        """
        ...

    @overload
    def swapExactTokensForTokensSupportingFeeOnTransferTokens(self, amountIn: uint256, amountOutMin: uint256, path: List[Union[Account, Address]], to_: Union[Account, Address], deadline: uint256, *, from_: Optional[Union[Account, Address, str]] = None, to: Optional[Union[Account, Address, str]] = None, value: Union[int, str] = 0, gas_limit: Optional[Union[int, Literal["max"], Literal["auto"]]] = None, request_type: Literal["tx"] = "tx", gas_price: Optional[Union[int, str]] = None, max_fee_per_gas: Optional[Union[int, str]] = None, max_priority_fee_per_gas: Optional[Union[int, str]] = None, access_list: Optional[Union[Dict[Union[Account, Address, str], List[int]], Literal["auto"]]] = None, type: Optional[int] = None, block: Optional[Union[int, Literal["latest"], Literal["pending"], Literal["earliest"], Literal["safe"], Literal["finalized"]]] = None, confirmations: Optional[int] = None) -> TransactionAbc[None]:
        """
        [Source code](file:///Users/dteiml/p/hacker-dom/woke-uniswap-v2/src/UniswapV2Router02.sol#339)

        Args:
            amountIn: uint256
            amountOutMin: uint256
            path: address[]
            to_: address
            deadline: uint256
        """
        ...

    def swapExactTokensForTokensSupportingFeeOnTransferTokens(self, amountIn: uint256, amountOutMin: uint256, path: List[Union[Account, Address]], to_: Union[Account, Address], deadline: uint256, *, from_: Optional[Union[Account, Address, str]] = None, to: Optional[Union[Account, Address, str]] = None, value: Union[int, str] = 0, gas_limit: Optional[Union[int, Literal["max"], Literal["auto"]]] = None, request_type: RequestType = 'tx', gas_price: Optional[Union[int, str]] = None, max_fee_per_gas: Optional[Union[int, str]] = None, max_priority_fee_per_gas: Optional[Union[int, str]] = None, access_list: Optional[Union[Dict[Union[Account, Address, str], List[int]], Literal["auto"]]] = None, type: Optional[int] = None, block: Optional[Union[int, Literal["latest"], Literal["pending"], Literal["earliest"], Literal["safe"], Literal["finalized"]]] = None, confirmations: Optional[int] = None) -> Union[None, TransactionAbc[None], int, Tuple[Dict[Address, List[int]], int]]:
        """
        [Source code](file:///Users/dteiml/p/hacker-dom/woke-uniswap-v2/src/UniswapV2Router02.sol#339)

        Args:
            amountIn: uint256
            amountOutMin: uint256
            path: address[]
            to_: address
            deadline: uint256
        """
        return self._execute(self.chain, request_type, "5c11d795", [amountIn, amountOutMin, path, to_, deadline], True if request_type == "tx" else False, NoneType, from_, to if to is not None else str(self.address), value, gas_limit, gas_price, max_fee_per_gas, max_priority_fee_per_gas, access_list, type, block, confirmations)

    @overload
    def swapExactETHForTokensSupportingFeeOnTransferTokens(self, amountOutMin: uint256, path: List[Union[Account, Address]], to_: Union[Account, Address], deadline: uint256, *, from_: Optional[Union[Account, Address, str]] = None, to: Optional[Union[Account, Address, str]] = None, value: Union[int, str] = 0, gas_limit: Optional[Union[int, Literal["max"], Literal["auto"]]] = None, request_type: Literal["call"], gas_price: Optional[Union[int, str]] = None, max_fee_per_gas: Optional[Union[int, str]] = None, max_priority_fee_per_gas: Optional[Union[int, str]] = None, access_list: Optional[Union[Dict[Union[Account, Address, str], List[int]], Literal["auto"]]] = None, type: Optional[int] = None, block: Optional[Union[int, Literal["latest"], Literal["pending"], Literal["earliest"], Literal["safe"], Literal["finalized"]]] = None, confirmations: Optional[int] = None) -> None:
        """
        [Source code](file:///Users/dteiml/p/hacker-dom/woke-uniswap-v2/src/UniswapV2Router02.sol#356)

        Args:
            amountOutMin: uint256
            path: address[]
            to_: address
            deadline: uint256
        """
        ...

    @overload
    def swapExactETHForTokensSupportingFeeOnTransferTokens(self, amountOutMin: uint256, path: List[Union[Account, Address]], to_: Union[Account, Address], deadline: uint256, *, from_: Optional[Union[Account, Address, str]] = None, to: Optional[Union[Account, Address, str]] = None, value: Union[int, str] = 0, gas_limit: Optional[Union[int, Literal["max"], Literal["auto"]]] = None, request_type: Literal["estimate"], gas_price: Optional[Union[int, str]] = None, max_fee_per_gas: Optional[Union[int, str]] = None, max_priority_fee_per_gas: Optional[Union[int, str]] = None, access_list: Optional[Union[Dict[Union[Account, Address, str], List[int]], Literal["auto"]]] = None, type: Optional[int] = None, block: Optional[Union[int, Literal["latest"], Literal["pending"], Literal["earliest"], Literal["safe"], Literal["finalized"]]] = None, confirmations: Optional[int] = None) -> int:
        """
        [Source code](file:///Users/dteiml/p/hacker-dom/woke-uniswap-v2/src/UniswapV2Router02.sol#356)

        Args:
            amountOutMin: uint256
            path: address[]
            to_: address
            deadline: uint256
        """
        ...

    @overload
    def swapExactETHForTokensSupportingFeeOnTransferTokens(self, amountOutMin: uint256, path: List[Union[Account, Address]], to_: Union[Account, Address], deadline: uint256, *, from_: Optional[Union[Account, Address, str]] = None, to: Optional[Union[Account, Address, str]] = None, value: Union[int, str] = 0, gas_limit: Optional[Union[int, Literal["max"], Literal["auto"]]] = None, request_type: Literal["access_list"], gas_price: Optional[Union[int, str]] = None, max_fee_per_gas: Optional[Union[int, str]] = None, max_priority_fee_per_gas: Optional[Union[int, str]] = None, access_list: Optional[Union[Dict[Union[Account, Address, str], List[int]], Literal["auto"]]] = None, type: Optional[int] = None, block: Optional[Union[int, Literal["latest"], Literal["pending"], Literal["earliest"], Literal["safe"], Literal["finalized"]]] = None, confirmations: Optional[int] = None) -> Tuple[Dict[Address, List[int]], int]:
        """
        [Source code](file:///Users/dteiml/p/hacker-dom/woke-uniswap-v2/src/UniswapV2Router02.sol#356)

        Args:
            amountOutMin: uint256
            path: address[]
            to_: address
            deadline: uint256
        """
        ...

    @overload
    def swapExactETHForTokensSupportingFeeOnTransferTokens(self, amountOutMin: uint256, path: List[Union[Account, Address]], to_: Union[Account, Address], deadline: uint256, *, from_: Optional[Union[Account, Address, str]] = None, to: Optional[Union[Account, Address, str]] = None, value: Union[int, str] = 0, gas_limit: Optional[Union[int, Literal["max"], Literal["auto"]]] = None, request_type: Literal["tx"] = "tx", gas_price: Optional[Union[int, str]] = None, max_fee_per_gas: Optional[Union[int, str]] = None, max_priority_fee_per_gas: Optional[Union[int, str]] = None, access_list: Optional[Union[Dict[Union[Account, Address, str], List[int]], Literal["auto"]]] = None, type: Optional[int] = None, block: Optional[Union[int, Literal["latest"], Literal["pending"], Literal["earliest"], Literal["safe"], Literal["finalized"]]] = None, confirmations: Optional[int] = None) -> TransactionAbc[None]:
        """
        [Source code](file:///Users/dteiml/p/hacker-dom/woke-uniswap-v2/src/UniswapV2Router02.sol#356)

        Args:
            amountOutMin: uint256
            path: address[]
            to_: address
            deadline: uint256
        """
        ...

    def swapExactETHForTokensSupportingFeeOnTransferTokens(self, amountOutMin: uint256, path: List[Union[Account, Address]], to_: Union[Account, Address], deadline: uint256, *, from_: Optional[Union[Account, Address, str]] = None, to: Optional[Union[Account, Address, str]] = None, value: Union[int, str] = 0, gas_limit: Optional[Union[int, Literal["max"], Literal["auto"]]] = None, request_type: RequestType = 'tx', gas_price: Optional[Union[int, str]] = None, max_fee_per_gas: Optional[Union[int, str]] = None, max_priority_fee_per_gas: Optional[Union[int, str]] = None, access_list: Optional[Union[Dict[Union[Account, Address, str], List[int]], Literal["auto"]]] = None, type: Optional[int] = None, block: Optional[Union[int, Literal["latest"], Literal["pending"], Literal["earliest"], Literal["safe"], Literal["finalized"]]] = None, confirmations: Optional[int] = None) -> Union[None, TransactionAbc[None], int, Tuple[Dict[Address, List[int]], int]]:
        """
        [Source code](file:///Users/dteiml/p/hacker-dom/woke-uniswap-v2/src/UniswapV2Router02.sol#356)

        Args:
            amountOutMin: uint256
            path: address[]
            to_: address
            deadline: uint256
        """
        return self._execute(self.chain, request_type, "b6f9de95", [amountOutMin, path, to_, deadline], True if request_type == "tx" else False, NoneType, from_, to if to is not None else str(self.address), value, gas_limit, gas_price, max_fee_per_gas, max_priority_fee_per_gas, access_list, type, block, confirmations)

    @overload
    def swapExactTokensForETHSupportingFeeOnTransferTokens(self, amountIn: uint256, amountOutMin: uint256, path: List[Union[Account, Address]], to_: Union[Account, Address], deadline: uint256, *, from_: Optional[Union[Account, Address, str]] = None, to: Optional[Union[Account, Address, str]] = None, value: Union[int, str] = 0, gas_limit: Optional[Union[int, Literal["max"], Literal["auto"]]] = None, request_type: Literal["call"], gas_price: Optional[Union[int, str]] = None, max_fee_per_gas: Optional[Union[int, str]] = None, max_priority_fee_per_gas: Optional[Union[int, str]] = None, access_list: Optional[Union[Dict[Union[Account, Address, str], List[int]], Literal["auto"]]] = None, type: Optional[int] = None, block: Optional[Union[int, Literal["latest"], Literal["pending"], Literal["earliest"], Literal["safe"], Literal["finalized"]]] = None, confirmations: Optional[int] = None) -> None:
        """
        [Source code](file:///Users/dteiml/p/hacker-dom/woke-uniswap-v2/src/UniswapV2Router02.sol#378)

        Args:
            amountIn: uint256
            amountOutMin: uint256
            path: address[]
            to_: address
            deadline: uint256
        """
        ...

    @overload
    def swapExactTokensForETHSupportingFeeOnTransferTokens(self, amountIn: uint256, amountOutMin: uint256, path: List[Union[Account, Address]], to_: Union[Account, Address], deadline: uint256, *, from_: Optional[Union[Account, Address, str]] = None, to: Optional[Union[Account, Address, str]] = None, value: Union[int, str] = 0, gas_limit: Optional[Union[int, Literal["max"], Literal["auto"]]] = None, request_type: Literal["estimate"], gas_price: Optional[Union[int, str]] = None, max_fee_per_gas: Optional[Union[int, str]] = None, max_priority_fee_per_gas: Optional[Union[int, str]] = None, access_list: Optional[Union[Dict[Union[Account, Address, str], List[int]], Literal["auto"]]] = None, type: Optional[int] = None, block: Optional[Union[int, Literal["latest"], Literal["pending"], Literal["earliest"], Literal["safe"], Literal["finalized"]]] = None, confirmations: Optional[int] = None) -> int:
        """
        [Source code](file:///Users/dteiml/p/hacker-dom/woke-uniswap-v2/src/UniswapV2Router02.sol#378)

        Args:
            amountIn: uint256
            amountOutMin: uint256
            path: address[]
            to_: address
            deadline: uint256
        """
        ...

    @overload
    def swapExactTokensForETHSupportingFeeOnTransferTokens(self, amountIn: uint256, amountOutMin: uint256, path: List[Union[Account, Address]], to_: Union[Account, Address], deadline: uint256, *, from_: Optional[Union[Account, Address, str]] = None, to: Optional[Union[Account, Address, str]] = None, value: Union[int, str] = 0, gas_limit: Optional[Union[int, Literal["max"], Literal["auto"]]] = None, request_type: Literal["access_list"], gas_price: Optional[Union[int, str]] = None, max_fee_per_gas: Optional[Union[int, str]] = None, max_priority_fee_per_gas: Optional[Union[int, str]] = None, access_list: Optional[Union[Dict[Union[Account, Address, str], List[int]], Literal["auto"]]] = None, type: Optional[int] = None, block: Optional[Union[int, Literal["latest"], Literal["pending"], Literal["earliest"], Literal["safe"], Literal["finalized"]]] = None, confirmations: Optional[int] = None) -> Tuple[Dict[Address, List[int]], int]:
        """
        [Source code](file:///Users/dteiml/p/hacker-dom/woke-uniswap-v2/src/UniswapV2Router02.sol#378)

        Args:
            amountIn: uint256
            amountOutMin: uint256
            path: address[]
            to_: address
            deadline: uint256
        """
        ...

    @overload
    def swapExactTokensForETHSupportingFeeOnTransferTokens(self, amountIn: uint256, amountOutMin: uint256, path: List[Union[Account, Address]], to_: Union[Account, Address], deadline: uint256, *, from_: Optional[Union[Account, Address, str]] = None, to: Optional[Union[Account, Address, str]] = None, value: Union[int, str] = 0, gas_limit: Optional[Union[int, Literal["max"], Literal["auto"]]] = None, request_type: Literal["tx"] = "tx", gas_price: Optional[Union[int, str]] = None, max_fee_per_gas: Optional[Union[int, str]] = None, max_priority_fee_per_gas: Optional[Union[int, str]] = None, access_list: Optional[Union[Dict[Union[Account, Address, str], List[int]], Literal["auto"]]] = None, type: Optional[int] = None, block: Optional[Union[int, Literal["latest"], Literal["pending"], Literal["earliest"], Literal["safe"], Literal["finalized"]]] = None, confirmations: Optional[int] = None) -> TransactionAbc[None]:
        """
        [Source code](file:///Users/dteiml/p/hacker-dom/woke-uniswap-v2/src/UniswapV2Router02.sol#378)

        Args:
            amountIn: uint256
            amountOutMin: uint256
            path: address[]
            to_: address
            deadline: uint256
        """
        ...

    def swapExactTokensForETHSupportingFeeOnTransferTokens(self, amountIn: uint256, amountOutMin: uint256, path: List[Union[Account, Address]], to_: Union[Account, Address], deadline: uint256, *, from_: Optional[Union[Account, Address, str]] = None, to: Optional[Union[Account, Address, str]] = None, value: Union[int, str] = 0, gas_limit: Optional[Union[int, Literal["max"], Literal["auto"]]] = None, request_type: RequestType = 'tx', gas_price: Optional[Union[int, str]] = None, max_fee_per_gas: Optional[Union[int, str]] = None, max_priority_fee_per_gas: Optional[Union[int, str]] = None, access_list: Optional[Union[Dict[Union[Account, Address, str], List[int]], Literal["auto"]]] = None, type: Optional[int] = None, block: Optional[Union[int, Literal["latest"], Literal["pending"], Literal["earliest"], Literal["safe"], Literal["finalized"]]] = None, confirmations: Optional[int] = None) -> Union[None, TransactionAbc[None], int, Tuple[Dict[Address, List[int]], int]]:
        """
        [Source code](file:///Users/dteiml/p/hacker-dom/woke-uniswap-v2/src/UniswapV2Router02.sol#378)

        Args:
            amountIn: uint256
            amountOutMin: uint256
            path: address[]
            to_: address
            deadline: uint256
        """
        return self._execute(self.chain, request_type, "791ac947", [amountIn, amountOutMin, path, to_, deadline], True if request_type == "tx" else False, NoneType, from_, to if to is not None else str(self.address), value, gas_limit, gas_price, max_fee_per_gas, max_priority_fee_per_gas, access_list, type, block, confirmations)

    @overload
    def quote(self, amountA: uint256, reserveA: uint256, reserveB: uint256, *, from_: Optional[Union[Account, Address, str]] = None, to: Optional[Union[Account, Address, str]] = None, value: Union[int, str] = 0, gas_limit: Optional[Union[int, Literal["max"], Literal["auto"]]] = None, request_type: Literal["call"] = "call", gas_price: Optional[Union[int, str]] = None, max_fee_per_gas: Optional[Union[int, str]] = None, max_priority_fee_per_gas: Optional[Union[int, str]] = None, access_list: Optional[Union[Dict[Union[Account, Address, str], List[int]], Literal["auto"]]] = None, type: Optional[int] = None, block: Optional[Union[int, Literal["latest"], Literal["pending"], Literal["earliest"], Literal["safe"], Literal["finalized"]]] = None, confirmations: Optional[int] = None) -> uint256:
        """
        [Source code](file:///Users/dteiml/p/hacker-dom/woke-uniswap-v2/src/UniswapV2Router02.sol#401)

        Args:
            amountA: uint256
            reserveA: uint256
            reserveB: uint256
        Returns:
            uint256
        """
        ...

    @overload
    def quote(self, amountA: uint256, reserveA: uint256, reserveB: uint256, *, from_: Optional[Union[Account, Address, str]] = None, to: Optional[Union[Account, Address, str]] = None, value: Union[int, str] = 0, gas_limit: Optional[Union[int, Literal["max"], Literal["auto"]]] = None, request_type: Literal["estimate"], gas_price: Optional[Union[int, str]] = None, max_fee_per_gas: Optional[Union[int, str]] = None, max_priority_fee_per_gas: Optional[Union[int, str]] = None, access_list: Optional[Union[Dict[Union[Account, Address, str], List[int]], Literal["auto"]]] = None, type: Optional[int] = None, block: Optional[Union[int, Literal["latest"], Literal["pending"], Literal["earliest"], Literal["safe"], Literal["finalized"]]] = None, confirmations: Optional[int] = None) -> int:
        """
        [Source code](file:///Users/dteiml/p/hacker-dom/woke-uniswap-v2/src/UniswapV2Router02.sol#401)

        Args:
            amountA: uint256
            reserveA: uint256
            reserveB: uint256
        Returns:
            uint256
        """
        ...

    @overload
    def quote(self, amountA: uint256, reserveA: uint256, reserveB: uint256, *, from_: Optional[Union[Account, Address, str]] = None, to: Optional[Union[Account, Address, str]] = None, value: Union[int, str] = 0, gas_limit: Optional[Union[int, Literal["max"], Literal["auto"]]] = None, request_type: Literal["access_list"], gas_price: Optional[Union[int, str]] = None, max_fee_per_gas: Optional[Union[int, str]] = None, max_priority_fee_per_gas: Optional[Union[int, str]] = None, access_list: Optional[Union[Dict[Union[Account, Address, str], List[int]], Literal["auto"]]] = None, type: Optional[int] = None, block: Optional[Union[int, Literal["latest"], Literal["pending"], Literal["earliest"], Literal["safe"], Literal["finalized"]]] = None, confirmations: Optional[int] = None) -> Tuple[Dict[Address, List[int]], int]:
        """
        [Source code](file:///Users/dteiml/p/hacker-dom/woke-uniswap-v2/src/UniswapV2Router02.sol#401)

        Args:
            amountA: uint256
            reserveA: uint256
            reserveB: uint256
        Returns:
            uint256
        """
        ...

    @overload
    def quote(self, amountA: uint256, reserveA: uint256, reserveB: uint256, *, from_: Optional[Union[Account, Address, str]] = None, to: Optional[Union[Account, Address, str]] = None, value: Union[int, str] = 0, gas_limit: Optional[Union[int, Literal["max"], Literal["auto"]]] = None, request_type: Literal["tx"], gas_price: Optional[Union[int, str]] = None, max_fee_per_gas: Optional[Union[int, str]] = None, max_priority_fee_per_gas: Optional[Union[int, str]] = None, access_list: Optional[Union[Dict[Union[Account, Address, str], List[int]], Literal["auto"]]] = None, type: Optional[int] = None, block: Optional[Union[int, Literal["latest"], Literal["pending"], Literal["earliest"], Literal["safe"], Literal["finalized"]]] = None, confirmations: Optional[int] = None) -> TransactionAbc[uint256]:
        """
        [Source code](file:///Users/dteiml/p/hacker-dom/woke-uniswap-v2/src/UniswapV2Router02.sol#401)

        Args:
            amountA: uint256
            reserveA: uint256
            reserveB: uint256
        Returns:
            uint256
        """
        ...

    def quote(self, amountA: uint256, reserveA: uint256, reserveB: uint256, *, from_: Optional[Union[Account, Address, str]] = None, to: Optional[Union[Account, Address, str]] = None, value: Union[int, str] = 0, gas_limit: Optional[Union[int, Literal["max"], Literal["auto"]]] = None, request_type: RequestType = 'call', gas_price: Optional[Union[int, str]] = None, max_fee_per_gas: Optional[Union[int, str]] = None, max_priority_fee_per_gas: Optional[Union[int, str]] = None, access_list: Optional[Union[Dict[Union[Account, Address, str], List[int]], Literal["auto"]]] = None, type: Optional[int] = None, block: Optional[Union[int, Literal["latest"], Literal["pending"], Literal["earliest"], Literal["safe"], Literal["finalized"]]] = None, confirmations: Optional[int] = None) -> Union[uint256, TransactionAbc[uint256], int, Tuple[Dict[Address, List[int]], int]]:
        """
        [Source code](file:///Users/dteiml/p/hacker-dom/woke-uniswap-v2/src/UniswapV2Router02.sol#401)

        Args:
            amountA: uint256
            reserveA: uint256
            reserveB: uint256
        Returns:
            uint256
        """
        return self._execute(self.chain, request_type, "ad615dec", [amountA, reserveA, reserveB], True if request_type == "tx" else False, uint256, from_, to if to is not None else str(self.address), value, gas_limit, gas_price, max_fee_per_gas, max_priority_fee_per_gas, access_list, type, block, confirmations)

    @overload
    def getAmountOut(self, amountIn: uint256, reserveIn: uint256, reserveOut: uint256, *, from_: Optional[Union[Account, Address, str]] = None, to: Optional[Union[Account, Address, str]] = None, value: Union[int, str] = 0, gas_limit: Optional[Union[int, Literal["max"], Literal["auto"]]] = None, request_type: Literal["call"] = "call", gas_price: Optional[Union[int, str]] = None, max_fee_per_gas: Optional[Union[int, str]] = None, max_priority_fee_per_gas: Optional[Union[int, str]] = None, access_list: Optional[Union[Dict[Union[Account, Address, str], List[int]], Literal["auto"]]] = None, type: Optional[int] = None, block: Optional[Union[int, Literal["latest"], Literal["pending"], Literal["earliest"], Literal["safe"], Literal["finalized"]]] = None, confirmations: Optional[int] = None) -> uint256:
        """
        [Source code](file:///Users/dteiml/p/hacker-dom/woke-uniswap-v2/src/UniswapV2Router02.sol#405)

        Args:
            amountIn: uint256
            reserveIn: uint256
            reserveOut: uint256
        Returns:
            uint256
        """
        ...

    @overload
    def getAmountOut(self, amountIn: uint256, reserveIn: uint256, reserveOut: uint256, *, from_: Optional[Union[Account, Address, str]] = None, to: Optional[Union[Account, Address, str]] = None, value: Union[int, str] = 0, gas_limit: Optional[Union[int, Literal["max"], Literal["auto"]]] = None, request_type: Literal["estimate"], gas_price: Optional[Union[int, str]] = None, max_fee_per_gas: Optional[Union[int, str]] = None, max_priority_fee_per_gas: Optional[Union[int, str]] = None, access_list: Optional[Union[Dict[Union[Account, Address, str], List[int]], Literal["auto"]]] = None, type: Optional[int] = None, block: Optional[Union[int, Literal["latest"], Literal["pending"], Literal["earliest"], Literal["safe"], Literal["finalized"]]] = None, confirmations: Optional[int] = None) -> int:
        """
        [Source code](file:///Users/dteiml/p/hacker-dom/woke-uniswap-v2/src/UniswapV2Router02.sol#405)

        Args:
            amountIn: uint256
            reserveIn: uint256
            reserveOut: uint256
        Returns:
            uint256
        """
        ...

    @overload
    def getAmountOut(self, amountIn: uint256, reserveIn: uint256, reserveOut: uint256, *, from_: Optional[Union[Account, Address, str]] = None, to: Optional[Union[Account, Address, str]] = None, value: Union[int, str] = 0, gas_limit: Optional[Union[int, Literal["max"], Literal["auto"]]] = None, request_type: Literal["access_list"], gas_price: Optional[Union[int, str]] = None, max_fee_per_gas: Optional[Union[int, str]] = None, max_priority_fee_per_gas: Optional[Union[int, str]] = None, access_list: Optional[Union[Dict[Union[Account, Address, str], List[int]], Literal["auto"]]] = None, type: Optional[int] = None, block: Optional[Union[int, Literal["latest"], Literal["pending"], Literal["earliest"], Literal["safe"], Literal["finalized"]]] = None, confirmations: Optional[int] = None) -> Tuple[Dict[Address, List[int]], int]:
        """
        [Source code](file:///Users/dteiml/p/hacker-dom/woke-uniswap-v2/src/UniswapV2Router02.sol#405)

        Args:
            amountIn: uint256
            reserveIn: uint256
            reserveOut: uint256
        Returns:
            uint256
        """
        ...

    @overload
    def getAmountOut(self, amountIn: uint256, reserveIn: uint256, reserveOut: uint256, *, from_: Optional[Union[Account, Address, str]] = None, to: Optional[Union[Account, Address, str]] = None, value: Union[int, str] = 0, gas_limit: Optional[Union[int, Literal["max"], Literal["auto"]]] = None, request_type: Literal["tx"], gas_price: Optional[Union[int, str]] = None, max_fee_per_gas: Optional[Union[int, str]] = None, max_priority_fee_per_gas: Optional[Union[int, str]] = None, access_list: Optional[Union[Dict[Union[Account, Address, str], List[int]], Literal["auto"]]] = None, type: Optional[int] = None, block: Optional[Union[int, Literal["latest"], Literal["pending"], Literal["earliest"], Literal["safe"], Literal["finalized"]]] = None, confirmations: Optional[int] = None) -> TransactionAbc[uint256]:
        """
        [Source code](file:///Users/dteiml/p/hacker-dom/woke-uniswap-v2/src/UniswapV2Router02.sol#405)

        Args:
            amountIn: uint256
            reserveIn: uint256
            reserveOut: uint256
        Returns:
            uint256
        """
        ...

    def getAmountOut(self, amountIn: uint256, reserveIn: uint256, reserveOut: uint256, *, from_: Optional[Union[Account, Address, str]] = None, to: Optional[Union[Account, Address, str]] = None, value: Union[int, str] = 0, gas_limit: Optional[Union[int, Literal["max"], Literal["auto"]]] = None, request_type: RequestType = 'call', gas_price: Optional[Union[int, str]] = None, max_fee_per_gas: Optional[Union[int, str]] = None, max_priority_fee_per_gas: Optional[Union[int, str]] = None, access_list: Optional[Union[Dict[Union[Account, Address, str], List[int]], Literal["auto"]]] = None, type: Optional[int] = None, block: Optional[Union[int, Literal["latest"], Literal["pending"], Literal["earliest"], Literal["safe"], Literal["finalized"]]] = None, confirmations: Optional[int] = None) -> Union[uint256, TransactionAbc[uint256], int, Tuple[Dict[Address, List[int]], int]]:
        """
        [Source code](file:///Users/dteiml/p/hacker-dom/woke-uniswap-v2/src/UniswapV2Router02.sol#405)

        Args:
            amountIn: uint256
            reserveIn: uint256
            reserveOut: uint256
        Returns:
            uint256
        """
        return self._execute(self.chain, request_type, "054d50d4", [amountIn, reserveIn, reserveOut], True if request_type == "tx" else False, uint256, from_, to if to is not None else str(self.address), value, gas_limit, gas_price, max_fee_per_gas, max_priority_fee_per_gas, access_list, type, block, confirmations)

    @overload
    def getAmountIn(self, amountOut: uint256, reserveIn: uint256, reserveOut: uint256, *, from_: Optional[Union[Account, Address, str]] = None, to: Optional[Union[Account, Address, str]] = None, value: Union[int, str] = 0, gas_limit: Optional[Union[int, Literal["max"], Literal["auto"]]] = None, request_type: Literal["call"] = "call", gas_price: Optional[Union[int, str]] = None, max_fee_per_gas: Optional[Union[int, str]] = None, max_priority_fee_per_gas: Optional[Union[int, str]] = None, access_list: Optional[Union[Dict[Union[Account, Address, str], List[int]], Literal["auto"]]] = None, type: Optional[int] = None, block: Optional[Union[int, Literal["latest"], Literal["pending"], Literal["earliest"], Literal["safe"], Literal["finalized"]]] = None, confirmations: Optional[int] = None) -> uint256:
        """
        [Source code](file:///Users/dteiml/p/hacker-dom/woke-uniswap-v2/src/UniswapV2Router02.sol#414)

        Args:
            amountOut: uint256
            reserveIn: uint256
            reserveOut: uint256
        Returns:
            uint256
        """
        ...

    @overload
    def getAmountIn(self, amountOut: uint256, reserveIn: uint256, reserveOut: uint256, *, from_: Optional[Union[Account, Address, str]] = None, to: Optional[Union[Account, Address, str]] = None, value: Union[int, str] = 0, gas_limit: Optional[Union[int, Literal["max"], Literal["auto"]]] = None, request_type: Literal["estimate"], gas_price: Optional[Union[int, str]] = None, max_fee_per_gas: Optional[Union[int, str]] = None, max_priority_fee_per_gas: Optional[Union[int, str]] = None, access_list: Optional[Union[Dict[Union[Account, Address, str], List[int]], Literal["auto"]]] = None, type: Optional[int] = None, block: Optional[Union[int, Literal["latest"], Literal["pending"], Literal["earliest"], Literal["safe"], Literal["finalized"]]] = None, confirmations: Optional[int] = None) -> int:
        """
        [Source code](file:///Users/dteiml/p/hacker-dom/woke-uniswap-v2/src/UniswapV2Router02.sol#414)

        Args:
            amountOut: uint256
            reserveIn: uint256
            reserveOut: uint256
        Returns:
            uint256
        """
        ...

    @overload
    def getAmountIn(self, amountOut: uint256, reserveIn: uint256, reserveOut: uint256, *, from_: Optional[Union[Account, Address, str]] = None, to: Optional[Union[Account, Address, str]] = None, value: Union[int, str] = 0, gas_limit: Optional[Union[int, Literal["max"], Literal["auto"]]] = None, request_type: Literal["access_list"], gas_price: Optional[Union[int, str]] = None, max_fee_per_gas: Optional[Union[int, str]] = None, max_priority_fee_per_gas: Optional[Union[int, str]] = None, access_list: Optional[Union[Dict[Union[Account, Address, str], List[int]], Literal["auto"]]] = None, type: Optional[int] = None, block: Optional[Union[int, Literal["latest"], Literal["pending"], Literal["earliest"], Literal["safe"], Literal["finalized"]]] = None, confirmations: Optional[int] = None) -> Tuple[Dict[Address, List[int]], int]:
        """
        [Source code](file:///Users/dteiml/p/hacker-dom/woke-uniswap-v2/src/UniswapV2Router02.sol#414)

        Args:
            amountOut: uint256
            reserveIn: uint256
            reserveOut: uint256
        Returns:
            uint256
        """
        ...

    @overload
    def getAmountIn(self, amountOut: uint256, reserveIn: uint256, reserveOut: uint256, *, from_: Optional[Union[Account, Address, str]] = None, to: Optional[Union[Account, Address, str]] = None, value: Union[int, str] = 0, gas_limit: Optional[Union[int, Literal["max"], Literal["auto"]]] = None, request_type: Literal["tx"], gas_price: Optional[Union[int, str]] = None, max_fee_per_gas: Optional[Union[int, str]] = None, max_priority_fee_per_gas: Optional[Union[int, str]] = None, access_list: Optional[Union[Dict[Union[Account, Address, str], List[int]], Literal["auto"]]] = None, type: Optional[int] = None, block: Optional[Union[int, Literal["latest"], Literal["pending"], Literal["earliest"], Literal["safe"], Literal["finalized"]]] = None, confirmations: Optional[int] = None) -> TransactionAbc[uint256]:
        """
        [Source code](file:///Users/dteiml/p/hacker-dom/woke-uniswap-v2/src/UniswapV2Router02.sol#414)

        Args:
            amountOut: uint256
            reserveIn: uint256
            reserveOut: uint256
        Returns:
            uint256
        """
        ...

    def getAmountIn(self, amountOut: uint256, reserveIn: uint256, reserveOut: uint256, *, from_: Optional[Union[Account, Address, str]] = None, to: Optional[Union[Account, Address, str]] = None, value: Union[int, str] = 0, gas_limit: Optional[Union[int, Literal["max"], Literal["auto"]]] = None, request_type: RequestType = 'call', gas_price: Optional[Union[int, str]] = None, max_fee_per_gas: Optional[Union[int, str]] = None, max_priority_fee_per_gas: Optional[Union[int, str]] = None, access_list: Optional[Union[Dict[Union[Account, Address, str], List[int]], Literal["auto"]]] = None, type: Optional[int] = None, block: Optional[Union[int, Literal["latest"], Literal["pending"], Literal["earliest"], Literal["safe"], Literal["finalized"]]] = None, confirmations: Optional[int] = None) -> Union[uint256, TransactionAbc[uint256], int, Tuple[Dict[Address, List[int]], int]]:
        """
        [Source code](file:///Users/dteiml/p/hacker-dom/woke-uniswap-v2/src/UniswapV2Router02.sol#414)

        Args:
            amountOut: uint256
            reserveIn: uint256
            reserveOut: uint256
        Returns:
            uint256
        """
        return self._execute(self.chain, request_type, "85f8c259", [amountOut, reserveIn, reserveOut], True if request_type == "tx" else False, uint256, from_, to if to is not None else str(self.address), value, gas_limit, gas_price, max_fee_per_gas, max_priority_fee_per_gas, access_list, type, block, confirmations)

    @overload
    def getAmountsOut(self, amountIn: uint256, path: List[Union[Account, Address]], *, from_: Optional[Union[Account, Address, str]] = None, to: Optional[Union[Account, Address, str]] = None, value: Union[int, str] = 0, gas_limit: Optional[Union[int, Literal["max"], Literal["auto"]]] = None, request_type: Literal["call"] = "call", gas_price: Optional[Union[int, str]] = None, max_fee_per_gas: Optional[Union[int, str]] = None, max_priority_fee_per_gas: Optional[Union[int, str]] = None, access_list: Optional[Union[Dict[Union[Account, Address, str], List[int]], Literal["auto"]]] = None, type: Optional[int] = None, block: Optional[Union[int, Literal["latest"], Literal["pending"], Literal["earliest"], Literal["safe"], Literal["finalized"]]] = None, confirmations: Optional[int] = None) -> List[uint256]:
        """
        [Source code](file:///Users/dteiml/p/hacker-dom/woke-uniswap-v2/src/UniswapV2Router02.sol#423)

        Args:
            amountIn: uint256
            path: address[]
        Returns:
            uint256[]
        """
        ...

    @overload
    def getAmountsOut(self, amountIn: uint256, path: List[Union[Account, Address]], *, from_: Optional[Union[Account, Address, str]] = None, to: Optional[Union[Account, Address, str]] = None, value: Union[int, str] = 0, gas_limit: Optional[Union[int, Literal["max"], Literal["auto"]]] = None, request_type: Literal["estimate"], gas_price: Optional[Union[int, str]] = None, max_fee_per_gas: Optional[Union[int, str]] = None, max_priority_fee_per_gas: Optional[Union[int, str]] = None, access_list: Optional[Union[Dict[Union[Account, Address, str], List[int]], Literal["auto"]]] = None, type: Optional[int] = None, block: Optional[Union[int, Literal["latest"], Literal["pending"], Literal["earliest"], Literal["safe"], Literal["finalized"]]] = None, confirmations: Optional[int] = None) -> int:
        """
        [Source code](file:///Users/dteiml/p/hacker-dom/woke-uniswap-v2/src/UniswapV2Router02.sol#423)

        Args:
            amountIn: uint256
            path: address[]
        Returns:
            uint256[]
        """
        ...

    @overload
    def getAmountsOut(self, amountIn: uint256, path: List[Union[Account, Address]], *, from_: Optional[Union[Account, Address, str]] = None, to: Optional[Union[Account, Address, str]] = None, value: Union[int, str] = 0, gas_limit: Optional[Union[int, Literal["max"], Literal["auto"]]] = None, request_type: Literal["access_list"], gas_price: Optional[Union[int, str]] = None, max_fee_per_gas: Optional[Union[int, str]] = None, max_priority_fee_per_gas: Optional[Union[int, str]] = None, access_list: Optional[Union[Dict[Union[Account, Address, str], List[int]], Literal["auto"]]] = None, type: Optional[int] = None, block: Optional[Union[int, Literal["latest"], Literal["pending"], Literal["earliest"], Literal["safe"], Literal["finalized"]]] = None, confirmations: Optional[int] = None) -> Tuple[Dict[Address, List[int]], int]:
        """
        [Source code](file:///Users/dteiml/p/hacker-dom/woke-uniswap-v2/src/UniswapV2Router02.sol#423)

        Args:
            amountIn: uint256
            path: address[]
        Returns:
            uint256[]
        """
        ...

    @overload
    def getAmountsOut(self, amountIn: uint256, path: List[Union[Account, Address]], *, from_: Optional[Union[Account, Address, str]] = None, to: Optional[Union[Account, Address, str]] = None, value: Union[int, str] = 0, gas_limit: Optional[Union[int, Literal["max"], Literal["auto"]]] = None, request_type: Literal["tx"], gas_price: Optional[Union[int, str]] = None, max_fee_per_gas: Optional[Union[int, str]] = None, max_priority_fee_per_gas: Optional[Union[int, str]] = None, access_list: Optional[Union[Dict[Union[Account, Address, str], List[int]], Literal["auto"]]] = None, type: Optional[int] = None, block: Optional[Union[int, Literal["latest"], Literal["pending"], Literal["earliest"], Literal["safe"], Literal["finalized"]]] = None, confirmations: Optional[int] = None) -> TransactionAbc[List[uint256]]:
        """
        [Source code](file:///Users/dteiml/p/hacker-dom/woke-uniswap-v2/src/UniswapV2Router02.sol#423)

        Args:
            amountIn: uint256
            path: address[]
        Returns:
            uint256[]
        """
        ...

    def getAmountsOut(self, amountIn: uint256, path: List[Union[Account, Address]], *, from_: Optional[Union[Account, Address, str]] = None, to: Optional[Union[Account, Address, str]] = None, value: Union[int, str] = 0, gas_limit: Optional[Union[int, Literal["max"], Literal["auto"]]] = None, request_type: RequestType = 'call', gas_price: Optional[Union[int, str]] = None, max_fee_per_gas: Optional[Union[int, str]] = None, max_priority_fee_per_gas: Optional[Union[int, str]] = None, access_list: Optional[Union[Dict[Union[Account, Address, str], List[int]], Literal["auto"]]] = None, type: Optional[int] = None, block: Optional[Union[int, Literal["latest"], Literal["pending"], Literal["earliest"], Literal["safe"], Literal["finalized"]]] = None, confirmations: Optional[int] = None) -> Union[List[uint256], TransactionAbc[List[uint256]], int, Tuple[Dict[Address, List[int]], int]]:
        """
        [Source code](file:///Users/dteiml/p/hacker-dom/woke-uniswap-v2/src/UniswapV2Router02.sol#423)

        Args:
            amountIn: uint256
            path: address[]
        Returns:
            uint256[]
        """
        return self._execute(self.chain, request_type, "d06ca61f", [amountIn, path], True if request_type == "tx" else False, List[uint256], from_, to if to is not None else str(self.address), value, gas_limit, gas_price, max_fee_per_gas, max_priority_fee_per_gas, access_list, type, block, confirmations)

    @overload
    def getAmountsIn(self, amountOut: uint256, path: List[Union[Account, Address]], *, from_: Optional[Union[Account, Address, str]] = None, to: Optional[Union[Account, Address, str]] = None, value: Union[int, str] = 0, gas_limit: Optional[Union[int, Literal["max"], Literal["auto"]]] = None, request_type: Literal["call"] = "call", gas_price: Optional[Union[int, str]] = None, max_fee_per_gas: Optional[Union[int, str]] = None, max_priority_fee_per_gas: Optional[Union[int, str]] = None, access_list: Optional[Union[Dict[Union[Account, Address, str], List[int]], Literal["auto"]]] = None, type: Optional[int] = None, block: Optional[Union[int, Literal["latest"], Literal["pending"], Literal["earliest"], Literal["safe"], Literal["finalized"]]] = None, confirmations: Optional[int] = None) -> List[uint256]:
        """
        [Source code](file:///Users/dteiml/p/hacker-dom/woke-uniswap-v2/src/UniswapV2Router02.sol#432)

        Args:
            amountOut: uint256
            path: address[]
        Returns:
            uint256[]
        """
        ...

    @overload
    def getAmountsIn(self, amountOut: uint256, path: List[Union[Account, Address]], *, from_: Optional[Union[Account, Address, str]] = None, to: Optional[Union[Account, Address, str]] = None, value: Union[int, str] = 0, gas_limit: Optional[Union[int, Literal["max"], Literal["auto"]]] = None, request_type: Literal["estimate"], gas_price: Optional[Union[int, str]] = None, max_fee_per_gas: Optional[Union[int, str]] = None, max_priority_fee_per_gas: Optional[Union[int, str]] = None, access_list: Optional[Union[Dict[Union[Account, Address, str], List[int]], Literal["auto"]]] = None, type: Optional[int] = None, block: Optional[Union[int, Literal["latest"], Literal["pending"], Literal["earliest"], Literal["safe"], Literal["finalized"]]] = None, confirmations: Optional[int] = None) -> int:
        """
        [Source code](file:///Users/dteiml/p/hacker-dom/woke-uniswap-v2/src/UniswapV2Router02.sol#432)

        Args:
            amountOut: uint256
            path: address[]
        Returns:
            uint256[]
        """
        ...

    @overload
    def getAmountsIn(self, amountOut: uint256, path: List[Union[Account, Address]], *, from_: Optional[Union[Account, Address, str]] = None, to: Optional[Union[Account, Address, str]] = None, value: Union[int, str] = 0, gas_limit: Optional[Union[int, Literal["max"], Literal["auto"]]] = None, request_type: Literal["access_list"], gas_price: Optional[Union[int, str]] = None, max_fee_per_gas: Optional[Union[int, str]] = None, max_priority_fee_per_gas: Optional[Union[int, str]] = None, access_list: Optional[Union[Dict[Union[Account, Address, str], List[int]], Literal["auto"]]] = None, type: Optional[int] = None, block: Optional[Union[int, Literal["latest"], Literal["pending"], Literal["earliest"], Literal["safe"], Literal["finalized"]]] = None, confirmations: Optional[int] = None) -> Tuple[Dict[Address, List[int]], int]:
        """
        [Source code](file:///Users/dteiml/p/hacker-dom/woke-uniswap-v2/src/UniswapV2Router02.sol#432)

        Args:
            amountOut: uint256
            path: address[]
        Returns:
            uint256[]
        """
        ...

    @overload
    def getAmountsIn(self, amountOut: uint256, path: List[Union[Account, Address]], *, from_: Optional[Union[Account, Address, str]] = None, to: Optional[Union[Account, Address, str]] = None, value: Union[int, str] = 0, gas_limit: Optional[Union[int, Literal["max"], Literal["auto"]]] = None, request_type: Literal["tx"], gas_price: Optional[Union[int, str]] = None, max_fee_per_gas: Optional[Union[int, str]] = None, max_priority_fee_per_gas: Optional[Union[int, str]] = None, access_list: Optional[Union[Dict[Union[Account, Address, str], List[int]], Literal["auto"]]] = None, type: Optional[int] = None, block: Optional[Union[int, Literal["latest"], Literal["pending"], Literal["earliest"], Literal["safe"], Literal["finalized"]]] = None, confirmations: Optional[int] = None) -> TransactionAbc[List[uint256]]:
        """
        [Source code](file:///Users/dteiml/p/hacker-dom/woke-uniswap-v2/src/UniswapV2Router02.sol#432)

        Args:
            amountOut: uint256
            path: address[]
        Returns:
            uint256[]
        """
        ...

    def getAmountsIn(self, amountOut: uint256, path: List[Union[Account, Address]], *, from_: Optional[Union[Account, Address, str]] = None, to: Optional[Union[Account, Address, str]] = None, value: Union[int, str] = 0, gas_limit: Optional[Union[int, Literal["max"], Literal["auto"]]] = None, request_type: RequestType = 'call', gas_price: Optional[Union[int, str]] = None, max_fee_per_gas: Optional[Union[int, str]] = None, max_priority_fee_per_gas: Optional[Union[int, str]] = None, access_list: Optional[Union[Dict[Union[Account, Address, str], List[int]], Literal["auto"]]] = None, type: Optional[int] = None, block: Optional[Union[int, Literal["latest"], Literal["pending"], Literal["earliest"], Literal["safe"], Literal["finalized"]]] = None, confirmations: Optional[int] = None) -> Union[List[uint256], TransactionAbc[List[uint256]], int, Tuple[Dict[Address, List[int]], int]]:
        """
        [Source code](file:///Users/dteiml/p/hacker-dom/woke-uniswap-v2/src/UniswapV2Router02.sol#432)

        Args:
            amountOut: uint256
            path: address[]
        Returns:
            uint256[]
        """
        return self._execute(self.chain, request_type, "1f00ca74", [amountOut, path], True if request_type == "tx" else False, List[uint256], from_, to if to is not None else str(self.address), value, gas_limit, gas_price, max_fee_per_gas, max_priority_fee_per_gas, access_list, type, block, confirmations)

UniswapV2Router02.factory.selector = b'\xc4Z\x01U'
UniswapV2Router02.WETH.selector = b'\xad\\FH'
UniswapV2Router02.addLiquidity.selector = b'\xe8\xe37\x00'
UniswapV2Router02.addLiquidityETH.selector = b'\xf3\x05\xd7\x19'
UniswapV2Router02.removeLiquidity.selector = b'\xba\xa2\xab\xde'
UniswapV2Router02.removeLiquidityETH.selector = b'\x02u\x1c\xec'
UniswapV2Router02.removeLiquidityWithPermit.selector = b'!\x95\x99\\'
UniswapV2Router02.removeLiquidityETHWithPermit.selector = b'\xde\xd98*'
UniswapV2Router02.removeLiquidityETHSupportingFeeOnTransferTokens.selector = b'\xaf)y\xeb'
UniswapV2Router02.removeLiquidityETHWithPermitSupportingFeeOnTransferTokens.selector = b'[\rY\x84'
UniswapV2Router02.swapExactTokensForTokens.selector = b'8\xed\x179'
UniswapV2Router02.swapTokensForExactTokens.selector = b'\x88\x03\xdb\xee'
UniswapV2Router02.swapExactETHForTokens.selector = b'\x7f\xf3j\xb5'
UniswapV2Router02.swapTokensForExactETH.selector = b'J%\xd9J'
UniswapV2Router02.swapExactTokensForETH.selector = b'\x18\xcb\xaf\xe5'
UniswapV2Router02.swapETHForExactTokens.selector = b'\xfb;\xdbA'
UniswapV2Router02.swapExactTokensForTokensSupportingFeeOnTransferTokens.selector = b'\\\x11\xd7\x95'
UniswapV2Router02.swapExactETHForTokensSupportingFeeOnTransferTokens.selector = b'\xb6\xf9\xde\x95'
UniswapV2Router02.swapExactTokensForETHSupportingFeeOnTransferTokens.selector = b'y\x1a\xc9G'
UniswapV2Router02.quote.selector = b'\xada]\xec'
UniswapV2Router02.getAmountOut.selector = b'\x05MP\xd4'
UniswapV2Router02.getAmountIn.selector = b'\x85\xf8\xc2Y'
UniswapV2Router02.getAmountsOut.selector = b'\xd0l\xa6\x1f'
UniswapV2Router02.getAmountsIn.selector = b'\x1f\x00\xcat'
