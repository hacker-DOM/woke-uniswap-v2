
from __future__ import annotations

import dataclasses
from typing import List, Dict, Optional, overload, Union, Callable, Tuple
from typing_extensions import Literal

from woke.development.core import Contract, Library, Address, Account, Chain, RequestType
from woke.development.primitive_types import *
from woke.development.transactions import TransactionAbc, TransactionRevertedError

from enum import IntEnum



class UniswapV2Router02(Contract):
    """
    [Source code](file:///Users/dteiml/p/hacker-dom/woke-uniswap-v2/src/UniswapV2Router02.sol#13)
    """
    _abi = {'constructor': {'inputs': [{'internalType': 'address', 'name': '_factory', 'type': 'address'}, {'internalType': 'address', 'name': '_WETH', 'type': 'address'}], 'stateMutability': 'nonpayable', 'type': 'constructor'}, b'\xad\\FH': {'inputs': [], 'name': 'WETH', 'outputs': [{'internalType': 'address', 'name': '', 'type': 'address'}], 'stateMutability': 'view', 'type': 'function'}, b'\xe8\xe37\x00': {'inputs': [{'internalType': 'address', 'name': 'tokenA', 'type': 'address'}, {'internalType': 'address', 'name': 'tokenB', 'type': 'address'}, {'internalType': 'uint256', 'name': 'amountADesired', 'type': 'uint256'}, {'internalType': 'uint256', 'name': 'amountBDesired', 'type': 'uint256'}, {'internalType': 'uint256', 'name': 'amountAMin', 'type': 'uint256'}, {'internalType': 'uint256', 'name': 'amountBMin', 'type': 'uint256'}, {'internalType': 'address', 'name': 'to', 'type': 'address'}, {'internalType': 'uint256', 'name': 'deadline', 'type': 'uint256'}], 'name': 'addLiquidity', 'outputs': [{'internalType': 'uint256', 'name': 'amountA', 'type': 'uint256'}, {'internalType': 'uint256', 'name': 'amountB', 'type': 'uint256'}, {'internalType': 'uint256', 'name': 'liquidity', 'type': 'uint256'}], 'stateMutability': 'nonpayable', 'type': 'function'}, b'\xf3\x05\xd7\x19': {'inputs': [{'internalType': 'address', 'name': 'token', 'type': 'address'}, {'internalType': 'uint256', 'name': 'amountTokenDesired', 'type': 'uint256'}, {'internalType': 'uint256', 'name': 'amountTokenMin', 'type': 'uint256'}, {'internalType': 'uint256', 'name': 'amountETHMin', 'type': 'uint256'}, {'internalType': 'address', 'name': 'to', 'type': 'address'}, {'internalType': 'uint256', 'name': 'deadline', 'type': 'uint256'}], 'name': 'addLiquidityETH', 'outputs': [{'internalType': 'uint256', 'name': 'amountToken', 'type': 'uint256'}, {'internalType': 'uint256', 'name': 'amountETH', 'type': 'uint256'}, {'internalType': 'uint256', 'name': 'liquidity', 'type': 'uint256'}], 'stateMutability': 'payable', 'type': 'function'}, b'\xc4Z\x01U': {'inputs': [], 'name': 'factory', 'outputs': [{'internalType': 'address', 'name': '', 'type': 'address'}], 'stateMutability': 'view', 'type': 'function'}, b'\x85\xf8\xc2Y': {'inputs': [{'internalType': 'uint256', 'name': 'amountOut', 'type': 'uint256'}, {'internalType': 'uint256', 'name': 'reserveIn', 'type': 'uint256'}, {'internalType': 'uint256', 'name': 'reserveOut', 'type': 'uint256'}], 'name': 'getAmountIn', 'outputs': [{'internalType': 'uint256', 'name': 'amountIn', 'type': 'uint256'}], 'stateMutability': 'pure', 'type': 'function'}, b'\x05MP\xd4': {'inputs': [{'internalType': 'uint256', 'name': 'amountIn', 'type': 'uint256'}, {'internalType': 'uint256', 'name': 'reserveIn', 'type': 'uint256'}, {'internalType': 'uint256', 'name': 'reserveOut', 'type': 'uint256'}], 'name': 'getAmountOut', 'outputs': [{'internalType': 'uint256', 'name': 'amountOut', 'type': 'uint256'}], 'stateMutability': 'pure', 'type': 'function'}, b'\x1f\x00\xcat': {'inputs': [{'internalType': 'uint256', 'name': 'amountOut', 'type': 'uint256'}, {'internalType': 'address[]', 'name': 'path', 'type': 'address[]'}], 'name': 'getAmountsIn', 'outputs': [{'internalType': 'uint256[]', 'name': 'amounts', 'type': 'uint256[]'}], 'stateMutability': 'view', 'type': 'function'}, b'\xd0l\xa6\x1f': {'inputs': [{'internalType': 'uint256', 'name': 'amountIn', 'type': 'uint256'}, {'internalType': 'address[]', 'name': 'path', 'type': 'address[]'}], 'name': 'getAmountsOut', 'outputs': [{'internalType': 'uint256[]', 'name': 'amounts', 'type': 'uint256[]'}], 'stateMutability': 'view', 'type': 'function'}, b'\xada]\xec': {'inputs': [{'internalType': 'uint256', 'name': 'amountA', 'type': 'uint256'}, {'internalType': 'uint256', 'name': 'reserveA', 'type': 'uint256'}, {'internalType': 'uint256', 'name': 'reserveB', 'type': 'uint256'}], 'name': 'quote', 'outputs': [{'internalType': 'uint256', 'name': 'amountB', 'type': 'uint256'}], 'stateMutability': 'view', 'type': 'function'}, b'\xba\xa2\xab\xde': {'inputs': [{'internalType': 'address', 'name': 'tokenA', 'type': 'address'}, {'internalType': 'address', 'name': 'tokenB', 'type': 'address'}, {'internalType': 'uint256', 'name': 'liquidity', 'type': 'uint256'}, {'internalType': 'uint256', 'name': 'amountAMin', 'type': 'uint256'}, {'internalType': 'uint256', 'name': 'amountBMin', 'type': 'uint256'}, {'internalType': 'address', 'name': 'to', 'type': 'address'}, {'internalType': 'uint256', 'name': 'deadline', 'type': 'uint256'}], 'name': 'removeLiquidity', 'outputs': [{'internalType': 'uint256', 'name': 'amountA', 'type': 'uint256'}, {'internalType': 'uint256', 'name': 'amountB', 'type': 'uint256'}], 'stateMutability': 'nonpayable', 'type': 'function'}, b'\x02u\x1c\xec': {'inputs': [{'internalType': 'address', 'name': 'token', 'type': 'address'}, {'internalType': 'uint256', 'name': 'liquidity', 'type': 'uint256'}, {'internalType': 'uint256', 'name': 'amountTokenMin', 'type': 'uint256'}, {'internalType': 'uint256', 'name': 'amountETHMin', 'type': 'uint256'}, {'internalType': 'address', 'name': 'to', 'type': 'address'}, {'internalType': 'uint256', 'name': 'deadline', 'type': 'uint256'}], 'name': 'removeLiquidityETH', 'outputs': [{'internalType': 'uint256', 'name': 'amountToken', 'type': 'uint256'}, {'internalType': 'uint256', 'name': 'amountETH', 'type': 'uint256'}], 'stateMutability': 'nonpayable', 'type': 'function'}, b'\xaf)y\xeb': {'inputs': [{'internalType': 'address', 'name': 'token', 'type': 'address'}, {'internalType': 'uint256', 'name': 'liquidity', 'type': 'uint256'}, {'internalType': 'uint256', 'name': 'amountTokenMin', 'type': 'uint256'}, {'internalType': 'uint256', 'name': 'amountETHMin', 'type': 'uint256'}, {'internalType': 'address', 'name': 'to', 'type': 'address'}, {'internalType': 'uint256', 'name': 'deadline', 'type': 'uint256'}], 'name': 'removeLiquidityETHSupportingFeeOnTransferTokens', 'outputs': [{'internalType': 'uint256', 'name': 'amountETH', 'type': 'uint256'}], 'stateMutability': 'nonpayable', 'type': 'function'}, b'\xde\xd98*': {'inputs': [{'internalType': 'address', 'name': 'token', 'type': 'address'}, {'internalType': 'uint256', 'name': 'liquidity', 'type': 'uint256'}, {'internalType': 'uint256', 'name': 'amountTokenMin', 'type': 'uint256'}, {'internalType': 'uint256', 'name': 'amountETHMin', 'type': 'uint256'}, {'internalType': 'address', 'name': 'to', 'type': 'address'}, {'internalType': 'uint256', 'name': 'deadline', 'type': 'uint256'}, {'internalType': 'bool', 'name': 'approveMax', 'type': 'bool'}, {'internalType': 'uint8', 'name': 'v', 'type': 'uint8'}, {'internalType': 'bytes32', 'name': 'r', 'type': 'bytes32'}, {'internalType': 'bytes32', 'name': 's', 'type': 'bytes32'}], 'name': 'removeLiquidityETHWithPermit', 'outputs': [{'internalType': 'uint256', 'name': 'amountToken', 'type': 'uint256'}, {'internalType': 'uint256', 'name': 'amountETH', 'type': 'uint256'}], 'stateMutability': 'nonpayable', 'type': 'function'}, b'[\rY\x84': {'inputs': [{'internalType': 'address', 'name': 'token', 'type': 'address'}, {'internalType': 'uint256', 'name': 'liquidity', 'type': 'uint256'}, {'internalType': 'uint256', 'name': 'amountTokenMin', 'type': 'uint256'}, {'internalType': 'uint256', 'name': 'amountETHMin', 'type': 'uint256'}, {'internalType': 'address', 'name': 'to', 'type': 'address'}, {'internalType': 'uint256', 'name': 'deadline', 'type': 'uint256'}, {'internalType': 'bool', 'name': 'approveMax', 'type': 'bool'}, {'internalType': 'uint8', 'name': 'v', 'type': 'uint8'}, {'internalType': 'bytes32', 'name': 'r', 'type': 'bytes32'}, {'internalType': 'bytes32', 'name': 's', 'type': 'bytes32'}], 'name': 'removeLiquidityETHWithPermitSupportingFeeOnTransferTokens', 'outputs': [{'internalType': 'uint256', 'name': 'amountETH', 'type': 'uint256'}], 'stateMutability': 'nonpayable', 'type': 'function'}, b'!\x95\x99\\': {'inputs': [{'internalType': 'address', 'name': 'tokenA', 'type': 'address'}, {'internalType': 'address', 'name': 'tokenB', 'type': 'address'}, {'internalType': 'uint256', 'name': 'liquidity', 'type': 'uint256'}, {'internalType': 'uint256', 'name': 'amountAMin', 'type': 'uint256'}, {'internalType': 'uint256', 'name': 'amountBMin', 'type': 'uint256'}, {'internalType': 'address', 'name': 'to', 'type': 'address'}, {'internalType': 'uint256', 'name': 'deadline', 'type': 'uint256'}, {'internalType': 'bool', 'name': 'approveMax', 'type': 'bool'}, {'internalType': 'uint8', 'name': 'v', 'type': 'uint8'}, {'internalType': 'bytes32', 'name': 'r', 'type': 'bytes32'}, {'internalType': 'bytes32', 'name': 's', 'type': 'bytes32'}], 'name': 'removeLiquidityWithPermit', 'outputs': [{'internalType': 'uint256', 'name': 'amountA', 'type': 'uint256'}, {'internalType': 'uint256', 'name': 'amountB', 'type': 'uint256'}], 'stateMutability': 'nonpayable', 'type': 'function'}, b'\xfb;\xdbA': {'inputs': [{'internalType': 'uint256', 'name': 'amountOut', 'type': 'uint256'}, {'internalType': 'address[]', 'name': 'path', 'type': 'address[]'}, {'internalType': 'address', 'name': 'to', 'type': 'address'}, {'internalType': 'uint256', 'name': 'deadline', 'type': 'uint256'}], 'name': 'swapETHForExactTokens', 'outputs': [{'internalType': 'uint256[]', 'name': 'amounts', 'type': 'uint256[]'}], 'stateMutability': 'payable', 'type': 'function'}, b'\x7f\xf3j\xb5': {'inputs': [{'internalType': 'uint256', 'name': 'amountOutMin', 'type': 'uint256'}, {'internalType': 'address[]', 'name': 'path', 'type': 'address[]'}, {'internalType': 'address', 'name': 'to', 'type': 'address'}, {'internalType': 'uint256', 'name': 'deadline', 'type': 'uint256'}], 'name': 'swapExactETHForTokens', 'outputs': [{'internalType': 'uint256[]', 'name': 'amounts', 'type': 'uint256[]'}], 'stateMutability': 'payable', 'type': 'function'}, b'\xb6\xf9\xde\x95': {'inputs': [{'internalType': 'uint256', 'name': 'amountOutMin', 'type': 'uint256'}, {'internalType': 'address[]', 'name': 'path', 'type': 'address[]'}, {'internalType': 'address', 'name': 'to', 'type': 'address'}, {'internalType': 'uint256', 'name': 'deadline', 'type': 'uint256'}], 'name': 'swapExactETHForTokensSupportingFeeOnTransferTokens', 'outputs': [], 'stateMutability': 'payable', 'type': 'function'}, b'\x18\xcb\xaf\xe5': {'inputs': [{'internalType': 'uint256', 'name': 'amountIn', 'type': 'uint256'}, {'internalType': 'uint256', 'name': 'amountOutMin', 'type': 'uint256'}, {'internalType': 'address[]', 'name': 'path', 'type': 'address[]'}, {'internalType': 'address', 'name': 'to', 'type': 'address'}, {'internalType': 'uint256', 'name': 'deadline', 'type': 'uint256'}], 'name': 'swapExactTokensForETH', 'outputs': [{'internalType': 'uint256[]', 'name': 'amounts', 'type': 'uint256[]'}], 'stateMutability': 'nonpayable', 'type': 'function'}, b'y\x1a\xc9G': {'inputs': [{'internalType': 'uint256', 'name': 'amountIn', 'type': 'uint256'}, {'internalType': 'uint256', 'name': 'amountOutMin', 'type': 'uint256'}, {'internalType': 'address[]', 'name': 'path', 'type': 'address[]'}, {'internalType': 'address', 'name': 'to', 'type': 'address'}, {'internalType': 'uint256', 'name': 'deadline', 'type': 'uint256'}], 'name': 'swapExactTokensForETHSupportingFeeOnTransferTokens', 'outputs': [], 'stateMutability': 'nonpayable', 'type': 'function'}, b'8\xed\x179': {'inputs': [{'internalType': 'uint256', 'name': 'amountIn', 'type': 'uint256'}, {'internalType': 'uint256', 'name': 'amountOutMin', 'type': 'uint256'}, {'internalType': 'address[]', 'name': 'path', 'type': 'address[]'}, {'internalType': 'address', 'name': 'to', 'type': 'address'}, {'internalType': 'uint256', 'name': 'deadline', 'type': 'uint256'}], 'name': 'swapExactTokensForTokens', 'outputs': [{'internalType': 'uint256[]', 'name': 'amounts', 'type': 'uint256[]'}], 'stateMutability': 'nonpayable', 'type': 'function'}, b'\\\x11\xd7\x95': {'inputs': [{'internalType': 'uint256', 'name': 'amountIn', 'type': 'uint256'}, {'internalType': 'uint256', 'name': 'amountOutMin', 'type': 'uint256'}, {'internalType': 'address[]', 'name': 'path', 'type': 'address[]'}, {'internalType': 'address', 'name': 'to', 'type': 'address'}, {'internalType': 'uint256', 'name': 'deadline', 'type': 'uint256'}], 'name': 'swapExactTokensForTokensSupportingFeeOnTransferTokens', 'outputs': [], 'stateMutability': 'nonpayable', 'type': 'function'}, b'J%\xd9J': {'inputs': [{'internalType': 'uint256', 'name': 'amountOut', 'type': 'uint256'}, {'internalType': 'uint256', 'name': 'amountInMax', 'type': 'uint256'}, {'internalType': 'address[]', 'name': 'path', 'type': 'address[]'}, {'internalType': 'address', 'name': 'to', 'type': 'address'}, {'internalType': 'uint256', 'name': 'deadline', 'type': 'uint256'}], 'name': 'swapTokensForExactETH', 'outputs': [{'internalType': 'uint256[]', 'name': 'amounts', 'type': 'uint256[]'}], 'stateMutability': 'nonpayable', 'type': 'function'}, b'\x88\x03\xdb\xee': {'inputs': [{'internalType': 'uint256', 'name': 'amountOut', 'type': 'uint256'}, {'internalType': 'uint256', 'name': 'amountInMax', 'type': 'uint256'}, {'internalType': 'address[]', 'name': 'path', 'type': 'address[]'}, {'internalType': 'address', 'name': 'to', 'type': 'address'}, {'internalType': 'uint256', 'name': 'deadline', 'type': 'uint256'}], 'name': 'swapTokensForExactTokens', 'outputs': [{'internalType': 'uint256[]', 'name': 'amounts', 'type': 'uint256[]'}], 'stateMutability': 'nonpayable', 'type': 'function'}, 'receive': {'stateMutability': 'payable', 'type': 'receive'}}
    _creation_code = "60c060405234801562000010575f80fd5b506040516200436038038062004360833981016040819052620000339162000067565b6001600160a01b039182166080521660a0526200009d565b80516001600160a01b038116811462000062575f80fd5b919050565b5f806040838503121562000079575f80fd5b62000084836200004b565b915062000094602084016200004b565b90509250929050565b60805160a0516141356200022b5f395f818161015a0152818161035a01528181610507015281816105560152818161060c0152818161082a01528181610bc001528181610cf80152818161103901528181611119015281816111c2015281816112500152818161136c015281816113f5015281816116580152818161170e0152818161179a015281816118150152818161188501528181611cb801528181611e9a01528181611eef01528181611f2301528181611fb4015281816120e7015281816121f6015261227f01525f818161041501528181610688015281816107580152818161090b0152818161094201528181610a7001528181610c3c01528181610cd601528181610e05015281816112ca015281816114270152818161156b015281816118b701528181611acc01528181611c6801528181611c9601528181611db501528181611ecd01528181612161015281816122b101528181612b5301528181612ba301528181612ef301528181613052015281816133f101528181613491015261350401526141355ff3fe60806040526004361061014a575f3560e01c80638803dbee116100b3578063c45a01551161006d578063c45a015514610404578063d06ca61f14610437578063ded9382a14610456578063e8e3370014610475578063f305d719146104af578063fb3bdb41146104c2575f80fd5b80638803dbee1461032a578063ad5c464814610349578063ad615dec14610394578063af2979eb146103b3578063b6f9de95146103d2578063baa2abde146103e5575f80fd5b80634a25d94a116101045780634a25d94a1461027c5780635b0d59841461029b5780635c11d795146102ba578063791ac947146102d95780637ff36ab5146102f857806385f8c2591461030b575f80fd5b806302751cec1461018d578063054d50d4146101c657806318cbafe5146101f35780631f00ca741461021f5780632195995c1461023e57806338ed17391461025d575f80fd5b3661018957336001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016146101875761018761377d565b005b5f80fd5b348015610198575f80fd5b506101ac6101a73660046137b5565b6104d5565b604080519283526020830191909152015b60405180910390f35b3480156101d1575f80fd5b506101e56101e036600461380f565b6105cb565b6040519081526020016101bd565b3480156101fe575f80fd5b5061021261020d366004613879565b6105df565b6040516101bd91906138e7565b34801561022a575f80fd5b5061021261023936600461393e565b610904565b348015610249575f80fd5b506101ac610258366004613a27565b61093a565b348015610268575f80fd5b50610212610277366004613879565b610a0a565b348015610287575f80fd5b50610212610296366004613879565b610b93565b3480156102a6575f80fd5b506101e56102b5366004613aca565b610ccf565b3480156102c5575f80fd5b506101876102d4366004613879565b610db4565b3480156102e4575f80fd5b506101876102f3366004613879565b61100e565b610212610306366004613b5a565b61122b565b348015610316575f80fd5b506101e561032536600461380f565b611537565b348015610335575f80fd5b50610212610344366004613879565b611543565b348015610354575f80fd5b5061037c7f000000000000000000000000000000000000000000000000000000000000000081565b6040516001600160a01b0390911681526020016101bd565b34801561039f575f80fd5b506101e56103ae36600461380f565b6115fe565b3480156103be575f80fd5b506101e56103cd3660046137b5565b611630565b6101876103e0366004613b5a565b611777565b3480156103f0575f80fd5b506101ac6103ff366004613bbc565b611aa3565b34801561040f575f80fd5b5061037c7f000000000000000000000000000000000000000000000000000000000000000081565b348015610442575f80fd5b5061021261045136600461393e565b611c61565b348015610461575f80fd5b506101ac610470366004613aca565b611c8e565b348015610480575f80fd5b5061049461048f366004613c29565b611d78565b604080519384526020840192909252908201526060016101bd565b6104946104bd3660046137b5565b611e70565b6102126104d0366004613b5a565b6120c2565b5f8082428110156105015760405162461bcd60e51b81526004016104f890613ca0565b60405180910390fd5b610530897f00000000000000000000000000000000000000000000000000000000000000008a8a8a308a611aa3565b9093509150610540898685612401565b604051632e1a7d4d60e01b8152600481018390527f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031690632e1a7d4d906024015f604051808303815f87803b15801561059f575f80fd5b505af11580156105b1573d5f803e3d5ffd5b505050506105bf858361252d565b50965096945050505050565b5f6105d7848484612608565b949350505050565b606081428110156106025760405162461bcd60e51b81526004016104f890613ca0565b6001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000168686610639600182613ceb565b81811061064857610648613cfe565b905060200201602081019061065d9190613d12565b6001600160a01b0316146106835760405162461bcd60e51b81526004016104f890613d34565b6106e07f0000000000000000000000000000000000000000000000000000000000000000898888808060200260200160405190810160405280939291908181526020018383602002808284375f920191909152506126e092505050565b91508682600184516106f29190613ceb565b8151811061070257610702613cfe565b602002602001015110156107285760405162461bcd60e51b81526004016104f890613d6b565b6107ea86865f81811061073d5761073d613cfe565b90506020020160208101906107529190613d12565b336107cb7f00000000000000000000000000000000000000000000000000000000000000008a8a5f81811061078957610789613cfe565b905060200201602081019061079e9190613d12565b8b8b60018181106107b1576107b1613cfe565b90506020020160208101906107c69190613d12565b612868565b855f815181106107dd576107dd613cfe565b602002602001015161293f565b610828828787808060200260200160405190810160405280939291908181526020018383602002808284375f92019190915250309250612a78915050565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316632e1a7d4d83600185516108669190613ceb565b8151811061087657610876613cfe565b60200260200101516040518263ffffffff1660e01b815260040161089c91815260200190565b5f604051808303815f87803b1580156108b3575f80fd5b505af11580156108c5573d5f803e3d5ffd5b505050506108f98483600185516108dc9190613ceb565b815181106108ec576108ec613cfe565b602002602001015161252d565b509695505050505050565b60606109317f00000000000000000000000000000000000000000000000000000000000000008484612c72565b90505b92915050565b5f805f6109687f00000000000000000000000000000000000000000000000000000000000000008f8f612868565b90505f87610976578c610979565b5f195b60405163d505accf60e01b81529091506001600160a01b0383169063d505accf906109b4903390309086908f908e908e908e90600401613db6565b5f604051808303815f87803b1580156109cb575f80fd5b505af11580156109dd573d5f803e3d5ffd5b505050506109f08f8f8f8f8f8f8f611aa3565b809450819550505050509b509b9950505050505050505050565b60608142811015610a2d5760405162461bcd60e51b81526004016104f890613ca0565b610a6b6040518060400160405280601881526020017f737761704578616374546f6b656e73466f72546f6b656e730000000000000000815250612df1565b610ac87f0000000000000000000000000000000000000000000000000000000000000000898888808060200260200160405190810160405280939291908181526020018383602002808284375f920191909152506126e092505050565b9150610afa8260018451610adc9190613ceb565b81518110610aec57610aec613cfe565b602002602001015188612e37565b868260018451610b0a9190613ceb565b81518110610b1a57610b1a613cfe565b60200260200101511015610b405760405162461bcd60e51b81526004016104f890613d6b565b610b5586865f81811061073d5761073d613cfe565b6108f9828787808060200260200160405190810160405280939291908181526020018383602002808284375f92019190915250899250612a78915050565b60608142811015610bb65760405162461bcd60e51b81526004016104f890613ca0565b6001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000168686610bed600182613ceb565b818110610bfc57610bfc613cfe565b9050602002016020810190610c119190613d12565b6001600160a01b031614610c375760405162461bcd60e51b81526004016104f890613d34565b610c947f0000000000000000000000000000000000000000000000000000000000000000898888808060200260200160405190810160405280939291908181526020018383602002808284375f92019190915250612c7292505050565b915086825f81518110610ca957610ca9613cfe565b602002602001015111156107285760405162461bcd60e51b81526004016104f890613df7565b5f80610d1c7f00000000000000000000000000000000000000000000000000000000000000008d7f0000000000000000000000000000000000000000000000000000000000000000612868565b90505f86610d2a578b610d2d565b5f195b60405163d505accf60e01b81529091506001600160a01b0383169063d505accf90610d68903390309086908e908d908d908d90600401613db6565b5f604051808303815f87803b158015610d7f575f80fd5b505af1158015610d91573d5f803e3d5ffd5b50505050610da38d8d8d8d8d8d611630565b9d9c50505050505050505050505050565b8042811015610dd55760405162461bcd60e51b81526004016104f890613ca0565b610e6485855f818110610dea57610dea613cfe565b9050602002016020810190610dff9190613d12565b33610e5e7f000000000000000000000000000000000000000000000000000000000000000089895f818110610e3657610e36613cfe565b9050602002016020810190610e4b9190613d12565b8a8a60018181106107b1576107b1613cfe565b8a61293f565b5f8585610e72600182613ceb565b818110610e8157610e81613cfe565b9050602002016020810190610e969190613d12565b6040516370a0823160e01b81526001600160a01b03868116600483015291909116906370a0823190602401602060405180830381865afa158015610edc573d5f803e3d5ffd5b505050506040513d601f19601f82011682018060405250810190610f009190613e3e565b9050610f3f8686808060200260200160405190810160405280939291908181526020018383602002808284375f92019190915250889250612e82915050565b86610fe6828888610f51600182613ceb565b818110610f6057610f60613cfe565b9050602002016020810190610f759190613d12565b6040516370a0823160e01b81526001600160a01b03898116600483015291909116906370a08231906024015b602060405180830381865afa158015610fbc573d5f803e3d5ffd5b505050506040513d601f19601f82011682018060405250810190610fe09190613e3e565b90613108565b10156110045760405162461bcd60e51b81526004016104f890613d6b565b5050505050505050565b804281101561102f5760405162461bcd60e51b81526004016104f890613ca0565b6001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000168585611066600182613ceb565b81811061107557611075613cfe565b905060200201602081019061108a9190613d12565b6001600160a01b0316146110b05760405162461bcd60e51b81526004016104f890613d34565b6110c585855f818110610dea57610dea613cfe565b6111028585808060200260200160405190810160405280939291908181526020018383602002808284375f92019190915250309250612e82915050565b6040516370a0823160e01b81523060048201525f907f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316906370a0823190602401602060405180830381865afa158015611166573d5f803e3d5ffd5b505050506040513d601f19601f8201168201806040525081019061118a9190613e3e565b9050868110156111ac5760405162461bcd60e51b81526004016104f890613d6b565b604051632e1a7d4d60e01b8152600481018290527f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031690632e1a7d4d906024015f604051808303815f87803b15801561120b575f80fd5b505af115801561121d573d5f803e3d5ffd5b50505050611004848261252d565b6060814281101561124e5760405162461bcd60e51b81526004016104f890613ca0565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031686865f81811061128a5761128a613cfe565b905060200201602081019061129f9190613d12565b6001600160a01b0316146112c55760405162461bcd60e51b81526004016104f890613d34565b6113227f0000000000000000000000000000000000000000000000000000000000000000348888808060200260200160405190810160405280939291908181526020018383602002808284375f920191909152506126e092505050565b91508682600184516113349190613ceb565b8151811061134457611344613cfe565b6020026020010151101561136a5760405162461bcd60e51b81526004016104f890613d6b565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663d0e30db0835f815181106113ab576113ab613cfe565b60200260200101516040518263ffffffff1660e01b81526004015f604051808303818588803b1580156113dc575f80fd5b505af11580156113ee573d5f803e3d5ffd5b50505050507f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663a9059cbb6114587f000000000000000000000000000000000000000000000000000000000000000089895f818110610e3657610e36613cfe565b845f8151811061146a5761146a613cfe565b60200260200101516040518363ffffffff1660e01b81526004016114a39291906001600160a01b03929092168252602082015260400190565b6020604051808303815f875af11580156114bf573d5f803e3d5ffd5b505050506040513d601f19601f820116820180604052508101906114e39190613e55565b6114ef576114ef61377d565b61152d828787808060200260200160405190810160405280939291908181526020018383602002808284375f92019190915250899250612a78915050565b5095945050505050565b5f6105d784848461315d565b606081428110156115665760405162461bcd60e51b81526004016104f890613ca0565b6115c37f0000000000000000000000000000000000000000000000000000000000000000898888808060200260200160405190810160405280939291908181526020018383602002808284375f92019190915250612c7292505050565b915086825f815181106115d8576115d8613cfe565b60200260200101511115610b405760405162461bcd60e51b81526004016104f890613df7565b5f6116256040518060400160405280600581526020016471756f746560d81b815250612df1565b6105d7848484613231565b5f81428110156116525760405162461bcd60e51b81526004016104f890613ca0565b611681887f00000000000000000000000000000000000000000000000000000000000000008989893089611aa3565b6040516370a0823160e01b81523060048201529093506116f89150899086906001600160a01b038316906370a0823190602401602060405180830381865afa1580156116cf573d5f803e3d5ffd5b505050506040513d601f19601f820116820180604052508101906116f39190613e3e565b612401565b604051632e1a7d4d60e01b8152600481018390527f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031690632e1a7d4d906024015f604051808303815f87803b158015611757575f80fd5b505af1158015611769573d5f803e3d5ffd5b505050506108f9848361252d565b80428110156117985760405162461bcd60e51b81526004016104f890613ca0565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031685855f8181106117d4576117d4613cfe565b90506020020160208101906117e99190613d12565b6001600160a01b03161461180f5760405162461bcd60e51b81526004016104f890613d34565b5f3490507f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663d0e30db0826040518263ffffffff1660e01b81526004015f604051808303818588803b15801561186c575f80fd5b505af115801561187e573d5f803e3d5ffd5b50505050507f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663a9059cbb6118e87f000000000000000000000000000000000000000000000000000000000000000089895f818110610e3657610e36613cfe565b6040516001600160e01b031960e084901b1681526001600160a01b039091166004820152602481018490526044016020604051808303815f875af1158015611932573d5f803e3d5ffd5b505050506040513d601f19601f820116820180604052508101906119569190613e55565b6119625761196261377d565b5f8686611970600182613ceb565b81811061197f5761197f613cfe565b90506020020160208101906119949190613d12565b6040516370a0823160e01b81526001600160a01b03878116600483015291909116906370a0823190602401602060405180830381865afa1580156119da573d5f803e3d5ffd5b505050506040513d601f19601f820116820180604052508101906119fe9190613e3e565b9050611a3d8787808060200260200160405190810160405280939291908181526020018383602002808284375f92019190915250899250612e82915050565b87610fe6828989611a4f600182613ceb565b818110611a5e57611a5e613cfe565b9050602002016020810190611a739190613d12565b6040516370a0823160e01b81526001600160a01b038a8116600483015291909116906370a0823190602401610fa1565b5f808242811015611ac65760405162461bcd60e51b81526004016104f890613ca0565b5f611af27f00000000000000000000000000000000000000000000000000000000000000008c8c612868565b6040516323b872dd60e01b81523360048201526001600160a01b03821660248201819052604482018c90529192506323b872dd906064016020604051808303815f875af1158015611b45573d5f803e3d5ffd5b505050506040513d601f19601f82011682018060405250810190611b699190613e55565b5060405163226bf2d160e21b81526001600160a01b0387811660048301525f9182918416906389afcb449060240160408051808303815f875af1158015611bb2573d5f803e3d5ffd5b505050506040513d601f19601f82011682018060405250810190611bd69190613e70565b915091505f611be58e8e6132ce565b509050806001600160a01b03168e6001600160a01b031614611c08578183611c0b565b82825b90975095508a871015611c305760405162461bcd60e51b81526004016104f890613e92565b89861015611c505760405162461bcd60e51b81526004016104f890613ed8565b505050505097509795505050505050565b60606109317f000000000000000000000000000000000000000000000000000000000000000084846126e0565b5f805f611cdc7f00000000000000000000000000000000000000000000000000000000000000008e7f0000000000000000000000000000000000000000000000000000000000000000612868565b90505f87611cea578c611ced565b5f195b60405163d505accf60e01b81529091506001600160a01b0383169063d505accf90611d28903390309086908f908e908e908e90600401613db6565b5f604051808303815f87803b158015611d3f575f80fd5b505af1158015611d51573d5f803e3d5ffd5b50505050611d638e8e8e8e8e8e6104d5565b909f909e509c50505050505050505050505050565b5f805f8342811015611d9c5760405162461bcd60e51b81526004016104f890613ca0565b611daa8c8c8c8c8c8c6133c4565b90945092505f611ddb7f00000000000000000000000000000000000000000000000000000000000000008e8e612868565b9050611de98d33838861293f565b611df58c33838761293f565b6040516335313c2160e11b81526001600160a01b038881166004830152821690636a627842906024016020604051808303815f875af1158015611e3a573d5f803e3d5ffd5b505050506040513d601f19601f82011682018060405250810190611e5e9190613e3e565b92505050985098509895505050505050565b5f805f8342811015611e945760405162461bcd60e51b81526004016104f890613ca0565b611ec28a7f00000000000000000000000000000000000000000000000000000000000000008b348c8c6133c4565b90945092505f611f137f00000000000000000000000000000000000000000000000000000000000000008c7f0000000000000000000000000000000000000000000000000000000000000000612868565b9050611f218b33838861293f565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663d0e30db0856040518263ffffffff1660e01b81526004015f604051808303818588803b158015611f7a575f80fd5b505af1158015611f8c573d5f803e3d5ffd5b505060405163a9059cbb60e01b81526001600160a01b038581166004830152602482018990527f000000000000000000000000000000000000000000000000000000000000000016935063a9059cbb925060440190506020604051808303815f875af1158015611ffe573d5f803e3d5ffd5b505050506040513d601f19601f820116820180604052508101906120229190613e55565b61202e5761202e61377d565b6040516335313c2160e11b81526001600160a01b038881166004830152821690636a627842906024016020604051808303815f875af1158015612073573d5f803e3d5ffd5b505050506040513d601f19601f820116820180604052508101906120979190613e3e565b9250833411156120b4576120b4336120af8634613ceb565b61252d565b505096509650969350505050565b606081428110156120e55760405162461bcd60e51b81526004016104f890613ca0565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031686865f81811061212157612121613cfe565b90506020020160208101906121369190613d12565b6001600160a01b03161461215c5760405162461bcd60e51b81526004016104f890613d34565b6121b97f0000000000000000000000000000000000000000000000000000000000000000888888808060200260200160405190810160405280939291908181526020018383602002808284375f92019190915250612c7292505050565b915034825f815181106121ce576121ce613cfe565b602002602001015111156121f45760405162461bcd60e51b81526004016104f890613df7565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663d0e30db0835f8151811061223557612235613cfe565b60200260200101516040518263ffffffff1660e01b81526004015f604051808303818588803b158015612266575f80fd5b505af1158015612278573d5f803e3d5ffd5b50505050507f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663a9059cbb6122e27f000000000000000000000000000000000000000000000000000000000000000089895f818110610e3657610e36613cfe565b845f815181106122f4576122f4613cfe565b60200260200101516040518363ffffffff1660e01b815260040161232d9291906001600160a01b03929092168252602082015260400190565b6020604051808303815f875af1158015612349573d5f803e3d5ffd5b505050506040513d601f19601f8201168201806040525081019061236d9190613e55565b6123795761237961377d565b6123b7828787808060200260200160405190810160405280939291908181526020018383602002808284375f92019190915250899250612a78915050565b815f815181106123c9576123c9613cfe565b602002602001015134111561152d5761152d33835f815181106123ee576123ee613cfe565b6020026020010151346120af9190613ceb565b604080516001600160a01b038481166024830152604480830185905283518084039091018152606490920183526020820180516001600160e01b031663a9059cbb60e01b17905291515f9283929087169161245c9190613f40565b5f604051808303815f865af19150503d805f8114612495576040519150601f19603f3d011682016040523d82523d5f602084013e61249a565b606091505b50915091508180156124c45750805115806124c45750808060200190518101906124c49190613e55565b6125265760405162461bcd60e51b815260206004820152602d60248201527f5472616e7366657248656c7065723a3a736166655472616e736665723a20747260448201526c185b9cd9995c8819985a5b1959609a1b60648201526084016104f8565b5050505050565b604080515f808252602082019092526001600160a01b0384169083906040516125569190613f40565b5f6040518083038185875af1925050503d805f8114612590576040519150601f19603f3d011682016040523d82523d5f602084013e612595565b606091505b50509050806126035760405162461bcd60e51b815260206004820152603460248201527f5472616e7366657248656c7065723a3a736166655472616e736665724554483a60448201527308115512081d1c985b9cd9995c8819985a5b195960621b60648201526084016104f8565b505050565b5f80841161266c5760405162461bcd60e51b815260206004820152602b60248201527f556e697377617056324c6962726172793a20494e53554646494349454e545f4960448201526a1394155517d05353d5539560aa1b60648201526084016104f8565b5f8311801561267a57505f82115b6126965760405162461bcd60e51b81526004016104f890613f5b565b5f6126a3856103e56135de565b90505f6126b082856135de565b90505f6126c9836126c3886103e86135de565b90613644565b90506126d58183613fa3565b979650505050505050565b60606002825110156127345760405162461bcd60e51b815260206004820152601e60248201527f556e697377617056324c6962726172793a20494e56414c49445f50415448000060448201526064016104f8565b815167ffffffffffffffff81111561274e5761274e61392a565b604051908082528060200260200182016040528015612777578160200160208202803683370190505b50905082815f8151811061278d5761278d613cfe565b6020026020010181815250505f5b600183516127a99190613ceb565b811015612860575f806127fb878685815181106127c8576127c8613cfe565b6020026020010151878660016127de9190613fc2565b815181106127ee576127ee613cfe565b6020026020010151613698565b9150915061282384848151811061281457612814613cfe565b60200260200101518383612608565b8461282f856001613fc2565b8151811061283f5761283f613cfe565b6020026020010181815250505050808061285890613fd5565b91505061279b565b509392505050565b5f805f61287585856132ce565b6040516bffffffffffffffffffffffff19606084811b8216602084015283901b166034820152919350915086906048016040516020818303038152906040528051906020012060405160200161291d9291906001600160f81b0319815260609290921b6bffffffffffffffffffffffff1916600183015260158201527f96e8ac4277198ff8b6f785478aa9a39f403cb768dd02cbee326c3e7da348845f603582015260550190565b60408051601f1981840301815291905280516020909101209695505050505050565b604080516001600160a01b0385811660248301528481166044830152606480830185905283518084039091018152608490920183526020820180516001600160e01b03166323b872dd60e01b17905291515f928392908816916129a29190613f40565b5f604051808303815f865af19150503d805f81146129db576040519150601f19603f3d011682016040523d82523d5f602084013e6129e0565b606091505b5091509150818015612a0a575080511580612a0a575080806020019051810190612a0a9190613e55565b612a705760405162461bcd60e51b815260206004820152603160248201527f5472616e7366657248656c7065723a3a7472616e7366657246726f6d3a207472604482015270185b9cd9995c919c9bdb4819985a5b1959607a1b60648201526084016104f8565b505050505050565b5f5b60018351612a889190613ceb565b811015612c6c575f80848381518110612aa357612aa3613cfe565b602002602001015185846001612ab99190613fc2565b81518110612ac957612ac9613cfe565b6020026020010151915091505f612ae083836132ce565b5090505f87612af0866001613fc2565b81518110612b0057612b00613cfe565b602002602001015190505f80836001600160a01b0316866001600160a01b031614612b2c57825f612b2f565b5f835b915091505f60028a51612b429190613ceb565b8810612b4e5788612b9c565b612b9c7f0000000000000000000000000000000000000000000000000000000000000000878c612b7f8c6002613fc2565b81518110612b8f57612b8f613cfe565b6020026020010151612868565b9050612bc97f00000000000000000000000000000000000000000000000000000000000000008888612868565b6001600160a01b031663022c0d9f8484845f6040519080825280601f01601f191660200182016040528015612c05576020820181803683370190505b506040518563ffffffff1660e01b8152600401612c259493929190614018565b5f604051808303815f87803b158015612c3c575f80fd5b505af1158015612c4e573d5f803e3d5ffd5b50505050505050505050508080612c6490613fd5565b915050612a7a565b50505050565b6060600282511015612cc65760405162461bcd60e51b815260206004820152601e60248201527f556e697377617056324c6962726172793a20494e56414c49445f50415448000060448201526064016104f8565b815167ffffffffffffffff811115612ce057612ce061392a565b604051908082528060200260200182016040528015612d09578160200160208202803683370190505b509050828160018351612d1c9190613ceb565b81518110612d2c57612d2c613cfe565b6020026020010181815250505f60018351612d479190613ceb565b90505b8015612860575f80612d8c8786612d62600187613ceb565b81518110612d7257612d72613cfe565b60200260200101518786815181106127ee576127ee613cfe565b91509150612db4848481518110612da557612da5613cfe565b6020026020010151838361315d565b84612dc0600186613ceb565b81518110612dd057612dd0613cfe565b60200260200101818152505050508080612de990614044565b915050612d4a565b612e3481604051602401612e059190614059565b60408051601f198184030181529190526020810180516001600160e01b031663104c13eb60e21b17905261375d565b50565b6040516024810183905260448101829052612e7e9060640160408051601f198184030181529190526020810180516001600160e01b0316637b3338ad60e11b17905261375d565b5050565b5f5b60018351612e929190613ceb565b811015612603575f80848381518110612ead57612ead613cfe565b602002602001015185846001612ec39190613fc2565b81518110612ed357612ed3613cfe565b6020026020010151915091505f612eea83836132ce565b5090505f612f197f00000000000000000000000000000000000000000000000000000000000000008585612868565b90505f805f80846001600160a01b0316630902f1ac6040518163ffffffff1660e01b8152600401606060405180830381865afa158015612f5b573d5f803e3d5ffd5b505050506040513d601f19601f82011682018060405250810190612f7f9190614081565b506001600160701b031691506001600160701b031691505f80876001600160a01b03168a6001600160a01b031614612fb8578284612fbb565b83835b6040516370a0823160e01b81526001600160a01b038a81166004830152929450909250612ff6918491908d16906370a0823190602401610fa1565b9550613003868383612608565b9450505050505f80856001600160a01b0316886001600160a01b03161461302b57825f61302e565b5f835b915091505f60028c516130419190613ceb565b8a1061304d578a61307e565b61307e7f0000000000000000000000000000000000000000000000000000000000000000898e612b7f8e6002613fc2565b604080515f8152602081019182905263022c0d9f60e01b9091529091506001600160a01b0387169063022c0d9f906130bf9086908690869060248101614018565b5f604051808303815f87803b1580156130d6575f80fd5b505af11580156130e8573d5f803e3d5ffd5b50505050505050505050505050808061310090613fd5565b915050612e84565b5f826131148382613ceb565b91508111156109345760405162461bcd60e51b815260206004820152601560248201527464732d6d6174682d7375622d756e646572666c6f7760581b60448201526064016104f8565b5f8084116131c25760405162461bcd60e51b815260206004820152602c60248201527f556e697377617056324c6962726172793a20494e53554646494349454e545f4f60448201526b155514155517d05353d5539560a21b60648201526084016104f8565b5f831180156131d057505f82115b6131ec5760405162461bcd60e51b81526004016104f890613f5b565b5f6132036103e86131fd86886135de565b906135de565b90505f6132166103e56131fd8689613108565b905061322760016126c38385613fa3565b9695505050505050565b5f80841161328f5760405162461bcd60e51b815260206004820152602560248201527f556e697377617056324c6962726172793a20494e53554646494349454e545f416044820152641353d5539560da1b60648201526084016104f8565b5f8311801561329d57505f82115b6132b95760405162461bcd60e51b81526004016104f890613f5b565b826132c485846135de565b6105d79190613fa3565b5f80826001600160a01b0316846001600160a01b03160361333f5760405162461bcd60e51b815260206004820152602560248201527f556e697377617056324c6962726172793a204944454e544943414c5f41444452604482015264455353455360d81b60648201526084016104f8565b826001600160a01b0316846001600160a01b03161061335f578284613362565b83835b90925090506001600160a01b0382166133bd5760405162461bcd60e51b815260206004820152601e60248201527f556e697377617056324c6962726172793a205a45524f5f41444452455353000060448201526064016104f8565b9250929050565b60405163e6a4390560e01b81526001600160a01b03878116600483015286811660248301525f91829182917f00000000000000000000000000000000000000000000000000000000000000009091169063e6a4390590604401602060405180830381865afa158015613438573d5f803e3d5ffd5b505050506040513d601f19601f8201168201806040525081019061345c91906140cd565b6001600160a01b0316036134fd576040516364e329cb60e11b81526001600160a01b03898116600483015288811660248301527f0000000000000000000000000000000000000000000000000000000000000000169063c9c65396906044016020604051808303815f875af11580156134d7573d5f803e3d5ffd5b505050506040513d601f19601f820116820180604052508101906134fb91906140cd565b505b5f8061352a7f00000000000000000000000000000000000000000000000000000000000000008b8b613698565b91509150815f14801561353b575080155b1561354b578793508692506135d1565b5f613557898484613231565b905087811161358b57858110156135805760405162461bcd60e51b81526004016104f890613ed8565b8894509250826135cf565b5f613597898486613231565b9050898111156135a9576135a961377d565b878110156135c95760405162461bcd60e51b81526004016104f890613e92565b94508793505b505b5050965096945050505050565b5f811580613601575082826135f381836140e8565b92506135ff9083613fa3565b145b6109345760405162461bcd60e51b815260206004820152601460248201527364732d6d6174682d6d756c2d6f766572666c6f7760601b60448201526064016104f8565b5f826136508382613fc2565b91508110156109345760405162461bcd60e51b815260206004820152601460248201527364732d6d6174682d6164642d6f766572666c6f7760601b60448201526064016104f8565b5f805f6136a585856132ce565b5090505f806136b5888888612868565b6001600160a01b0316630902f1ac6040518163ffffffff1660e01b8152600401606060405180830381865afa1580156136f0573d5f803e3d5ffd5b505050506040513d601f19601f820116820180604052508101906137149190614081565b506001600160701b031691506001600160701b03169150826001600160a01b0316876001600160a01b03161461374b57808261374e565b81815b90999098509650505050505050565b80516a636f6e736f6c652e6c6f67602083015f808483855afa5050505050565b634e487b7160e01b5f52600160045260245ffd5b6001600160a01b0381168114612e34575f80fd5b80356137b081613791565b919050565b5f805f805f8060c087890312156137ca575f80fd5b86356137d581613791565b955060208701359450604087013593506060870135925060808701356137fa81613791565b8092505060a087013590509295509295509295565b5f805f60608486031215613821575f80fd5b505081359360208301359350604090920135919050565b5f8083601f840112613848575f80fd5b50813567ffffffffffffffff81111561385f575f80fd5b6020830191508360208260051b85010111156133bd575f80fd5b5f805f805f8060a0878903121561388e575f80fd5b8635955060208701359450604087013567ffffffffffffffff8111156138b2575f80fd5b6138be89828a01613838565b90955093505060608701356138d281613791565b80925050608087013590509295509295509295565b602080825282518282018190525f9190848201906040850190845b8181101561391e57835183529284019291840191600101613902565b50909695505050505050565b634e487b7160e01b5f52604160045260245ffd5b5f806040838503121561394f575f80fd5b8235915060208084013567ffffffffffffffff8082111561396e575f80fd5b818601915086601f830112613981575f80fd5b8135818111156139935761399361392a565b8060051b604051601f19603f830116810181811085821117156139b8576139b861392a565b6040529182528482019250838101850191898311156139d5575f80fd5b938501935b828510156139fa576139eb856137a5565b845293850193928501926139da565b8096505050505050509250929050565b8015158114612e34575f80fd5b803560ff811681146137b0575f80fd5b5f805f805f805f805f805f6101608c8e031215613a42575f80fd5b8b35613a4d81613791565b9a5060208c0135613a5d81613791565b995060408c0135985060608c0135975060808c0135965060a08c0135613a8281613791565b955060c08c0135945060e08c0135613a9981613a0a565b9350613aa86101008d01613a17565b92506101208c013591506101408c013590509295989b509295989b9093969950565b5f805f805f805f805f806101408b8d031215613ae4575f80fd5b8a35613aef81613791565b995060208b0135985060408b0135975060608b0135965060808b0135613b1481613791565b955060a08b0135945060c08b0135613b2b81613a0a565b9350613b3960e08c01613a17565b92506101008b013591506101208b013590509295989b9194979a5092959850565b5f805f805f60808688031215613b6e575f80fd5b85359450602086013567ffffffffffffffff811115613b8b575f80fd5b613b9788828901613838565b9095509350506040860135613bab81613791565b949793965091946060013592915050565b5f805f805f805f60e0888a031215613bd2575f80fd5b8735613bdd81613791565b96506020880135613bed81613791565b955060408801359450606088013593506080880135925060a0880135613c1281613791565b8092505060c0880135905092959891949750929550565b5f805f805f805f80610100898b031215613c41575f80fd5b8835613c4c81613791565b97506020890135613c5c81613791565b965060408901359550606089013594506080890135935060a0890135925060c0890135613c8881613791565b8092505060e089013590509295985092959890939650565b60208082526018908201527f556e69737761705632526f757465723a20455850495245440000000000000000604082015260600190565b634e487b7160e01b5f52601160045260245ffd5b8181038181111561093457610934613cd7565b634e487b7160e01b5f52603260045260245ffd5b5f60208284031215613d22575f80fd5b8135613d2d81613791565b9392505050565b6020808252601d908201527f556e69737761705632526f757465723a20494e56414c49445f50415448000000604082015260600190565b6020808252602b908201527f556e69737761705632526f757465723a20494e53554646494349454e545f4f5560408201526a1514155517d05353d5539560aa1b606082015260800190565b6001600160a01b0397881681529590961660208601526040850193909352606084019190915260ff16608083015260a082015260c081019190915260e00190565b60208082526027908201527f556e69737761705632526f757465723a204558434553534956455f494e50555460408201526617d05353d5539560ca1b606082015260800190565b5f60208284031215613e4e575f80fd5b5051919050565b5f60208284031215613e65575f80fd5b8151613d2d81613a0a565b5f8060408385031215613e81575f80fd5b505080516020909101519092909150565b60208082526026908201527f556e69737761705632526f757465723a20494e53554646494349454e545f415f604082015265105353d5539560d21b606082015260800190565b60208082526026908201527f556e69737761705632526f757465723a20494e53554646494349454e545f425f604082015265105353d5539560d21b606082015260800190565b5f5b83811015613f38578181015183820152602001613f20565b50505f910152565b5f8251613f51818460208701613f1e565b9190910192915050565b60208082526028908201527f556e697377617056324c6962726172793a20494e53554646494349454e545f4c604082015267495155494449545960c01b606082015260800190565b5f82613fbd57634e487b7160e01b5f52601260045260245ffd5b500490565b8082018082111561093457610934613cd7565b5f60018201613fe657613fe6613cd7565b5060010190565b5f8151808452614004816020860160208601613f1e565b601f01601f19169290920160200192915050565b84815283602082015260018060a01b0383166040820152608060608201525f6132276080830184613fed565b5f8161405257614052613cd7565b505f190190565b602081525f6109316020830184613fed565b80516001600160701b03811681146137b0575f80fd5b5f805f60608486031215614093575f80fd5b61409c8461406b565b92506140aa6020850161406b565b9150604084015163ffffffff811681146140c2575f80fd5b809150509250925092565b5f602082840312156140dd575f80fd5b8151613d2d81613791565b808202811582820484141761093457610934613cd756fea2646970667358221220a55e59175315011e15ab2f5441370d72aee53d6453c852610a0a6b8cca5f001d64736f6c63430008140033"

    @overload
    @classmethod
    def deploy(cls, _factory: Union[Account, Address], _WETH: Union[Account, Address], *, from_: Optional[Union[Account, Address, str]] = None, value: Union[int, str] = 0, gas_limit: Optional[Union[int, Literal["max"], Literal["auto"]]] = None, return_tx: Literal[False] = False, request_type: Literal["call"], chain: Optional[Chain] = None, gas_price: Optional[Union[int, str]] = None, max_fee_per_gas: Optional[Union[int, str]] = None, max_priority_fee_per_gas: Optional[Union[int, str]] = None, access_list: Optional[Union[Dict[Union[Account, Address, str], List[int]], Literal["auto"]]] = None, type: Optional[int] = None, block: Optional[Union[int, Literal["latest"], Literal["pending"], Literal["earliest"], Literal["safe"], Literal["finalized"]]] = None, confirmations: Optional[int] = None) -> bytearray:
        """
        [Source code](file:///Users/dteiml/p/hacker-dom/woke-uniswap-v2/src/UniswapV2Router02.sol#24)

        Args:
            _factory: address
            _WETH: address
        """
        ...

    @overload
    @classmethod
    def deploy(cls, _factory: Union[Account, Address], _WETH: Union[Account, Address], *, from_: Optional[Union[Account, Address, str]] = None, value: Union[int, str] = 0, gas_limit: Optional[Union[int, Literal["max"], Literal["auto"]]] = None, return_tx: Literal[False] = False, request_type: Literal["tx"] = "tx", chain: Optional[Chain] = None, gas_price: Optional[Union[int, str]] = None, max_fee_per_gas: Optional[Union[int, str]] = None, max_priority_fee_per_gas: Optional[Union[int, str]] = None, access_list: Optional[Union[Dict[Union[Account, Address, str], List[int]], Literal["auto"]]] = None, type: Optional[int] = None, block: Optional[Union[int, Literal["latest"], Literal["pending"], Literal["earliest"], Literal["safe"], Literal["finalized"]]] = None, confirmations: Optional[int] = None) -> UniswapV2Router02:
        """
        [Source code](file:///Users/dteiml/p/hacker-dom/woke-uniswap-v2/src/UniswapV2Router02.sol#24)

        Args:
            _factory: address
            _WETH: address
        """
        ...

    @overload
    @classmethod
    def deploy(cls, _factory: Union[Account, Address], _WETH: Union[Account, Address], *, from_: Optional[Union[Account, Address, str]] = None, value: Union[int, str] = 0, gas_limit: Optional[Union[int, Literal["max"], Literal["auto"]]] = None, return_tx: Literal[False] = False, request_type: Literal["estimate"], chain: Optional[Chain] = None, gas_price: Optional[Union[int, str]] = None, max_fee_per_gas: Optional[Union[int, str]] = None, max_priority_fee_per_gas: Optional[Union[int, str]] = None, access_list: Optional[Union[Dict[Union[Account, Address, str], List[int]], Literal["auto"]]] = None, type: Optional[int] = None, block: Optional[Union[int, Literal["latest"], Literal["pending"], Literal["earliest"], Literal["safe"], Literal["finalized"]]] = None, confirmations: Optional[int] = None) -> int:
        """
        [Source code](file:///Users/dteiml/p/hacker-dom/woke-uniswap-v2/src/UniswapV2Router02.sol#24)

        Args:
            _factory: address
            _WETH: address
        """
        ...

    @overload
    @classmethod
    def deploy(cls, _factory: Union[Account, Address], _WETH: Union[Account, Address], *, from_: Optional[Union[Account, Address, str]] = None, value: Union[int, str] = 0, gas_limit: Optional[Union[int, Literal["max"], Literal["auto"]]] = None, return_tx: Literal[False] = False, request_type: Literal["access_list"], chain: Optional[Chain] = None, gas_price: Optional[Union[int, str]] = None, max_fee_per_gas: Optional[Union[int, str]] = None, max_priority_fee_per_gas: Optional[Union[int, str]] = None, access_list: Optional[Union[Dict[Union[Account, Address, str], List[int]], Literal["auto"]]] = None, type: Optional[int] = None, block: Optional[Union[int, Literal["latest"], Literal["pending"], Literal["earliest"], Literal["safe"], Literal["finalized"]]] = None, confirmations: Optional[int] = None) -> Tuple[Dict[Address, List[int]], int]:
        """
        [Source code](file:///Users/dteiml/p/hacker-dom/woke-uniswap-v2/src/UniswapV2Router02.sol#24)

        Args:
            _factory: address
            _WETH: address
        """
        ...

    @overload
    @classmethod
    def deploy(cls, _factory: Union[Account, Address], _WETH: Union[Account, Address], *, from_: Optional[Union[Account, Address, str]] = None, value: Union[int, str] = 0, gas_limit: Optional[Union[int, Literal["max"], Literal["auto"]]] = None, return_tx: Literal[True], request_type: Literal["tx"] = "tx", chain: Optional[Chain] = None, gas_price: Optional[Union[int, str]] = None, max_fee_per_gas: Optional[Union[int, str]] = None, max_priority_fee_per_gas: Optional[Union[int, str]] = None, access_list: Optional[Union[Dict[Union[Account, Address, str], List[int]], Literal["auto"]]] = None, type: Optional[int] = None, block: Optional[Union[int, Literal["latest"], Literal["pending"], Literal["earliest"], Literal["safe"], Literal["finalized"]]] = None, confirmations: Optional[int] = None) -> TransactionAbc[UniswapV2Router02]:
        """
        [Source code](file:///Users/dteiml/p/hacker-dom/woke-uniswap-v2/src/UniswapV2Router02.sol#24)

        Args:
            _factory: address
            _WETH: address
        """
        ...

    @classmethod
    def deploy(cls, _factory: Union[Account, Address], _WETH: Union[Account, Address], *, from_: Optional[Union[Account, Address, str]] = None, value: Union[int, str] = 0, gas_limit: Optional[Union[int, Literal["max"], Literal["auto"]]] = None, return_tx: bool = False, request_type: RequestType = "tx", chain: Optional[Chain] = None, gas_price: Optional[Union[int, str]] = None, max_fee_per_gas: Optional[Union[int, str]] = None, max_priority_fee_per_gas: Optional[Union[int, str]] = None, access_list: Optional[Union[Dict[Union[Account, Address, str], List[int]], Literal["auto"]]] = None, type: Optional[int] = None, block: Optional[Union[int, Literal["latest"], Literal["pending"], Literal["earliest"], Literal["safe"], Literal["finalized"]]] = None, confirmations: Optional[int] = None) -> Union[bytearray, UniswapV2Router02, int, Tuple[Dict[Address, List[int]], int], TransactionAbc[UniswapV2Router02]]:
        """
        [Source code](file:///Users/dteiml/p/hacker-dom/woke-uniswap-v2/src/UniswapV2Router02.sol#24)

        Args:
            _factory: address
            _WETH: address
        """
        return cls._deploy(request_type, [_factory, _WETH], return_tx, UniswapV2Router02, from_, value, gas_limit, {}, chain, gas_price, max_fee_per_gas, max_priority_fee_per_gas, access_list, type, block, confirmations)

    @classmethod
    def get_creation_code(cls) -> bytes:
        return cls._get_creation_code({})

    @overload
    def factory(self, *, from_: Optional[Union[Account, Address, str]] = None, to: Optional[Union[Account, Address, str]] = None, value: Union[int, str] = 0, gas_limit: Optional[Union[int, Literal["max"], Literal["auto"]]] = None, request_type: Literal["call"] = "call", gas_price: Optional[Union[int, str]] = None, max_fee_per_gas: Optional[Union[int, str]] = None, max_priority_fee_per_gas: Optional[Union[int, str]] = None, access_list: Optional[Union[Dict[Union[Account, Address, str], List[int]], Literal["auto"]]] = None, type: Optional[int] = None, block: Optional[Union[int, Literal["latest"], Literal["pending"], Literal["earliest"], Literal["safe"], Literal["finalized"]]] = None, confirmations: Optional[int] = None) -> Address:
        """
        [Source code](file:///Users/dteiml/p/hacker-dom/woke-uniswap-v2/src/UniswapV2Router02.sol#16)

        Returns:
            address
        """
        ...

    @overload
    def factory(self, *, from_: Optional[Union[Account, Address, str]] = None, to: Optional[Union[Account, Address, str]] = None, value: Union[int, str] = 0, gas_limit: Optional[Union[int, Literal["max"], Literal["auto"]]] = None, request_type: Literal["estimate"], gas_price: Optional[Union[int, str]] = None, max_fee_per_gas: Optional[Union[int, str]] = None, max_priority_fee_per_gas: Optional[Union[int, str]] = None, access_list: Optional[Union[Dict[Union[Account, Address, str], List[int]], Literal["auto"]]] = None, type: Optional[int] = None, block: Optional[Union[int, Literal["latest"], Literal["pending"], Literal["earliest"], Literal["safe"], Literal["finalized"]]] = None, confirmations: Optional[int] = None) -> int:
        """
        [Source code](file:///Users/dteiml/p/hacker-dom/woke-uniswap-v2/src/UniswapV2Router02.sol#16)

        Returns:
            address
        """
        ...

    @overload
    def factory(self, *, from_: Optional[Union[Account, Address, str]] = None, to: Optional[Union[Account, Address, str]] = None, value: Union[int, str] = 0, gas_limit: Optional[Union[int, Literal["max"], Literal["auto"]]] = None, request_type: Literal["access_list"], gas_price: Optional[Union[int, str]] = None, max_fee_per_gas: Optional[Union[int, str]] = None, max_priority_fee_per_gas: Optional[Union[int, str]] = None, access_list: Optional[Union[Dict[Union[Account, Address, str], List[int]], Literal["auto"]]] = None, type: Optional[int] = None, block: Optional[Union[int, Literal["latest"], Literal["pending"], Literal["earliest"], Literal["safe"], Literal["finalized"]]] = None, confirmations: Optional[int] = None) -> Tuple[Dict[Address, List[int]], int]:
        """
        [Source code](file:///Users/dteiml/p/hacker-dom/woke-uniswap-v2/src/UniswapV2Router02.sol#16)

        Returns:
            address
        """
        ...

    @overload
    def factory(self, *, from_: Optional[Union[Account, Address, str]] = None, to: Optional[Union[Account, Address, str]] = None, value: Union[int, str] = 0, gas_limit: Optional[Union[int, Literal["max"], Literal["auto"]]] = None, request_type: Literal["tx"], gas_price: Optional[Union[int, str]] = None, max_fee_per_gas: Optional[Union[int, str]] = None, max_priority_fee_per_gas: Optional[Union[int, str]] = None, access_list: Optional[Union[Dict[Union[Account, Address, str], List[int]], Literal["auto"]]] = None, type: Optional[int] = None, block: Optional[Union[int, Literal["latest"], Literal["pending"], Literal["earliest"], Literal["safe"], Literal["finalized"]]] = None, confirmations: Optional[int] = None) -> TransactionAbc[Address]:
        """
        [Source code](file:///Users/dteiml/p/hacker-dom/woke-uniswap-v2/src/UniswapV2Router02.sol#16)

        Returns:
            address
        """
        ...

    def factory(self, *, from_: Optional[Union[Account, Address, str]] = None, to: Optional[Union[Account, Address, str]] = None, value: Union[int, str] = 0, gas_limit: Optional[Union[int, Literal["max"], Literal["auto"]]] = None, request_type: RequestType = 'call', gas_price: Optional[Union[int, str]] = None, max_fee_per_gas: Optional[Union[int, str]] = None, max_priority_fee_per_gas: Optional[Union[int, str]] = None, access_list: Optional[Union[Dict[Union[Account, Address, str], List[int]], Literal["auto"]]] = None, type: Optional[int] = None, block: Optional[Union[int, Literal["latest"], Literal["pending"], Literal["earliest"], Literal["safe"], Literal["finalized"]]] = None, confirmations: Optional[int] = None) -> Union[Address, TransactionAbc[Address], int, Tuple[Dict[Address, List[int]], int]]:
        """
        [Source code](file:///Users/dteiml/p/hacker-dom/woke-uniswap-v2/src/UniswapV2Router02.sol#16)

        Returns:
            address
        """
        return self._execute(self.chain, request_type, "c45a0155", [], True if request_type == "tx" else False, Address, from_, to if to is not None else str(self.address), value, gas_limit, gas_price, max_fee_per_gas, max_priority_fee_per_gas, access_list, type, block, confirmations)

    @overload
    def WETH(self, *, from_: Optional[Union[Account, Address, str]] = None, to: Optional[Union[Account, Address, str]] = None, value: Union[int, str] = 0, gas_limit: Optional[Union[int, Literal["max"], Literal["auto"]]] = None, request_type: Literal["call"] = "call", gas_price: Optional[Union[int, str]] = None, max_fee_per_gas: Optional[Union[int, str]] = None, max_priority_fee_per_gas: Optional[Union[int, str]] = None, access_list: Optional[Union[Dict[Union[Account, Address, str], List[int]], Literal["auto"]]] = None, type: Optional[int] = None, block: Optional[Union[int, Literal["latest"], Literal["pending"], Literal["earliest"], Literal["safe"], Literal["finalized"]]] = None, confirmations: Optional[int] = None) -> Address:
        """
        [Source code](file:///Users/dteiml/p/hacker-dom/woke-uniswap-v2/src/UniswapV2Router02.sol#17)

        Returns:
            address
        """
        ...

    @overload
    def WETH(self, *, from_: Optional[Union[Account, Address, str]] = None, to: Optional[Union[Account, Address, str]] = None, value: Union[int, str] = 0, gas_limit: Optional[Union[int, Literal["max"], Literal["auto"]]] = None, request_type: Literal["estimate"], gas_price: Optional[Union[int, str]] = None, max_fee_per_gas: Optional[Union[int, str]] = None, max_priority_fee_per_gas: Optional[Union[int, str]] = None, access_list: Optional[Union[Dict[Union[Account, Address, str], List[int]], Literal["auto"]]] = None, type: Optional[int] = None, block: Optional[Union[int, Literal["latest"], Literal["pending"], Literal["earliest"], Literal["safe"], Literal["finalized"]]] = None, confirmations: Optional[int] = None) -> int:
        """
        [Source code](file:///Users/dteiml/p/hacker-dom/woke-uniswap-v2/src/UniswapV2Router02.sol#17)

        Returns:
            address
        """
        ...

    @overload
    def WETH(self, *, from_: Optional[Union[Account, Address, str]] = None, to: Optional[Union[Account, Address, str]] = None, value: Union[int, str] = 0, gas_limit: Optional[Union[int, Literal["max"], Literal["auto"]]] = None, request_type: Literal["access_list"], gas_price: Optional[Union[int, str]] = None, max_fee_per_gas: Optional[Union[int, str]] = None, max_priority_fee_per_gas: Optional[Union[int, str]] = None, access_list: Optional[Union[Dict[Union[Account, Address, str], List[int]], Literal["auto"]]] = None, type: Optional[int] = None, block: Optional[Union[int, Literal["latest"], Literal["pending"], Literal["earliest"], Literal["safe"], Literal["finalized"]]] = None, confirmations: Optional[int] = None) -> Tuple[Dict[Address, List[int]], int]:
        """
        [Source code](file:///Users/dteiml/p/hacker-dom/woke-uniswap-v2/src/UniswapV2Router02.sol#17)

        Returns:
            address
        """
        ...

    @overload
    def WETH(self, *, from_: Optional[Union[Account, Address, str]] = None, to: Optional[Union[Account, Address, str]] = None, value: Union[int, str] = 0, gas_limit: Optional[Union[int, Literal["max"], Literal["auto"]]] = None, request_type: Literal["tx"], gas_price: Optional[Union[int, str]] = None, max_fee_per_gas: Optional[Union[int, str]] = None, max_priority_fee_per_gas: Optional[Union[int, str]] = None, access_list: Optional[Union[Dict[Union[Account, Address, str], List[int]], Literal["auto"]]] = None, type: Optional[int] = None, block: Optional[Union[int, Literal["latest"], Literal["pending"], Literal["earliest"], Literal["safe"], Literal["finalized"]]] = None, confirmations: Optional[int] = None) -> TransactionAbc[Address]:
        """
        [Source code](file:///Users/dteiml/p/hacker-dom/woke-uniswap-v2/src/UniswapV2Router02.sol#17)

        Returns:
            address
        """
        ...

    def WETH(self, *, from_: Optional[Union[Account, Address, str]] = None, to: Optional[Union[Account, Address, str]] = None, value: Union[int, str] = 0, gas_limit: Optional[Union[int, Literal["max"], Literal["auto"]]] = None, request_type: RequestType = 'call', gas_price: Optional[Union[int, str]] = None, max_fee_per_gas: Optional[Union[int, str]] = None, max_priority_fee_per_gas: Optional[Union[int, str]] = None, access_list: Optional[Union[Dict[Union[Account, Address, str], List[int]], Literal["auto"]]] = None, type: Optional[int] = None, block: Optional[Union[int, Literal["latest"], Literal["pending"], Literal["earliest"], Literal["safe"], Literal["finalized"]]] = None, confirmations: Optional[int] = None) -> Union[Address, TransactionAbc[Address], int, Tuple[Dict[Address, List[int]], int]]:
        """
        [Source code](file:///Users/dteiml/p/hacker-dom/woke-uniswap-v2/src/UniswapV2Router02.sol#17)

        Returns:
            address
        """
        return self._execute(self.chain, request_type, "ad5c4648", [], True if request_type == "tx" else False, Address, from_, to if to is not None else str(self.address), value, gas_limit, gas_price, max_fee_per_gas, max_priority_fee_per_gas, access_list, type, block, confirmations)

    @overload
    def addLiquidity(self, tokenA: Union[Account, Address], tokenB: Union[Account, Address], amountADesired: uint256, amountBDesired: uint256, amountAMin: uint256, amountBMin: uint256, to_: Union[Account, Address], deadline: uint256, *, from_: Optional[Union[Account, Address, str]] = None, to: Optional[Union[Account, Address, str]] = None, value: Union[int, str] = 0, gas_limit: Optional[Union[int, Literal["max"], Literal["auto"]]] = None, request_type: Literal["call"], gas_price: Optional[Union[int, str]] = None, max_fee_per_gas: Optional[Union[int, str]] = None, max_priority_fee_per_gas: Optional[Union[int, str]] = None, access_list: Optional[Union[Dict[Union[Account, Address, str], List[int]], Literal["auto"]]] = None, type: Optional[int] = None, block: Optional[Union[int, Literal["latest"], Literal["pending"], Literal["earliest"], Literal["safe"], Literal["finalized"]]] = None, confirmations: Optional[int] = None) -> Tuple[uint256, uint256, uint256]:
        """
        [Source code](file:///Users/dteiml/p/hacker-dom/woke-uniswap-v2/src/UniswapV2Router02.sol#62)

        Args:
            tokenA: address
            tokenB: address
            amountADesired: uint256
            amountBDesired: uint256
            amountAMin: uint256
            amountBMin: uint256
            to_: address
            deadline: uint256
        Returns:
            (uint256, uint256, uint256)
        """
        ...

    @overload
    def addLiquidity(self, tokenA: Union[Account, Address], tokenB: Union[Account, Address], amountADesired: uint256, amountBDesired: uint256, amountAMin: uint256, amountBMin: uint256, to_: Union[Account, Address], deadline: uint256, *, from_: Optional[Union[Account, Address, str]] = None, to: Optional[Union[Account, Address, str]] = None, value: Union[int, str] = 0, gas_limit: Optional[Union[int, Literal["max"], Literal["auto"]]] = None, request_type: Literal["estimate"], gas_price: Optional[Union[int, str]] = None, max_fee_per_gas: Optional[Union[int, str]] = None, max_priority_fee_per_gas: Optional[Union[int, str]] = None, access_list: Optional[Union[Dict[Union[Account, Address, str], List[int]], Literal["auto"]]] = None, type: Optional[int] = None, block: Optional[Union[int, Literal["latest"], Literal["pending"], Literal["earliest"], Literal["safe"], Literal["finalized"]]] = None, confirmations: Optional[int] = None) -> int:
        """
        [Source code](file:///Users/dteiml/p/hacker-dom/woke-uniswap-v2/src/UniswapV2Router02.sol#62)

        Args:
            tokenA: address
            tokenB: address
            amountADesired: uint256
            amountBDesired: uint256
            amountAMin: uint256
            amountBMin: uint256
            to_: address
            deadline: uint256
        Returns:
            (uint256, uint256, uint256)
        """
        ...

    @overload
    def addLiquidity(self, tokenA: Union[Account, Address], tokenB: Union[Account, Address], amountADesired: uint256, amountBDesired: uint256, amountAMin: uint256, amountBMin: uint256, to_: Union[Account, Address], deadline: uint256, *, from_: Optional[Union[Account, Address, str]] = None, to: Optional[Union[Account, Address, str]] = None, value: Union[int, str] = 0, gas_limit: Optional[Union[int, Literal["max"], Literal["auto"]]] = None, request_type: Literal["access_list"], gas_price: Optional[Union[int, str]] = None, max_fee_per_gas: Optional[Union[int, str]] = None, max_priority_fee_per_gas: Optional[Union[int, str]] = None, access_list: Optional[Union[Dict[Union[Account, Address, str], List[int]], Literal["auto"]]] = None, type: Optional[int] = None, block: Optional[Union[int, Literal["latest"], Literal["pending"], Literal["earliest"], Literal["safe"], Literal["finalized"]]] = None, confirmations: Optional[int] = None) -> Tuple[Dict[Address, List[int]], int]:
        """
        [Source code](file:///Users/dteiml/p/hacker-dom/woke-uniswap-v2/src/UniswapV2Router02.sol#62)

        Args:
            tokenA: address
            tokenB: address
            amountADesired: uint256
            amountBDesired: uint256
            amountAMin: uint256
            amountBMin: uint256
            to_: address
            deadline: uint256
        Returns:
            (uint256, uint256, uint256)
        """
        ...

    @overload
    def addLiquidity(self, tokenA: Union[Account, Address], tokenB: Union[Account, Address], amountADesired: uint256, amountBDesired: uint256, amountAMin: uint256, amountBMin: uint256, to_: Union[Account, Address], deadline: uint256, *, from_: Optional[Union[Account, Address, str]] = None, to: Optional[Union[Account, Address, str]] = None, value: Union[int, str] = 0, gas_limit: Optional[Union[int, Literal["max"], Literal["auto"]]] = None, request_type: Literal["tx"] = "tx", gas_price: Optional[Union[int, str]] = None, max_fee_per_gas: Optional[Union[int, str]] = None, max_priority_fee_per_gas: Optional[Union[int, str]] = None, access_list: Optional[Union[Dict[Union[Account, Address, str], List[int]], Literal["auto"]]] = None, type: Optional[int] = None, block: Optional[Union[int, Literal["latest"], Literal["pending"], Literal["earliest"], Literal["safe"], Literal["finalized"]]] = None, confirmations: Optional[int] = None) -> TransactionAbc[Tuple[uint256, uint256, uint256]]:
        """
        [Source code](file:///Users/dteiml/p/hacker-dom/woke-uniswap-v2/src/UniswapV2Router02.sol#62)

        Args:
            tokenA: address
            tokenB: address
            amountADesired: uint256
            amountBDesired: uint256
            amountAMin: uint256
            amountBMin: uint256
            to_: address
            deadline: uint256
        Returns:
            (uint256, uint256, uint256)
        """
        ...

    def addLiquidity(self, tokenA: Union[Account, Address], tokenB: Union[Account, Address], amountADesired: uint256, amountBDesired: uint256, amountAMin: uint256, amountBMin: uint256, to_: Union[Account, Address], deadline: uint256, *, from_: Optional[Union[Account, Address, str]] = None, to: Optional[Union[Account, Address, str]] = None, value: Union[int, str] = 0, gas_limit: Optional[Union[int, Literal["max"], Literal["auto"]]] = None, request_type: RequestType = 'tx', gas_price: Optional[Union[int, str]] = None, max_fee_per_gas: Optional[Union[int, str]] = None, max_priority_fee_per_gas: Optional[Union[int, str]] = None, access_list: Optional[Union[Dict[Union[Account, Address, str], List[int]], Literal["auto"]]] = None, type: Optional[int] = None, block: Optional[Union[int, Literal["latest"], Literal["pending"], Literal["earliest"], Literal["safe"], Literal["finalized"]]] = None, confirmations: Optional[int] = None) -> Union[Tuple[uint256, uint256, uint256], TransactionAbc[Tuple[uint256, uint256, uint256]], int, Tuple[Dict[Address, List[int]], int]]:
        """
        [Source code](file:///Users/dteiml/p/hacker-dom/woke-uniswap-v2/src/UniswapV2Router02.sol#62)

        Args:
            tokenA: address
            tokenB: address
            amountADesired: uint256
            amountBDesired: uint256
            amountAMin: uint256
            amountBMin: uint256
            to_: address
            deadline: uint256
        Returns:
            (uint256, uint256, uint256)
        """
        return self._execute(self.chain, request_type, "e8e33700", [tokenA, tokenB, amountADesired, amountBDesired, amountAMin, amountBMin, to_, deadline], True if request_type == "tx" else False, Tuple[uint256, uint256, uint256], from_, to if to is not None else str(self.address), value, gas_limit, gas_price, max_fee_per_gas, max_priority_fee_per_gas, access_list, type, block, confirmations)

    @overload
    def addLiquidityETH(self, token: Union[Account, Address], amountTokenDesired: uint256, amountTokenMin: uint256, amountETHMin: uint256, to_: Union[Account, Address], deadline: uint256, *, from_: Optional[Union[Account, Address, str]] = None, to: Optional[Union[Account, Address, str]] = None, value: Union[int, str] = 0, gas_limit: Optional[Union[int, Literal["max"], Literal["auto"]]] = None, request_type: Literal["call"], gas_price: Optional[Union[int, str]] = None, max_fee_per_gas: Optional[Union[int, str]] = None, max_priority_fee_per_gas: Optional[Union[int, str]] = None, access_list: Optional[Union[Dict[Union[Account, Address, str], List[int]], Literal["auto"]]] = None, type: Optional[int] = None, block: Optional[Union[int, Literal["latest"], Literal["pending"], Literal["earliest"], Literal["safe"], Literal["finalized"]]] = None, confirmations: Optional[int] = None) -> Tuple[uint256, uint256, uint256]:
        """
        [Source code](file:///Users/dteiml/p/hacker-dom/woke-uniswap-v2/src/UniswapV2Router02.sol#78)

        Args:
            token: address
            amountTokenDesired: uint256
            amountTokenMin: uint256
            amountETHMin: uint256
            to_: address
            deadline: uint256
        Returns:
            (uint256, uint256, uint256)
        """
        ...

    @overload
    def addLiquidityETH(self, token: Union[Account, Address], amountTokenDesired: uint256, amountTokenMin: uint256, amountETHMin: uint256, to_: Union[Account, Address], deadline: uint256, *, from_: Optional[Union[Account, Address, str]] = None, to: Optional[Union[Account, Address, str]] = None, value: Union[int, str] = 0, gas_limit: Optional[Union[int, Literal["max"], Literal["auto"]]] = None, request_type: Literal["estimate"], gas_price: Optional[Union[int, str]] = None, max_fee_per_gas: Optional[Union[int, str]] = None, max_priority_fee_per_gas: Optional[Union[int, str]] = None, access_list: Optional[Union[Dict[Union[Account, Address, str], List[int]], Literal["auto"]]] = None, type: Optional[int] = None, block: Optional[Union[int, Literal["latest"], Literal["pending"], Literal["earliest"], Literal["safe"], Literal["finalized"]]] = None, confirmations: Optional[int] = None) -> int:
        """
        [Source code](file:///Users/dteiml/p/hacker-dom/woke-uniswap-v2/src/UniswapV2Router02.sol#78)

        Args:
            token: address
            amountTokenDesired: uint256
            amountTokenMin: uint256
            amountETHMin: uint256
            to_: address
            deadline: uint256
        Returns:
            (uint256, uint256, uint256)
        """
        ...

    @overload
    def addLiquidityETH(self, token: Union[Account, Address], amountTokenDesired: uint256, amountTokenMin: uint256, amountETHMin: uint256, to_: Union[Account, Address], deadline: uint256, *, from_: Optional[Union[Account, Address, str]] = None, to: Optional[Union[Account, Address, str]] = None, value: Union[int, str] = 0, gas_limit: Optional[Union[int, Literal["max"], Literal["auto"]]] = None, request_type: Literal["access_list"], gas_price: Optional[Union[int, str]] = None, max_fee_per_gas: Optional[Union[int, str]] = None, max_priority_fee_per_gas: Optional[Union[int, str]] = None, access_list: Optional[Union[Dict[Union[Account, Address, str], List[int]], Literal["auto"]]] = None, type: Optional[int] = None, block: Optional[Union[int, Literal["latest"], Literal["pending"], Literal["earliest"], Literal["safe"], Literal["finalized"]]] = None, confirmations: Optional[int] = None) -> Tuple[Dict[Address, List[int]], int]:
        """
        [Source code](file:///Users/dteiml/p/hacker-dom/woke-uniswap-v2/src/UniswapV2Router02.sol#78)

        Args:
            token: address
            amountTokenDesired: uint256
            amountTokenMin: uint256
            amountETHMin: uint256
            to_: address
            deadline: uint256
        Returns:
            (uint256, uint256, uint256)
        """
        ...

    @overload
    def addLiquidityETH(self, token: Union[Account, Address], amountTokenDesired: uint256, amountTokenMin: uint256, amountETHMin: uint256, to_: Union[Account, Address], deadline: uint256, *, from_: Optional[Union[Account, Address, str]] = None, to: Optional[Union[Account, Address, str]] = None, value: Union[int, str] = 0, gas_limit: Optional[Union[int, Literal["max"], Literal["auto"]]] = None, request_type: Literal["tx"] = "tx", gas_price: Optional[Union[int, str]] = None, max_fee_per_gas: Optional[Union[int, str]] = None, max_priority_fee_per_gas: Optional[Union[int, str]] = None, access_list: Optional[Union[Dict[Union[Account, Address, str], List[int]], Literal["auto"]]] = None, type: Optional[int] = None, block: Optional[Union[int, Literal["latest"], Literal["pending"], Literal["earliest"], Literal["safe"], Literal["finalized"]]] = None, confirmations: Optional[int] = None) -> TransactionAbc[Tuple[uint256, uint256, uint256]]:
        """
        [Source code](file:///Users/dteiml/p/hacker-dom/woke-uniswap-v2/src/UniswapV2Router02.sol#78)

        Args:
            token: address
            amountTokenDesired: uint256
            amountTokenMin: uint256
            amountETHMin: uint256
            to_: address
            deadline: uint256
        Returns:
            (uint256, uint256, uint256)
        """
        ...

    def addLiquidityETH(self, token: Union[Account, Address], amountTokenDesired: uint256, amountTokenMin: uint256, amountETHMin: uint256, to_: Union[Account, Address], deadline: uint256, *, from_: Optional[Union[Account, Address, str]] = None, to: Optional[Union[Account, Address, str]] = None, value: Union[int, str] = 0, gas_limit: Optional[Union[int, Literal["max"], Literal["auto"]]] = None, request_type: RequestType = 'tx', gas_price: Optional[Union[int, str]] = None, max_fee_per_gas: Optional[Union[int, str]] = None, max_priority_fee_per_gas: Optional[Union[int, str]] = None, access_list: Optional[Union[Dict[Union[Account, Address, str], List[int]], Literal["auto"]]] = None, type: Optional[int] = None, block: Optional[Union[int, Literal["latest"], Literal["pending"], Literal["earliest"], Literal["safe"], Literal["finalized"]]] = None, confirmations: Optional[int] = None) -> Union[Tuple[uint256, uint256, uint256], TransactionAbc[Tuple[uint256, uint256, uint256]], int, Tuple[Dict[Address, List[int]], int]]:
        """
        [Source code](file:///Users/dteiml/p/hacker-dom/woke-uniswap-v2/src/UniswapV2Router02.sol#78)

        Args:
            token: address
            amountTokenDesired: uint256
            amountTokenMin: uint256
            amountETHMin: uint256
            to_: address
            deadline: uint256
        Returns:
            (uint256, uint256, uint256)
        """
        return self._execute(self.chain, request_type, "f305d719", [token, amountTokenDesired, amountTokenMin, amountETHMin, to_, deadline], True if request_type == "tx" else False, Tuple[uint256, uint256, uint256], from_, to if to is not None else str(self.address), value, gas_limit, gas_price, max_fee_per_gas, max_priority_fee_per_gas, access_list, type, block, confirmations)

    @overload
    def removeLiquidity(self, tokenA: Union[Account, Address], tokenB: Union[Account, Address], liquidity: uint256, amountAMin: uint256, amountBMin: uint256, to_: Union[Account, Address], deadline: uint256, *, from_: Optional[Union[Account, Address, str]] = None, to: Optional[Union[Account, Address, str]] = None, value: Union[int, str] = 0, gas_limit: Optional[Union[int, Literal["max"], Literal["auto"]]] = None, request_type: Literal["call"], gas_price: Optional[Union[int, str]] = None, max_fee_per_gas: Optional[Union[int, str]] = None, max_priority_fee_per_gas: Optional[Union[int, str]] = None, access_list: Optional[Union[Dict[Union[Account, Address, str], List[int]], Literal["auto"]]] = None, type: Optional[int] = None, block: Optional[Union[int, Literal["latest"], Literal["pending"], Literal["earliest"], Literal["safe"], Literal["finalized"]]] = None, confirmations: Optional[int] = None) -> Tuple[uint256, uint256]:
        """
        [Source code](file:///Users/dteiml/p/hacker-dom/woke-uniswap-v2/src/UniswapV2Router02.sol#104)

        Args:
            tokenA: address
            tokenB: address
            liquidity: uint256
            amountAMin: uint256
            amountBMin: uint256
            to_: address
            deadline: uint256
        Returns:
            (uint256, uint256)
        """
        ...

    @overload
    def removeLiquidity(self, tokenA: Union[Account, Address], tokenB: Union[Account, Address], liquidity: uint256, amountAMin: uint256, amountBMin: uint256, to_: Union[Account, Address], deadline: uint256, *, from_: Optional[Union[Account, Address, str]] = None, to: Optional[Union[Account, Address, str]] = None, value: Union[int, str] = 0, gas_limit: Optional[Union[int, Literal["max"], Literal["auto"]]] = None, request_type: Literal["estimate"], gas_price: Optional[Union[int, str]] = None, max_fee_per_gas: Optional[Union[int, str]] = None, max_priority_fee_per_gas: Optional[Union[int, str]] = None, access_list: Optional[Union[Dict[Union[Account, Address, str], List[int]], Literal["auto"]]] = None, type: Optional[int] = None, block: Optional[Union[int, Literal["latest"], Literal["pending"], Literal["earliest"], Literal["safe"], Literal["finalized"]]] = None, confirmations: Optional[int] = None) -> int:
        """
        [Source code](file:///Users/dteiml/p/hacker-dom/woke-uniswap-v2/src/UniswapV2Router02.sol#104)

        Args:
            tokenA: address
            tokenB: address
            liquidity: uint256
            amountAMin: uint256
            amountBMin: uint256
            to_: address
            deadline: uint256
        Returns:
            (uint256, uint256)
        """
        ...

    @overload
    def removeLiquidity(self, tokenA: Union[Account, Address], tokenB: Union[Account, Address], liquidity: uint256, amountAMin: uint256, amountBMin: uint256, to_: Union[Account, Address], deadline: uint256, *, from_: Optional[Union[Account, Address, str]] = None, to: Optional[Union[Account, Address, str]] = None, value: Union[int, str] = 0, gas_limit: Optional[Union[int, Literal["max"], Literal["auto"]]] = None, request_type: Literal["access_list"], gas_price: Optional[Union[int, str]] = None, max_fee_per_gas: Optional[Union[int, str]] = None, max_priority_fee_per_gas: Optional[Union[int, str]] = None, access_list: Optional[Union[Dict[Union[Account, Address, str], List[int]], Literal["auto"]]] = None, type: Optional[int] = None, block: Optional[Union[int, Literal["latest"], Literal["pending"], Literal["earliest"], Literal["safe"], Literal["finalized"]]] = None, confirmations: Optional[int] = None) -> Tuple[Dict[Address, List[int]], int]:
        """
        [Source code](file:///Users/dteiml/p/hacker-dom/woke-uniswap-v2/src/UniswapV2Router02.sol#104)

        Args:
            tokenA: address
            tokenB: address
            liquidity: uint256
            amountAMin: uint256
            amountBMin: uint256
            to_: address
            deadline: uint256
        Returns:
            (uint256, uint256)
        """
        ...

    @overload
    def removeLiquidity(self, tokenA: Union[Account, Address], tokenB: Union[Account, Address], liquidity: uint256, amountAMin: uint256, amountBMin: uint256, to_: Union[Account, Address], deadline: uint256, *, from_: Optional[Union[Account, Address, str]] = None, to: Optional[Union[Account, Address, str]] = None, value: Union[int, str] = 0, gas_limit: Optional[Union[int, Literal["max"], Literal["auto"]]] = None, request_type: Literal["tx"] = "tx", gas_price: Optional[Union[int, str]] = None, max_fee_per_gas: Optional[Union[int, str]] = None, max_priority_fee_per_gas: Optional[Union[int, str]] = None, access_list: Optional[Union[Dict[Union[Account, Address, str], List[int]], Literal["auto"]]] = None, type: Optional[int] = None, block: Optional[Union[int, Literal["latest"], Literal["pending"], Literal["earliest"], Literal["safe"], Literal["finalized"]]] = None, confirmations: Optional[int] = None) -> TransactionAbc[Tuple[uint256, uint256]]:
        """
        [Source code](file:///Users/dteiml/p/hacker-dom/woke-uniswap-v2/src/UniswapV2Router02.sol#104)

        Args:
            tokenA: address
            tokenB: address
            liquidity: uint256
            amountAMin: uint256
            amountBMin: uint256
            to_: address
            deadline: uint256
        Returns:
            (uint256, uint256)
        """
        ...

    def removeLiquidity(self, tokenA: Union[Account, Address], tokenB: Union[Account, Address], liquidity: uint256, amountAMin: uint256, amountBMin: uint256, to_: Union[Account, Address], deadline: uint256, *, from_: Optional[Union[Account, Address, str]] = None, to: Optional[Union[Account, Address, str]] = None, value: Union[int, str] = 0, gas_limit: Optional[Union[int, Literal["max"], Literal["auto"]]] = None, request_type: RequestType = 'tx', gas_price: Optional[Union[int, str]] = None, max_fee_per_gas: Optional[Union[int, str]] = None, max_priority_fee_per_gas: Optional[Union[int, str]] = None, access_list: Optional[Union[Dict[Union[Account, Address, str], List[int]], Literal["auto"]]] = None, type: Optional[int] = None, block: Optional[Union[int, Literal["latest"], Literal["pending"], Literal["earliest"], Literal["safe"], Literal["finalized"]]] = None, confirmations: Optional[int] = None) -> Union[Tuple[uint256, uint256], TransactionAbc[Tuple[uint256, uint256]], int, Tuple[Dict[Address, List[int]], int]]:
        """
        [Source code](file:///Users/dteiml/p/hacker-dom/woke-uniswap-v2/src/UniswapV2Router02.sol#104)

        Args:
            tokenA: address
            tokenB: address
            liquidity: uint256
            amountAMin: uint256
            amountBMin: uint256
            to_: address
            deadline: uint256
        Returns:
            (uint256, uint256)
        """
        return self._execute(self.chain, request_type, "baa2abde", [tokenA, tokenB, liquidity, amountAMin, amountBMin, to_, deadline], True if request_type == "tx" else False, Tuple[uint256, uint256], from_, to if to is not None else str(self.address), value, gas_limit, gas_price, max_fee_per_gas, max_priority_fee_per_gas, access_list, type, block, confirmations)

    @overload
    def removeLiquidityETH(self, token: Union[Account, Address], liquidity: uint256, amountTokenMin: uint256, amountETHMin: uint256, to_: Union[Account, Address], deadline: uint256, *, from_: Optional[Union[Account, Address, str]] = None, to: Optional[Union[Account, Address, str]] = None, value: Union[int, str] = 0, gas_limit: Optional[Union[int, Literal["max"], Literal["auto"]]] = None, request_type: Literal["call"], gas_price: Optional[Union[int, str]] = None, max_fee_per_gas: Optional[Union[int, str]] = None, max_priority_fee_per_gas: Optional[Union[int, str]] = None, access_list: Optional[Union[Dict[Union[Account, Address, str], List[int]], Literal["auto"]]] = None, type: Optional[int] = None, block: Optional[Union[int, Literal["latest"], Literal["pending"], Literal["earliest"], Literal["safe"], Literal["finalized"]]] = None, confirmations: Optional[int] = None) -> Tuple[uint256, uint256]:
        """
        [Source code](file:///Users/dteiml/p/hacker-dom/woke-uniswap-v2/src/UniswapV2Router02.sol#121)

        Args:
            token: address
            liquidity: uint256
            amountTokenMin: uint256
            amountETHMin: uint256
            to_: address
            deadline: uint256
        Returns:
            (uint256, uint256)
        """
        ...

    @overload
    def removeLiquidityETH(self, token: Union[Account, Address], liquidity: uint256, amountTokenMin: uint256, amountETHMin: uint256, to_: Union[Account, Address], deadline: uint256, *, from_: Optional[Union[Account, Address, str]] = None, to: Optional[Union[Account, Address, str]] = None, value: Union[int, str] = 0, gas_limit: Optional[Union[int, Literal["max"], Literal["auto"]]] = None, request_type: Literal["estimate"], gas_price: Optional[Union[int, str]] = None, max_fee_per_gas: Optional[Union[int, str]] = None, max_priority_fee_per_gas: Optional[Union[int, str]] = None, access_list: Optional[Union[Dict[Union[Account, Address, str], List[int]], Literal["auto"]]] = None, type: Optional[int] = None, block: Optional[Union[int, Literal["latest"], Literal["pending"], Literal["earliest"], Literal["safe"], Literal["finalized"]]] = None, confirmations: Optional[int] = None) -> int:
        """
        [Source code](file:///Users/dteiml/p/hacker-dom/woke-uniswap-v2/src/UniswapV2Router02.sol#121)

        Args:
            token: address
            liquidity: uint256
            amountTokenMin: uint256
            amountETHMin: uint256
            to_: address
            deadline: uint256
        Returns:
            (uint256, uint256)
        """
        ...

    @overload
    def removeLiquidityETH(self, token: Union[Account, Address], liquidity: uint256, amountTokenMin: uint256, amountETHMin: uint256, to_: Union[Account, Address], deadline: uint256, *, from_: Optional[Union[Account, Address, str]] = None, to: Optional[Union[Account, Address, str]] = None, value: Union[int, str] = 0, gas_limit: Optional[Union[int, Literal["max"], Literal["auto"]]] = None, request_type: Literal["access_list"], gas_price: Optional[Union[int, str]] = None, max_fee_per_gas: Optional[Union[int, str]] = None, max_priority_fee_per_gas: Optional[Union[int, str]] = None, access_list: Optional[Union[Dict[Union[Account, Address, str], List[int]], Literal["auto"]]] = None, type: Optional[int] = None, block: Optional[Union[int, Literal["latest"], Literal["pending"], Literal["earliest"], Literal["safe"], Literal["finalized"]]] = None, confirmations: Optional[int] = None) -> Tuple[Dict[Address, List[int]], int]:
        """
        [Source code](file:///Users/dteiml/p/hacker-dom/woke-uniswap-v2/src/UniswapV2Router02.sol#121)

        Args:
            token: address
            liquidity: uint256
            amountTokenMin: uint256
            amountETHMin: uint256
            to_: address
            deadline: uint256
        Returns:
            (uint256, uint256)
        """
        ...

    @overload
    def removeLiquidityETH(self, token: Union[Account, Address], liquidity: uint256, amountTokenMin: uint256, amountETHMin: uint256, to_: Union[Account, Address], deadline: uint256, *, from_: Optional[Union[Account, Address, str]] = None, to: Optional[Union[Account, Address, str]] = None, value: Union[int, str] = 0, gas_limit: Optional[Union[int, Literal["max"], Literal["auto"]]] = None, request_type: Literal["tx"] = "tx", gas_price: Optional[Union[int, str]] = None, max_fee_per_gas: Optional[Union[int, str]] = None, max_priority_fee_per_gas: Optional[Union[int, str]] = None, access_list: Optional[Union[Dict[Union[Account, Address, str], List[int]], Literal["auto"]]] = None, type: Optional[int] = None, block: Optional[Union[int, Literal["latest"], Literal["pending"], Literal["earliest"], Literal["safe"], Literal["finalized"]]] = None, confirmations: Optional[int] = None) -> TransactionAbc[Tuple[uint256, uint256]]:
        """
        [Source code](file:///Users/dteiml/p/hacker-dom/woke-uniswap-v2/src/UniswapV2Router02.sol#121)

        Args:
            token: address
            liquidity: uint256
            amountTokenMin: uint256
            amountETHMin: uint256
            to_: address
            deadline: uint256
        Returns:
            (uint256, uint256)
        """
        ...

    def removeLiquidityETH(self, token: Union[Account, Address], liquidity: uint256, amountTokenMin: uint256, amountETHMin: uint256, to_: Union[Account, Address], deadline: uint256, *, from_: Optional[Union[Account, Address, str]] = None, to: Optional[Union[Account, Address, str]] = None, value: Union[int, str] = 0, gas_limit: Optional[Union[int, Literal["max"], Literal["auto"]]] = None, request_type: RequestType = 'tx', gas_price: Optional[Union[int, str]] = None, max_fee_per_gas: Optional[Union[int, str]] = None, max_priority_fee_per_gas: Optional[Union[int, str]] = None, access_list: Optional[Union[Dict[Union[Account, Address, str], List[int]], Literal["auto"]]] = None, type: Optional[int] = None, block: Optional[Union[int, Literal["latest"], Literal["pending"], Literal["earliest"], Literal["safe"], Literal["finalized"]]] = None, confirmations: Optional[int] = None) -> Union[Tuple[uint256, uint256], TransactionAbc[Tuple[uint256, uint256]], int, Tuple[Dict[Address, List[int]], int]]:
        """
        [Source code](file:///Users/dteiml/p/hacker-dom/woke-uniswap-v2/src/UniswapV2Router02.sol#121)

        Args:
            token: address
            liquidity: uint256
            amountTokenMin: uint256
            amountETHMin: uint256
            to_: address
            deadline: uint256
        Returns:
            (uint256, uint256)
        """
        return self._execute(self.chain, request_type, "02751cec", [token, liquidity, amountTokenMin, amountETHMin, to_, deadline], True if request_type == "tx" else False, Tuple[uint256, uint256], from_, to if to is not None else str(self.address), value, gas_limit, gas_price, max_fee_per_gas, max_priority_fee_per_gas, access_list, type, block, confirmations)

    @overload
    def removeLiquidityWithPermit(self, tokenA: Union[Account, Address], tokenB: Union[Account, Address], liquidity: uint256, amountAMin: uint256, amountBMin: uint256, to_: Union[Account, Address], deadline: uint256, approveMax: bool, v: uint8, r: bytes32, s: bytes32, *, from_: Optional[Union[Account, Address, str]] = None, to: Optional[Union[Account, Address, str]] = None, value: Union[int, str] = 0, gas_limit: Optional[Union[int, Literal["max"], Literal["auto"]]] = None, request_type: Literal["call"], gas_price: Optional[Union[int, str]] = None, max_fee_per_gas: Optional[Union[int, str]] = None, max_priority_fee_per_gas: Optional[Union[int, str]] = None, access_list: Optional[Union[Dict[Union[Account, Address, str], List[int]], Literal["auto"]]] = None, type: Optional[int] = None, block: Optional[Union[int, Literal["latest"], Literal["pending"], Literal["earliest"], Literal["safe"], Literal["finalized"]]] = None, confirmations: Optional[int] = None) -> Tuple[uint256, uint256]:
        """
        [Source code](file:///Users/dteiml/p/hacker-dom/woke-uniswap-v2/src/UniswapV2Router02.sol#142)

        Args:
            tokenA: address
            tokenB: address
            liquidity: uint256
            amountAMin: uint256
            amountBMin: uint256
            to_: address
            deadline: uint256
            approveMax: bool
            v: uint8
            r: bytes32
            s: bytes32
        Returns:
            (uint256, uint256)
        """
        ...

    @overload
    def removeLiquidityWithPermit(self, tokenA: Union[Account, Address], tokenB: Union[Account, Address], liquidity: uint256, amountAMin: uint256, amountBMin: uint256, to_: Union[Account, Address], deadline: uint256, approveMax: bool, v: uint8, r: bytes32, s: bytes32, *, from_: Optional[Union[Account, Address, str]] = None, to: Optional[Union[Account, Address, str]] = None, value: Union[int, str] = 0, gas_limit: Optional[Union[int, Literal["max"], Literal["auto"]]] = None, request_type: Literal["estimate"], gas_price: Optional[Union[int, str]] = None, max_fee_per_gas: Optional[Union[int, str]] = None, max_priority_fee_per_gas: Optional[Union[int, str]] = None, access_list: Optional[Union[Dict[Union[Account, Address, str], List[int]], Literal["auto"]]] = None, type: Optional[int] = None, block: Optional[Union[int, Literal["latest"], Literal["pending"], Literal["earliest"], Literal["safe"], Literal["finalized"]]] = None, confirmations: Optional[int] = None) -> int:
        """
        [Source code](file:///Users/dteiml/p/hacker-dom/woke-uniswap-v2/src/UniswapV2Router02.sol#142)

        Args:
            tokenA: address
            tokenB: address
            liquidity: uint256
            amountAMin: uint256
            amountBMin: uint256
            to_: address
            deadline: uint256
            approveMax: bool
            v: uint8
            r: bytes32
            s: bytes32
        Returns:
            (uint256, uint256)
        """
        ...

    @overload
    def removeLiquidityWithPermit(self, tokenA: Union[Account, Address], tokenB: Union[Account, Address], liquidity: uint256, amountAMin: uint256, amountBMin: uint256, to_: Union[Account, Address], deadline: uint256, approveMax: bool, v: uint8, r: bytes32, s: bytes32, *, from_: Optional[Union[Account, Address, str]] = None, to: Optional[Union[Account, Address, str]] = None, value: Union[int, str] = 0, gas_limit: Optional[Union[int, Literal["max"], Literal["auto"]]] = None, request_type: Literal["access_list"], gas_price: Optional[Union[int, str]] = None, max_fee_per_gas: Optional[Union[int, str]] = None, max_priority_fee_per_gas: Optional[Union[int, str]] = None, access_list: Optional[Union[Dict[Union[Account, Address, str], List[int]], Literal["auto"]]] = None, type: Optional[int] = None, block: Optional[Union[int, Literal["latest"], Literal["pending"], Literal["earliest"], Literal["safe"], Literal["finalized"]]] = None, confirmations: Optional[int] = None) -> Tuple[Dict[Address, List[int]], int]:
        """
        [Source code](file:///Users/dteiml/p/hacker-dom/woke-uniswap-v2/src/UniswapV2Router02.sol#142)

        Args:
            tokenA: address
            tokenB: address
            liquidity: uint256
            amountAMin: uint256
            amountBMin: uint256
            to_: address
            deadline: uint256
            approveMax: bool
            v: uint8
            r: bytes32
            s: bytes32
        Returns:
            (uint256, uint256)
        """
        ...

    @overload
    def removeLiquidityWithPermit(self, tokenA: Union[Account, Address], tokenB: Union[Account, Address], liquidity: uint256, amountAMin: uint256, amountBMin: uint256, to_: Union[Account, Address], deadline: uint256, approveMax: bool, v: uint8, r: bytes32, s: bytes32, *, from_: Optional[Union[Account, Address, str]] = None, to: Optional[Union[Account, Address, str]] = None, value: Union[int, str] = 0, gas_limit: Optional[Union[int, Literal["max"], Literal["auto"]]] = None, request_type: Literal["tx"] = "tx", gas_price: Optional[Union[int, str]] = None, max_fee_per_gas: Optional[Union[int, str]] = None, max_priority_fee_per_gas: Optional[Union[int, str]] = None, access_list: Optional[Union[Dict[Union[Account, Address, str], List[int]], Literal["auto"]]] = None, type: Optional[int] = None, block: Optional[Union[int, Literal["latest"], Literal["pending"], Literal["earliest"], Literal["safe"], Literal["finalized"]]] = None, confirmations: Optional[int] = None) -> TransactionAbc[Tuple[uint256, uint256]]:
        """
        [Source code](file:///Users/dteiml/p/hacker-dom/woke-uniswap-v2/src/UniswapV2Router02.sol#142)

        Args:
            tokenA: address
            tokenB: address
            liquidity: uint256
            amountAMin: uint256
            amountBMin: uint256
            to_: address
            deadline: uint256
            approveMax: bool
            v: uint8
            r: bytes32
            s: bytes32
        Returns:
            (uint256, uint256)
        """
        ...

    def removeLiquidityWithPermit(self, tokenA: Union[Account, Address], tokenB: Union[Account, Address], liquidity: uint256, amountAMin: uint256, amountBMin: uint256, to_: Union[Account, Address], deadline: uint256, approveMax: bool, v: uint8, r: bytes32, s: bytes32, *, from_: Optional[Union[Account, Address, str]] = None, to: Optional[Union[Account, Address, str]] = None, value: Union[int, str] = 0, gas_limit: Optional[Union[int, Literal["max"], Literal["auto"]]] = None, request_type: RequestType = 'tx', gas_price: Optional[Union[int, str]] = None, max_fee_per_gas: Optional[Union[int, str]] = None, max_priority_fee_per_gas: Optional[Union[int, str]] = None, access_list: Optional[Union[Dict[Union[Account, Address, str], List[int]], Literal["auto"]]] = None, type: Optional[int] = None, block: Optional[Union[int, Literal["latest"], Literal["pending"], Literal["earliest"], Literal["safe"], Literal["finalized"]]] = None, confirmations: Optional[int] = None) -> Union[Tuple[uint256, uint256], TransactionAbc[Tuple[uint256, uint256]], int, Tuple[Dict[Address, List[int]], int]]:
        """
        [Source code](file:///Users/dteiml/p/hacker-dom/woke-uniswap-v2/src/UniswapV2Router02.sol#142)

        Args:
            tokenA: address
            tokenB: address
            liquidity: uint256
            amountAMin: uint256
            amountBMin: uint256
            to_: address
            deadline: uint256
            approveMax: bool
            v: uint8
            r: bytes32
            s: bytes32
        Returns:
            (uint256, uint256)
        """
        return self._execute(self.chain, request_type, "2195995c", [tokenA, tokenB, liquidity, amountAMin, amountBMin, to_, deadline, approveMax, v, r, s], True if request_type == "tx" else False, Tuple[uint256, uint256], from_, to if to is not None else str(self.address), value, gas_limit, gas_price, max_fee_per_gas, max_priority_fee_per_gas, access_list, type, block, confirmations)

    @overload
    def removeLiquidityETHWithPermit(self, token: Union[Account, Address], liquidity: uint256, amountTokenMin: uint256, amountETHMin: uint256, to_: Union[Account, Address], deadline: uint256, approveMax: bool, v: uint8, r: bytes32, s: bytes32, *, from_: Optional[Union[Account, Address, str]] = None, to: Optional[Union[Account, Address, str]] = None, value: Union[int, str] = 0, gas_limit: Optional[Union[int, Literal["max"], Literal["auto"]]] = None, request_type: Literal["call"], gas_price: Optional[Union[int, str]] = None, max_fee_per_gas: Optional[Union[int, str]] = None, max_priority_fee_per_gas: Optional[Union[int, str]] = None, access_list: Optional[Union[Dict[Union[Account, Address, str], List[int]], Literal["auto"]]] = None, type: Optional[int] = None, block: Optional[Union[int, Literal["latest"], Literal["pending"], Literal["earliest"], Literal["safe"], Literal["finalized"]]] = None, confirmations: Optional[int] = None) -> Tuple[uint256, uint256]:
        """
        [Source code](file:///Users/dteiml/p/hacker-dom/woke-uniswap-v2/src/UniswapV2Router02.sol#157)

        Args:
            token: address
            liquidity: uint256
            amountTokenMin: uint256
            amountETHMin: uint256
            to_: address
            deadline: uint256
            approveMax: bool
            v: uint8
            r: bytes32
            s: bytes32
        Returns:
            (uint256, uint256)
        """
        ...

    @overload
    def removeLiquidityETHWithPermit(self, token: Union[Account, Address], liquidity: uint256, amountTokenMin: uint256, amountETHMin: uint256, to_: Union[Account, Address], deadline: uint256, approveMax: bool, v: uint8, r: bytes32, s: bytes32, *, from_: Optional[Union[Account, Address, str]] = None, to: Optional[Union[Account, Address, str]] = None, value: Union[int, str] = 0, gas_limit: Optional[Union[int, Literal["max"], Literal["auto"]]] = None, request_type: Literal["estimate"], gas_price: Optional[Union[int, str]] = None, max_fee_per_gas: Optional[Union[int, str]] = None, max_priority_fee_per_gas: Optional[Union[int, str]] = None, access_list: Optional[Union[Dict[Union[Account, Address, str], List[int]], Literal["auto"]]] = None, type: Optional[int] = None, block: Optional[Union[int, Literal["latest"], Literal["pending"], Literal["earliest"], Literal["safe"], Literal["finalized"]]] = None, confirmations: Optional[int] = None) -> int:
        """
        [Source code](file:///Users/dteiml/p/hacker-dom/woke-uniswap-v2/src/UniswapV2Router02.sol#157)

        Args:
            token: address
            liquidity: uint256
            amountTokenMin: uint256
            amountETHMin: uint256
            to_: address
            deadline: uint256
            approveMax: bool
            v: uint8
            r: bytes32
            s: bytes32
        Returns:
            (uint256, uint256)
        """
        ...

    @overload
    def removeLiquidityETHWithPermit(self, token: Union[Account, Address], liquidity: uint256, amountTokenMin: uint256, amountETHMin: uint256, to_: Union[Account, Address], deadline: uint256, approveMax: bool, v: uint8, r: bytes32, s: bytes32, *, from_: Optional[Union[Account, Address, str]] = None, to: Optional[Union[Account, Address, str]] = None, value: Union[int, str] = 0, gas_limit: Optional[Union[int, Literal["max"], Literal["auto"]]] = None, request_type: Literal["access_list"], gas_price: Optional[Union[int, str]] = None, max_fee_per_gas: Optional[Union[int, str]] = None, max_priority_fee_per_gas: Optional[Union[int, str]] = None, access_list: Optional[Union[Dict[Union[Account, Address, str], List[int]], Literal["auto"]]] = None, type: Optional[int] = None, block: Optional[Union[int, Literal["latest"], Literal["pending"], Literal["earliest"], Literal["safe"], Literal["finalized"]]] = None, confirmations: Optional[int] = None) -> Tuple[Dict[Address, List[int]], int]:
        """
        [Source code](file:///Users/dteiml/p/hacker-dom/woke-uniswap-v2/src/UniswapV2Router02.sol#157)

        Args:
            token: address
            liquidity: uint256
            amountTokenMin: uint256
            amountETHMin: uint256
            to_: address
            deadline: uint256
            approveMax: bool
            v: uint8
            r: bytes32
            s: bytes32
        Returns:
            (uint256, uint256)
        """
        ...

    @overload
    def removeLiquidityETHWithPermit(self, token: Union[Account, Address], liquidity: uint256, amountTokenMin: uint256, amountETHMin: uint256, to_: Union[Account, Address], deadline: uint256, approveMax: bool, v: uint8, r: bytes32, s: bytes32, *, from_: Optional[Union[Account, Address, str]] = None, to: Optional[Union[Account, Address, str]] = None, value: Union[int, str] = 0, gas_limit: Optional[Union[int, Literal["max"], Literal["auto"]]] = None, request_type: Literal["tx"] = "tx", gas_price: Optional[Union[int, str]] = None, max_fee_per_gas: Optional[Union[int, str]] = None, max_priority_fee_per_gas: Optional[Union[int, str]] = None, access_list: Optional[Union[Dict[Union[Account, Address, str], List[int]], Literal["auto"]]] = None, type: Optional[int] = None, block: Optional[Union[int, Literal["latest"], Literal["pending"], Literal["earliest"], Literal["safe"], Literal["finalized"]]] = None, confirmations: Optional[int] = None) -> TransactionAbc[Tuple[uint256, uint256]]:
        """
        [Source code](file:///Users/dteiml/p/hacker-dom/woke-uniswap-v2/src/UniswapV2Router02.sol#157)

        Args:
            token: address
            liquidity: uint256
            amountTokenMin: uint256
            amountETHMin: uint256
            to_: address
            deadline: uint256
            approveMax: bool
            v: uint8
            r: bytes32
            s: bytes32
        Returns:
            (uint256, uint256)
        """
        ...

    def removeLiquidityETHWithPermit(self, token: Union[Account, Address], liquidity: uint256, amountTokenMin: uint256, amountETHMin: uint256, to_: Union[Account, Address], deadline: uint256, approveMax: bool, v: uint8, r: bytes32, s: bytes32, *, from_: Optional[Union[Account, Address, str]] = None, to: Optional[Union[Account, Address, str]] = None, value: Union[int, str] = 0, gas_limit: Optional[Union[int, Literal["max"], Literal["auto"]]] = None, request_type: RequestType = 'tx', gas_price: Optional[Union[int, str]] = None, max_fee_per_gas: Optional[Union[int, str]] = None, max_priority_fee_per_gas: Optional[Union[int, str]] = None, access_list: Optional[Union[Dict[Union[Account, Address, str], List[int]], Literal["auto"]]] = None, type: Optional[int] = None, block: Optional[Union[int, Literal["latest"], Literal["pending"], Literal["earliest"], Literal["safe"], Literal["finalized"]]] = None, confirmations: Optional[int] = None) -> Union[Tuple[uint256, uint256], TransactionAbc[Tuple[uint256, uint256]], int, Tuple[Dict[Address, List[int]], int]]:
        """
        [Source code](file:///Users/dteiml/p/hacker-dom/woke-uniswap-v2/src/UniswapV2Router02.sol#157)

        Args:
            token: address
            liquidity: uint256
            amountTokenMin: uint256
            amountETHMin: uint256
            to_: address
            deadline: uint256
            approveMax: bool
            v: uint8
            r: bytes32
            s: bytes32
        Returns:
            (uint256, uint256)
        """
        return self._execute(self.chain, request_type, "ded9382a", [token, liquidity, amountTokenMin, amountETHMin, to_, deadline, approveMax, v, r, s], True if request_type == "tx" else False, Tuple[uint256, uint256], from_, to if to is not None else str(self.address), value, gas_limit, gas_price, max_fee_per_gas, max_priority_fee_per_gas, access_list, type, block, confirmations)

    @overload
    def removeLiquidityETHSupportingFeeOnTransferTokens(self, token: Union[Account, Address], liquidity: uint256, amountTokenMin: uint256, amountETHMin: uint256, to_: Union[Account, Address], deadline: uint256, *, from_: Optional[Union[Account, Address, str]] = None, to: Optional[Union[Account, Address, str]] = None, value: Union[int, str] = 0, gas_limit: Optional[Union[int, Literal["max"], Literal["auto"]]] = None, request_type: Literal["call"], gas_price: Optional[Union[int, str]] = None, max_fee_per_gas: Optional[Union[int, str]] = None, max_priority_fee_per_gas: Optional[Union[int, str]] = None, access_list: Optional[Union[Dict[Union[Account, Address, str], List[int]], Literal["auto"]]] = None, type: Optional[int] = None, block: Optional[Union[int, Literal["latest"], Literal["pending"], Literal["earliest"], Literal["safe"], Literal["finalized"]]] = None, confirmations: Optional[int] = None) -> uint256:
        """
        [Source code](file:///Users/dteiml/p/hacker-dom/woke-uniswap-v2/src/UniswapV2Router02.sol#173)

        Args:
            token: address
            liquidity: uint256
            amountTokenMin: uint256
            amountETHMin: uint256
            to_: address
            deadline: uint256
        Returns:
            uint256
        """
        ...

    @overload
    def removeLiquidityETHSupportingFeeOnTransferTokens(self, token: Union[Account, Address], liquidity: uint256, amountTokenMin: uint256, amountETHMin: uint256, to_: Union[Account, Address], deadline: uint256, *, from_: Optional[Union[Account, Address, str]] = None, to: Optional[Union[Account, Address, str]] = None, value: Union[int, str] = 0, gas_limit: Optional[Union[int, Literal["max"], Literal["auto"]]] = None, request_type: Literal["estimate"], gas_price: Optional[Union[int, str]] = None, max_fee_per_gas: Optional[Union[int, str]] = None, max_priority_fee_per_gas: Optional[Union[int, str]] = None, access_list: Optional[Union[Dict[Union[Account, Address, str], List[int]], Literal["auto"]]] = None, type: Optional[int] = None, block: Optional[Union[int, Literal["latest"], Literal["pending"], Literal["earliest"], Literal["safe"], Literal["finalized"]]] = None, confirmations: Optional[int] = None) -> int:
        """
        [Source code](file:///Users/dteiml/p/hacker-dom/woke-uniswap-v2/src/UniswapV2Router02.sol#173)

        Args:
            token: address
            liquidity: uint256
            amountTokenMin: uint256
            amountETHMin: uint256
            to_: address
            deadline: uint256
        Returns:
            uint256
        """
        ...

    @overload
    def removeLiquidityETHSupportingFeeOnTransferTokens(self, token: Union[Account, Address], liquidity: uint256, amountTokenMin: uint256, amountETHMin: uint256, to_: Union[Account, Address], deadline: uint256, *, from_: Optional[Union[Account, Address, str]] = None, to: Optional[Union[Account, Address, str]] = None, value: Union[int, str] = 0, gas_limit: Optional[Union[int, Literal["max"], Literal["auto"]]] = None, request_type: Literal["access_list"], gas_price: Optional[Union[int, str]] = None, max_fee_per_gas: Optional[Union[int, str]] = None, max_priority_fee_per_gas: Optional[Union[int, str]] = None, access_list: Optional[Union[Dict[Union[Account, Address, str], List[int]], Literal["auto"]]] = None, type: Optional[int] = None, block: Optional[Union[int, Literal["latest"], Literal["pending"], Literal["earliest"], Literal["safe"], Literal["finalized"]]] = None, confirmations: Optional[int] = None) -> Tuple[Dict[Address, List[int]], int]:
        """
        [Source code](file:///Users/dteiml/p/hacker-dom/woke-uniswap-v2/src/UniswapV2Router02.sol#173)

        Args:
            token: address
            liquidity: uint256
            amountTokenMin: uint256
            amountETHMin: uint256
            to_: address
            deadline: uint256
        Returns:
            uint256
        """
        ...

    @overload
    def removeLiquidityETHSupportingFeeOnTransferTokens(self, token: Union[Account, Address], liquidity: uint256, amountTokenMin: uint256, amountETHMin: uint256, to_: Union[Account, Address], deadline: uint256, *, from_: Optional[Union[Account, Address, str]] = None, to: Optional[Union[Account, Address, str]] = None, value: Union[int, str] = 0, gas_limit: Optional[Union[int, Literal["max"], Literal["auto"]]] = None, request_type: Literal["tx"] = "tx", gas_price: Optional[Union[int, str]] = None, max_fee_per_gas: Optional[Union[int, str]] = None, max_priority_fee_per_gas: Optional[Union[int, str]] = None, access_list: Optional[Union[Dict[Union[Account, Address, str], List[int]], Literal["auto"]]] = None, type: Optional[int] = None, block: Optional[Union[int, Literal["latest"], Literal["pending"], Literal["earliest"], Literal["safe"], Literal["finalized"]]] = None, confirmations: Optional[int] = None) -> TransactionAbc[uint256]:
        """
        [Source code](file:///Users/dteiml/p/hacker-dom/woke-uniswap-v2/src/UniswapV2Router02.sol#173)

        Args:
            token: address
            liquidity: uint256
            amountTokenMin: uint256
            amountETHMin: uint256
            to_: address
            deadline: uint256
        Returns:
            uint256
        """
        ...

    def removeLiquidityETHSupportingFeeOnTransferTokens(self, token: Union[Account, Address], liquidity: uint256, amountTokenMin: uint256, amountETHMin: uint256, to_: Union[Account, Address], deadline: uint256, *, from_: Optional[Union[Account, Address, str]] = None, to: Optional[Union[Account, Address, str]] = None, value: Union[int, str] = 0, gas_limit: Optional[Union[int, Literal["max"], Literal["auto"]]] = None, request_type: RequestType = 'tx', gas_price: Optional[Union[int, str]] = None, max_fee_per_gas: Optional[Union[int, str]] = None, max_priority_fee_per_gas: Optional[Union[int, str]] = None, access_list: Optional[Union[Dict[Union[Account, Address, str], List[int]], Literal["auto"]]] = None, type: Optional[int] = None, block: Optional[Union[int, Literal["latest"], Literal["pending"], Literal["earliest"], Literal["safe"], Literal["finalized"]]] = None, confirmations: Optional[int] = None) -> Union[uint256, TransactionAbc[uint256], int, Tuple[Dict[Address, List[int]], int]]:
        """
        [Source code](file:///Users/dteiml/p/hacker-dom/woke-uniswap-v2/src/UniswapV2Router02.sol#173)

        Args:
            token: address
            liquidity: uint256
            amountTokenMin: uint256
            amountETHMin: uint256
            to_: address
            deadline: uint256
        Returns:
            uint256
        """
        return self._execute(self.chain, request_type, "af2979eb", [token, liquidity, amountTokenMin, amountETHMin, to_, deadline], True if request_type == "tx" else False, uint256, from_, to if to is not None else str(self.address), value, gas_limit, gas_price, max_fee_per_gas, max_priority_fee_per_gas, access_list, type, block, confirmations)

    @overload
    def removeLiquidityETHWithPermitSupportingFeeOnTransferTokens(self, token: Union[Account, Address], liquidity: uint256, amountTokenMin: uint256, amountETHMin: uint256, to_: Union[Account, Address], deadline: uint256, approveMax: bool, v: uint8, r: bytes32, s: bytes32, *, from_: Optional[Union[Account, Address, str]] = None, to: Optional[Union[Account, Address, str]] = None, value: Union[int, str] = 0, gas_limit: Optional[Union[int, Literal["max"], Literal["auto"]]] = None, request_type: Literal["call"], gas_price: Optional[Union[int, str]] = None, max_fee_per_gas: Optional[Union[int, str]] = None, max_priority_fee_per_gas: Optional[Union[int, str]] = None, access_list: Optional[Union[Dict[Union[Account, Address, str], List[int]], Literal["auto"]]] = None, type: Optional[int] = None, block: Optional[Union[int, Literal["latest"], Literal["pending"], Literal["earliest"], Literal["safe"], Literal["finalized"]]] = None, confirmations: Optional[int] = None) -> uint256:
        """
        [Source code](file:///Users/dteiml/p/hacker-dom/woke-uniswap-v2/src/UniswapV2Router02.sol#194)

        Args:
            token: address
            liquidity: uint256
            amountTokenMin: uint256
            amountETHMin: uint256
            to_: address
            deadline: uint256
            approveMax: bool
            v: uint8
            r: bytes32
            s: bytes32
        Returns:
            uint256
        """
        ...

    @overload
    def removeLiquidityETHWithPermitSupportingFeeOnTransferTokens(self, token: Union[Account, Address], liquidity: uint256, amountTokenMin: uint256, amountETHMin: uint256, to_: Union[Account, Address], deadline: uint256, approveMax: bool, v: uint8, r: bytes32, s: bytes32, *, from_: Optional[Union[Account, Address, str]] = None, to: Optional[Union[Account, Address, str]] = None, value: Union[int, str] = 0, gas_limit: Optional[Union[int, Literal["max"], Literal["auto"]]] = None, request_type: Literal["estimate"], gas_price: Optional[Union[int, str]] = None, max_fee_per_gas: Optional[Union[int, str]] = None, max_priority_fee_per_gas: Optional[Union[int, str]] = None, access_list: Optional[Union[Dict[Union[Account, Address, str], List[int]], Literal["auto"]]] = None, type: Optional[int] = None, block: Optional[Union[int, Literal["latest"], Literal["pending"], Literal["earliest"], Literal["safe"], Literal["finalized"]]] = None, confirmations: Optional[int] = None) -> int:
        """
        [Source code](file:///Users/dteiml/p/hacker-dom/woke-uniswap-v2/src/UniswapV2Router02.sol#194)

        Args:
            token: address
            liquidity: uint256
            amountTokenMin: uint256
            amountETHMin: uint256
            to_: address
            deadline: uint256
            approveMax: bool
            v: uint8
            r: bytes32
            s: bytes32
        Returns:
            uint256
        """
        ...

    @overload
    def removeLiquidityETHWithPermitSupportingFeeOnTransferTokens(self, token: Union[Account, Address], liquidity: uint256, amountTokenMin: uint256, amountETHMin: uint256, to_: Union[Account, Address], deadline: uint256, approveMax: bool, v: uint8, r: bytes32, s: bytes32, *, from_: Optional[Union[Account, Address, str]] = None, to: Optional[Union[Account, Address, str]] = None, value: Union[int, str] = 0, gas_limit: Optional[Union[int, Literal["max"], Literal["auto"]]] = None, request_type: Literal["access_list"], gas_price: Optional[Union[int, str]] = None, max_fee_per_gas: Optional[Union[int, str]] = None, max_priority_fee_per_gas: Optional[Union[int, str]] = None, access_list: Optional[Union[Dict[Union[Account, Address, str], List[int]], Literal["auto"]]] = None, type: Optional[int] = None, block: Optional[Union[int, Literal["latest"], Literal["pending"], Literal["earliest"], Literal["safe"], Literal["finalized"]]] = None, confirmations: Optional[int] = None) -> Tuple[Dict[Address, List[int]], int]:
        """
        [Source code](file:///Users/dteiml/p/hacker-dom/woke-uniswap-v2/src/UniswapV2Router02.sol#194)

        Args:
            token: address
            liquidity: uint256
            amountTokenMin: uint256
            amountETHMin: uint256
            to_: address
            deadline: uint256
            approveMax: bool
            v: uint8
            r: bytes32
            s: bytes32
        Returns:
            uint256
        """
        ...

    @overload
    def removeLiquidityETHWithPermitSupportingFeeOnTransferTokens(self, token: Union[Account, Address], liquidity: uint256, amountTokenMin: uint256, amountETHMin: uint256, to_: Union[Account, Address], deadline: uint256, approveMax: bool, v: uint8, r: bytes32, s: bytes32, *, from_: Optional[Union[Account, Address, str]] = None, to: Optional[Union[Account, Address, str]] = None, value: Union[int, str] = 0, gas_limit: Optional[Union[int, Literal["max"], Literal["auto"]]] = None, request_type: Literal["tx"] = "tx", gas_price: Optional[Union[int, str]] = None, max_fee_per_gas: Optional[Union[int, str]] = None, max_priority_fee_per_gas: Optional[Union[int, str]] = None, access_list: Optional[Union[Dict[Union[Account, Address, str], List[int]], Literal["auto"]]] = None, type: Optional[int] = None, block: Optional[Union[int, Literal["latest"], Literal["pending"], Literal["earliest"], Literal["safe"], Literal["finalized"]]] = None, confirmations: Optional[int] = None) -> TransactionAbc[uint256]:
        """
        [Source code](file:///Users/dteiml/p/hacker-dom/woke-uniswap-v2/src/UniswapV2Router02.sol#194)

        Args:
            token: address
            liquidity: uint256
            amountTokenMin: uint256
            amountETHMin: uint256
            to_: address
            deadline: uint256
            approveMax: bool
            v: uint8
            r: bytes32
            s: bytes32
        Returns:
            uint256
        """
        ...

    def removeLiquidityETHWithPermitSupportingFeeOnTransferTokens(self, token: Union[Account, Address], liquidity: uint256, amountTokenMin: uint256, amountETHMin: uint256, to_: Union[Account, Address], deadline: uint256, approveMax: bool, v: uint8, r: bytes32, s: bytes32, *, from_: Optional[Union[Account, Address, str]] = None, to: Optional[Union[Account, Address, str]] = None, value: Union[int, str] = 0, gas_limit: Optional[Union[int, Literal["max"], Literal["auto"]]] = None, request_type: RequestType = 'tx', gas_price: Optional[Union[int, str]] = None, max_fee_per_gas: Optional[Union[int, str]] = None, max_priority_fee_per_gas: Optional[Union[int, str]] = None, access_list: Optional[Union[Dict[Union[Account, Address, str], List[int]], Literal["auto"]]] = None, type: Optional[int] = None, block: Optional[Union[int, Literal["latest"], Literal["pending"], Literal["earliest"], Literal["safe"], Literal["finalized"]]] = None, confirmations: Optional[int] = None) -> Union[uint256, TransactionAbc[uint256], int, Tuple[Dict[Address, List[int]], int]]:
        """
        [Source code](file:///Users/dteiml/p/hacker-dom/woke-uniswap-v2/src/UniswapV2Router02.sol#194)

        Args:
            token: address
            liquidity: uint256
            amountTokenMin: uint256
            amountETHMin: uint256
            to_: address
            deadline: uint256
            approveMax: bool
            v: uint8
            r: bytes32
            s: bytes32
        Returns:
            uint256
        """
        return self._execute(self.chain, request_type, "5b0d5984", [token, liquidity, amountTokenMin, amountETHMin, to_, deadline, approveMax, v, r, s], True if request_type == "tx" else False, uint256, from_, to if to is not None else str(self.address), value, gas_limit, gas_price, max_fee_per_gas, max_priority_fee_per_gas, access_list, type, block, confirmations)

    @overload
    def swapExactTokensForTokens(self, amountIn: uint256, amountOutMin: uint256, path: List[Union[Account, Address]], to_: Union[Account, Address], deadline: uint256, *, from_: Optional[Union[Account, Address, str]] = None, to: Optional[Union[Account, Address, str]] = None, value: Union[int, str] = 0, gas_limit: Optional[Union[int, Literal["max"], Literal["auto"]]] = None, request_type: Literal["call"], gas_price: Optional[Union[int, str]] = None, max_fee_per_gas: Optional[Union[int, str]] = None, max_priority_fee_per_gas: Optional[Union[int, str]] = None, access_list: Optional[Union[Dict[Union[Account, Address, str], List[int]], Literal["auto"]]] = None, type: Optional[int] = None, block: Optional[Union[int, Literal["latest"], Literal["pending"], Literal["earliest"], Literal["safe"], Literal["finalized"]]] = None, confirmations: Optional[int] = None) -> List[uint256]:
        """
        [Source code](file:///Users/dteiml/p/hacker-dom/woke-uniswap-v2/src/UniswapV2Router02.sol#225)

        Args:
            amountIn: uint256
            amountOutMin: uint256
            path: address[]
            to_: address
            deadline: uint256
        Returns:
            uint256[]
        """
        ...

    @overload
    def swapExactTokensForTokens(self, amountIn: uint256, amountOutMin: uint256, path: List[Union[Account, Address]], to_: Union[Account, Address], deadline: uint256, *, from_: Optional[Union[Account, Address, str]] = None, to: Optional[Union[Account, Address, str]] = None, value: Union[int, str] = 0, gas_limit: Optional[Union[int, Literal["max"], Literal["auto"]]] = None, request_type: Literal["estimate"], gas_price: Optional[Union[int, str]] = None, max_fee_per_gas: Optional[Union[int, str]] = None, max_priority_fee_per_gas: Optional[Union[int, str]] = None, access_list: Optional[Union[Dict[Union[Account, Address, str], List[int]], Literal["auto"]]] = None, type: Optional[int] = None, block: Optional[Union[int, Literal["latest"], Literal["pending"], Literal["earliest"], Literal["safe"], Literal["finalized"]]] = None, confirmations: Optional[int] = None) -> int:
        """
        [Source code](file:///Users/dteiml/p/hacker-dom/woke-uniswap-v2/src/UniswapV2Router02.sol#225)

        Args:
            amountIn: uint256
            amountOutMin: uint256
            path: address[]
            to_: address
            deadline: uint256
        Returns:
            uint256[]
        """
        ...

    @overload
    def swapExactTokensForTokens(self, amountIn: uint256, amountOutMin: uint256, path: List[Union[Account, Address]], to_: Union[Account, Address], deadline: uint256, *, from_: Optional[Union[Account, Address, str]] = None, to: Optional[Union[Account, Address, str]] = None, value: Union[int, str] = 0, gas_limit: Optional[Union[int, Literal["max"], Literal["auto"]]] = None, request_type: Literal["access_list"], gas_price: Optional[Union[int, str]] = None, max_fee_per_gas: Optional[Union[int, str]] = None, max_priority_fee_per_gas: Optional[Union[int, str]] = None, access_list: Optional[Union[Dict[Union[Account, Address, str], List[int]], Literal["auto"]]] = None, type: Optional[int] = None, block: Optional[Union[int, Literal["latest"], Literal["pending"], Literal["earliest"], Literal["safe"], Literal["finalized"]]] = None, confirmations: Optional[int] = None) -> Tuple[Dict[Address, List[int]], int]:
        """
        [Source code](file:///Users/dteiml/p/hacker-dom/woke-uniswap-v2/src/UniswapV2Router02.sol#225)

        Args:
            amountIn: uint256
            amountOutMin: uint256
            path: address[]
            to_: address
            deadline: uint256
        Returns:
            uint256[]
        """
        ...

    @overload
    def swapExactTokensForTokens(self, amountIn: uint256, amountOutMin: uint256, path: List[Union[Account, Address]], to_: Union[Account, Address], deadline: uint256, *, from_: Optional[Union[Account, Address, str]] = None, to: Optional[Union[Account, Address, str]] = None, value: Union[int, str] = 0, gas_limit: Optional[Union[int, Literal["max"], Literal["auto"]]] = None, request_type: Literal["tx"] = "tx", gas_price: Optional[Union[int, str]] = None, max_fee_per_gas: Optional[Union[int, str]] = None, max_priority_fee_per_gas: Optional[Union[int, str]] = None, access_list: Optional[Union[Dict[Union[Account, Address, str], List[int]], Literal["auto"]]] = None, type: Optional[int] = None, block: Optional[Union[int, Literal["latest"], Literal["pending"], Literal["earliest"], Literal["safe"], Literal["finalized"]]] = None, confirmations: Optional[int] = None) -> TransactionAbc[List[uint256]]:
        """
        [Source code](file:///Users/dteiml/p/hacker-dom/woke-uniswap-v2/src/UniswapV2Router02.sol#225)

        Args:
            amountIn: uint256
            amountOutMin: uint256
            path: address[]
            to_: address
            deadline: uint256
        Returns:
            uint256[]
        """
        ...

    def swapExactTokensForTokens(self, amountIn: uint256, amountOutMin: uint256, path: List[Union[Account, Address]], to_: Union[Account, Address], deadline: uint256, *, from_: Optional[Union[Account, Address, str]] = None, to: Optional[Union[Account, Address, str]] = None, value: Union[int, str] = 0, gas_limit: Optional[Union[int, Literal["max"], Literal["auto"]]] = None, request_type: RequestType = 'tx', gas_price: Optional[Union[int, str]] = None, max_fee_per_gas: Optional[Union[int, str]] = None, max_priority_fee_per_gas: Optional[Union[int, str]] = None, access_list: Optional[Union[Dict[Union[Account, Address, str], List[int]], Literal["auto"]]] = None, type: Optional[int] = None, block: Optional[Union[int, Literal["latest"], Literal["pending"], Literal["earliest"], Literal["safe"], Literal["finalized"]]] = None, confirmations: Optional[int] = None) -> Union[List[uint256], TransactionAbc[List[uint256]], int, Tuple[Dict[Address, List[int]], int]]:
        """
        [Source code](file:///Users/dteiml/p/hacker-dom/woke-uniswap-v2/src/UniswapV2Router02.sol#225)

        Args:
            amountIn: uint256
            amountOutMin: uint256
            path: address[]
            to_: address
            deadline: uint256
        Returns:
            uint256[]
        """
        return self._execute(self.chain, request_type, "38ed1739", [amountIn, amountOutMin, path, to_, deadline], True if request_type == "tx" else False, List[uint256], from_, to if to is not None else str(self.address), value, gas_limit, gas_price, max_fee_per_gas, max_priority_fee_per_gas, access_list, type, block, confirmations)

    @overload
    def swapTokensForExactTokens(self, amountOut: uint256, amountInMax: uint256, path: List[Union[Account, Address]], to_: Union[Account, Address], deadline: uint256, *, from_: Optional[Union[Account, Address, str]] = None, to: Optional[Union[Account, Address, str]] = None, value: Union[int, str] = 0, gas_limit: Optional[Union[int, Literal["max"], Literal["auto"]]] = None, request_type: Literal["call"], gas_price: Optional[Union[int, str]] = None, max_fee_per_gas: Optional[Union[int, str]] = None, max_priority_fee_per_gas: Optional[Union[int, str]] = None, access_list: Optional[Union[Dict[Union[Account, Address, str], List[int]], Literal["auto"]]] = None, type: Optional[int] = None, block: Optional[Union[int, Literal["latest"], Literal["pending"], Literal["earliest"], Literal["safe"], Literal["finalized"]]] = None, confirmations: Optional[int] = None) -> List[uint256]:
        """
        [Source code](file:///Users/dteiml/p/hacker-dom/woke-uniswap-v2/src/UniswapV2Router02.sol#241)

        Args:
            amountOut: uint256
            amountInMax: uint256
            path: address[]
            to_: address
            deadline: uint256
        Returns:
            uint256[]
        """
        ...

    @overload
    def swapTokensForExactTokens(self, amountOut: uint256, amountInMax: uint256, path: List[Union[Account, Address]], to_: Union[Account, Address], deadline: uint256, *, from_: Optional[Union[Account, Address, str]] = None, to: Optional[Union[Account, Address, str]] = None, value: Union[int, str] = 0, gas_limit: Optional[Union[int, Literal["max"], Literal["auto"]]] = None, request_type: Literal["estimate"], gas_price: Optional[Union[int, str]] = None, max_fee_per_gas: Optional[Union[int, str]] = None, max_priority_fee_per_gas: Optional[Union[int, str]] = None, access_list: Optional[Union[Dict[Union[Account, Address, str], List[int]], Literal["auto"]]] = None, type: Optional[int] = None, block: Optional[Union[int, Literal["latest"], Literal["pending"], Literal["earliest"], Literal["safe"], Literal["finalized"]]] = None, confirmations: Optional[int] = None) -> int:
        """
        [Source code](file:///Users/dteiml/p/hacker-dom/woke-uniswap-v2/src/UniswapV2Router02.sol#241)

        Args:
            amountOut: uint256
            amountInMax: uint256
            path: address[]
            to_: address
            deadline: uint256
        Returns:
            uint256[]
        """
        ...

    @overload
    def swapTokensForExactTokens(self, amountOut: uint256, amountInMax: uint256, path: List[Union[Account, Address]], to_: Union[Account, Address], deadline: uint256, *, from_: Optional[Union[Account, Address, str]] = None, to: Optional[Union[Account, Address, str]] = None, value: Union[int, str] = 0, gas_limit: Optional[Union[int, Literal["max"], Literal["auto"]]] = None, request_type: Literal["access_list"], gas_price: Optional[Union[int, str]] = None, max_fee_per_gas: Optional[Union[int, str]] = None, max_priority_fee_per_gas: Optional[Union[int, str]] = None, access_list: Optional[Union[Dict[Union[Account, Address, str], List[int]], Literal["auto"]]] = None, type: Optional[int] = None, block: Optional[Union[int, Literal["latest"], Literal["pending"], Literal["earliest"], Literal["safe"], Literal["finalized"]]] = None, confirmations: Optional[int] = None) -> Tuple[Dict[Address, List[int]], int]:
        """
        [Source code](file:///Users/dteiml/p/hacker-dom/woke-uniswap-v2/src/UniswapV2Router02.sol#241)

        Args:
            amountOut: uint256
            amountInMax: uint256
            path: address[]
            to_: address
            deadline: uint256
        Returns:
            uint256[]
        """
        ...

    @overload
    def swapTokensForExactTokens(self, amountOut: uint256, amountInMax: uint256, path: List[Union[Account, Address]], to_: Union[Account, Address], deadline: uint256, *, from_: Optional[Union[Account, Address, str]] = None, to: Optional[Union[Account, Address, str]] = None, value: Union[int, str] = 0, gas_limit: Optional[Union[int, Literal["max"], Literal["auto"]]] = None, request_type: Literal["tx"] = "tx", gas_price: Optional[Union[int, str]] = None, max_fee_per_gas: Optional[Union[int, str]] = None, max_priority_fee_per_gas: Optional[Union[int, str]] = None, access_list: Optional[Union[Dict[Union[Account, Address, str], List[int]], Literal["auto"]]] = None, type: Optional[int] = None, block: Optional[Union[int, Literal["latest"], Literal["pending"], Literal["earliest"], Literal["safe"], Literal["finalized"]]] = None, confirmations: Optional[int] = None) -> TransactionAbc[List[uint256]]:
        """
        [Source code](file:///Users/dteiml/p/hacker-dom/woke-uniswap-v2/src/UniswapV2Router02.sol#241)

        Args:
            amountOut: uint256
            amountInMax: uint256
            path: address[]
            to_: address
            deadline: uint256
        Returns:
            uint256[]
        """
        ...

    def swapTokensForExactTokens(self, amountOut: uint256, amountInMax: uint256, path: List[Union[Account, Address]], to_: Union[Account, Address], deadline: uint256, *, from_: Optional[Union[Account, Address, str]] = None, to: Optional[Union[Account, Address, str]] = None, value: Union[int, str] = 0, gas_limit: Optional[Union[int, Literal["max"], Literal["auto"]]] = None, request_type: RequestType = 'tx', gas_price: Optional[Union[int, str]] = None, max_fee_per_gas: Optional[Union[int, str]] = None, max_priority_fee_per_gas: Optional[Union[int, str]] = None, access_list: Optional[Union[Dict[Union[Account, Address, str], List[int]], Literal["auto"]]] = None, type: Optional[int] = None, block: Optional[Union[int, Literal["latest"], Literal["pending"], Literal["earliest"], Literal["safe"], Literal["finalized"]]] = None, confirmations: Optional[int] = None) -> Union[List[uint256], TransactionAbc[List[uint256]], int, Tuple[Dict[Address, List[int]], int]]:
        """
        [Source code](file:///Users/dteiml/p/hacker-dom/woke-uniswap-v2/src/UniswapV2Router02.sol#241)

        Args:
            amountOut: uint256
            amountInMax: uint256
            path: address[]
            to_: address
            deadline: uint256
        Returns:
            uint256[]
        """
        return self._execute(self.chain, request_type, "8803dbee", [amountOut, amountInMax, path, to_, deadline], True if request_type == "tx" else False, List[uint256], from_, to if to is not None else str(self.address), value, gas_limit, gas_price, max_fee_per_gas, max_priority_fee_per_gas, access_list, type, block, confirmations)

    @overload
    def swapExactETHForTokens(self, amountOutMin: uint256, path: List[Union[Account, Address]], to_: Union[Account, Address], deadline: uint256, *, from_: Optional[Union[Account, Address, str]] = None, to: Optional[Union[Account, Address, str]] = None, value: Union[int, str] = 0, gas_limit: Optional[Union[int, Literal["max"], Literal["auto"]]] = None, request_type: Literal["call"], gas_price: Optional[Union[int, str]] = None, max_fee_per_gas: Optional[Union[int, str]] = None, max_priority_fee_per_gas: Optional[Union[int, str]] = None, access_list: Optional[Union[Dict[Union[Account, Address, str], List[int]], Literal["auto"]]] = None, type: Optional[int] = None, block: Optional[Union[int, Literal["latest"], Literal["pending"], Literal["earliest"], Literal["safe"], Literal["finalized"]]] = None, confirmations: Optional[int] = None) -> List[uint256]:
        """
        [Source code](file:///Users/dteiml/p/hacker-dom/woke-uniswap-v2/src/UniswapV2Router02.sol#255)

        Args:
            amountOutMin: uint256
            path: address[]
            to_: address
            deadline: uint256
        Returns:
            uint256[]
        """
        ...

    @overload
    def swapExactETHForTokens(self, amountOutMin: uint256, path: List[Union[Account, Address]], to_: Union[Account, Address], deadline: uint256, *, from_: Optional[Union[Account, Address, str]] = None, to: Optional[Union[Account, Address, str]] = None, value: Union[int, str] = 0, gas_limit: Optional[Union[int, Literal["max"], Literal["auto"]]] = None, request_type: Literal["estimate"], gas_price: Optional[Union[int, str]] = None, max_fee_per_gas: Optional[Union[int, str]] = None, max_priority_fee_per_gas: Optional[Union[int, str]] = None, access_list: Optional[Union[Dict[Union[Account, Address, str], List[int]], Literal["auto"]]] = None, type: Optional[int] = None, block: Optional[Union[int, Literal["latest"], Literal["pending"], Literal["earliest"], Literal["safe"], Literal["finalized"]]] = None, confirmations: Optional[int] = None) -> int:
        """
        [Source code](file:///Users/dteiml/p/hacker-dom/woke-uniswap-v2/src/UniswapV2Router02.sol#255)

        Args:
            amountOutMin: uint256
            path: address[]
            to_: address
            deadline: uint256
        Returns:
            uint256[]
        """
        ...

    @overload
    def swapExactETHForTokens(self, amountOutMin: uint256, path: List[Union[Account, Address]], to_: Union[Account, Address], deadline: uint256, *, from_: Optional[Union[Account, Address, str]] = None, to: Optional[Union[Account, Address, str]] = None, value: Union[int, str] = 0, gas_limit: Optional[Union[int, Literal["max"], Literal["auto"]]] = None, request_type: Literal["access_list"], gas_price: Optional[Union[int, str]] = None, max_fee_per_gas: Optional[Union[int, str]] = None, max_priority_fee_per_gas: Optional[Union[int, str]] = None, access_list: Optional[Union[Dict[Union[Account, Address, str], List[int]], Literal["auto"]]] = None, type: Optional[int] = None, block: Optional[Union[int, Literal["latest"], Literal["pending"], Literal["earliest"], Literal["safe"], Literal["finalized"]]] = None, confirmations: Optional[int] = None) -> Tuple[Dict[Address, List[int]], int]:
        """
        [Source code](file:///Users/dteiml/p/hacker-dom/woke-uniswap-v2/src/UniswapV2Router02.sol#255)

        Args:
            amountOutMin: uint256
            path: address[]
            to_: address
            deadline: uint256
        Returns:
            uint256[]
        """
        ...

    @overload
    def swapExactETHForTokens(self, amountOutMin: uint256, path: List[Union[Account, Address]], to_: Union[Account, Address], deadline: uint256, *, from_: Optional[Union[Account, Address, str]] = None, to: Optional[Union[Account, Address, str]] = None, value: Union[int, str] = 0, gas_limit: Optional[Union[int, Literal["max"], Literal["auto"]]] = None, request_type: Literal["tx"] = "tx", gas_price: Optional[Union[int, str]] = None, max_fee_per_gas: Optional[Union[int, str]] = None, max_priority_fee_per_gas: Optional[Union[int, str]] = None, access_list: Optional[Union[Dict[Union[Account, Address, str], List[int]], Literal["auto"]]] = None, type: Optional[int] = None, block: Optional[Union[int, Literal["latest"], Literal["pending"], Literal["earliest"], Literal["safe"], Literal["finalized"]]] = None, confirmations: Optional[int] = None) -> TransactionAbc[List[uint256]]:
        """
        [Source code](file:///Users/dteiml/p/hacker-dom/woke-uniswap-v2/src/UniswapV2Router02.sol#255)

        Args:
            amountOutMin: uint256
            path: address[]
            to_: address
            deadline: uint256
        Returns:
            uint256[]
        """
        ...

    def swapExactETHForTokens(self, amountOutMin: uint256, path: List[Union[Account, Address]], to_: Union[Account, Address], deadline: uint256, *, from_: Optional[Union[Account, Address, str]] = None, to: Optional[Union[Account, Address, str]] = None, value: Union[int, str] = 0, gas_limit: Optional[Union[int, Literal["max"], Literal["auto"]]] = None, request_type: RequestType = 'tx', gas_price: Optional[Union[int, str]] = None, max_fee_per_gas: Optional[Union[int, str]] = None, max_priority_fee_per_gas: Optional[Union[int, str]] = None, access_list: Optional[Union[Dict[Union[Account, Address, str], List[int]], Literal["auto"]]] = None, type: Optional[int] = None, block: Optional[Union[int, Literal["latest"], Literal["pending"], Literal["earliest"], Literal["safe"], Literal["finalized"]]] = None, confirmations: Optional[int] = None) -> Union[List[uint256], TransactionAbc[List[uint256]], int, Tuple[Dict[Address, List[int]], int]]:
        """
        [Source code](file:///Users/dteiml/p/hacker-dom/woke-uniswap-v2/src/UniswapV2Router02.sol#255)

        Args:
            amountOutMin: uint256
            path: address[]
            to_: address
            deadline: uint256
        Returns:
            uint256[]
        """
        return self._execute(self.chain, request_type, "7ff36ab5", [amountOutMin, path, to_, deadline], True if request_type == "tx" else False, List[uint256], from_, to if to is not None else str(self.address), value, gas_limit, gas_price, max_fee_per_gas, max_priority_fee_per_gas, access_list, type, block, confirmations)

    @overload
    def swapTokensForExactETH(self, amountOut: uint256, amountInMax: uint256, path: List[Union[Account, Address]], to_: Union[Account, Address], deadline: uint256, *, from_: Optional[Union[Account, Address, str]] = None, to: Optional[Union[Account, Address, str]] = None, value: Union[int, str] = 0, gas_limit: Optional[Union[int, Literal["max"], Literal["auto"]]] = None, request_type: Literal["call"], gas_price: Optional[Union[int, str]] = None, max_fee_per_gas: Optional[Union[int, str]] = None, max_priority_fee_per_gas: Optional[Union[int, str]] = None, access_list: Optional[Union[Dict[Union[Account, Address, str], List[int]], Literal["auto"]]] = None, type: Optional[int] = None, block: Optional[Union[int, Literal["latest"], Literal["pending"], Literal["earliest"], Literal["safe"], Literal["finalized"]]] = None, confirmations: Optional[int] = None) -> List[uint256]:
        """
        [Source code](file:///Users/dteiml/p/hacker-dom/woke-uniswap-v2/src/UniswapV2Router02.sol#269)

        Args:
            amountOut: uint256
            amountInMax: uint256
            path: address[]
            to_: address
            deadline: uint256
        Returns:
            uint256[]
        """
        ...

    @overload
    def swapTokensForExactETH(self, amountOut: uint256, amountInMax: uint256, path: List[Union[Account, Address]], to_: Union[Account, Address], deadline: uint256, *, from_: Optional[Union[Account, Address, str]] = None, to: Optional[Union[Account, Address, str]] = None, value: Union[int, str] = 0, gas_limit: Optional[Union[int, Literal["max"], Literal["auto"]]] = None, request_type: Literal["estimate"], gas_price: Optional[Union[int, str]] = None, max_fee_per_gas: Optional[Union[int, str]] = None, max_priority_fee_per_gas: Optional[Union[int, str]] = None, access_list: Optional[Union[Dict[Union[Account, Address, str], List[int]], Literal["auto"]]] = None, type: Optional[int] = None, block: Optional[Union[int, Literal["latest"], Literal["pending"], Literal["earliest"], Literal["safe"], Literal["finalized"]]] = None, confirmations: Optional[int] = None) -> int:
        """
        [Source code](file:///Users/dteiml/p/hacker-dom/woke-uniswap-v2/src/UniswapV2Router02.sol#269)

        Args:
            amountOut: uint256
            amountInMax: uint256
            path: address[]
            to_: address
            deadline: uint256
        Returns:
            uint256[]
        """
        ...

    @overload
    def swapTokensForExactETH(self, amountOut: uint256, amountInMax: uint256, path: List[Union[Account, Address]], to_: Union[Account, Address], deadline: uint256, *, from_: Optional[Union[Account, Address, str]] = None, to: Optional[Union[Account, Address, str]] = None, value: Union[int, str] = 0, gas_limit: Optional[Union[int, Literal["max"], Literal["auto"]]] = None, request_type: Literal["access_list"], gas_price: Optional[Union[int, str]] = None, max_fee_per_gas: Optional[Union[int, str]] = None, max_priority_fee_per_gas: Optional[Union[int, str]] = None, access_list: Optional[Union[Dict[Union[Account, Address, str], List[int]], Literal["auto"]]] = None, type: Optional[int] = None, block: Optional[Union[int, Literal["latest"], Literal["pending"], Literal["earliest"], Literal["safe"], Literal["finalized"]]] = None, confirmations: Optional[int] = None) -> Tuple[Dict[Address, List[int]], int]:
        """
        [Source code](file:///Users/dteiml/p/hacker-dom/woke-uniswap-v2/src/UniswapV2Router02.sol#269)

        Args:
            amountOut: uint256
            amountInMax: uint256
            path: address[]
            to_: address
            deadline: uint256
        Returns:
            uint256[]
        """
        ...

    @overload
    def swapTokensForExactETH(self, amountOut: uint256, amountInMax: uint256, path: List[Union[Account, Address]], to_: Union[Account, Address], deadline: uint256, *, from_: Optional[Union[Account, Address, str]] = None, to: Optional[Union[Account, Address, str]] = None, value: Union[int, str] = 0, gas_limit: Optional[Union[int, Literal["max"], Literal["auto"]]] = None, request_type: Literal["tx"] = "tx", gas_price: Optional[Union[int, str]] = None, max_fee_per_gas: Optional[Union[int, str]] = None, max_priority_fee_per_gas: Optional[Union[int, str]] = None, access_list: Optional[Union[Dict[Union[Account, Address, str], List[int]], Literal["auto"]]] = None, type: Optional[int] = None, block: Optional[Union[int, Literal["latest"], Literal["pending"], Literal["earliest"], Literal["safe"], Literal["finalized"]]] = None, confirmations: Optional[int] = None) -> TransactionAbc[List[uint256]]:
        """
        [Source code](file:///Users/dteiml/p/hacker-dom/woke-uniswap-v2/src/UniswapV2Router02.sol#269)

        Args:
            amountOut: uint256
            amountInMax: uint256
            path: address[]
            to_: address
            deadline: uint256
        Returns:
            uint256[]
        """
        ...

    def swapTokensForExactETH(self, amountOut: uint256, amountInMax: uint256, path: List[Union[Account, Address]], to_: Union[Account, Address], deadline: uint256, *, from_: Optional[Union[Account, Address, str]] = None, to: Optional[Union[Account, Address, str]] = None, value: Union[int, str] = 0, gas_limit: Optional[Union[int, Literal["max"], Literal["auto"]]] = None, request_type: RequestType = 'tx', gas_price: Optional[Union[int, str]] = None, max_fee_per_gas: Optional[Union[int, str]] = None, max_priority_fee_per_gas: Optional[Union[int, str]] = None, access_list: Optional[Union[Dict[Union[Account, Address, str], List[int]], Literal["auto"]]] = None, type: Optional[int] = None, block: Optional[Union[int, Literal["latest"], Literal["pending"], Literal["earliest"], Literal["safe"], Literal["finalized"]]] = None, confirmations: Optional[int] = None) -> Union[List[uint256], TransactionAbc[List[uint256]], int, Tuple[Dict[Address, List[int]], int]]:
        """
        [Source code](file:///Users/dteiml/p/hacker-dom/woke-uniswap-v2/src/UniswapV2Router02.sol#269)

        Args:
            amountOut: uint256
            amountInMax: uint256
            path: address[]
            to_: address
            deadline: uint256
        Returns:
            uint256[]
        """
        return self._execute(self.chain, request_type, "4a25d94a", [amountOut, amountInMax, path, to_, deadline], True if request_type == "tx" else False, List[uint256], from_, to if to is not None else str(self.address), value, gas_limit, gas_price, max_fee_per_gas, max_priority_fee_per_gas, access_list, type, block, confirmations)

    @overload
    def swapExactTokensForETH(self, amountIn: uint256, amountOutMin: uint256, path: List[Union[Account, Address]], to_: Union[Account, Address], deadline: uint256, *, from_: Optional[Union[Account, Address, str]] = None, to: Optional[Union[Account, Address, str]] = None, value: Union[int, str] = 0, gas_limit: Optional[Union[int, Literal["max"], Literal["auto"]]] = None, request_type: Literal["call"], gas_price: Optional[Union[int, str]] = None, max_fee_per_gas: Optional[Union[int, str]] = None, max_priority_fee_per_gas: Optional[Union[int, str]] = None, access_list: Optional[Union[Dict[Union[Account, Address, str], List[int]], Literal["auto"]]] = None, type: Optional[int] = None, block: Optional[Union[int, Literal["latest"], Literal["pending"], Literal["earliest"], Literal["safe"], Literal["finalized"]]] = None, confirmations: Optional[int] = None) -> List[uint256]:
        """
        [Source code](file:///Users/dteiml/p/hacker-dom/woke-uniswap-v2/src/UniswapV2Router02.sol#285)

        Args:
            amountIn: uint256
            amountOutMin: uint256
            path: address[]
            to_: address
            deadline: uint256
        Returns:
            uint256[]
        """
        ...

    @overload
    def swapExactTokensForETH(self, amountIn: uint256, amountOutMin: uint256, path: List[Union[Account, Address]], to_: Union[Account, Address], deadline: uint256, *, from_: Optional[Union[Account, Address, str]] = None, to: Optional[Union[Account, Address, str]] = None, value: Union[int, str] = 0, gas_limit: Optional[Union[int, Literal["max"], Literal["auto"]]] = None, request_type: Literal["estimate"], gas_price: Optional[Union[int, str]] = None, max_fee_per_gas: Optional[Union[int, str]] = None, max_priority_fee_per_gas: Optional[Union[int, str]] = None, access_list: Optional[Union[Dict[Union[Account, Address, str], List[int]], Literal["auto"]]] = None, type: Optional[int] = None, block: Optional[Union[int, Literal["latest"], Literal["pending"], Literal["earliest"], Literal["safe"], Literal["finalized"]]] = None, confirmations: Optional[int] = None) -> int:
        """
        [Source code](file:///Users/dteiml/p/hacker-dom/woke-uniswap-v2/src/UniswapV2Router02.sol#285)

        Args:
            amountIn: uint256
            amountOutMin: uint256
            path: address[]
            to_: address
            deadline: uint256
        Returns:
            uint256[]
        """
        ...

    @overload
    def swapExactTokensForETH(self, amountIn: uint256, amountOutMin: uint256, path: List[Union[Account, Address]], to_: Union[Account, Address], deadline: uint256, *, from_: Optional[Union[Account, Address, str]] = None, to: Optional[Union[Account, Address, str]] = None, value: Union[int, str] = 0, gas_limit: Optional[Union[int, Literal["max"], Literal["auto"]]] = None, request_type: Literal["access_list"], gas_price: Optional[Union[int, str]] = None, max_fee_per_gas: Optional[Union[int, str]] = None, max_priority_fee_per_gas: Optional[Union[int, str]] = None, access_list: Optional[Union[Dict[Union[Account, Address, str], List[int]], Literal["auto"]]] = None, type: Optional[int] = None, block: Optional[Union[int, Literal["latest"], Literal["pending"], Literal["earliest"], Literal["safe"], Literal["finalized"]]] = None, confirmations: Optional[int] = None) -> Tuple[Dict[Address, List[int]], int]:
        """
        [Source code](file:///Users/dteiml/p/hacker-dom/woke-uniswap-v2/src/UniswapV2Router02.sol#285)

        Args:
            amountIn: uint256
            amountOutMin: uint256
            path: address[]
            to_: address
            deadline: uint256
        Returns:
            uint256[]
        """
        ...

    @overload
    def swapExactTokensForETH(self, amountIn: uint256, amountOutMin: uint256, path: List[Union[Account, Address]], to_: Union[Account, Address], deadline: uint256, *, from_: Optional[Union[Account, Address, str]] = None, to: Optional[Union[Account, Address, str]] = None, value: Union[int, str] = 0, gas_limit: Optional[Union[int, Literal["max"], Literal["auto"]]] = None, request_type: Literal["tx"] = "tx", gas_price: Optional[Union[int, str]] = None, max_fee_per_gas: Optional[Union[int, str]] = None, max_priority_fee_per_gas: Optional[Union[int, str]] = None, access_list: Optional[Union[Dict[Union[Account, Address, str], List[int]], Literal["auto"]]] = None, type: Optional[int] = None, block: Optional[Union[int, Literal["latest"], Literal["pending"], Literal["earliest"], Literal["safe"], Literal["finalized"]]] = None, confirmations: Optional[int] = None) -> TransactionAbc[List[uint256]]:
        """
        [Source code](file:///Users/dteiml/p/hacker-dom/woke-uniswap-v2/src/UniswapV2Router02.sol#285)

        Args:
            amountIn: uint256
            amountOutMin: uint256
            path: address[]
            to_: address
            deadline: uint256
        Returns:
            uint256[]
        """
        ...

    def swapExactTokensForETH(self, amountIn: uint256, amountOutMin: uint256, path: List[Union[Account, Address]], to_: Union[Account, Address], deadline: uint256, *, from_: Optional[Union[Account, Address, str]] = None, to: Optional[Union[Account, Address, str]] = None, value: Union[int, str] = 0, gas_limit: Optional[Union[int, Literal["max"], Literal["auto"]]] = None, request_type: RequestType = 'tx', gas_price: Optional[Union[int, str]] = None, max_fee_per_gas: Optional[Union[int, str]] = None, max_priority_fee_per_gas: Optional[Union[int, str]] = None, access_list: Optional[Union[Dict[Union[Account, Address, str], List[int]], Literal["auto"]]] = None, type: Optional[int] = None, block: Optional[Union[int, Literal["latest"], Literal["pending"], Literal["earliest"], Literal["safe"], Literal["finalized"]]] = None, confirmations: Optional[int] = None) -> Union[List[uint256], TransactionAbc[List[uint256]], int, Tuple[Dict[Address, List[int]], int]]:
        """
        [Source code](file:///Users/dteiml/p/hacker-dom/woke-uniswap-v2/src/UniswapV2Router02.sol#285)

        Args:
            amountIn: uint256
            amountOutMin: uint256
            path: address[]
            to_: address
            deadline: uint256
        Returns:
            uint256[]
        """
        return self._execute(self.chain, request_type, "18cbafe5", [amountIn, amountOutMin, path, to_, deadline], True if request_type == "tx" else False, List[uint256], from_, to if to is not None else str(self.address), value, gas_limit, gas_price, max_fee_per_gas, max_priority_fee_per_gas, access_list, type, block, confirmations)

    @overload
    def swapETHForExactTokens(self, amountOut: uint256, path: List[Union[Account, Address]], to_: Union[Account, Address], deadline: uint256, *, from_: Optional[Union[Account, Address, str]] = None, to: Optional[Union[Account, Address, str]] = None, value: Union[int, str] = 0, gas_limit: Optional[Union[int, Literal["max"], Literal["auto"]]] = None, request_type: Literal["call"], gas_price: Optional[Union[int, str]] = None, max_fee_per_gas: Optional[Union[int, str]] = None, max_priority_fee_per_gas: Optional[Union[int, str]] = None, access_list: Optional[Union[Dict[Union[Account, Address, str], List[int]], Literal["auto"]]] = None, type: Optional[int] = None, block: Optional[Union[int, Literal["latest"], Literal["pending"], Literal["earliest"], Literal["safe"], Literal["finalized"]]] = None, confirmations: Optional[int] = None) -> List[uint256]:
        """
        [Source code](file:///Users/dteiml/p/hacker-dom/woke-uniswap-v2/src/UniswapV2Router02.sol#301)

        Args:
            amountOut: uint256
            path: address[]
            to_: address
            deadline: uint256
        Returns:
            uint256[]
        """
        ...

    @overload
    def swapETHForExactTokens(self, amountOut: uint256, path: List[Union[Account, Address]], to_: Union[Account, Address], deadline: uint256, *, from_: Optional[Union[Account, Address, str]] = None, to: Optional[Union[Account, Address, str]] = None, value: Union[int, str] = 0, gas_limit: Optional[Union[int, Literal["max"], Literal["auto"]]] = None, request_type: Literal["estimate"], gas_price: Optional[Union[int, str]] = None, max_fee_per_gas: Optional[Union[int, str]] = None, max_priority_fee_per_gas: Optional[Union[int, str]] = None, access_list: Optional[Union[Dict[Union[Account, Address, str], List[int]], Literal["auto"]]] = None, type: Optional[int] = None, block: Optional[Union[int, Literal["latest"], Literal["pending"], Literal["earliest"], Literal["safe"], Literal["finalized"]]] = None, confirmations: Optional[int] = None) -> int:
        """
        [Source code](file:///Users/dteiml/p/hacker-dom/woke-uniswap-v2/src/UniswapV2Router02.sol#301)

        Args:
            amountOut: uint256
            path: address[]
            to_: address
            deadline: uint256
        Returns:
            uint256[]
        """
        ...

    @overload
    def swapETHForExactTokens(self, amountOut: uint256, path: List[Union[Account, Address]], to_: Union[Account, Address], deadline: uint256, *, from_: Optional[Union[Account, Address, str]] = None, to: Optional[Union[Account, Address, str]] = None, value: Union[int, str] = 0, gas_limit: Optional[Union[int, Literal["max"], Literal["auto"]]] = None, request_type: Literal["access_list"], gas_price: Optional[Union[int, str]] = None, max_fee_per_gas: Optional[Union[int, str]] = None, max_priority_fee_per_gas: Optional[Union[int, str]] = None, access_list: Optional[Union[Dict[Union[Account, Address, str], List[int]], Literal["auto"]]] = None, type: Optional[int] = None, block: Optional[Union[int, Literal["latest"], Literal["pending"], Literal["earliest"], Literal["safe"], Literal["finalized"]]] = None, confirmations: Optional[int] = None) -> Tuple[Dict[Address, List[int]], int]:
        """
        [Source code](file:///Users/dteiml/p/hacker-dom/woke-uniswap-v2/src/UniswapV2Router02.sol#301)

        Args:
            amountOut: uint256
            path: address[]
            to_: address
            deadline: uint256
        Returns:
            uint256[]
        """
        ...

    @overload
    def swapETHForExactTokens(self, amountOut: uint256, path: List[Union[Account, Address]], to_: Union[Account, Address], deadline: uint256, *, from_: Optional[Union[Account, Address, str]] = None, to: Optional[Union[Account, Address, str]] = None, value: Union[int, str] = 0, gas_limit: Optional[Union[int, Literal["max"], Literal["auto"]]] = None, request_type: Literal["tx"] = "tx", gas_price: Optional[Union[int, str]] = None, max_fee_per_gas: Optional[Union[int, str]] = None, max_priority_fee_per_gas: Optional[Union[int, str]] = None, access_list: Optional[Union[Dict[Union[Account, Address, str], List[int]], Literal["auto"]]] = None, type: Optional[int] = None, block: Optional[Union[int, Literal["latest"], Literal["pending"], Literal["earliest"], Literal["safe"], Literal["finalized"]]] = None, confirmations: Optional[int] = None) -> TransactionAbc[List[uint256]]:
        """
        [Source code](file:///Users/dteiml/p/hacker-dom/woke-uniswap-v2/src/UniswapV2Router02.sol#301)

        Args:
            amountOut: uint256
            path: address[]
            to_: address
            deadline: uint256
        Returns:
            uint256[]
        """
        ...

    def swapETHForExactTokens(self, amountOut: uint256, path: List[Union[Account, Address]], to_: Union[Account, Address], deadline: uint256, *, from_: Optional[Union[Account, Address, str]] = None, to: Optional[Union[Account, Address, str]] = None, value: Union[int, str] = 0, gas_limit: Optional[Union[int, Literal["max"], Literal["auto"]]] = None, request_type: RequestType = 'tx', gas_price: Optional[Union[int, str]] = None, max_fee_per_gas: Optional[Union[int, str]] = None, max_priority_fee_per_gas: Optional[Union[int, str]] = None, access_list: Optional[Union[Dict[Union[Account, Address, str], List[int]], Literal["auto"]]] = None, type: Optional[int] = None, block: Optional[Union[int, Literal["latest"], Literal["pending"], Literal["earliest"], Literal["safe"], Literal["finalized"]]] = None, confirmations: Optional[int] = None) -> Union[List[uint256], TransactionAbc[List[uint256]], int, Tuple[Dict[Address, List[int]], int]]:
        """
        [Source code](file:///Users/dteiml/p/hacker-dom/woke-uniswap-v2/src/UniswapV2Router02.sol#301)

        Args:
            amountOut: uint256
            path: address[]
            to_: address
            deadline: uint256
        Returns:
            uint256[]
        """
        return self._execute(self.chain, request_type, "fb3bdb41", [amountOut, path, to_, deadline], True if request_type == "tx" else False, List[uint256], from_, to if to is not None else str(self.address), value, gas_limit, gas_price, max_fee_per_gas, max_priority_fee_per_gas, access_list, type, block, confirmations)

    @overload
    def swapExactTokensForTokensSupportingFeeOnTransferTokens(self, amountIn: uint256, amountOutMin: uint256, path: List[Union[Account, Address]], to_: Union[Account, Address], deadline: uint256, *, from_: Optional[Union[Account, Address, str]] = None, to: Optional[Union[Account, Address, str]] = None, value: Union[int, str] = 0, gas_limit: Optional[Union[int, Literal["max"], Literal["auto"]]] = None, request_type: Literal["call"], gas_price: Optional[Union[int, str]] = None, max_fee_per_gas: Optional[Union[int, str]] = None, max_priority_fee_per_gas: Optional[Union[int, str]] = None, access_list: Optional[Union[Dict[Union[Account, Address, str], List[int]], Literal["auto"]]] = None, type: Optional[int] = None, block: Optional[Union[int, Literal["latest"], Literal["pending"], Literal["earliest"], Literal["safe"], Literal["finalized"]]] = None, confirmations: Optional[int] = None) -> None:
        """
        [Source code](file:///Users/dteiml/p/hacker-dom/woke-uniswap-v2/src/UniswapV2Router02.sol#338)

        Args:
            amountIn: uint256
            amountOutMin: uint256
            path: address[]
            to_: address
            deadline: uint256
        """
        ...

    @overload
    def swapExactTokensForTokensSupportingFeeOnTransferTokens(self, amountIn: uint256, amountOutMin: uint256, path: List[Union[Account, Address]], to_: Union[Account, Address], deadline: uint256, *, from_: Optional[Union[Account, Address, str]] = None, to: Optional[Union[Account, Address, str]] = None, value: Union[int, str] = 0, gas_limit: Optional[Union[int, Literal["max"], Literal["auto"]]] = None, request_type: Literal["estimate"], gas_price: Optional[Union[int, str]] = None, max_fee_per_gas: Optional[Union[int, str]] = None, max_priority_fee_per_gas: Optional[Union[int, str]] = None, access_list: Optional[Union[Dict[Union[Account, Address, str], List[int]], Literal["auto"]]] = None, type: Optional[int] = None, block: Optional[Union[int, Literal["latest"], Literal["pending"], Literal["earliest"], Literal["safe"], Literal["finalized"]]] = None, confirmations: Optional[int] = None) -> int:
        """
        [Source code](file:///Users/dteiml/p/hacker-dom/woke-uniswap-v2/src/UniswapV2Router02.sol#338)

        Args:
            amountIn: uint256
            amountOutMin: uint256
            path: address[]
            to_: address
            deadline: uint256
        """
        ...

    @overload
    def swapExactTokensForTokensSupportingFeeOnTransferTokens(self, amountIn: uint256, amountOutMin: uint256, path: List[Union[Account, Address]], to_: Union[Account, Address], deadline: uint256, *, from_: Optional[Union[Account, Address, str]] = None, to: Optional[Union[Account, Address, str]] = None, value: Union[int, str] = 0, gas_limit: Optional[Union[int, Literal["max"], Literal["auto"]]] = None, request_type: Literal["access_list"], gas_price: Optional[Union[int, str]] = None, max_fee_per_gas: Optional[Union[int, str]] = None, max_priority_fee_per_gas: Optional[Union[int, str]] = None, access_list: Optional[Union[Dict[Union[Account, Address, str], List[int]], Literal["auto"]]] = None, type: Optional[int] = None, block: Optional[Union[int, Literal["latest"], Literal["pending"], Literal["earliest"], Literal["safe"], Literal["finalized"]]] = None, confirmations: Optional[int] = None) -> Tuple[Dict[Address, List[int]], int]:
        """
        [Source code](file:///Users/dteiml/p/hacker-dom/woke-uniswap-v2/src/UniswapV2Router02.sol#338)

        Args:
            amountIn: uint256
            amountOutMin: uint256
            path: address[]
            to_: address
            deadline: uint256
        """
        ...

    @overload
    def swapExactTokensForTokensSupportingFeeOnTransferTokens(self, amountIn: uint256, amountOutMin: uint256, path: List[Union[Account, Address]], to_: Union[Account, Address], deadline: uint256, *, from_: Optional[Union[Account, Address, str]] = None, to: Optional[Union[Account, Address, str]] = None, value: Union[int, str] = 0, gas_limit: Optional[Union[int, Literal["max"], Literal["auto"]]] = None, request_type: Literal["tx"] = "tx", gas_price: Optional[Union[int, str]] = None, max_fee_per_gas: Optional[Union[int, str]] = None, max_priority_fee_per_gas: Optional[Union[int, str]] = None, access_list: Optional[Union[Dict[Union[Account, Address, str], List[int]], Literal["auto"]]] = None, type: Optional[int] = None, block: Optional[Union[int, Literal["latest"], Literal["pending"], Literal["earliest"], Literal["safe"], Literal["finalized"]]] = None, confirmations: Optional[int] = None) -> TransactionAbc[None]:
        """
        [Source code](file:///Users/dteiml/p/hacker-dom/woke-uniswap-v2/src/UniswapV2Router02.sol#338)

        Args:
            amountIn: uint256
            amountOutMin: uint256
            path: address[]
            to_: address
            deadline: uint256
        """
        ...

    def swapExactTokensForTokensSupportingFeeOnTransferTokens(self, amountIn: uint256, amountOutMin: uint256, path: List[Union[Account, Address]], to_: Union[Account, Address], deadline: uint256, *, from_: Optional[Union[Account, Address, str]] = None, to: Optional[Union[Account, Address, str]] = None, value: Union[int, str] = 0, gas_limit: Optional[Union[int, Literal["max"], Literal["auto"]]] = None, request_type: RequestType = 'tx', gas_price: Optional[Union[int, str]] = None, max_fee_per_gas: Optional[Union[int, str]] = None, max_priority_fee_per_gas: Optional[Union[int, str]] = None, access_list: Optional[Union[Dict[Union[Account, Address, str], List[int]], Literal["auto"]]] = None, type: Optional[int] = None, block: Optional[Union[int, Literal["latest"], Literal["pending"], Literal["earliest"], Literal["safe"], Literal["finalized"]]] = None, confirmations: Optional[int] = None) -> Union[None, TransactionAbc[None], int, Tuple[Dict[Address, List[int]], int]]:
        """
        [Source code](file:///Users/dteiml/p/hacker-dom/woke-uniswap-v2/src/UniswapV2Router02.sol#338)

        Args:
            amountIn: uint256
            amountOutMin: uint256
            path: address[]
            to_: address
            deadline: uint256
        """
        return self._execute(self.chain, request_type, "5c11d795", [amountIn, amountOutMin, path, to_, deadline], True if request_type == "tx" else False, NoneType, from_, to if to is not None else str(self.address), value, gas_limit, gas_price, max_fee_per_gas, max_priority_fee_per_gas, access_list, type, block, confirmations)

    @overload
    def swapExactETHForTokensSupportingFeeOnTransferTokens(self, amountOutMin: uint256, path: List[Union[Account, Address]], to_: Union[Account, Address], deadline: uint256, *, from_: Optional[Union[Account, Address, str]] = None, to: Optional[Union[Account, Address, str]] = None, value: Union[int, str] = 0, gas_limit: Optional[Union[int, Literal["max"], Literal["auto"]]] = None, request_type: Literal["call"], gas_price: Optional[Union[int, str]] = None, max_fee_per_gas: Optional[Union[int, str]] = None, max_priority_fee_per_gas: Optional[Union[int, str]] = None, access_list: Optional[Union[Dict[Union[Account, Address, str], List[int]], Literal["auto"]]] = None, type: Optional[int] = None, block: Optional[Union[int, Literal["latest"], Literal["pending"], Literal["earliest"], Literal["safe"], Literal["finalized"]]] = None, confirmations: Optional[int] = None) -> None:
        """
        [Source code](file:///Users/dteiml/p/hacker-dom/woke-uniswap-v2/src/UniswapV2Router02.sol#355)

        Args:
            amountOutMin: uint256
            path: address[]
            to_: address
            deadline: uint256
        """
        ...

    @overload
    def swapExactETHForTokensSupportingFeeOnTransferTokens(self, amountOutMin: uint256, path: List[Union[Account, Address]], to_: Union[Account, Address], deadline: uint256, *, from_: Optional[Union[Account, Address, str]] = None, to: Optional[Union[Account, Address, str]] = None, value: Union[int, str] = 0, gas_limit: Optional[Union[int, Literal["max"], Literal["auto"]]] = None, request_type: Literal["estimate"], gas_price: Optional[Union[int, str]] = None, max_fee_per_gas: Optional[Union[int, str]] = None, max_priority_fee_per_gas: Optional[Union[int, str]] = None, access_list: Optional[Union[Dict[Union[Account, Address, str], List[int]], Literal["auto"]]] = None, type: Optional[int] = None, block: Optional[Union[int, Literal["latest"], Literal["pending"], Literal["earliest"], Literal["safe"], Literal["finalized"]]] = None, confirmations: Optional[int] = None) -> int:
        """
        [Source code](file:///Users/dteiml/p/hacker-dom/woke-uniswap-v2/src/UniswapV2Router02.sol#355)

        Args:
            amountOutMin: uint256
            path: address[]
            to_: address
            deadline: uint256
        """
        ...

    @overload
    def swapExactETHForTokensSupportingFeeOnTransferTokens(self, amountOutMin: uint256, path: List[Union[Account, Address]], to_: Union[Account, Address], deadline: uint256, *, from_: Optional[Union[Account, Address, str]] = None, to: Optional[Union[Account, Address, str]] = None, value: Union[int, str] = 0, gas_limit: Optional[Union[int, Literal["max"], Literal["auto"]]] = None, request_type: Literal["access_list"], gas_price: Optional[Union[int, str]] = None, max_fee_per_gas: Optional[Union[int, str]] = None, max_priority_fee_per_gas: Optional[Union[int, str]] = None, access_list: Optional[Union[Dict[Union[Account, Address, str], List[int]], Literal["auto"]]] = None, type: Optional[int] = None, block: Optional[Union[int, Literal["latest"], Literal["pending"], Literal["earliest"], Literal["safe"], Literal["finalized"]]] = None, confirmations: Optional[int] = None) -> Tuple[Dict[Address, List[int]], int]:
        """
        [Source code](file:///Users/dteiml/p/hacker-dom/woke-uniswap-v2/src/UniswapV2Router02.sol#355)

        Args:
            amountOutMin: uint256
            path: address[]
            to_: address
            deadline: uint256
        """
        ...

    @overload
    def swapExactETHForTokensSupportingFeeOnTransferTokens(self, amountOutMin: uint256, path: List[Union[Account, Address]], to_: Union[Account, Address], deadline: uint256, *, from_: Optional[Union[Account, Address, str]] = None, to: Optional[Union[Account, Address, str]] = None, value: Union[int, str] = 0, gas_limit: Optional[Union[int, Literal["max"], Literal["auto"]]] = None, request_type: Literal["tx"] = "tx", gas_price: Optional[Union[int, str]] = None, max_fee_per_gas: Optional[Union[int, str]] = None, max_priority_fee_per_gas: Optional[Union[int, str]] = None, access_list: Optional[Union[Dict[Union[Account, Address, str], List[int]], Literal["auto"]]] = None, type: Optional[int] = None, block: Optional[Union[int, Literal["latest"], Literal["pending"], Literal["earliest"], Literal["safe"], Literal["finalized"]]] = None, confirmations: Optional[int] = None) -> TransactionAbc[None]:
        """
        [Source code](file:///Users/dteiml/p/hacker-dom/woke-uniswap-v2/src/UniswapV2Router02.sol#355)

        Args:
            amountOutMin: uint256
            path: address[]
            to_: address
            deadline: uint256
        """
        ...

    def swapExactETHForTokensSupportingFeeOnTransferTokens(self, amountOutMin: uint256, path: List[Union[Account, Address]], to_: Union[Account, Address], deadline: uint256, *, from_: Optional[Union[Account, Address, str]] = None, to: Optional[Union[Account, Address, str]] = None, value: Union[int, str] = 0, gas_limit: Optional[Union[int, Literal["max"], Literal["auto"]]] = None, request_type: RequestType = 'tx', gas_price: Optional[Union[int, str]] = None, max_fee_per_gas: Optional[Union[int, str]] = None, max_priority_fee_per_gas: Optional[Union[int, str]] = None, access_list: Optional[Union[Dict[Union[Account, Address, str], List[int]], Literal["auto"]]] = None, type: Optional[int] = None, block: Optional[Union[int, Literal["latest"], Literal["pending"], Literal["earliest"], Literal["safe"], Literal["finalized"]]] = None, confirmations: Optional[int] = None) -> Union[None, TransactionAbc[None], int, Tuple[Dict[Address, List[int]], int]]:
        """
        [Source code](file:///Users/dteiml/p/hacker-dom/woke-uniswap-v2/src/UniswapV2Router02.sol#355)

        Args:
            amountOutMin: uint256
            path: address[]
            to_: address
            deadline: uint256
        """
        return self._execute(self.chain, request_type, "b6f9de95", [amountOutMin, path, to_, deadline], True if request_type == "tx" else False, NoneType, from_, to if to is not None else str(self.address), value, gas_limit, gas_price, max_fee_per_gas, max_priority_fee_per_gas, access_list, type, block, confirmations)

    @overload
    def swapExactTokensForETHSupportingFeeOnTransferTokens(self, amountIn: uint256, amountOutMin: uint256, path: List[Union[Account, Address]], to_: Union[Account, Address], deadline: uint256, *, from_: Optional[Union[Account, Address, str]] = None, to: Optional[Union[Account, Address, str]] = None, value: Union[int, str] = 0, gas_limit: Optional[Union[int, Literal["max"], Literal["auto"]]] = None, request_type: Literal["call"], gas_price: Optional[Union[int, str]] = None, max_fee_per_gas: Optional[Union[int, str]] = None, max_priority_fee_per_gas: Optional[Union[int, str]] = None, access_list: Optional[Union[Dict[Union[Account, Address, str], List[int]], Literal["auto"]]] = None, type: Optional[int] = None, block: Optional[Union[int, Literal["latest"], Literal["pending"], Literal["earliest"], Literal["safe"], Literal["finalized"]]] = None, confirmations: Optional[int] = None) -> None:
        """
        [Source code](file:///Users/dteiml/p/hacker-dom/woke-uniswap-v2/src/UniswapV2Router02.sol#377)

        Args:
            amountIn: uint256
            amountOutMin: uint256
            path: address[]
            to_: address
            deadline: uint256
        """
        ...

    @overload
    def swapExactTokensForETHSupportingFeeOnTransferTokens(self, amountIn: uint256, amountOutMin: uint256, path: List[Union[Account, Address]], to_: Union[Account, Address], deadline: uint256, *, from_: Optional[Union[Account, Address, str]] = None, to: Optional[Union[Account, Address, str]] = None, value: Union[int, str] = 0, gas_limit: Optional[Union[int, Literal["max"], Literal["auto"]]] = None, request_type: Literal["estimate"], gas_price: Optional[Union[int, str]] = None, max_fee_per_gas: Optional[Union[int, str]] = None, max_priority_fee_per_gas: Optional[Union[int, str]] = None, access_list: Optional[Union[Dict[Union[Account, Address, str], List[int]], Literal["auto"]]] = None, type: Optional[int] = None, block: Optional[Union[int, Literal["latest"], Literal["pending"], Literal["earliest"], Literal["safe"], Literal["finalized"]]] = None, confirmations: Optional[int] = None) -> int:
        """
        [Source code](file:///Users/dteiml/p/hacker-dom/woke-uniswap-v2/src/UniswapV2Router02.sol#377)

        Args:
            amountIn: uint256
            amountOutMin: uint256
            path: address[]
            to_: address
            deadline: uint256
        """
        ...

    @overload
    def swapExactTokensForETHSupportingFeeOnTransferTokens(self, amountIn: uint256, amountOutMin: uint256, path: List[Union[Account, Address]], to_: Union[Account, Address], deadline: uint256, *, from_: Optional[Union[Account, Address, str]] = None, to: Optional[Union[Account, Address, str]] = None, value: Union[int, str] = 0, gas_limit: Optional[Union[int, Literal["max"], Literal["auto"]]] = None, request_type: Literal["access_list"], gas_price: Optional[Union[int, str]] = None, max_fee_per_gas: Optional[Union[int, str]] = None, max_priority_fee_per_gas: Optional[Union[int, str]] = None, access_list: Optional[Union[Dict[Union[Account, Address, str], List[int]], Literal["auto"]]] = None, type: Optional[int] = None, block: Optional[Union[int, Literal["latest"], Literal["pending"], Literal["earliest"], Literal["safe"], Literal["finalized"]]] = None, confirmations: Optional[int] = None) -> Tuple[Dict[Address, List[int]], int]:
        """
        [Source code](file:///Users/dteiml/p/hacker-dom/woke-uniswap-v2/src/UniswapV2Router02.sol#377)

        Args:
            amountIn: uint256
            amountOutMin: uint256
            path: address[]
            to_: address
            deadline: uint256
        """
        ...

    @overload
    def swapExactTokensForETHSupportingFeeOnTransferTokens(self, amountIn: uint256, amountOutMin: uint256, path: List[Union[Account, Address]], to_: Union[Account, Address], deadline: uint256, *, from_: Optional[Union[Account, Address, str]] = None, to: Optional[Union[Account, Address, str]] = None, value: Union[int, str] = 0, gas_limit: Optional[Union[int, Literal["max"], Literal["auto"]]] = None, request_type: Literal["tx"] = "tx", gas_price: Optional[Union[int, str]] = None, max_fee_per_gas: Optional[Union[int, str]] = None, max_priority_fee_per_gas: Optional[Union[int, str]] = None, access_list: Optional[Union[Dict[Union[Account, Address, str], List[int]], Literal["auto"]]] = None, type: Optional[int] = None, block: Optional[Union[int, Literal["latest"], Literal["pending"], Literal["earliest"], Literal["safe"], Literal["finalized"]]] = None, confirmations: Optional[int] = None) -> TransactionAbc[None]:
        """
        [Source code](file:///Users/dteiml/p/hacker-dom/woke-uniswap-v2/src/UniswapV2Router02.sol#377)

        Args:
            amountIn: uint256
            amountOutMin: uint256
            path: address[]
            to_: address
            deadline: uint256
        """
        ...

    def swapExactTokensForETHSupportingFeeOnTransferTokens(self, amountIn: uint256, amountOutMin: uint256, path: List[Union[Account, Address]], to_: Union[Account, Address], deadline: uint256, *, from_: Optional[Union[Account, Address, str]] = None, to: Optional[Union[Account, Address, str]] = None, value: Union[int, str] = 0, gas_limit: Optional[Union[int, Literal["max"], Literal["auto"]]] = None, request_type: RequestType = 'tx', gas_price: Optional[Union[int, str]] = None, max_fee_per_gas: Optional[Union[int, str]] = None, max_priority_fee_per_gas: Optional[Union[int, str]] = None, access_list: Optional[Union[Dict[Union[Account, Address, str], List[int]], Literal["auto"]]] = None, type: Optional[int] = None, block: Optional[Union[int, Literal["latest"], Literal["pending"], Literal["earliest"], Literal["safe"], Literal["finalized"]]] = None, confirmations: Optional[int] = None) -> Union[None, TransactionAbc[None], int, Tuple[Dict[Address, List[int]], int]]:
        """
        [Source code](file:///Users/dteiml/p/hacker-dom/woke-uniswap-v2/src/UniswapV2Router02.sol#377)

        Args:
            amountIn: uint256
            amountOutMin: uint256
            path: address[]
            to_: address
            deadline: uint256
        """
        return self._execute(self.chain, request_type, "791ac947", [amountIn, amountOutMin, path, to_, deadline], True if request_type == "tx" else False, NoneType, from_, to if to is not None else str(self.address), value, gas_limit, gas_price, max_fee_per_gas, max_priority_fee_per_gas, access_list, type, block, confirmations)

    @overload
    def quote(self, amountA: uint256, reserveA: uint256, reserveB: uint256, *, from_: Optional[Union[Account, Address, str]] = None, to: Optional[Union[Account, Address, str]] = None, value: Union[int, str] = 0, gas_limit: Optional[Union[int, Literal["max"], Literal["auto"]]] = None, request_type: Literal["call"] = "call", gas_price: Optional[Union[int, str]] = None, max_fee_per_gas: Optional[Union[int, str]] = None, max_priority_fee_per_gas: Optional[Union[int, str]] = None, access_list: Optional[Union[Dict[Union[Account, Address, str], List[int]], Literal["auto"]]] = None, type: Optional[int] = None, block: Optional[Union[int, Literal["latest"], Literal["pending"], Literal["earliest"], Literal["safe"], Literal["finalized"]]] = None, confirmations: Optional[int] = None) -> uint256:
        """
        [Source code](file:///Users/dteiml/p/hacker-dom/woke-uniswap-v2/src/UniswapV2Router02.sol#400)

        Args:
            amountA: uint256
            reserveA: uint256
            reserveB: uint256
        Returns:
            uint256
        """
        ...

    @overload
    def quote(self, amountA: uint256, reserveA: uint256, reserveB: uint256, *, from_: Optional[Union[Account, Address, str]] = None, to: Optional[Union[Account, Address, str]] = None, value: Union[int, str] = 0, gas_limit: Optional[Union[int, Literal["max"], Literal["auto"]]] = None, request_type: Literal["estimate"], gas_price: Optional[Union[int, str]] = None, max_fee_per_gas: Optional[Union[int, str]] = None, max_priority_fee_per_gas: Optional[Union[int, str]] = None, access_list: Optional[Union[Dict[Union[Account, Address, str], List[int]], Literal["auto"]]] = None, type: Optional[int] = None, block: Optional[Union[int, Literal["latest"], Literal["pending"], Literal["earliest"], Literal["safe"], Literal["finalized"]]] = None, confirmations: Optional[int] = None) -> int:
        """
        [Source code](file:///Users/dteiml/p/hacker-dom/woke-uniswap-v2/src/UniswapV2Router02.sol#400)

        Args:
            amountA: uint256
            reserveA: uint256
            reserveB: uint256
        Returns:
            uint256
        """
        ...

    @overload
    def quote(self, amountA: uint256, reserveA: uint256, reserveB: uint256, *, from_: Optional[Union[Account, Address, str]] = None, to: Optional[Union[Account, Address, str]] = None, value: Union[int, str] = 0, gas_limit: Optional[Union[int, Literal["max"], Literal["auto"]]] = None, request_type: Literal["access_list"], gas_price: Optional[Union[int, str]] = None, max_fee_per_gas: Optional[Union[int, str]] = None, max_priority_fee_per_gas: Optional[Union[int, str]] = None, access_list: Optional[Union[Dict[Union[Account, Address, str], List[int]], Literal["auto"]]] = None, type: Optional[int] = None, block: Optional[Union[int, Literal["latest"], Literal["pending"], Literal["earliest"], Literal["safe"], Literal["finalized"]]] = None, confirmations: Optional[int] = None) -> Tuple[Dict[Address, List[int]], int]:
        """
        [Source code](file:///Users/dteiml/p/hacker-dom/woke-uniswap-v2/src/UniswapV2Router02.sol#400)

        Args:
            amountA: uint256
            reserveA: uint256
            reserveB: uint256
        Returns:
            uint256
        """
        ...

    @overload
    def quote(self, amountA: uint256, reserveA: uint256, reserveB: uint256, *, from_: Optional[Union[Account, Address, str]] = None, to: Optional[Union[Account, Address, str]] = None, value: Union[int, str] = 0, gas_limit: Optional[Union[int, Literal["max"], Literal["auto"]]] = None, request_type: Literal["tx"], gas_price: Optional[Union[int, str]] = None, max_fee_per_gas: Optional[Union[int, str]] = None, max_priority_fee_per_gas: Optional[Union[int, str]] = None, access_list: Optional[Union[Dict[Union[Account, Address, str], List[int]], Literal["auto"]]] = None, type: Optional[int] = None, block: Optional[Union[int, Literal["latest"], Literal["pending"], Literal["earliest"], Literal["safe"], Literal["finalized"]]] = None, confirmations: Optional[int] = None) -> TransactionAbc[uint256]:
        """
        [Source code](file:///Users/dteiml/p/hacker-dom/woke-uniswap-v2/src/UniswapV2Router02.sol#400)

        Args:
            amountA: uint256
            reserveA: uint256
            reserveB: uint256
        Returns:
            uint256
        """
        ...

    def quote(self, amountA: uint256, reserveA: uint256, reserveB: uint256, *, from_: Optional[Union[Account, Address, str]] = None, to: Optional[Union[Account, Address, str]] = None, value: Union[int, str] = 0, gas_limit: Optional[Union[int, Literal["max"], Literal["auto"]]] = None, request_type: RequestType = 'call', gas_price: Optional[Union[int, str]] = None, max_fee_per_gas: Optional[Union[int, str]] = None, max_priority_fee_per_gas: Optional[Union[int, str]] = None, access_list: Optional[Union[Dict[Union[Account, Address, str], List[int]], Literal["auto"]]] = None, type: Optional[int] = None, block: Optional[Union[int, Literal["latest"], Literal["pending"], Literal["earliest"], Literal["safe"], Literal["finalized"]]] = None, confirmations: Optional[int] = None) -> Union[uint256, TransactionAbc[uint256], int, Tuple[Dict[Address, List[int]], int]]:
        """
        [Source code](file:///Users/dteiml/p/hacker-dom/woke-uniswap-v2/src/UniswapV2Router02.sol#400)

        Args:
            amountA: uint256
            reserveA: uint256
            reserveB: uint256
        Returns:
            uint256
        """
        return self._execute(self.chain, request_type, "ad615dec", [amountA, reserveA, reserveB], True if request_type == "tx" else False, uint256, from_, to if to is not None else str(self.address), value, gas_limit, gas_price, max_fee_per_gas, max_priority_fee_per_gas, access_list, type, block, confirmations)

    @overload
    def getAmountOut(self, amountIn: uint256, reserveIn: uint256, reserveOut: uint256, *, from_: Optional[Union[Account, Address, str]] = None, to: Optional[Union[Account, Address, str]] = None, value: Union[int, str] = 0, gas_limit: Optional[Union[int, Literal["max"], Literal["auto"]]] = None, request_type: Literal["call"] = "call", gas_price: Optional[Union[int, str]] = None, max_fee_per_gas: Optional[Union[int, str]] = None, max_priority_fee_per_gas: Optional[Union[int, str]] = None, access_list: Optional[Union[Dict[Union[Account, Address, str], List[int]], Literal["auto"]]] = None, type: Optional[int] = None, block: Optional[Union[int, Literal["latest"], Literal["pending"], Literal["earliest"], Literal["safe"], Literal["finalized"]]] = None, confirmations: Optional[int] = None) -> uint256:
        """
        [Source code](file:///Users/dteiml/p/hacker-dom/woke-uniswap-v2/src/UniswapV2Router02.sol#405)

        Args:
            amountIn: uint256
            reserveIn: uint256
            reserveOut: uint256
        Returns:
            uint256
        """
        ...

    @overload
    def getAmountOut(self, amountIn: uint256, reserveIn: uint256, reserveOut: uint256, *, from_: Optional[Union[Account, Address, str]] = None, to: Optional[Union[Account, Address, str]] = None, value: Union[int, str] = 0, gas_limit: Optional[Union[int, Literal["max"], Literal["auto"]]] = None, request_type: Literal["estimate"], gas_price: Optional[Union[int, str]] = None, max_fee_per_gas: Optional[Union[int, str]] = None, max_priority_fee_per_gas: Optional[Union[int, str]] = None, access_list: Optional[Union[Dict[Union[Account, Address, str], List[int]], Literal["auto"]]] = None, type: Optional[int] = None, block: Optional[Union[int, Literal["latest"], Literal["pending"], Literal["earliest"], Literal["safe"], Literal["finalized"]]] = None, confirmations: Optional[int] = None) -> int:
        """
        [Source code](file:///Users/dteiml/p/hacker-dom/woke-uniswap-v2/src/UniswapV2Router02.sol#405)

        Args:
            amountIn: uint256
            reserveIn: uint256
            reserveOut: uint256
        Returns:
            uint256
        """
        ...

    @overload
    def getAmountOut(self, amountIn: uint256, reserveIn: uint256, reserveOut: uint256, *, from_: Optional[Union[Account, Address, str]] = None, to: Optional[Union[Account, Address, str]] = None, value: Union[int, str] = 0, gas_limit: Optional[Union[int, Literal["max"], Literal["auto"]]] = None, request_type: Literal["access_list"], gas_price: Optional[Union[int, str]] = None, max_fee_per_gas: Optional[Union[int, str]] = None, max_priority_fee_per_gas: Optional[Union[int, str]] = None, access_list: Optional[Union[Dict[Union[Account, Address, str], List[int]], Literal["auto"]]] = None, type: Optional[int] = None, block: Optional[Union[int, Literal["latest"], Literal["pending"], Literal["earliest"], Literal["safe"], Literal["finalized"]]] = None, confirmations: Optional[int] = None) -> Tuple[Dict[Address, List[int]], int]:
        """
        [Source code](file:///Users/dteiml/p/hacker-dom/woke-uniswap-v2/src/UniswapV2Router02.sol#405)

        Args:
            amountIn: uint256
            reserveIn: uint256
            reserveOut: uint256
        Returns:
            uint256
        """
        ...

    @overload
    def getAmountOut(self, amountIn: uint256, reserveIn: uint256, reserveOut: uint256, *, from_: Optional[Union[Account, Address, str]] = None, to: Optional[Union[Account, Address, str]] = None, value: Union[int, str] = 0, gas_limit: Optional[Union[int, Literal["max"], Literal["auto"]]] = None, request_type: Literal["tx"], gas_price: Optional[Union[int, str]] = None, max_fee_per_gas: Optional[Union[int, str]] = None, max_priority_fee_per_gas: Optional[Union[int, str]] = None, access_list: Optional[Union[Dict[Union[Account, Address, str], List[int]], Literal["auto"]]] = None, type: Optional[int] = None, block: Optional[Union[int, Literal["latest"], Literal["pending"], Literal["earliest"], Literal["safe"], Literal["finalized"]]] = None, confirmations: Optional[int] = None) -> TransactionAbc[uint256]:
        """
        [Source code](file:///Users/dteiml/p/hacker-dom/woke-uniswap-v2/src/UniswapV2Router02.sol#405)

        Args:
            amountIn: uint256
            reserveIn: uint256
            reserveOut: uint256
        Returns:
            uint256
        """
        ...

    def getAmountOut(self, amountIn: uint256, reserveIn: uint256, reserveOut: uint256, *, from_: Optional[Union[Account, Address, str]] = None, to: Optional[Union[Account, Address, str]] = None, value: Union[int, str] = 0, gas_limit: Optional[Union[int, Literal["max"], Literal["auto"]]] = None, request_type: RequestType = 'call', gas_price: Optional[Union[int, str]] = None, max_fee_per_gas: Optional[Union[int, str]] = None, max_priority_fee_per_gas: Optional[Union[int, str]] = None, access_list: Optional[Union[Dict[Union[Account, Address, str], List[int]], Literal["auto"]]] = None, type: Optional[int] = None, block: Optional[Union[int, Literal["latest"], Literal["pending"], Literal["earliest"], Literal["safe"], Literal["finalized"]]] = None, confirmations: Optional[int] = None) -> Union[uint256, TransactionAbc[uint256], int, Tuple[Dict[Address, List[int]], int]]:
        """
        [Source code](file:///Users/dteiml/p/hacker-dom/woke-uniswap-v2/src/UniswapV2Router02.sol#405)

        Args:
            amountIn: uint256
            reserveIn: uint256
            reserveOut: uint256
        Returns:
            uint256
        """
        return self._execute(self.chain, request_type, "054d50d4", [amountIn, reserveIn, reserveOut], True if request_type == "tx" else False, uint256, from_, to if to is not None else str(self.address), value, gas_limit, gas_price, max_fee_per_gas, max_priority_fee_per_gas, access_list, type, block, confirmations)

    @overload
    def getAmountIn(self, amountOut: uint256, reserveIn: uint256, reserveOut: uint256, *, from_: Optional[Union[Account, Address, str]] = None, to: Optional[Union[Account, Address, str]] = None, value: Union[int, str] = 0, gas_limit: Optional[Union[int, Literal["max"], Literal["auto"]]] = None, request_type: Literal["call"] = "call", gas_price: Optional[Union[int, str]] = None, max_fee_per_gas: Optional[Union[int, str]] = None, max_priority_fee_per_gas: Optional[Union[int, str]] = None, access_list: Optional[Union[Dict[Union[Account, Address, str], List[int]], Literal["auto"]]] = None, type: Optional[int] = None, block: Optional[Union[int, Literal["latest"], Literal["pending"], Literal["earliest"], Literal["safe"], Literal["finalized"]]] = None, confirmations: Optional[int] = None) -> uint256:
        """
        [Source code](file:///Users/dteiml/p/hacker-dom/woke-uniswap-v2/src/UniswapV2Router02.sol#414)

        Args:
            amountOut: uint256
            reserveIn: uint256
            reserveOut: uint256
        Returns:
            uint256
        """
        ...

    @overload
    def getAmountIn(self, amountOut: uint256, reserveIn: uint256, reserveOut: uint256, *, from_: Optional[Union[Account, Address, str]] = None, to: Optional[Union[Account, Address, str]] = None, value: Union[int, str] = 0, gas_limit: Optional[Union[int, Literal["max"], Literal["auto"]]] = None, request_type: Literal["estimate"], gas_price: Optional[Union[int, str]] = None, max_fee_per_gas: Optional[Union[int, str]] = None, max_priority_fee_per_gas: Optional[Union[int, str]] = None, access_list: Optional[Union[Dict[Union[Account, Address, str], List[int]], Literal["auto"]]] = None, type: Optional[int] = None, block: Optional[Union[int, Literal["latest"], Literal["pending"], Literal["earliest"], Literal["safe"], Literal["finalized"]]] = None, confirmations: Optional[int] = None) -> int:
        """
        [Source code](file:///Users/dteiml/p/hacker-dom/woke-uniswap-v2/src/UniswapV2Router02.sol#414)

        Args:
            amountOut: uint256
            reserveIn: uint256
            reserveOut: uint256
        Returns:
            uint256
        """
        ...

    @overload
    def getAmountIn(self, amountOut: uint256, reserveIn: uint256, reserveOut: uint256, *, from_: Optional[Union[Account, Address, str]] = None, to: Optional[Union[Account, Address, str]] = None, value: Union[int, str] = 0, gas_limit: Optional[Union[int, Literal["max"], Literal["auto"]]] = None, request_type: Literal["access_list"], gas_price: Optional[Union[int, str]] = None, max_fee_per_gas: Optional[Union[int, str]] = None, max_priority_fee_per_gas: Optional[Union[int, str]] = None, access_list: Optional[Union[Dict[Union[Account, Address, str], List[int]], Literal["auto"]]] = None, type: Optional[int] = None, block: Optional[Union[int, Literal["latest"], Literal["pending"], Literal["earliest"], Literal["safe"], Literal["finalized"]]] = None, confirmations: Optional[int] = None) -> Tuple[Dict[Address, List[int]], int]:
        """
        [Source code](file:///Users/dteiml/p/hacker-dom/woke-uniswap-v2/src/UniswapV2Router02.sol#414)

        Args:
            amountOut: uint256
            reserveIn: uint256
            reserveOut: uint256
        Returns:
            uint256
        """
        ...

    @overload
    def getAmountIn(self, amountOut: uint256, reserveIn: uint256, reserveOut: uint256, *, from_: Optional[Union[Account, Address, str]] = None, to: Optional[Union[Account, Address, str]] = None, value: Union[int, str] = 0, gas_limit: Optional[Union[int, Literal["max"], Literal["auto"]]] = None, request_type: Literal["tx"], gas_price: Optional[Union[int, str]] = None, max_fee_per_gas: Optional[Union[int, str]] = None, max_priority_fee_per_gas: Optional[Union[int, str]] = None, access_list: Optional[Union[Dict[Union[Account, Address, str], List[int]], Literal["auto"]]] = None, type: Optional[int] = None, block: Optional[Union[int, Literal["latest"], Literal["pending"], Literal["earliest"], Literal["safe"], Literal["finalized"]]] = None, confirmations: Optional[int] = None) -> TransactionAbc[uint256]:
        """
        [Source code](file:///Users/dteiml/p/hacker-dom/woke-uniswap-v2/src/UniswapV2Router02.sol#414)

        Args:
            amountOut: uint256
            reserveIn: uint256
            reserveOut: uint256
        Returns:
            uint256
        """
        ...

    def getAmountIn(self, amountOut: uint256, reserveIn: uint256, reserveOut: uint256, *, from_: Optional[Union[Account, Address, str]] = None, to: Optional[Union[Account, Address, str]] = None, value: Union[int, str] = 0, gas_limit: Optional[Union[int, Literal["max"], Literal["auto"]]] = None, request_type: RequestType = 'call', gas_price: Optional[Union[int, str]] = None, max_fee_per_gas: Optional[Union[int, str]] = None, max_priority_fee_per_gas: Optional[Union[int, str]] = None, access_list: Optional[Union[Dict[Union[Account, Address, str], List[int]], Literal["auto"]]] = None, type: Optional[int] = None, block: Optional[Union[int, Literal["latest"], Literal["pending"], Literal["earliest"], Literal["safe"], Literal["finalized"]]] = None, confirmations: Optional[int] = None) -> Union[uint256, TransactionAbc[uint256], int, Tuple[Dict[Address, List[int]], int]]:
        """
        [Source code](file:///Users/dteiml/p/hacker-dom/woke-uniswap-v2/src/UniswapV2Router02.sol#414)

        Args:
            amountOut: uint256
            reserveIn: uint256
            reserveOut: uint256
        Returns:
            uint256
        """
        return self._execute(self.chain, request_type, "85f8c259", [amountOut, reserveIn, reserveOut], True if request_type == "tx" else False, uint256, from_, to if to is not None else str(self.address), value, gas_limit, gas_price, max_fee_per_gas, max_priority_fee_per_gas, access_list, type, block, confirmations)

    @overload
    def getAmountsOut(self, amountIn: uint256, path: List[Union[Account, Address]], *, from_: Optional[Union[Account, Address, str]] = None, to: Optional[Union[Account, Address, str]] = None, value: Union[int, str] = 0, gas_limit: Optional[Union[int, Literal["max"], Literal["auto"]]] = None, request_type: Literal["call"] = "call", gas_price: Optional[Union[int, str]] = None, max_fee_per_gas: Optional[Union[int, str]] = None, max_priority_fee_per_gas: Optional[Union[int, str]] = None, access_list: Optional[Union[Dict[Union[Account, Address, str], List[int]], Literal["auto"]]] = None, type: Optional[int] = None, block: Optional[Union[int, Literal["latest"], Literal["pending"], Literal["earliest"], Literal["safe"], Literal["finalized"]]] = None, confirmations: Optional[int] = None) -> List[uint256]:
        """
        [Source code](file:///Users/dteiml/p/hacker-dom/woke-uniswap-v2/src/UniswapV2Router02.sol#423)

        Args:
            amountIn: uint256
            path: address[]
        Returns:
            uint256[]
        """
        ...

    @overload
    def getAmountsOut(self, amountIn: uint256, path: List[Union[Account, Address]], *, from_: Optional[Union[Account, Address, str]] = None, to: Optional[Union[Account, Address, str]] = None, value: Union[int, str] = 0, gas_limit: Optional[Union[int, Literal["max"], Literal["auto"]]] = None, request_type: Literal["estimate"], gas_price: Optional[Union[int, str]] = None, max_fee_per_gas: Optional[Union[int, str]] = None, max_priority_fee_per_gas: Optional[Union[int, str]] = None, access_list: Optional[Union[Dict[Union[Account, Address, str], List[int]], Literal["auto"]]] = None, type: Optional[int] = None, block: Optional[Union[int, Literal["latest"], Literal["pending"], Literal["earliest"], Literal["safe"], Literal["finalized"]]] = None, confirmations: Optional[int] = None) -> int:
        """
        [Source code](file:///Users/dteiml/p/hacker-dom/woke-uniswap-v2/src/UniswapV2Router02.sol#423)

        Args:
            amountIn: uint256
            path: address[]
        Returns:
            uint256[]
        """
        ...

    @overload
    def getAmountsOut(self, amountIn: uint256, path: List[Union[Account, Address]], *, from_: Optional[Union[Account, Address, str]] = None, to: Optional[Union[Account, Address, str]] = None, value: Union[int, str] = 0, gas_limit: Optional[Union[int, Literal["max"], Literal["auto"]]] = None, request_type: Literal["access_list"], gas_price: Optional[Union[int, str]] = None, max_fee_per_gas: Optional[Union[int, str]] = None, max_priority_fee_per_gas: Optional[Union[int, str]] = None, access_list: Optional[Union[Dict[Union[Account, Address, str], List[int]], Literal["auto"]]] = None, type: Optional[int] = None, block: Optional[Union[int, Literal["latest"], Literal["pending"], Literal["earliest"], Literal["safe"], Literal["finalized"]]] = None, confirmations: Optional[int] = None) -> Tuple[Dict[Address, List[int]], int]:
        """
        [Source code](file:///Users/dteiml/p/hacker-dom/woke-uniswap-v2/src/UniswapV2Router02.sol#423)

        Args:
            amountIn: uint256
            path: address[]
        Returns:
            uint256[]
        """
        ...

    @overload
    def getAmountsOut(self, amountIn: uint256, path: List[Union[Account, Address]], *, from_: Optional[Union[Account, Address, str]] = None, to: Optional[Union[Account, Address, str]] = None, value: Union[int, str] = 0, gas_limit: Optional[Union[int, Literal["max"], Literal["auto"]]] = None, request_type: Literal["tx"], gas_price: Optional[Union[int, str]] = None, max_fee_per_gas: Optional[Union[int, str]] = None, max_priority_fee_per_gas: Optional[Union[int, str]] = None, access_list: Optional[Union[Dict[Union[Account, Address, str], List[int]], Literal["auto"]]] = None, type: Optional[int] = None, block: Optional[Union[int, Literal["latest"], Literal["pending"], Literal["earliest"], Literal["safe"], Literal["finalized"]]] = None, confirmations: Optional[int] = None) -> TransactionAbc[List[uint256]]:
        """
        [Source code](file:///Users/dteiml/p/hacker-dom/woke-uniswap-v2/src/UniswapV2Router02.sol#423)

        Args:
            amountIn: uint256
            path: address[]
        Returns:
            uint256[]
        """
        ...

    def getAmountsOut(self, amountIn: uint256, path: List[Union[Account, Address]], *, from_: Optional[Union[Account, Address, str]] = None, to: Optional[Union[Account, Address, str]] = None, value: Union[int, str] = 0, gas_limit: Optional[Union[int, Literal["max"], Literal["auto"]]] = None, request_type: RequestType = 'call', gas_price: Optional[Union[int, str]] = None, max_fee_per_gas: Optional[Union[int, str]] = None, max_priority_fee_per_gas: Optional[Union[int, str]] = None, access_list: Optional[Union[Dict[Union[Account, Address, str], List[int]], Literal["auto"]]] = None, type: Optional[int] = None, block: Optional[Union[int, Literal["latest"], Literal["pending"], Literal["earliest"], Literal["safe"], Literal["finalized"]]] = None, confirmations: Optional[int] = None) -> Union[List[uint256], TransactionAbc[List[uint256]], int, Tuple[Dict[Address, List[int]], int]]:
        """
        [Source code](file:///Users/dteiml/p/hacker-dom/woke-uniswap-v2/src/UniswapV2Router02.sol#423)

        Args:
            amountIn: uint256
            path: address[]
        Returns:
            uint256[]
        """
        return self._execute(self.chain, request_type, "d06ca61f", [amountIn, path], True if request_type == "tx" else False, List[uint256], from_, to if to is not None else str(self.address), value, gas_limit, gas_price, max_fee_per_gas, max_priority_fee_per_gas, access_list, type, block, confirmations)

    @overload
    def getAmountsIn(self, amountOut: uint256, path: List[Union[Account, Address]], *, from_: Optional[Union[Account, Address, str]] = None, to: Optional[Union[Account, Address, str]] = None, value: Union[int, str] = 0, gas_limit: Optional[Union[int, Literal["max"], Literal["auto"]]] = None, request_type: Literal["call"] = "call", gas_price: Optional[Union[int, str]] = None, max_fee_per_gas: Optional[Union[int, str]] = None, max_priority_fee_per_gas: Optional[Union[int, str]] = None, access_list: Optional[Union[Dict[Union[Account, Address, str], List[int]], Literal["auto"]]] = None, type: Optional[int] = None, block: Optional[Union[int, Literal["latest"], Literal["pending"], Literal["earliest"], Literal["safe"], Literal["finalized"]]] = None, confirmations: Optional[int] = None) -> List[uint256]:
        """
        [Source code](file:///Users/dteiml/p/hacker-dom/woke-uniswap-v2/src/UniswapV2Router02.sol#432)

        Args:
            amountOut: uint256
            path: address[]
        Returns:
            uint256[]
        """
        ...

    @overload
    def getAmountsIn(self, amountOut: uint256, path: List[Union[Account, Address]], *, from_: Optional[Union[Account, Address, str]] = None, to: Optional[Union[Account, Address, str]] = None, value: Union[int, str] = 0, gas_limit: Optional[Union[int, Literal["max"], Literal["auto"]]] = None, request_type: Literal["estimate"], gas_price: Optional[Union[int, str]] = None, max_fee_per_gas: Optional[Union[int, str]] = None, max_priority_fee_per_gas: Optional[Union[int, str]] = None, access_list: Optional[Union[Dict[Union[Account, Address, str], List[int]], Literal["auto"]]] = None, type: Optional[int] = None, block: Optional[Union[int, Literal["latest"], Literal["pending"], Literal["earliest"], Literal["safe"], Literal["finalized"]]] = None, confirmations: Optional[int] = None) -> int:
        """
        [Source code](file:///Users/dteiml/p/hacker-dom/woke-uniswap-v2/src/UniswapV2Router02.sol#432)

        Args:
            amountOut: uint256
            path: address[]
        Returns:
            uint256[]
        """
        ...

    @overload
    def getAmountsIn(self, amountOut: uint256, path: List[Union[Account, Address]], *, from_: Optional[Union[Account, Address, str]] = None, to: Optional[Union[Account, Address, str]] = None, value: Union[int, str] = 0, gas_limit: Optional[Union[int, Literal["max"], Literal["auto"]]] = None, request_type: Literal["access_list"], gas_price: Optional[Union[int, str]] = None, max_fee_per_gas: Optional[Union[int, str]] = None, max_priority_fee_per_gas: Optional[Union[int, str]] = None, access_list: Optional[Union[Dict[Union[Account, Address, str], List[int]], Literal["auto"]]] = None, type: Optional[int] = None, block: Optional[Union[int, Literal["latest"], Literal["pending"], Literal["earliest"], Literal["safe"], Literal["finalized"]]] = None, confirmations: Optional[int] = None) -> Tuple[Dict[Address, List[int]], int]:
        """
        [Source code](file:///Users/dteiml/p/hacker-dom/woke-uniswap-v2/src/UniswapV2Router02.sol#432)

        Args:
            amountOut: uint256
            path: address[]
        Returns:
            uint256[]
        """
        ...

    @overload
    def getAmountsIn(self, amountOut: uint256, path: List[Union[Account, Address]], *, from_: Optional[Union[Account, Address, str]] = None, to: Optional[Union[Account, Address, str]] = None, value: Union[int, str] = 0, gas_limit: Optional[Union[int, Literal["max"], Literal["auto"]]] = None, request_type: Literal["tx"], gas_price: Optional[Union[int, str]] = None, max_fee_per_gas: Optional[Union[int, str]] = None, max_priority_fee_per_gas: Optional[Union[int, str]] = None, access_list: Optional[Union[Dict[Union[Account, Address, str], List[int]], Literal["auto"]]] = None, type: Optional[int] = None, block: Optional[Union[int, Literal["latest"], Literal["pending"], Literal["earliest"], Literal["safe"], Literal["finalized"]]] = None, confirmations: Optional[int] = None) -> TransactionAbc[List[uint256]]:
        """
        [Source code](file:///Users/dteiml/p/hacker-dom/woke-uniswap-v2/src/UniswapV2Router02.sol#432)

        Args:
            amountOut: uint256
            path: address[]
        Returns:
            uint256[]
        """
        ...

    def getAmountsIn(self, amountOut: uint256, path: List[Union[Account, Address]], *, from_: Optional[Union[Account, Address, str]] = None, to: Optional[Union[Account, Address, str]] = None, value: Union[int, str] = 0, gas_limit: Optional[Union[int, Literal["max"], Literal["auto"]]] = None, request_type: RequestType = 'call', gas_price: Optional[Union[int, str]] = None, max_fee_per_gas: Optional[Union[int, str]] = None, max_priority_fee_per_gas: Optional[Union[int, str]] = None, access_list: Optional[Union[Dict[Union[Account, Address, str], List[int]], Literal["auto"]]] = None, type: Optional[int] = None, block: Optional[Union[int, Literal["latest"], Literal["pending"], Literal["earliest"], Literal["safe"], Literal["finalized"]]] = None, confirmations: Optional[int] = None) -> Union[List[uint256], TransactionAbc[List[uint256]], int, Tuple[Dict[Address, List[int]], int]]:
        """
        [Source code](file:///Users/dteiml/p/hacker-dom/woke-uniswap-v2/src/UniswapV2Router02.sol#432)

        Args:
            amountOut: uint256
            path: address[]
        Returns:
            uint256[]
        """
        return self._execute(self.chain, request_type, "1f00ca74", [amountOut, path], True if request_type == "tx" else False, List[uint256], from_, to if to is not None else str(self.address), value, gas_limit, gas_price, max_fee_per_gas, max_priority_fee_per_gas, access_list, type, block, confirmations)

UniswapV2Router02.factory.selector = b'\xc4Z\x01U'
UniswapV2Router02.WETH.selector = b'\xad\\FH'
UniswapV2Router02.addLiquidity.selector = b'\xe8\xe37\x00'
UniswapV2Router02.addLiquidityETH.selector = b'\xf3\x05\xd7\x19'
UniswapV2Router02.removeLiquidity.selector = b'\xba\xa2\xab\xde'
UniswapV2Router02.removeLiquidityETH.selector = b'\x02u\x1c\xec'
UniswapV2Router02.removeLiquidityWithPermit.selector = b'!\x95\x99\\'
UniswapV2Router02.removeLiquidityETHWithPermit.selector = b'\xde\xd98*'
UniswapV2Router02.removeLiquidityETHSupportingFeeOnTransferTokens.selector = b'\xaf)y\xeb'
UniswapV2Router02.removeLiquidityETHWithPermitSupportingFeeOnTransferTokens.selector = b'[\rY\x84'
UniswapV2Router02.swapExactTokensForTokens.selector = b'8\xed\x179'
UniswapV2Router02.swapTokensForExactTokens.selector = b'\x88\x03\xdb\xee'
UniswapV2Router02.swapExactETHForTokens.selector = b'\x7f\xf3j\xb5'
UniswapV2Router02.swapTokensForExactETH.selector = b'J%\xd9J'
UniswapV2Router02.swapExactTokensForETH.selector = b'\x18\xcb\xaf\xe5'
UniswapV2Router02.swapETHForExactTokens.selector = b'\xfb;\xdbA'
UniswapV2Router02.swapExactTokensForTokensSupportingFeeOnTransferTokens.selector = b'\\\x11\xd7\x95'
UniswapV2Router02.swapExactETHForTokensSupportingFeeOnTransferTokens.selector = b'\xb6\xf9\xde\x95'
UniswapV2Router02.swapExactTokensForETHSupportingFeeOnTransferTokens.selector = b'y\x1a\xc9G'
UniswapV2Router02.quote.selector = b'\xada]\xec'
UniswapV2Router02.getAmountOut.selector = b'\x05MP\xd4'
UniswapV2Router02.getAmountIn.selector = b'\x85\xf8\xc2Y'
UniswapV2Router02.getAmountsOut.selector = b'\xd0l\xa6\x1f'
UniswapV2Router02.getAmountsIn.selector = b'\x1f\x00\xcat'
