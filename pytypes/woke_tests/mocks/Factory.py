
from __future__ import annotations

import dataclasses
from typing import List, Dict, Optional, overload, Union, Callable, Tuple
from typing_extensions import Literal

from woke.development.core import Contract, Library, Address, Account, Chain, RequestType
from woke.development.primitive_types import *
from woke.development.transactions import TransactionAbc, TransactionRevertedError

from enum import IntEnum



class Factory(Contract):
    """
    [Source code](file:///Users/dteiml/p/hacker-dom/woke-uniswap-v2/woke_tests/mocks/Factory.sol#5)
    """
    _abi = {b'\xc9\xc6S\x96': {'inputs': [{'internalType': 'address', 'name': 'token0', 'type': 'address'}, {'internalType': 'address', 'name': 'token1', 'type': 'address'}], 'name': 'createPair', 'outputs': [], 'stateMutability': 'nonpayable', 'type': 'function'}, b'\x01~~X': {'inputs': [], 'name': 'feeTo', 'outputs': [{'internalType': 'address', 'name': '', 'type': 'address'}], 'stateMutability': 'view', 'type': 'function'}}
    _creation_code = "60806040525f805f6101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555034801561004e575f80fd5b50614a578061005c5f395ff3fe608060405234801561000f575f80fd5b5060043610610034575f3560e01c8063017e7e5814610038578063c9c6539614610056575b5f80fd5b610040610072565b60405161004d91906101b2565b60405180910390f35b610070600480360381019061006b91906101f9565b610095565b005b5f8054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b5f6040516100a290610166565b604051809103905ff0801580156100bb573d5f803e3d5ffd5b5090508073ffffffffffffffffffffffffffffffffffffffff1663485cc95584846040518363ffffffff1660e01b81526004016100f9929190610237565b5f604051808303815f87803b158015610110575f80fd5b505af1158015610122573d5f803e3d5ffd5b505050507fa92a2b95c8d8436f6ac4c673c61487364f877efb9534d4296fad8ef904546c948383836040516101599392919061025e565b60405180910390a1505050565b61478e8061029483390190565b5f73ffffffffffffffffffffffffffffffffffffffff82169050919050565b5f61019c82610173565b9050919050565b6101ac81610192565b82525050565b5f6020820190506101c55f8301846101a3565b92915050565b5f80fd5b6101d881610192565b81146101e2575f80fd5b50565b5f813590506101f3816101cf565b92915050565b5f806040838503121561020f5761020e6101cb565b5b5f61021c858286016101e5565b925050602061022d858286016101e5565b9150509250929050565b5f60408201905061024a5f8301856101a3565b61025760208301846101a3565b9392505050565b5f6060820190506102715f8301866101a3565b61027e60208301856101a3565b61028b60408301846101a3565b94935050505056fe60806040526001600c5534801562000015575f80fd5b505f4690507f8b73c3c69bb8fe3d512ecc4cf759cc79239f7b179b0ffacaa9a75d522b39400f6040518060400160405280600a81526020017f556e697377617020563200000000000000000000000000000000000000000000815250805190602001206040518060400160405280600181526020017f3100000000000000000000000000000000000000000000000000000000000000815250805190602001208330604051602001620000cd959493929190620001a7565b60405160208183030381529060405280519060200120600381905550503360055f6101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555062000202565b5f819050919050565b620001448162000130565b82525050565b5f819050919050565b6200015e816200014a565b82525050565b5f73ffffffffffffffffffffffffffffffffffffffff82169050919050565b5f6200018f8262000164565b9050919050565b620001a18162000183565b82525050565b5f60a082019050620001bc5f83018862000139565b620001cb602083018762000139565b620001da604083018662000139565b620001e9606083018562000153565b620001f8608083018462000196565b9695505050505050565b61457e80620002105f395ff3fe608060405234801561000f575f80fd5b50600436106101a7575f3560e01c80636a627842116100f7578063ba9a7a5611610095578063d21220a71161006f578063d21220a7146104d8578063d505accf146104f6578063dd62ed3e14610512578063fff6cae914610542576101a7565b8063ba9a7a5614610480578063bc25cf771461049e578063c45a0155146104ba576101a7565b80637ecebe00116100d15780637ecebe00146103d157806389afcb441461040157806395d89b4114610432578063a9059cbb14610450576101a7565b80636a6278421461035357806370a08231146103835780637464fc3d146103b3576101a7565b806323b872dd116101645780633644e5151161013e5780633644e515146102dd578063485cc955146102fb5780635909c0d5146103175780635a3d549314610335576101a7565b806323b872dd1461027157806330adf81f146102a1578063313ce567146102bf576101a7565b8063022c0d9f146101ab57806306fdde03146101c75780630902f1ac146101e5578063095ea7b3146102055780630dfe16811461023557806318160ddd14610253575b5f80fd5b6101c560048036038101906101c09190613283565b61054c565b005b6101cf610b81565b6040516101dc9190613391565b60405180910390f35b6101ed610bba565b6040516101fc939291906133f7565b60405180910390f35b61021f600480360381019061021a919061342c565b610c14565b60405161022c9190613484565b60405180910390f35b61023d610c2a565b60405161024a91906134ac565b60405180910390f35b61025b610c4f565b60405161026891906134d4565b60405180910390f35b61028b600480360381019061028691906134ed565b610c54565b6040516102989190613484565b60405180910390f35b6102a9610e12565b6040516102b69190613555565b60405180910390f35b6102c7610e38565b6040516102d49190613589565b60405180910390f35b6102e5610e3d565b6040516102f29190613555565b60405180910390f35b610315600480360381019061031091906135a2565b610e43565b005b61031f610f56565b60405161032c91906134d4565b60405180910390f35b61033d610f5c565b60405161034a91906134d4565b60405180910390f35b61036d600480360381019061036891906135e0565b610f62565b60405161037a91906134d4565b60405180910390f35b61039d600480360381019061039891906135e0565b611699565b6040516103aa91906134d4565b60405180910390f35b6103bb6116ae565b6040516103c891906134d4565b60405180910390f35b6103eb60048036038101906103e691906135e0565b6116b4565b6040516103f891906134d4565b60405180910390f35b61041b600480360381019061041691906135e0565b6116c9565b60405161042992919061360b565b60405180910390f35b61043a611b5a565b6040516104479190613391565b60405180910390f35b61046a6004803603810190610465919061342c565b611b93565b6040516104779190613484565b60405180910390f35b610488611ba9565b60405161049591906134d4565b60405180910390f35b6104b860048036038101906104b391906135e0565b611baf565b005b6104c2611dd1565b6040516104cf91906134ac565b60405180910390f35b6104e0611df6565b6040516104ed91906134ac565b60405180910390f35b610510600480360381019061050b9190613686565b611e1b565b005b61052c600480360381019061052791906135a2565b612039565b60405161053991906134d4565b60405180910390f35b61054a612059565b005b6001600c5414610591576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016105889061376d565b60405180910390fd5b5f600c819055505f8511806105a557505f84115b6105e4576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016105db906137fb565b60405180910390fd5b5f806105ee610bba565b5091509150816dffffffffffffffffffffffffffff16871080156106215750806dffffffffffffffffffffffffffff1686105b610660576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161065790613889565b60405180910390fd5b5f805f60065f9054906101000a900473ffffffffffffffffffffffffffffffffffffffff1690505f60075f9054906101000a900473ffffffffffffffffffffffffffffffffffffffff1690508173ffffffffffffffffffffffffffffffffffffffff168973ffffffffffffffffffffffffffffffffffffffff161415801561071457508073ffffffffffffffffffffffffffffffffffffffff168973ffffffffffffffffffffffffffffffffffffffff1614155b610753576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161074a906138f1565b60405180910390fd5b5f8b111561076757610766828a8d612222565b5b5f8a111561077b5761077a818a8c612222565b5b5f8888905011156107f5578873ffffffffffffffffffffffffffffffffffffffff166310d1e85c338d8d8c8c6040518663ffffffff1660e01b81526004016107c7959493929190613959565b5f604051808303815f87803b1580156107de575f80fd5b505af11580156107f0573d5f803e3d5ffd5b505050505b8173ffffffffffffffffffffffffffffffffffffffff166370a08231306040518263ffffffff1660e01b815260040161082e91906134ac565b602060405180830381865afa158015610849573d5f803e3d5ffd5b505050506040513d601f19601f8201168201806040525081019061086d91906139b9565b93508073ffffffffffffffffffffffffffffffffffffffff166370a08231306040518263ffffffff1660e01b81526004016108a891906134ac565b602060405180830381865afa1580156108c3573d5f803e3d5ffd5b505050506040513d601f19601f820116820180604052508101906108e791906139b9565b925050505f89856dffffffffffffffffffffffffffff166109089190613a11565b8311610914575f61093c565b89856dffffffffffffffffffffffffffff166109309190613a11565b8361093b9190613a11565b5b90505f89856dffffffffffffffffffffffffffff1661095b9190613a11565b8311610967575f61098f565b89856dffffffffffffffffffffffffffff166109839190613a11565b8361098e9190613a11565b5b90505f82118061099e57505f81115b6109dd576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016109d490613ab4565b60405180910390fd5b5f610a186109f56003856123a690919063ffffffff16565b610a0a6103e8886123a690919063ffffffff16565b61241290919063ffffffff16565b90505f610a55610a326003856123a690919063ffffffff16565b610a476103e8886123a690919063ffffffff16565b61241290919063ffffffff16565b9050610a9f620f4240610a91896dffffffffffffffffffffffffffff168b6dffffffffffffffffffffffffffff166123a690919063ffffffff16565b6123a690919063ffffffff16565b610ab282846123a690919063ffffffff16565b1015610af3576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610aea90613b1c565b60405180910390fd5b5050610b018484888861246a565b8873ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff167fd78ad95fa46c994b6551d0da85fc275fe613ce37657fb8d5e3d130840159d82284848f8f604051610b649493929190613b3a565b60405180910390a35050505050506001600c819055505050505050565b6040518060400160405280600a81526020017f556e69737761702056320000000000000000000000000000000000000000000081525081565b5f805f60085f9054906101000a90046dffffffffffffffffffffffffffff1692506008600e9054906101000a90046dffffffffffffffffffffffffffff1691506008601c9054906101000a900463ffffffff169050909192565b5f610c20338484612755565b6001905092915050565b60065f9054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b5f5481565b5f7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff60025f8673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020015f205f3373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020015f205414610dfc57610d7f8260025f8773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020015f205f3373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020015f205461241290919063ffffffff16565b60025f8673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020015f205f3373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020015f20819055505b610e0784848461283c565b600190509392505050565b7f6e71edae12b1b97f4d1f60370fef10105fa2faae0126114a169c64845d6126c95f1b81565b601281565b60035481565b60055f9054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614610ed2576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610ec990613bc7565b60405180910390fd5b8160065f6101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508060075f6101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055505050565b60095481565b600a5481565b5f6001600c5414610fa8576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610f9f9061376d565b60405180910390fd5b5f600c819055505f80610fb9610bba565b50915091505f60065f9054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166370a08231306040518263ffffffff1660e01b815260040161101991906134ac565b602060405180830381865afa158015611034573d5f803e3d5ffd5b505050506040513d601f19601f8201168201806040525081019061105891906139b9565b90505f60075f9054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166370a08231306040518263ffffffff1660e01b81526004016110b591906134ac565b602060405180830381865afa1580156110d0573d5f803e3d5ffd5b505050506040513d601f19601f820116820180604052508101906110f491906139b9565b90505f61111a856dffffffffffffffffffffffffffff168461241290919063ffffffff16565b90505f611140856dffffffffffffffffffffffffffff168461241290919063ffffffff16565b90505f61114d87876129c8565b90505f805490506111ca6040518060400160405280600781526020017f616d6f756e743000000000000000000000000000000000000000000000000000815250856040518060400160405280600781526020017f616d6f756e74310000000000000000000000000000000000000000000000000081525086612b89565b6112406040518060400160405280600881526020017f62616c616e636530000000000000000000000000000000000000000000000000815250876040518060400160405280600881526020017f62616c616e63653100000000000000000000000000000000000000000000000081525088612b89565b5f81036112c8576112766103e861126861126386886123a690919063ffffffff16565b612c2b565b61241290919063ffffffff16565b98506112b76040518060400160405280600981526020017f6c697175696469747900000000000000000000000000000000000000000000008152508a612ca2565b6112c35f6103e8612d3e565b61136e565b61132c886dffffffffffffffffffffffffffff166112ef83876123a690919063ffffffff16565b6112f99190613c12565b886dffffffffffffffffffffffffffff1661131d84876123a690919063ffffffff16565b6113279190613c12565b612e51565b985061136d6040518060400160405280600981526020017f6c697175696469747900000000000000000000000000000000000000000000008152508a612ca2565b5b5f89116113b0576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016113a790613cb2565b60405180910390fd5b6114266040518060400160405280600281526020017f746f0000000000000000000000000000000000000000000000000000000000008152508b6040518060400160405280600981526020017f6c697175696469747900000000000000000000000000000000000000000000008152508c612e69565b6114308a8a612d3e565b6114a66040518060400160405280600881526020017f62616c616e636530000000000000000000000000000000000000000000000000815250876040518060400160405280600881526020017f62616c616e63653100000000000000000000000000000000000000000000000081525088612b89565b6115736040518060400160405280600881526020017f726573657276653000000000000000000000000000000000000000000000000081525060085f9054906101000a90046dffffffffffffffffffffffffffff166dffffffffffffffffffffffffffff166040518060400160405280600881526020017f72657365727665310000000000000000000000000000000000000000000000008152506008600e9054906101000a90046dffffffffffffffffffffffffffff166dffffffffffffffffffffffffffff16612b89565b61157f86868a8a61246a565b81156115f6576115ef6008600e9054906101000a90046dffffffffffffffffffffffffffff166dffffffffffffffffffffffffffff1660085f9054906101000a90046dffffffffffffffffffffffffffff166dffffffffffffffffffffffffffff166123a690919063ffffffff16565b600b819055505b6116346040518060400160405280600381526020017f456e640000000000000000000000000000000000000000000000000000000000815250612f0b565b3373ffffffffffffffffffffffffffffffffffffffff167f4c209b5fc8ad50758f13e2e1088ba56a560dff690a1c6fef26394f4c03821c4f858560405161167c92919061360b565b60405180910390a250505050505050506001600c81905550919050565b6001602052805f5260405f205f915090505481565b600b5481565b6004602052805f5260405f205f915090505481565b5f806001600c5414611710576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016117079061376d565b60405180910390fd5b5f600c819055505f80611721610bba565b50915091505f60065f9054906101000a900473ffffffffffffffffffffffffffffffffffffffff1690505f60075f9054906101000a900473ffffffffffffffffffffffffffffffffffffffff1690505f8273ffffffffffffffffffffffffffffffffffffffff166370a08231306040518263ffffffff1660e01b81526004016117aa91906134ac565b602060405180830381865afa1580156117c5573d5f803e3d5ffd5b505050506040513d601f19601f820116820180604052508101906117e991906139b9565b90505f8273ffffffffffffffffffffffffffffffffffffffff166370a08231306040518263ffffffff1660e01b815260040161182591906134ac565b602060405180830381865afa158015611840573d5f803e3d5ffd5b505050506040513d601f19601f8201168201806040525081019061186491906139b9565b90505f60015f3073ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020015f205490505f6118b288886129c8565b90505f80549050806118cd86856123a690919063ffffffff16565b6118d79190613c12565b9a50806118ed85856123a690919063ffffffff16565b6118f79190613c12565b99505f8b11801561190757505f8a115b611946576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161193d90613d40565b60405180910390fd5b6119503084612fa4565b61195b878d8d612222565b611966868d8c612222565b8673ffffffffffffffffffffffffffffffffffffffff166370a08231306040518263ffffffff1660e01b815260040161199f91906134ac565b602060405180830381865afa1580156119ba573d5f803e3d5ffd5b505050506040513d601f19601f820116820180604052508101906119de91906139b9565b94508573ffffffffffffffffffffffffffffffffffffffff166370a08231306040518263ffffffff1660e01b8152600401611a1991906134ac565b602060405180830381865afa158015611a34573d5f803e3d5ffd5b505050506040513d601f19601f82011682018060405250810190611a5891906139b9565b9350611a6685858b8b61246a565b8115611add57611ad66008600e9054906101000a90046dffffffffffffffffffffffffffff166dffffffffffffffffffffffffffff1660085f9054906101000a90046dffffffffffffffffffffffffffff166dffffffffffffffffffffffffffff166123a690919063ffffffff16565b600b819055505b8b73ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff167fdccd412f0b1252819cb1fd330b93224ca42612892bb3f4f789976e6d819364968d8d604051611b3c92919061360b565b60405180910390a35050505050505050506001600c81905550915091565b6040518060400160405280600681526020017f554e492d5632000000000000000000000000000000000000000000000000000081525081565b5f611b9f33848461283c565b6001905092915050565b6103e881565b6001600c5414611bf4576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611beb9061376d565b60405180910390fd5b5f600c819055505f60065f9054906101000a900473ffffffffffffffffffffffffffffffffffffffff1690505f60075f9054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050611d048284611cff60085f9054906101000a90046dffffffffffffffffffffffffffff166dffffffffffffffffffffffffffff168673ffffffffffffffffffffffffffffffffffffffff166370a08231306040518263ffffffff1660e01b8152600401611cb291906134ac565b602060405180830381865afa158015611ccd573d5f803e3d5ffd5b505050506040513d601f19601f82011682018060405250810190611cf191906139b9565b61241290919063ffffffff16565b612222565b611dc48184611dbf6008600e9054906101000a90046dffffffffffffffffffffffffffff166dffffffffffffffffffffffffffff168573ffffffffffffffffffffffffffffffffffffffff166370a08231306040518263ffffffff1660e01b8152600401611d7291906134ac565b602060405180830381865afa158015611d8d573d5f803e3d5ffd5b505050506040513d601f19601f82011682018060405250810190611db191906139b9565b61241290919063ffffffff16565b612222565b50506001600c8190555050565b60055f9054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b60075f9054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b42841015611e5e576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611e5590613da8565b60405180910390fd5b5f6003547f6e71edae12b1b97f4d1f60370fef10105fa2faae0126114a169c64845d6126c95f1b89898960045f8e73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020015f205f815480929190611ed590613dc6565b919050558a604051602001611eef96959493929190613e0d565b60405160208183030381529060405280519060200120604051602001611f16929190613ee0565b6040516020818303038152906040528051906020012090505f6001828686866040515f8152602001604052604051611f519493929190613f16565b6020604051602081039080840390855afa158015611f71573d5f803e3d5ffd5b5050506020604051035190505f73ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1614158015611fe457508873ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff16145b612023576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161201a90613fa3565b60405180910390fd5b61202e898989612755565b505050505050505050565b6002602052815f5260405f20602052805f5260405f205f91509150505481565b6001600c541461209e576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016120959061376d565b60405180910390fd5b5f600c8190555061221860065f9054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166370a08231306040518263ffffffff1660e01b815260040161210291906134ac565b602060405180830381865afa15801561211d573d5f803e3d5ffd5b505050506040513d601f19601f8201168201806040525081019061214191906139b9565b60075f9054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166370a08231306040518263ffffffff1660e01b815260040161219b91906134ac565b602060405180830381865afa1580156121b6573d5f803e3d5ffd5b505050506040513d601f19601f820116820180604052508101906121da91906139b9565b60085f9054906101000a90046dffffffffffffffffffffffffffff166008600e9054906101000a90046dffffffffffffffffffffffffffff1661246a565b6001600c81905550565b5f808473ffffffffffffffffffffffffffffffffffffffff166040518060400160405280601981526020017f7472616e7366657228616464726573732c75696e74323536290000000000000081525080519060200120858560405160240161228b929190613fc1565b604051602081830303815290604052907bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19166020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff83818316178352505050506040516122f5919061402c565b5f604051808303815f865af19150503d805f811461232e576040519150601f19603f3d011682016040523d82523d5f602084013e612333565b606091505b509150915081801561236057505f8151148061235f57508080602001905181019061235e919061406c565b5b5b61239f576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401612396906140e1565b60405180910390fd5b5050505050565b5f808214806123cd5750828283856123be91906140ff565b9250826123cb9190613c12565b145b61240c576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016124039061418a565b60405180910390fd5b92915050565b5f8282846124209190613a11565b9150811115612464576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161245b906141f2565b60405180910390fd5b92915050565b6dffffffffffffffffffffffffffff8016841115801561249a57506dffffffffffffffffffffffffffff80168311155b6124d9576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016124d09061425a565b60405180910390fd5b5f640100000000426124eb9190614278565b90505f6008601c9054906101000a900463ffffffff168261250c91906142a8565b90505f8163ffffffff1611801561253357505f846dffffffffffffffffffffffffffff1614155b801561254f57505f836dffffffffffffffffffffffffffff1614155b15612653578063ffffffff1661259485612568866130b7565b7bffffffffffffffffffffffffffffffffffffffffffffffffffffffff166130ea90919063ffffffff16565b7bffffffffffffffffffffffffffffffffffffffffffffffffffffffff166125bc91906140ff565b60095f8282546125cc91906142df565b925050819055508063ffffffff16612613846125e7876130b7565b7bffffffffffffffffffffffffffffffffffffffffffffffffffffffff166130ea90919063ffffffff16565b7bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1661263b91906140ff565b600a5f82825461264b91906142df565b925050819055505b8560085f6101000a8154816dffffffffffffffffffffffffffff02191690836dffffffffffffffffffffffffffff160217905550846008600e6101000a8154816dffffffffffffffffffffffffffff02191690836dffffffffffffffffffffffffffff160217905550816008601c6101000a81548163ffffffff021916908363ffffffff1602179055507f1c411e9a96e071241c2f21f7726b17ae89e3cab4c78be50e062b03a9fffbbad160085f9054906101000a90046dffffffffffffffffffffffffffff166008600e9054906101000a90046dffffffffffffffffffffffffffff16604051612745929190614312565b60405180910390a1505050505050565b8060025f8573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020015f205f8473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020015f20819055508173ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b9258360405161282f91906134d4565b60405180910390a3505050565b61288c8160015f8673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020015f205461241290919063ffffffff16565b60015f8573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020015f208190555061291d8160015f8573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020015f205461310f90919063ffffffff16565b60015f8473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020015f20819055508173ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef836040516129bb91906134d4565b60405180910390a3505050565b5f8060055f9054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663017e7e586040518163ffffffff1660e01b8152600401602060405180830381865afa158015612a34573d5f803e3d5ffd5b505050506040513d601f19601f82011682018060405250810190612a58919061434d565b90505f73ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff16141591505f600b5490508215612b71575f8114612b6c575f612adb612ad6866dffffffffffffffffffffffffffff16886dffffffffffffffffffffffffffff166123a690919063ffffffff16565b612c2b565b90505f612ae783612c2b565b905080821115612b69575f612b18612b08838561241290919063ffffffff16565b5f546123a690919063ffffffff16565b90505f612b4183612b336005876123a690919063ffffffff16565b61310f90919063ffffffff16565b90505f8183612b509190613c12565b90505f811115612b6557612b648782612d3e565b5b5050505b50505b612b81565b5f8114612b80575f600b819055505b5b505092915050565b612c2584848484604051602401612ba39493929190614378565b6040516020818303038152906040527fc67ea9d1000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19166020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff8381831617835250505050613167565b50505050565b5f6003821115612c90578190505f6001600284612c489190613c12565b612c5291906142df565b90505b81811015612c8a578091506002818285612c6f9190613c12565b612c7991906142df565b612c839190613c12565b9050612c55565b50612c9d565b5f8214612c9c57600190505b5b919050565b612d3a8282604051602401612cb89291906143c9565b6040516020818303038152906040527fb60e72cc000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19166020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff8381831617835250505050613167565b5050565b612d52815f5461310f90919063ffffffff16565b5f81905550612da78160015f8573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020015f205461310f90919063ffffffff16565b60015f8473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020015f20819055508173ffffffffffffffffffffffffffffffffffffffff165f73ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef83604051612e4591906134d4565b60405180910390a35050565b5f818310612e5f5781612e61565b825b905092915050565b612f0584848484604051602401612e8394939291906143f7565b6040516020818303038152906040527f91d1112e000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19166020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff8381831617835250505050613167565b50505050565b612fa181604051602401612f1f9190613391565b6040516020818303038152906040527f41304fac000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19166020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff8381831617835250505050613167565b50565b612ff48160015f8573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020015f205461241290919063ffffffff16565b60015f8473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020015f2081905550613049815f5461241290919063ffffffff16565b5f819055505f73ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef836040516130ab91906134d4565b60405180910390a35050565b5f6e010000000000000000000000000000826dffffffffffffffffffffffffffff166130e3919061446f565b9050919050565b5f816dffffffffffffffffffffffffffff168361310791906144b0565b905092915050565b5f82828461311d91906142df565b9150811015613161576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016131589061452a565b60405180910390fd5b92915050565b5f815190505f6a636f6e736f6c652e6c6f679050602083015f808483855afa5050505050565b5f80fd5b5f80fd5b5f819050919050565b6131a781613195565b81146131b1575f80fd5b50565b5f813590506131c28161319e565b92915050565b5f73ffffffffffffffffffffffffffffffffffffffff82169050919050565b5f6131f1826131c8565b9050919050565b613201816131e7565b811461320b575f80fd5b50565b5f8135905061321c816131f8565b92915050565b5f80fd5b5f80fd5b5f80fd5b5f8083601f84011261324357613242613222565b5b8235905067ffffffffffffffff8111156132605761325f613226565b5b60208301915083600182028301111561327c5761327b61322a565b5b9250929050565b5f805f805f6080868803121561329c5761329b61318d565b5b5f6132a9888289016131b4565b95505060206132ba888289016131b4565b94505060406132cb8882890161320e565b935050606086013567ffffffffffffffff8111156132ec576132eb613191565b5b6132f88882890161322e565b92509250509295509295909350565b5f81519050919050565b5f82825260208201905092915050565b5f5b8381101561333e578082015181840152602081019050613323565b5f8484015250505050565b5f601f19601f8301169050919050565b5f61336382613307565b61336d8185613311565b935061337d818560208601613321565b61338681613349565b840191505092915050565b5f6020820190508181035f8301526133a98184613359565b905092915050565b5f6dffffffffffffffffffffffffffff82169050919050565b6133d3816133b1565b82525050565b5f63ffffffff82169050919050565b6133f1816133d9565b82525050565b5f60608201905061340a5f8301866133ca565b61341760208301856133ca565b61342460408301846133e8565b949350505050565b5f80604083850312156134425761344161318d565b5b5f61344f8582860161320e565b9250506020613460858286016131b4565b9150509250929050565b5f8115159050919050565b61347e8161346a565b82525050565b5f6020820190506134975f830184613475565b92915050565b6134a6816131e7565b82525050565b5f6020820190506134bf5f83018461349d565b92915050565b6134ce81613195565b82525050565b5f6020820190506134e75f8301846134c5565b92915050565b5f805f606084860312156135045761350361318d565b5b5f6135118682870161320e565b93505060206135228682870161320e565b9250506040613533868287016131b4565b9150509250925092565b5f819050919050565b61354f8161353d565b82525050565b5f6020820190506135685f830184613546565b92915050565b5f60ff82169050919050565b6135838161356e565b82525050565b5f60208201905061359c5f83018461357a565b92915050565b5f80604083850312156135b8576135b761318d565b5b5f6135c58582860161320e565b92505060206135d68582860161320e565b9150509250929050565b5f602082840312156135f5576135f461318d565b5b5f6136028482850161320e565b91505092915050565b5f60408201905061361e5f8301856134c5565b61362b60208301846134c5565b9392505050565b61363b8161356e565b8114613645575f80fd5b50565b5f8135905061365681613632565b92915050565b6136658161353d565b811461366f575f80fd5b50565b5f813590506136808161365c565b92915050565b5f805f805f805f60e0888a0312156136a1576136a061318d565b5b5f6136ae8a828b0161320e565b97505060206136bf8a828b0161320e565b96505060406136d08a828b016131b4565b95505060606136e18a828b016131b4565b94505060806136f28a828b01613648565b93505060a06137038a828b01613672565b92505060c06137148a828b01613672565b91505092959891949750929550565b7f556e697377617056323a204c4f434b45440000000000000000000000000000005f82015250565b5f613757601183613311565b915061376282613723565b602082019050919050565b5f6020820190508181035f8301526137848161374b565b9050919050565b7f556e697377617056323a20494e53554646494349454e545f4f55545055545f415f8201527f4d4f554e54000000000000000000000000000000000000000000000000000000602082015250565b5f6137e5602583613311565b91506137f08261378b565b604082019050919050565b5f6020820190508181035f830152613812816137d9565b9050919050565b7f556e697377617056323a20494e53554646494349454e545f4c495155494449545f8201527f5900000000000000000000000000000000000000000000000000000000000000602082015250565b5f613873602183613311565b915061387e82613819565b604082019050919050565b5f6020820190508181035f8301526138a081613867565b9050919050565b7f556e697377617056323a20494e56414c49445f544f00000000000000000000005f82015250565b5f6138db601583613311565b91506138e6826138a7565b602082019050919050565b5f6020820190508181035f830152613908816138cf565b9050919050565b5f82825260208201905092915050565b828183375f83830152505050565b5f613938838561390f565b935061394583858461391f565b61394e83613349565b840190509392505050565b5f60808201905061396c5f83018861349d565b61397960208301876134c5565b61398660408301866134c5565b818103606083015261399981848661392d565b90509695505050505050565b5f815190506139b38161319e565b92915050565b5f602082840312156139ce576139cd61318d565b5b5f6139db848285016139a5565b91505092915050565b7f4e487b71000000000000000000000000000000000000000000000000000000005f52601160045260245ffd5b5f613a1b82613195565b9150613a2683613195565b9250828203905081811115613a3e57613a3d6139e4565b5b92915050565b7f556e697377617056323a20494e53554646494349454e545f494e5055545f414d5f8201527f4f554e5400000000000000000000000000000000000000000000000000000000602082015250565b5f613a9e602483613311565b9150613aa982613a44565b604082019050919050565b5f6020820190508181035f830152613acb81613a92565b9050919050565b7f556e697377617056323a204b00000000000000000000000000000000000000005f82015250565b5f613b06600c83613311565b9150613b1182613ad2565b602082019050919050565b5f6020820190508181035f830152613b3381613afa565b9050919050565b5f608082019050613b4d5f8301876134c5565b613b5a60208301866134c5565b613b6760408301856134c5565b613b7460608301846134c5565b95945050505050565b7f556e697377617056323a20464f5242494444454e0000000000000000000000005f82015250565b5f613bb1601483613311565b9150613bbc82613b7d565b602082019050919050565b5f6020820190508181035f830152613bde81613ba5565b9050919050565b7f4e487b71000000000000000000000000000000000000000000000000000000005f52601260045260245ffd5b5f613c1c82613195565b9150613c2783613195565b925082613c3757613c36613be5565b5b828204905092915050565b7f556e697377617056323a20494e53554646494349454e545f4c495155494449545f8201527f595f4d494e544544000000000000000000000000000000000000000000000000602082015250565b5f613c9c602883613311565b9150613ca782613c42565b604082019050919050565b5f6020820190508181035f830152613cc981613c90565b9050919050565b7f556e697377617056323a20494e53554646494349454e545f4c495155494449545f8201527f595f4255524e4544000000000000000000000000000000000000000000000000602082015250565b5f613d2a602883613311565b9150613d3582613cd0565b604082019050919050565b5f6020820190508181035f830152613d5781613d1e565b9050919050565b7f556e697377617056323a204558504952454400000000000000000000000000005f82015250565b5f613d92601283613311565b9150613d9d82613d5e565b602082019050919050565b5f6020820190508181035f830152613dbf81613d86565b9050919050565b5f613dd082613195565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8203613e0257613e016139e4565b5b600182019050919050565b5f60c082019050613e205f830189613546565b613e2d602083018861349d565b613e3a604083018761349d565b613e4760608301866134c5565b613e5460808301856134c5565b613e6160a08301846134c5565b979650505050505050565b5f81905092915050565b7f19010000000000000000000000000000000000000000000000000000000000005f82015250565b5f613eaa600283613e6c565b9150613eb582613e76565b600282019050919050565b5f819050919050565b613eda613ed58261353d565b613ec0565b82525050565b5f613eea82613e9e565b9150613ef68285613ec9565b602082019150613f068284613ec9565b6020820191508190509392505050565b5f608082019050613f295f830187613546565b613f36602083018661357a565b613f436040830185613546565b613f506060830184613546565b95945050505050565b7f556e697377617056323a20494e56414c49445f5349474e4154555245000000005f82015250565b5f613f8d601c83613311565b9150613f9882613f59565b602082019050919050565b5f6020820190508181035f830152613fba81613f81565b9050919050565b5f604082019050613fd45f83018561349d565b613fe160208301846134c5565b9392505050565b5f81519050919050565b5f81905092915050565b5f61400682613fe8565b6140108185613ff2565b9350614020818560208601613321565b80840191505092915050565b5f6140378284613ffc565b915081905092915050565b61404b8161346a565b8114614055575f80fd5b50565b5f8151905061406681614042565b92915050565b5f602082840312156140815761408061318d565b5b5f61408e84828501614058565b91505092915050565b7f556e697377617056323a205452414e534645525f4641494c45440000000000005f82015250565b5f6140cb601a83613311565b91506140d682614097565b602082019050919050565b5f6020820190508181035f8301526140f8816140bf565b9050919050565b5f61410982613195565b915061411483613195565b925082820261412281613195565b91508282048414831517614139576141386139e4565b5b5092915050565b7f64732d6d6174682d6d756c2d6f766572666c6f770000000000000000000000005f82015250565b5f614174601483613311565b915061417f82614140565b602082019050919050565b5f6020820190508181035f8301526141a181614168565b9050919050565b7f64732d6d6174682d7375622d756e646572666c6f7700000000000000000000005f82015250565b5f6141dc601583613311565b91506141e7826141a8565b602082019050919050565b5f6020820190508181035f830152614209816141d0565b9050919050565b7f556e697377617056323a204f564552464c4f57000000000000000000000000005f82015250565b5f614244601383613311565b915061424f82614210565b602082019050919050565b5f6020820190508181035f83015261427181614238565b9050919050565b5f61428282613195565b915061428d83613195565b92508261429d5761429c613be5565b5b828206905092915050565b5f6142b2826133d9565b91506142bd836133d9565b9250828203905063ffffffff8111156142d9576142d86139e4565b5b92915050565b5f6142e982613195565b91506142f483613195565b925082820190508082111561430c5761430b6139e4565b5b92915050565b5f6040820190506143255f8301856133ca565b61433260208301846133ca565b9392505050565b5f81519050614347816131f8565b92915050565b5f602082840312156143625761436161318d565b5b5f61436f84828501614339565b91505092915050565b5f6080820190508181035f8301526143908187613359565b905061439f60208301866134c5565b81810360408301526143b18185613359565b90506143c060608301846134c5565b95945050505050565b5f6040820190508181035f8301526143e18185613359565b90506143f060208301846134c5565b9392505050565b5f6080820190508181035f83015261440f8187613359565b905061441e602083018661349d565b81810360408301526144308185613359565b905061443f60608301846134c5565b95945050505050565b5f7bffffffffffffffffffffffffffffffffffffffffffffffffffffffff82169050919050565b5f61447982614448565b915061448483614448565b925082820261449281614448565b915082820484148315176144a9576144a86139e4565b5b5092915050565b5f6144ba82614448565b91506144c583614448565b9250826144d5576144d4613be5565b5b828204905092915050565b7f64732d6d6174682d6164642d6f766572666c6f770000000000000000000000005f82015250565b5f614514601483613311565b915061451f826144e0565b602082019050919050565b5f6020820190508181035f83015261454181614508565b905091905056fea26469706673582212204cc1de582f488b163c056939c2c86b1b0197e0c360a74719a465c069ebc0ae7964736f6c63430008140033a2646970667358221220559a24b7154f5112a8b27bb93f9447e17286e46c4373e2aec46cb9ebd5897b7a64736f6c63430008140033"

    @overload
    @classmethod
    def deploy(cls, *, from_: Optional[Union[Account, Address, str]] = None, value: Union[int, str] = 0, gas_limit: Optional[Union[int, Literal["max"], Literal["auto"]]] = None, return_tx: Literal[False] = False, request_type: Literal["call"], chain: Optional[Chain] = None, gas_price: Optional[Union[int, str]] = None, max_fee_per_gas: Optional[Union[int, str]] = None, max_priority_fee_per_gas: Optional[Union[int, str]] = None, access_list: Optional[Union[Dict[Union[Account, Address, str], List[int]], Literal["auto"]]] = None, type: Optional[int] = None, block: Optional[Union[int, Literal["latest"], Literal["pending"], Literal["earliest"], Literal["safe"], Literal["finalized"]]] = None, confirmations: Optional[int] = None) -> bytearray:
        ...

    @overload
    @classmethod
    def deploy(cls, *, from_: Optional[Union[Account, Address, str]] = None, value: Union[int, str] = 0, gas_limit: Optional[Union[int, Literal["max"], Literal["auto"]]] = None, return_tx: Literal[False] = False, request_type: Literal["tx"] = "tx", chain: Optional[Chain] = None, gas_price: Optional[Union[int, str]] = None, max_fee_per_gas: Optional[Union[int, str]] = None, max_priority_fee_per_gas: Optional[Union[int, str]] = None, access_list: Optional[Union[Dict[Union[Account, Address, str], List[int]], Literal["auto"]]] = None, type: Optional[int] = None, block: Optional[Union[int, Literal["latest"], Literal["pending"], Literal["earliest"], Literal["safe"], Literal["finalized"]]] = None, confirmations: Optional[int] = None) -> Factory:
        ...

    @overload
    @classmethod
    def deploy(cls, *, from_: Optional[Union[Account, Address, str]] = None, value: Union[int, str] = 0, gas_limit: Optional[Union[int, Literal["max"], Literal["auto"]]] = None, return_tx: Literal[False] = False, request_type: Literal["estimate"], chain: Optional[Chain] = None, gas_price: Optional[Union[int, str]] = None, max_fee_per_gas: Optional[Union[int, str]] = None, max_priority_fee_per_gas: Optional[Union[int, str]] = None, access_list: Optional[Union[Dict[Union[Account, Address, str], List[int]], Literal["auto"]]] = None, type: Optional[int] = None, block: Optional[Union[int, Literal["latest"], Literal["pending"], Literal["earliest"], Literal["safe"], Literal["finalized"]]] = None, confirmations: Optional[int] = None) -> int:
        ...

    @overload
    @classmethod
    def deploy(cls, *, from_: Optional[Union[Account, Address, str]] = None, value: Union[int, str] = 0, gas_limit: Optional[Union[int, Literal["max"], Literal["auto"]]] = None, return_tx: Literal[False] = False, request_type: Literal["access_list"], chain: Optional[Chain] = None, gas_price: Optional[Union[int, str]] = None, max_fee_per_gas: Optional[Union[int, str]] = None, max_priority_fee_per_gas: Optional[Union[int, str]] = None, access_list: Optional[Union[Dict[Union[Account, Address, str], List[int]], Literal["auto"]]] = None, type: Optional[int] = None, block: Optional[Union[int, Literal["latest"], Literal["pending"], Literal["earliest"], Literal["safe"], Literal["finalized"]]] = None, confirmations: Optional[int] = None) -> Tuple[Dict[Address, List[int]], int]:
        ...

    @overload
    @classmethod
    def deploy(cls, *, from_: Optional[Union[Account, Address, str]] = None, value: Union[int, str] = 0, gas_limit: Optional[Union[int, Literal["max"], Literal["auto"]]] = None, return_tx: Literal[True], request_type: Literal["tx"] = "tx", chain: Optional[Chain] = None, gas_price: Optional[Union[int, str]] = None, max_fee_per_gas: Optional[Union[int, str]] = None, max_priority_fee_per_gas: Optional[Union[int, str]] = None, access_list: Optional[Union[Dict[Union[Account, Address, str], List[int]], Literal["auto"]]] = None, type: Optional[int] = None, block: Optional[Union[int, Literal["latest"], Literal["pending"], Literal["earliest"], Literal["safe"], Literal["finalized"]]] = None, confirmations: Optional[int] = None) -> TransactionAbc[Factory]:
        ...

    @classmethod
    def deploy(cls, *, from_: Optional[Union[Account, Address, str]] = None, value: Union[int, str] = 0, gas_limit: Optional[Union[int, Literal["max"], Literal["auto"]]] = None, return_tx: bool = False, request_type: RequestType = "tx", chain: Optional[Chain] = None, gas_price: Optional[Union[int, str]] = None, max_fee_per_gas: Optional[Union[int, str]] = None, max_priority_fee_per_gas: Optional[Union[int, str]] = None, access_list: Optional[Union[Dict[Union[Account, Address, str], List[int]], Literal["auto"]]] = None, type: Optional[int] = None, block: Optional[Union[int, Literal["latest"], Literal["pending"], Literal["earliest"], Literal["safe"], Literal["finalized"]]] = None, confirmations: Optional[int] = None) -> Union[bytearray, Factory, int, Tuple[Dict[Address, List[int]], int], TransactionAbc[Factory]]:
        return cls._deploy(request_type, [], return_tx, Factory, from_, value, gas_limit, {}, chain, gas_price, max_fee_per_gas, max_priority_fee_per_gas, access_list, type, block, confirmations)

    @classmethod
    def get_creation_code(cls) -> bytes:
        return cls._get_creation_code({})

    @dataclasses.dataclass
    class PairCreated:
        """
        [Source code](file:///Users/dteiml/p/hacker-dom/woke-uniswap-v2/woke_tests/mocks/Factory.sol#8)

        Attributes:
            token0 (Address): address
            token1 (Address): address
            pair (Address): address
        """
        _abi = {'anonymous': False, 'inputs': [{'indexed': False, 'internalType': 'address', 'name': 'token0', 'type': 'address'}, {'indexed': False, 'internalType': 'address', 'name': 'token1', 'type': 'address'}, {'indexed': False, 'internalType': 'address', 'name': 'pair', 'type': 'address'}], 'name': 'PairCreated', 'type': 'event'}
        original_name = 'PairCreated'
        selector = b'\xa9*+\x95\xc8\xd8Coj\xc4\xc6s\xc6\x14\x876O\x87~\xfb\x954\xd4)o\xad\x8e\xf9\x04Tl\x94'

        token0: Address
        token1: Address
        pair: Address


    @overload
    def feeTo(self, *, from_: Optional[Union[Account, Address, str]] = None, to: Optional[Union[Account, Address, str]] = None, value: Union[int, str] = 0, gas_limit: Optional[Union[int, Literal["max"], Literal["auto"]]] = None, request_type: Literal["call"] = "call", gas_price: Optional[Union[int, str]] = None, max_fee_per_gas: Optional[Union[int, str]] = None, max_priority_fee_per_gas: Optional[Union[int, str]] = None, access_list: Optional[Union[Dict[Union[Account, Address, str], List[int]], Literal["auto"]]] = None, type: Optional[int] = None, block: Optional[Union[int, Literal["latest"], Literal["pending"], Literal["earliest"], Literal["safe"], Literal["finalized"]]] = None, confirmations: Optional[int] = None) -> Address:
        """
        [Source code](file:///Users/dteiml/p/hacker-dom/woke-uniswap-v2/woke_tests/mocks/Factory.sol#6)

        Returns:
            address
        """
        ...

    @overload
    def feeTo(self, *, from_: Optional[Union[Account, Address, str]] = None, to: Optional[Union[Account, Address, str]] = None, value: Union[int, str] = 0, gas_limit: Optional[Union[int, Literal["max"], Literal["auto"]]] = None, request_type: Literal["estimate"], gas_price: Optional[Union[int, str]] = None, max_fee_per_gas: Optional[Union[int, str]] = None, max_priority_fee_per_gas: Optional[Union[int, str]] = None, access_list: Optional[Union[Dict[Union[Account, Address, str], List[int]], Literal["auto"]]] = None, type: Optional[int] = None, block: Optional[Union[int, Literal["latest"], Literal["pending"], Literal["earliest"], Literal["safe"], Literal["finalized"]]] = None, confirmations: Optional[int] = None) -> int:
        """
        [Source code](file:///Users/dteiml/p/hacker-dom/woke-uniswap-v2/woke_tests/mocks/Factory.sol#6)

        Returns:
            address
        """
        ...

    @overload
    def feeTo(self, *, from_: Optional[Union[Account, Address, str]] = None, to: Optional[Union[Account, Address, str]] = None, value: Union[int, str] = 0, gas_limit: Optional[Union[int, Literal["max"], Literal["auto"]]] = None, request_type: Literal["access_list"], gas_price: Optional[Union[int, str]] = None, max_fee_per_gas: Optional[Union[int, str]] = None, max_priority_fee_per_gas: Optional[Union[int, str]] = None, access_list: Optional[Union[Dict[Union[Account, Address, str], List[int]], Literal["auto"]]] = None, type: Optional[int] = None, block: Optional[Union[int, Literal["latest"], Literal["pending"], Literal["earliest"], Literal["safe"], Literal["finalized"]]] = None, confirmations: Optional[int] = None) -> Tuple[Dict[Address, List[int]], int]:
        """
        [Source code](file:///Users/dteiml/p/hacker-dom/woke-uniswap-v2/woke_tests/mocks/Factory.sol#6)

        Returns:
            address
        """
        ...

    @overload
    def feeTo(self, *, from_: Optional[Union[Account, Address, str]] = None, to: Optional[Union[Account, Address, str]] = None, value: Union[int, str] = 0, gas_limit: Optional[Union[int, Literal["max"], Literal["auto"]]] = None, request_type: Literal["tx"], gas_price: Optional[Union[int, str]] = None, max_fee_per_gas: Optional[Union[int, str]] = None, max_priority_fee_per_gas: Optional[Union[int, str]] = None, access_list: Optional[Union[Dict[Union[Account, Address, str], List[int]], Literal["auto"]]] = None, type: Optional[int] = None, block: Optional[Union[int, Literal["latest"], Literal["pending"], Literal["earliest"], Literal["safe"], Literal["finalized"]]] = None, confirmations: Optional[int] = None) -> TransactionAbc[Address]:
        """
        [Source code](file:///Users/dteiml/p/hacker-dom/woke-uniswap-v2/woke_tests/mocks/Factory.sol#6)

        Returns:
            address
        """
        ...

    def feeTo(self, *, from_: Optional[Union[Account, Address, str]] = None, to: Optional[Union[Account, Address, str]] = None, value: Union[int, str] = 0, gas_limit: Optional[Union[int, Literal["max"], Literal["auto"]]] = None, request_type: RequestType = 'call', gas_price: Optional[Union[int, str]] = None, max_fee_per_gas: Optional[Union[int, str]] = None, max_priority_fee_per_gas: Optional[Union[int, str]] = None, access_list: Optional[Union[Dict[Union[Account, Address, str], List[int]], Literal["auto"]]] = None, type: Optional[int] = None, block: Optional[Union[int, Literal["latest"], Literal["pending"], Literal["earliest"], Literal["safe"], Literal["finalized"]]] = None, confirmations: Optional[int] = None) -> Union[Address, TransactionAbc[Address], int, Tuple[Dict[Address, List[int]], int]]:
        """
        [Source code](file:///Users/dteiml/p/hacker-dom/woke-uniswap-v2/woke_tests/mocks/Factory.sol#6)

        Returns:
            address
        """
        return self._execute(self.chain, request_type, "017e7e58", [], True if request_type == "tx" else False, Address, from_, to if to is not None else str(self.address), value, gas_limit, gas_price, max_fee_per_gas, max_priority_fee_per_gas, access_list, type, block, confirmations)

    @overload
    def createPair(self, token0: Union[Account, Address], token1: Union[Account, Address], *, from_: Optional[Union[Account, Address, str]] = None, to: Optional[Union[Account, Address, str]] = None, value: Union[int, str] = 0, gas_limit: Optional[Union[int, Literal["max"], Literal["auto"]]] = None, request_type: Literal["call"], gas_price: Optional[Union[int, str]] = None, max_fee_per_gas: Optional[Union[int, str]] = None, max_priority_fee_per_gas: Optional[Union[int, str]] = None, access_list: Optional[Union[Dict[Union[Account, Address, str], List[int]], Literal["auto"]]] = None, type: Optional[int] = None, block: Optional[Union[int, Literal["latest"], Literal["pending"], Literal["earliest"], Literal["safe"], Literal["finalized"]]] = None, confirmations: Optional[int] = None) -> None:
        """
        [Source code](file:///Users/dteiml/p/hacker-dom/woke-uniswap-v2/woke_tests/mocks/Factory.sol#13)

        Args:
            token0: address
            token1: address
        """
        ...

    @overload
    def createPair(self, token0: Union[Account, Address], token1: Union[Account, Address], *, from_: Optional[Union[Account, Address, str]] = None, to: Optional[Union[Account, Address, str]] = None, value: Union[int, str] = 0, gas_limit: Optional[Union[int, Literal["max"], Literal["auto"]]] = None, request_type: Literal["estimate"], gas_price: Optional[Union[int, str]] = None, max_fee_per_gas: Optional[Union[int, str]] = None, max_priority_fee_per_gas: Optional[Union[int, str]] = None, access_list: Optional[Union[Dict[Union[Account, Address, str], List[int]], Literal["auto"]]] = None, type: Optional[int] = None, block: Optional[Union[int, Literal["latest"], Literal["pending"], Literal["earliest"], Literal["safe"], Literal["finalized"]]] = None, confirmations: Optional[int] = None) -> int:
        """
        [Source code](file:///Users/dteiml/p/hacker-dom/woke-uniswap-v2/woke_tests/mocks/Factory.sol#13)

        Args:
            token0: address
            token1: address
        """
        ...

    @overload
    def createPair(self, token0: Union[Account, Address], token1: Union[Account, Address], *, from_: Optional[Union[Account, Address, str]] = None, to: Optional[Union[Account, Address, str]] = None, value: Union[int, str] = 0, gas_limit: Optional[Union[int, Literal["max"], Literal["auto"]]] = None, request_type: Literal["access_list"], gas_price: Optional[Union[int, str]] = None, max_fee_per_gas: Optional[Union[int, str]] = None, max_priority_fee_per_gas: Optional[Union[int, str]] = None, access_list: Optional[Union[Dict[Union[Account, Address, str], List[int]], Literal["auto"]]] = None, type: Optional[int] = None, block: Optional[Union[int, Literal["latest"], Literal["pending"], Literal["earliest"], Literal["safe"], Literal["finalized"]]] = None, confirmations: Optional[int] = None) -> Tuple[Dict[Address, List[int]], int]:
        """
        [Source code](file:///Users/dteiml/p/hacker-dom/woke-uniswap-v2/woke_tests/mocks/Factory.sol#13)

        Args:
            token0: address
            token1: address
        """
        ...

    @overload
    def createPair(self, token0: Union[Account, Address], token1: Union[Account, Address], *, from_: Optional[Union[Account, Address, str]] = None, to: Optional[Union[Account, Address, str]] = None, value: Union[int, str] = 0, gas_limit: Optional[Union[int, Literal["max"], Literal["auto"]]] = None, request_type: Literal["tx"] = "tx", gas_price: Optional[Union[int, str]] = None, max_fee_per_gas: Optional[Union[int, str]] = None, max_priority_fee_per_gas: Optional[Union[int, str]] = None, access_list: Optional[Union[Dict[Union[Account, Address, str], List[int]], Literal["auto"]]] = None, type: Optional[int] = None, block: Optional[Union[int, Literal["latest"], Literal["pending"], Literal["earliest"], Literal["safe"], Literal["finalized"]]] = None, confirmations: Optional[int] = None) -> TransactionAbc[None]:
        """
        [Source code](file:///Users/dteiml/p/hacker-dom/woke-uniswap-v2/woke_tests/mocks/Factory.sol#13)

        Args:
            token0: address
            token1: address
        """
        ...

    def createPair(self, token0: Union[Account, Address], token1: Union[Account, Address], *, from_: Optional[Union[Account, Address, str]] = None, to: Optional[Union[Account, Address, str]] = None, value: Union[int, str] = 0, gas_limit: Optional[Union[int, Literal["max"], Literal["auto"]]] = None, request_type: RequestType = 'tx', gas_price: Optional[Union[int, str]] = None, max_fee_per_gas: Optional[Union[int, str]] = None, max_priority_fee_per_gas: Optional[Union[int, str]] = None, access_list: Optional[Union[Dict[Union[Account, Address, str], List[int]], Literal["auto"]]] = None, type: Optional[int] = None, block: Optional[Union[int, Literal["latest"], Literal["pending"], Literal["earliest"], Literal["safe"], Literal["finalized"]]] = None, confirmations: Optional[int] = None) -> Union[None, TransactionAbc[None], int, Tuple[Dict[Address, List[int]], int]]:
        """
        [Source code](file:///Users/dteiml/p/hacker-dom/woke-uniswap-v2/woke_tests/mocks/Factory.sol#13)

        Args:
            token0: address
            token1: address
        """
        return self._execute(self.chain, request_type, "c9c65396", [token0, token1], True if request_type == "tx" else False, NoneType, from_, to if to is not None else str(self.address), value, gas_limit, gas_price, max_fee_per_gas, max_priority_fee_per_gas, access_list, type, block, confirmations)

Factory.feeTo.selector = b'\x01~~X'
Factory.createPair.selector = b'\xc9\xc6S\x96'
