
from __future__ import annotations

import dataclasses
from typing import List, Dict, Optional, overload, Union, Callable, Tuple
from typing_extensions import Literal

from woke.development.core import Contract, Library, Address, Account, Chain, RequestType
from woke.development.primitive_types import *
from woke.development.transactions import TransactionAbc, TransactionRevertedError

from enum import IntEnum



class Factory(Contract):
    """
    [Source code](file:///Users/dteiml/p/hacker-dom/woke-uniswap-v2/woke_tests/mocks/Factory.sol#5)
    """
    _abi = {b'\xc9\xc6S\x96': {'inputs': [{'internalType': 'address', 'name': 'token0', 'type': 'address'}, {'internalType': 'address', 'name': 'token1', 'type': 'address'}], 'name': 'createPair', 'outputs': [], 'stateMutability': 'nonpayable', 'type': 'function'}, b'\x01~~X': {'inputs': [], 'name': 'feeTo', 'outputs': [{'internalType': 'address', 'name': '', 'type': 'address'}], 'stateMutability': 'view', 'type': 'function'}}
    _creation_code = "60806040525f80546001600160a01b031916905534801561001e575f80fd5b506128718061002c5f395ff3fe608060405234801561000f575f80fd5b5060043610610034575f3560e01c8063017e7e5814610038578063c9c6539614610066575b5f80fd5b5f5461004a906001600160a01b031681565b6040516001600160a01b03909116815260200160405180910390f35b61007961007436600461017d565b61007b565b005b5f60405161008890610155565b604051809103905ff0801580156100a1573d5f803e3d5ffd5b5060405163485cc95560e01b81526001600160a01b03858116600483015284811660248301529192509082169063485cc955906044015f604051808303815f87803b1580156100ee575f80fd5b505af1158015610100573d5f803e3d5ffd5b5050604080516001600160a01b038781168252868116602083015285168183015290517fa92a2b95c8d8436f6ac4c673c61487364f877efb9534d4296fad8ef904546c949350908190036060019150a1505050565b61268d806101af83390190565b80356001600160a01b0381168114610178575f80fd5b919050565b5f806040838503121561018e575f80fd5b61019783610162565b91506101a560208401610162565b9050925092905056fe60806040526001600c55348015610014575f80fd5b50604080518082018252600a8152692ab734b9bbb0b8102b1960b11b6020918201528151808301835260018152603160f81b9082015281517f8b73c3c69bb8fe3d512ecc4cf759cc79239f7b179b0ffacaa9a75d522b39400f818301527fbfcc8ef98ffbf7b6c3fec7bf5185b566b9863e35a9d83acd49ad6824b5969738818401527fc89efdaa54c0f20c7adf612882df0950f5a951637e0307cdcb4c672f298b8bc660608201524660808201523060a0808301919091528351808303909101815260c09091019092528151910120600355600580546001600160a01b03191633179055612588806101055f395ff3fe608060405234801561000f575f80fd5b50600436106101a1575f3560e01c80636a627842116100f3578063ba9a7a5611610093578063d21220a71161006e578063d21220a7146103fc578063d505accf1461040f578063dd62ed3e14610422578063fff6cae91461044c575f80fd5b8063ba9a7a56146103cd578063bc25cf77146103d6578063c45a0155146103e9575f80fd5b80637ecebe00116100ce5780637ecebe001461034e57806389afcb441461036d57806395d89b4114610395578063a9059cbb146103ba575f80fd5b80636a6278421461031357806370a08231146103265780637464fc3d14610345575f80fd5b806323b872dd1161015e5780633644e515116101395780633644e515146102e5578063485cc955146102ee5780635909c0d5146103015780635a3d54931461030a575f80fd5b806323b872dd1461029157806330adf81f146102a4578063313ce567146102cb575f80fd5b8063022c0d9f146101a557806306fdde03146101ba5780630902f1ac146101f9578063095ea7b31461022d5780630dfe16811461025057806318160ddd1461027b575b5f80fd5b6101b86101b33660046120aa565b610454565b005b6101e36040518060400160405280600a8152602001692ab734b9bbb0b8102b1960b11b81525081565b6040516101f09190612185565b60405180910390f35b610201610945565b604080516001600160701b03948516815293909216602084015263ffffffff16908201526060016101f0565b61024061023b366004612197565b61096f565b60405190151581526020016101f0565b600654610263906001600160a01b031681565b6040516001600160a01b0390911681526020016101f0565b6102835f5481565b6040519081526020016101f0565b61024061029f3660046121c1565b6109ae565b6102837f6e71edae12b1b97f4d1f60370fef10105fa2faae0126114a169c64845d6126c981565b6102d3601281565b60405160ff90911681526020016101f0565b61028360035481565b6101b86102fc3660046121ff565b610a3e565b61028360095481565b610283600a5481565b610283610321366004612236565b610abd565b610283610334366004612236565b60016020525f908152604090205481565b610283600b5481565b61028361035c366004612236565b60046020525f908152604090205481565b61038061037b366004612236565b610f77565b604080519283526020830191909152016101f0565b6101e3604051806040016040528060068152602001652aa72496ab1960d11b81525081565b6102406103c8366004612197565b6112cd565b6102836103e881565b6101b86103e4366004612236565b6112d9565b600554610263906001600160a01b031681565b600754610263906001600160a01b031681565b6101b861041d366004612251565b6113ea565b6102836104303660046121ff565b600260209081525f928352604080842090915290825290205481565b6101b86115fa565b600c5460011461047f5760405162461bcd60e51b8152600401610476906122c2565b60405180910390fd5b5f600c558415158061049057505f84115b6104ea5760405162461bcd60e51b815260206004820152602560248201527f556e697377617056323a20494e53554646494349454e545f4f55545055545f416044820152641353d5539560da1b6064820152608401610476565b5f806104f4610945565b5091509150816001600160701b0316871080156105195750806001600160701b031686105b61056f5760405162461bcd60e51b815260206004820152602160248201527f556e697377617056323a20494e53554646494349454e545f4c495155494449546044820152605960f81b6064820152608401610476565b6006546007545f9182916001600160a01b039182169190811690891682148015906105ac5750806001600160a01b0316896001600160a01b031614155b6105f05760405162461bcd60e51b8152602060048201526015602482015274556e697377617056323a20494e56414c49445f544f60581b6044820152606401610476565b8a1561060157610601828a8d611719565b891561061257610612818a8c611719565b861561067a576040516304347a1760e21b81526001600160a01b038a16906310d1e85c9061064c9033908f908f908e908e906004016122ed565b5f604051808303815f87803b158015610663575f80fd5b505af1158015610675573d5f803e3d5ffd5b505050505b6040516370a0823160e01b81523060048201526001600160a01b038316906370a0823190602401602060405180830381865afa1580156106bc573d5f803e3d5ffd5b505050506040513d601f19601f820116820180604052508101906106e09190612338565b6040516370a0823160e01b81523060048201529094506001600160a01b038216906370a0823190602401602060405180830381865afa158015610725573d5f803e3d5ffd5b505050506040513d601f19601f820116820180604052508101906107499190612338565b925050505f89856001600160701b03166107639190612363565b831161076f575f61078c565b6107828a6001600160701b038716612363565b61078c9084612363565b90505f6107a28a6001600160701b038716612363565b83116107ae575f6107cb565b6107c18a6001600160701b038716612363565b6107cb9084612363565b90505f8211806107da57505f81115b6108325760405162461bcd60e51b8152602060048201526024808201527f556e697377617056323a20494e53554646494349454e545f494e5055545f414d60448201526313d5539560e21b6064820152608401610476565b5f61085361084184600361185f565b61084d876103e861185f565b906118c5565b90505f61086461084184600361185f565b9050610889620f42406108836001600160701b038b8116908b1661185f565b9061185f565b610893838361185f565b10156108d05760405162461bcd60e51b815260206004820152600c60248201526b556e697377617056323a204b60a01b6044820152606401610476565b50506108de8484888861191a565b60408051838152602081018390529081018c9052606081018b90526001600160a01b038a169033907fd78ad95fa46c994b6551d0da85fc275fe613ce37657fb8d5e3d130840159d8229060800160405180910390a350506001600c55505050505050505050565b6008546001600160701b0380821692600160701b830490911691600160e01b900463ffffffff1690565b5f61099960405180604001604052806008815260200167185c1c1c9bdd985b60c21b815250611b01565b6109a4338484611b47565b5060015b92915050565b6001600160a01b0383165f9081526002602090815260408083203384529091528120545f1914610a29576001600160a01b0384165f908152600260209081526040808320338452909152902054610a0590836118c5565b6001600160a01b0385165f9081526002602090815260408083203384529091529020555b610a34848484611ba8565b5060019392505050565b6005546001600160a01b03163314610a8f5760405162461bcd60e51b81526020600482015260146024820152732ab734b9bbb0b82b191d102327a92124a22222a760611b6044820152606401610476565b600680546001600160a01b039384166001600160a01b03199182161790915560078054929093169116179055565b5f600c54600114610ae05760405162461bcd60e51b8152600401610476906122c2565b5f600c81905580610aef610945565b506006546040516370a0823160e01b81523060048201529294509092505f916001600160a01b03909116906370a0823190602401602060405180830381865afa158015610b3e573d5f803e3d5ffd5b505050506040513d601f19601f82011682018060405250810190610b629190612338565b6007546040516370a0823160e01b81523060048201529192505f916001600160a01b03909116906370a0823190602401602060405180830381865afa158015610bad573d5f803e3d5ffd5b505050506040513d601f19601f82011682018060405250810190610bd19190612338565b90505f610be7836001600160701b0387166118c5565b90505f610bfd836001600160701b0387166118c5565b90505f610c0a8787611c4b565b90505f80549050610c5b604051806040016040528060078152602001660616d6f756e74360cc1b8152508560405180604001604052806007815260200166616d6f756e743160c81b81525086611d7d565b610ca760405180604001604052806008815260200167062616c616e6365360c41b815250876040518060400160405280600881526020016762616c616e63653160c01b81525088611d7d565b805f03610d0457610cc66103e861084d610cc1878761185f565b611dcc565b9850610cf3604051806040016040528060098152602001686c697175696469747960b81b8152508a611e3a565b610cff5f6103e8611e83565b610d75565b610d486001600160701b038916610d1b868461185f565b610d25919061238a565b6001600160701b038916610d39868561185f565b610d43919061238a565b611f0f565b9850610d75604051806040016040528060098152602001686c697175696469747960b81b8152508a611e3a565b5f8911610dd55760405162461bcd60e51b815260206004820152602860248201527f556e697377617056323a20494e53554646494349454e545f4c495155494449546044820152671657d3525395115160c21b6064820152608401610476565b610e1c60405180604001604052806002815260200161746f60f01b8152508b604051806040016040528060098152602001686c697175696469747960b81b8152508c611f26565b610e268a8a611e83565b610e7260405180604001604052806008815260200167062616c616e6365360c41b815250876040518060400160405280600881526020016762616c616e63653160c01b81525088611d7d565b604080518082018252600880825267072657365727665360c41b6020808401919091528154845180860190955291845267726573657276653160c01b90840152610ecf926001600160701b0380831692600160701b900416611d7d565b610edb86868a8a61191a565b8115610f0557600854610f01906001600160701b0380821691600160701b90041661185f565b600b555b610f2960405180604001604052806003815260200162115b9960ea1b815250611b01565b604080518581526020810185905233917f4c209b5fc8ad50758f13e2e1088ba56a560dff690a1c6fef26394f4c03821c4f910160405180910390a250506001600c5550949695505050505050565b5f80600c54600114610f9b5760405162461bcd60e51b8152600401610476906122c2565b5f600c81905580610faa610945565b506006546007546040516370a0823160e01b81523060048201529395509193506001600160a01b03908116929116905f9083906370a0823190602401602060405180830381865afa158015611001573d5f803e3d5ffd5b505050506040513d601f19601f820116820180604052508101906110259190612338565b6040516370a0823160e01b81523060048201529091505f906001600160a01b038416906370a0823190602401602060405180830381865afa15801561106c573d5f803e3d5ffd5b505050506040513d601f19601f820116820180604052508101906110909190612338565b305f908152600160205260408120549192506110ac8888611c4b565b5f54909150806110bc848761185f565b6110c6919061238a565b9a50806110d3848661185f565b6110dd919061238a565b99505f8b1180156110ed57505f8a115b61114a5760405162461bcd60e51b815260206004820152602860248201527f556e697377617056323a20494e53554646494349454e545f4c495155494449546044820152671657d0955493915160c21b6064820152608401610476565b6111543084611f6f565b61115f878d8d611719565b61116a868d8c611719565b6040516370a0823160e01b81523060048201526001600160a01b038816906370a0823190602401602060405180830381865afa1580156111ac573d5f803e3d5ffd5b505050506040513d601f19601f820116820180604052508101906111d09190612338565b6040516370a0823160e01b81523060048201529095506001600160a01b038716906370a0823190602401602060405180830381865afa158015611215573d5f803e3d5ffd5b505050506040513d601f19601f820116820180604052508101906112399190612338565b935061124785858b8b61191a565b81156112715760085461126d906001600160701b0380821691600160701b90041661185f565b600b555b604080518c8152602081018c90526001600160a01b038e169133917fdccd412f0b1252819cb1fd330b93224ca42612892bb3f4f789976e6d81936496910160405180910390a35050505050505050506001600c81905550915091565b5f6109a4338484611ba8565b600c546001146112fb5760405162461bcd60e51b8152600401610476906122c2565b5f600c556006546007546008546040516370a0823160e01b81523060048201526001600160a01b039384169390921691611393918491869161138e916001600160701b039091169084906370a08231906024015b602060405180830381865afa15801561136a573d5f803e3d5ffd5b505050506040513d601f19601f8201168201806040525081019061084d9190612338565b611719565b6008546040516370a0823160e01b81523060048201526113e0918391869161138e91600160701b9091046001600160701b0316906001600160a01b038516906370a082319060240161134f565b50506001600c5550565b4284101561142f5760405162461bcd60e51b8152602060048201526012602482015271155b9a5cddd85c158c8e881156141254915160721b6044820152606401610476565b6003546001600160a01b0388165f90815260046020526040812080549192917f6e71edae12b1b97f4d1f60370fef10105fa2faae0126114a169c64845d6126c9918b918b918b9190876114818361239d565b909155506040805160208101969096526001600160a01b0394851690860152929091166060840152608083015260a082015260c0810187905260e001604051602081830303815290604052805190602001206040516020016114fa92919061190160f01b81526002810192909252602282015260420190565b60408051601f1981840301815282825280516020918201205f80855291840180845281905260ff88169284019290925260608301869052608083018590529092509060019060a0016020604051602081039080840390855afa158015611562573d5f803e3d5ffd5b5050604051601f1901519150506001600160a01b038116158015906115985750886001600160a01b0316816001600160a01b0316145b6115e45760405162461bcd60e51b815260206004820152601c60248201527f556e697377617056323a20494e56414c49445f5349474e4154555245000000006044820152606401610476565b6115ef898989611b47565b505050505050505050565b600c5460011461161c5760405162461bcd60e51b8152600401610476906122c2565b5f600c556006546040516370a0823160e01b8152306004820152611712916001600160a01b0316906370a0823190602401602060405180830381865afa158015611668573d5f803e3d5ffd5b505050506040513d601f19601f8201168201806040525081019061168c9190612338565b6007546040516370a0823160e01b81523060048201526001600160a01b03909116906370a0823190602401602060405180830381865afa1580156116d2573d5f803e3d5ffd5b505050506040513d601f19601f820116820180604052508101906116f69190612338565b6008546001600160701b0380821691600160701b90041661191a565b6001600c55565b604080518082018252601981527f7472616e7366657228616464726573732c75696e74323536290000000000000060209182015281516001600160a01b0385811660248301526044808301869052845180840390910181526064909201845291810180516001600160e01b031663a9059cbb60e01b17905291515f9283928716916117a491906123b5565b5f604051808303815f865af19150503d805f81146117dd576040519150601f19603f3d011682016040523d82523d5f602084013e6117e2565b606091505b509150915081801561180c57508051158061180c57508080602001905181019061180c91906123d0565b6118585760405162461bcd60e51b815260206004820152601a60248201527f556e697377617056323a205452414e534645525f4641494c45440000000000006044820152606401610476565b5050505050565b5f8115806118825750828261187481836123ef565b9250611880908361238a565b145b6109a85760405162461bcd60e51b815260206004820152601460248201527364732d6d6174682d6d756c2d6f766572666c6f7760601b6044820152606401610476565b5f826118d18382612363565b91508111156109a85760405162461bcd60e51b815260206004820152601560248201527464732d6d6174682d7375622d756e646572666c6f7760581b6044820152606401610476565b6001600160701b03841180159061193857506001600160701b038311155b61197a5760405162461bcd60e51b8152602060048201526013602482015272556e697377617056323a204f564552464c4f5760681b6044820152606401610476565b5f61198a64010000000042612406565b6008549091505f906119a990600160e01b900463ffffffff1683612419565b90505f8163ffffffff161180156119c857506001600160701b03841615155b80156119dc57506001600160701b03831615155b15611a69578063ffffffff16611a04856119f586611ff6565b6001600160e01b03169061200e565b6001600160e01b0316611a1791906123ef565b60095f828254611a27919061243d565b909155505063ffffffff8116611a40846119f587611ff6565b6001600160e01b0316611a5391906123ef565b600a5f828254611a63919061243d565b90915550505b6008805463ffffffff8416600160e01b026001600160e01b036001600160701b03898116600160701b9081026001600160e01b03199095168c83161794909417918216831794859055604080519382169282169290921783529290930490911660208201527f1c411e9a96e071241c2f21f7726b17ae89e3cab4c78be50e062b03a9fffbbad1910160405180910390a1505050505050565b611b4481604051602401611b159190612185565b60408051601f198184030181529190526020810180516001600160e01b031663104c13eb60e21b179052612022565b50565b6001600160a01b038381165f8181526002602090815260408083209487168084529482529182902085905590518481527f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92591015b60405180910390a3505050565b6001600160a01b0383165f90815260016020526040902054611bca90826118c5565b6001600160a01b038085165f908152600160205260408082209390935590841681522054611bf89082612042565b6001600160a01b038084165f8181526001602052604090819020939093559151908516907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef90611b9b9085815260200190565b5f8060055f9054906101000a90046001600160a01b03166001600160a01b031663017e7e586040518163ffffffff1660e01b8152600401602060405180830381865afa158015611c9d573d5f803e3d5ffd5b505050506040513d601f19601f82011682018060405250810190611cc19190612450565b600b546001600160a01b038216158015945091925090611d6a578015611d65575f611cfb610cc16001600160701b0388811690881661185f565b90505f611d0783611dcc565b905080821115611d62575f611d27611d1f84846118c5565b5f549061185f565b90505f611d3f83611d3986600561185f565b90612042565b90505f611d4c828461238a565b90508015611d5e57611d5e8782611e83565b5050505b50505b611d75565b8015611d75575f600b555b505092915050565b611dc684848484604051602401611d97949392919061246b565b60408051601f198184030181529190526020810180516001600160e01b031663c67ea9d160e01b179052612022565b50505050565b5f6003821115611e2b5750805f611de460028361238a565b611def90600161243d565b90505b81811015611e2557905080600281611e0a818661238a565b611e14919061243d565b611e1e919061238a565b9050611df2565b50919050565b8115611e35575060015b919050565b611e7f8282604051602401611e509291906124a7565b60408051601f198184030181529190526020810180516001600160e01b0316632d839cb360e21b179052612022565b5050565b5f54611e8f9082612042565b5f9081556001600160a01b038316815260016020526040902054611eb39082612042565b6001600160a01b0383165f818152600160205260408082209390935591519091907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef90611f039085815260200190565b60405180910390a35050565b5f818310611f1d5781611f1f565b825b9392505050565b611dc684848484604051602401611f4094939291906124c8565b60408051601f198184030181529190526020810180516001600160e01b03166348e8889760e11b179052612022565b6001600160a01b0382165f90815260016020526040902054611f9190826118c5565b6001600160a01b0383165f9081526001602052604081209190915554611fb790826118c5565b5f9081556040518281526001600160a01b038416907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef90602001611f03565b5f6109a8600160701b6001600160701b0384166124fb565b5f611f1f6001600160701b0383168461252d565b80516a636f6e736f6c652e6c6f67602083015f808483855afa5050505050565b5f8261204e838261243d565b91508110156109a85760405162461bcd60e51b815260206004820152601460248201527364732d6d6174682d6164642d6f766572666c6f7760601b6044820152606401610476565b6001600160a01b0381168114611b44575f80fd5b5f805f805f608086880312156120be575f80fd5b853594506020860135935060408601356120d781612096565b9250606086013567ffffffffffffffff808211156120f3575f80fd5b818801915088601f830112612106575f80fd5b813581811115612114575f80fd5b896020828501011115612125575f80fd5b9699959850939650602001949392505050565b5f5b8381101561215257818101518382015260200161213a565b50505f910152565b5f8151808452612171816020860160208601612138565b601f01601f19169290920160200192915050565b602081525f611f1f602083018461215a565b5f80604083850312156121a8575f80fd5b82356121b381612096565b946020939093013593505050565b5f805f606084860312156121d3575f80fd5b83356121de81612096565b925060208401356121ee81612096565b929592945050506040919091013590565b5f8060408385031215612210575f80fd5b823561221b81612096565b9150602083013561222b81612096565b809150509250929050565b5f60208284031215612246575f80fd5b8135611f1f81612096565b5f805f805f805f60e0888a031215612267575f80fd5b873561227281612096565b9650602088013561228281612096565b95506040880135945060608801359350608088013560ff811681146122a5575f80fd5b9699959850939692959460a0840135945060c09093013592915050565b602080825260119082015270155b9a5cddd85c158c8e881313d0d2d151607a1b604082015260600190565b60018060a01b038616815284602082015283604082015260806060820152816080820152818360a08301375f81830160a090810191909152601f909201601f19160101949350505050565b5f60208284031215612348575f80fd5b5051919050565b634e487b7160e01b5f52601160045260245ffd5b818103818111156109a8576109a861234f565b634e487b7160e01b5f52601260045260245ffd5b5f8261239857612398612376565b500490565b5f600182016123ae576123ae61234f565b5060010190565b5f82516123c6818460208701612138565b9190910192915050565b5f602082840312156123e0575f80fd5b81518015158114611f1f575f80fd5b80820281158282048414176109a8576109a861234f565b5f8261241457612414612376565b500690565b63ffffffff8281168282160390808211156124365761243661234f565b5092915050565b808201808211156109a8576109a861234f565b5f60208284031215612460575f80fd5b8151611f1f81612096565b608081525f61247d608083018761215a565b8560208401528281036040840152612495818661215a565b91505082606083015295945050505050565b604081525f6124b9604083018561215a565b90508260208301529392505050565b608081525f6124da608083018761215a565b6001600160a01b03861660208401528281036040840152612495818661215a565b6001600160e01b038281168282168181028316929181158285048214176125245761252461234f565b50505092915050565b5f6001600160e01b038381168061254657612546612376565b9216919091049291505056fea2646970667358221220fe264f0f538bb251fe89b1d3d78731ce0380b5a7f14dd33bab014095b28ccb6b64736f6c63430008140033a26469706673582212200932069083ec17ceb814b4eb3d49dd0815bbc60667e078cbde9030a57cd99b2064736f6c63430008140033"

    @overload
    @classmethod
    def deploy(cls, *, from_: Optional[Union[Account, Address, str]] = None, value: Union[int, str] = 0, gas_limit: Optional[Union[int, Literal["max"], Literal["auto"]]] = None, return_tx: Literal[False] = False, request_type: Literal["call"], chain: Optional[Chain] = None, gas_price: Optional[Union[int, str]] = None, max_fee_per_gas: Optional[Union[int, str]] = None, max_priority_fee_per_gas: Optional[Union[int, str]] = None, access_list: Optional[Union[Dict[Union[Account, Address, str], List[int]], Literal["auto"]]] = None, type: Optional[int] = None, block: Optional[Union[int, Literal["latest"], Literal["pending"], Literal["earliest"], Literal["safe"], Literal["finalized"]]] = None, confirmations: Optional[int] = None) -> bytearray:
        ...

    @overload
    @classmethod
    def deploy(cls, *, from_: Optional[Union[Account, Address, str]] = None, value: Union[int, str] = 0, gas_limit: Optional[Union[int, Literal["max"], Literal["auto"]]] = None, return_tx: Literal[False] = False, request_type: Literal["tx"] = "tx", chain: Optional[Chain] = None, gas_price: Optional[Union[int, str]] = None, max_fee_per_gas: Optional[Union[int, str]] = None, max_priority_fee_per_gas: Optional[Union[int, str]] = None, access_list: Optional[Union[Dict[Union[Account, Address, str], List[int]], Literal["auto"]]] = None, type: Optional[int] = None, block: Optional[Union[int, Literal["latest"], Literal["pending"], Literal["earliest"], Literal["safe"], Literal["finalized"]]] = None, confirmations: Optional[int] = None) -> Factory:
        ...

    @overload
    @classmethod
    def deploy(cls, *, from_: Optional[Union[Account, Address, str]] = None, value: Union[int, str] = 0, gas_limit: Optional[Union[int, Literal["max"], Literal["auto"]]] = None, return_tx: Literal[False] = False, request_type: Literal["estimate"], chain: Optional[Chain] = None, gas_price: Optional[Union[int, str]] = None, max_fee_per_gas: Optional[Union[int, str]] = None, max_priority_fee_per_gas: Optional[Union[int, str]] = None, access_list: Optional[Union[Dict[Union[Account, Address, str], List[int]], Literal["auto"]]] = None, type: Optional[int] = None, block: Optional[Union[int, Literal["latest"], Literal["pending"], Literal["earliest"], Literal["safe"], Literal["finalized"]]] = None, confirmations: Optional[int] = None) -> int:
        ...

    @overload
    @classmethod
    def deploy(cls, *, from_: Optional[Union[Account, Address, str]] = None, value: Union[int, str] = 0, gas_limit: Optional[Union[int, Literal["max"], Literal["auto"]]] = None, return_tx: Literal[False] = False, request_type: Literal["access_list"], chain: Optional[Chain] = None, gas_price: Optional[Union[int, str]] = None, max_fee_per_gas: Optional[Union[int, str]] = None, max_priority_fee_per_gas: Optional[Union[int, str]] = None, access_list: Optional[Union[Dict[Union[Account, Address, str], List[int]], Literal["auto"]]] = None, type: Optional[int] = None, block: Optional[Union[int, Literal["latest"], Literal["pending"], Literal["earliest"], Literal["safe"], Literal["finalized"]]] = None, confirmations: Optional[int] = None) -> Tuple[Dict[Address, List[int]], int]:
        ...

    @overload
    @classmethod
    def deploy(cls, *, from_: Optional[Union[Account, Address, str]] = None, value: Union[int, str] = 0, gas_limit: Optional[Union[int, Literal["max"], Literal["auto"]]] = None, return_tx: Literal[True], request_type: Literal["tx"] = "tx", chain: Optional[Chain] = None, gas_price: Optional[Union[int, str]] = None, max_fee_per_gas: Optional[Union[int, str]] = None, max_priority_fee_per_gas: Optional[Union[int, str]] = None, access_list: Optional[Union[Dict[Union[Account, Address, str], List[int]], Literal["auto"]]] = None, type: Optional[int] = None, block: Optional[Union[int, Literal["latest"], Literal["pending"], Literal["earliest"], Literal["safe"], Literal["finalized"]]] = None, confirmations: Optional[int] = None) -> TransactionAbc[Factory]:
        ...

    @classmethod
    def deploy(cls, *, from_: Optional[Union[Account, Address, str]] = None, value: Union[int, str] = 0, gas_limit: Optional[Union[int, Literal["max"], Literal["auto"]]] = None, return_tx: bool = False, request_type: RequestType = "tx", chain: Optional[Chain] = None, gas_price: Optional[Union[int, str]] = None, max_fee_per_gas: Optional[Union[int, str]] = None, max_priority_fee_per_gas: Optional[Union[int, str]] = None, access_list: Optional[Union[Dict[Union[Account, Address, str], List[int]], Literal["auto"]]] = None, type: Optional[int] = None, block: Optional[Union[int, Literal["latest"], Literal["pending"], Literal["earliest"], Literal["safe"], Literal["finalized"]]] = None, confirmations: Optional[int] = None) -> Union[bytearray, Factory, int, Tuple[Dict[Address, List[int]], int], TransactionAbc[Factory]]:
        return cls._deploy(request_type, [], return_tx, Factory, from_, value, gas_limit, {}, chain, gas_price, max_fee_per_gas, max_priority_fee_per_gas, access_list, type, block, confirmations)

    @classmethod
    def get_creation_code(cls) -> bytes:
        return cls._get_creation_code({})

    @dataclasses.dataclass
    class PairCreated:
        """
        [Source code](file:///Users/dteiml/p/hacker-dom/woke-uniswap-v2/woke_tests/mocks/Factory.sol#8)

        Attributes:
            token0 (Address): address
            token1 (Address): address
            pair (Address): address
        """
        _abi = {'anonymous': False, 'inputs': [{'indexed': False, 'internalType': 'address', 'name': 'token0', 'type': 'address'}, {'indexed': False, 'internalType': 'address', 'name': 'token1', 'type': 'address'}, {'indexed': False, 'internalType': 'address', 'name': 'pair', 'type': 'address'}], 'name': 'PairCreated', 'type': 'event'}
        original_name = 'PairCreated'
        selector = b'\xa9*+\x95\xc8\xd8Coj\xc4\xc6s\xc6\x14\x876O\x87~\xfb\x954\xd4)o\xad\x8e\xf9\x04Tl\x94'

        token0: Address
        token1: Address
        pair: Address


    @overload
    def feeTo(self, *, from_: Optional[Union[Account, Address, str]] = None, to: Optional[Union[Account, Address, str]] = None, value: Union[int, str] = 0, gas_limit: Optional[Union[int, Literal["max"], Literal["auto"]]] = None, request_type: Literal["call"] = "call", gas_price: Optional[Union[int, str]] = None, max_fee_per_gas: Optional[Union[int, str]] = None, max_priority_fee_per_gas: Optional[Union[int, str]] = None, access_list: Optional[Union[Dict[Union[Account, Address, str], List[int]], Literal["auto"]]] = None, type: Optional[int] = None, block: Optional[Union[int, Literal["latest"], Literal["pending"], Literal["earliest"], Literal["safe"], Literal["finalized"]]] = None, confirmations: Optional[int] = None) -> Address:
        """
        [Source code](file:///Users/dteiml/p/hacker-dom/woke-uniswap-v2/woke_tests/mocks/Factory.sol#6)

        Returns:
            address
        """
        ...

    @overload
    def feeTo(self, *, from_: Optional[Union[Account, Address, str]] = None, to: Optional[Union[Account, Address, str]] = None, value: Union[int, str] = 0, gas_limit: Optional[Union[int, Literal["max"], Literal["auto"]]] = None, request_type: Literal["estimate"], gas_price: Optional[Union[int, str]] = None, max_fee_per_gas: Optional[Union[int, str]] = None, max_priority_fee_per_gas: Optional[Union[int, str]] = None, access_list: Optional[Union[Dict[Union[Account, Address, str], List[int]], Literal["auto"]]] = None, type: Optional[int] = None, block: Optional[Union[int, Literal["latest"], Literal["pending"], Literal["earliest"], Literal["safe"], Literal["finalized"]]] = None, confirmations: Optional[int] = None) -> int:
        """
        [Source code](file:///Users/dteiml/p/hacker-dom/woke-uniswap-v2/woke_tests/mocks/Factory.sol#6)

        Returns:
            address
        """
        ...

    @overload
    def feeTo(self, *, from_: Optional[Union[Account, Address, str]] = None, to: Optional[Union[Account, Address, str]] = None, value: Union[int, str] = 0, gas_limit: Optional[Union[int, Literal["max"], Literal["auto"]]] = None, request_type: Literal["access_list"], gas_price: Optional[Union[int, str]] = None, max_fee_per_gas: Optional[Union[int, str]] = None, max_priority_fee_per_gas: Optional[Union[int, str]] = None, access_list: Optional[Union[Dict[Union[Account, Address, str], List[int]], Literal["auto"]]] = None, type: Optional[int] = None, block: Optional[Union[int, Literal["latest"], Literal["pending"], Literal["earliest"], Literal["safe"], Literal["finalized"]]] = None, confirmations: Optional[int] = None) -> Tuple[Dict[Address, List[int]], int]:
        """
        [Source code](file:///Users/dteiml/p/hacker-dom/woke-uniswap-v2/woke_tests/mocks/Factory.sol#6)

        Returns:
            address
        """
        ...

    @overload
    def feeTo(self, *, from_: Optional[Union[Account, Address, str]] = None, to: Optional[Union[Account, Address, str]] = None, value: Union[int, str] = 0, gas_limit: Optional[Union[int, Literal["max"], Literal["auto"]]] = None, request_type: Literal["tx"], gas_price: Optional[Union[int, str]] = None, max_fee_per_gas: Optional[Union[int, str]] = None, max_priority_fee_per_gas: Optional[Union[int, str]] = None, access_list: Optional[Union[Dict[Union[Account, Address, str], List[int]], Literal["auto"]]] = None, type: Optional[int] = None, block: Optional[Union[int, Literal["latest"], Literal["pending"], Literal["earliest"], Literal["safe"], Literal["finalized"]]] = None, confirmations: Optional[int] = None) -> TransactionAbc[Address]:
        """
        [Source code](file:///Users/dteiml/p/hacker-dom/woke-uniswap-v2/woke_tests/mocks/Factory.sol#6)

        Returns:
            address
        """
        ...

    def feeTo(self, *, from_: Optional[Union[Account, Address, str]] = None, to: Optional[Union[Account, Address, str]] = None, value: Union[int, str] = 0, gas_limit: Optional[Union[int, Literal["max"], Literal["auto"]]] = None, request_type: RequestType = 'call', gas_price: Optional[Union[int, str]] = None, max_fee_per_gas: Optional[Union[int, str]] = None, max_priority_fee_per_gas: Optional[Union[int, str]] = None, access_list: Optional[Union[Dict[Union[Account, Address, str], List[int]], Literal["auto"]]] = None, type: Optional[int] = None, block: Optional[Union[int, Literal["latest"], Literal["pending"], Literal["earliest"], Literal["safe"], Literal["finalized"]]] = None, confirmations: Optional[int] = None) -> Union[Address, TransactionAbc[Address], int, Tuple[Dict[Address, List[int]], int]]:
        """
        [Source code](file:///Users/dteiml/p/hacker-dom/woke-uniswap-v2/woke_tests/mocks/Factory.sol#6)

        Returns:
            address
        """
        return self._execute(self.chain, request_type, "017e7e58", [], True if request_type == "tx" else False, Address, from_, to if to is not None else str(self.address), value, gas_limit, gas_price, max_fee_per_gas, max_priority_fee_per_gas, access_list, type, block, confirmations)

    @overload
    def createPair(self, token0: Union[Account, Address], token1: Union[Account, Address], *, from_: Optional[Union[Account, Address, str]] = None, to: Optional[Union[Account, Address, str]] = None, value: Union[int, str] = 0, gas_limit: Optional[Union[int, Literal["max"], Literal["auto"]]] = None, request_type: Literal["call"], gas_price: Optional[Union[int, str]] = None, max_fee_per_gas: Optional[Union[int, str]] = None, max_priority_fee_per_gas: Optional[Union[int, str]] = None, access_list: Optional[Union[Dict[Union[Account, Address, str], List[int]], Literal["auto"]]] = None, type: Optional[int] = None, block: Optional[Union[int, Literal["latest"], Literal["pending"], Literal["earliest"], Literal["safe"], Literal["finalized"]]] = None, confirmations: Optional[int] = None) -> None:
        """
        [Source code](file:///Users/dteiml/p/hacker-dom/woke-uniswap-v2/woke_tests/mocks/Factory.sol#13)

        Args:
            token0: address
            token1: address
        """
        ...

    @overload
    def createPair(self, token0: Union[Account, Address], token1: Union[Account, Address], *, from_: Optional[Union[Account, Address, str]] = None, to: Optional[Union[Account, Address, str]] = None, value: Union[int, str] = 0, gas_limit: Optional[Union[int, Literal["max"], Literal["auto"]]] = None, request_type: Literal["estimate"], gas_price: Optional[Union[int, str]] = None, max_fee_per_gas: Optional[Union[int, str]] = None, max_priority_fee_per_gas: Optional[Union[int, str]] = None, access_list: Optional[Union[Dict[Union[Account, Address, str], List[int]], Literal["auto"]]] = None, type: Optional[int] = None, block: Optional[Union[int, Literal["latest"], Literal["pending"], Literal["earliest"], Literal["safe"], Literal["finalized"]]] = None, confirmations: Optional[int] = None) -> int:
        """
        [Source code](file:///Users/dteiml/p/hacker-dom/woke-uniswap-v2/woke_tests/mocks/Factory.sol#13)

        Args:
            token0: address
            token1: address
        """
        ...

    @overload
    def createPair(self, token0: Union[Account, Address], token1: Union[Account, Address], *, from_: Optional[Union[Account, Address, str]] = None, to: Optional[Union[Account, Address, str]] = None, value: Union[int, str] = 0, gas_limit: Optional[Union[int, Literal["max"], Literal["auto"]]] = None, request_type: Literal["access_list"], gas_price: Optional[Union[int, str]] = None, max_fee_per_gas: Optional[Union[int, str]] = None, max_priority_fee_per_gas: Optional[Union[int, str]] = None, access_list: Optional[Union[Dict[Union[Account, Address, str], List[int]], Literal["auto"]]] = None, type: Optional[int] = None, block: Optional[Union[int, Literal["latest"], Literal["pending"], Literal["earliest"], Literal["safe"], Literal["finalized"]]] = None, confirmations: Optional[int] = None) -> Tuple[Dict[Address, List[int]], int]:
        """
        [Source code](file:///Users/dteiml/p/hacker-dom/woke-uniswap-v2/woke_tests/mocks/Factory.sol#13)

        Args:
            token0: address
            token1: address
        """
        ...

    @overload
    def createPair(self, token0: Union[Account, Address], token1: Union[Account, Address], *, from_: Optional[Union[Account, Address, str]] = None, to: Optional[Union[Account, Address, str]] = None, value: Union[int, str] = 0, gas_limit: Optional[Union[int, Literal["max"], Literal["auto"]]] = None, request_type: Literal["tx"] = "tx", gas_price: Optional[Union[int, str]] = None, max_fee_per_gas: Optional[Union[int, str]] = None, max_priority_fee_per_gas: Optional[Union[int, str]] = None, access_list: Optional[Union[Dict[Union[Account, Address, str], List[int]], Literal["auto"]]] = None, type: Optional[int] = None, block: Optional[Union[int, Literal["latest"], Literal["pending"], Literal["earliest"], Literal["safe"], Literal["finalized"]]] = None, confirmations: Optional[int] = None) -> TransactionAbc[None]:
        """
        [Source code](file:///Users/dteiml/p/hacker-dom/woke-uniswap-v2/woke_tests/mocks/Factory.sol#13)

        Args:
            token0: address
            token1: address
        """
        ...

    def createPair(self, token0: Union[Account, Address], token1: Union[Account, Address], *, from_: Optional[Union[Account, Address, str]] = None, to: Optional[Union[Account, Address, str]] = None, value: Union[int, str] = 0, gas_limit: Optional[Union[int, Literal["max"], Literal["auto"]]] = None, request_type: RequestType = 'tx', gas_price: Optional[Union[int, str]] = None, max_fee_per_gas: Optional[Union[int, str]] = None, max_priority_fee_per_gas: Optional[Union[int, str]] = None, access_list: Optional[Union[Dict[Union[Account, Address, str], List[int]], Literal["auto"]]] = None, type: Optional[int] = None, block: Optional[Union[int, Literal["latest"], Literal["pending"], Literal["earliest"], Literal["safe"], Literal["finalized"]]] = None, confirmations: Optional[int] = None) -> Union[None, TransactionAbc[None], int, Tuple[Dict[Address, List[int]], int]]:
        """
        [Source code](file:///Users/dteiml/p/hacker-dom/woke-uniswap-v2/woke_tests/mocks/Factory.sol#13)

        Args:
            token0: address
            token1: address
        """
        return self._execute(self.chain, request_type, "c9c65396", [token0, token1], True if request_type == "tx" else False, NoneType, from_, to if to is not None else str(self.address), value, gas_limit, gas_price, max_fee_per_gas, max_priority_fee_per_gas, access_list, type, block, confirmations)

Factory.feeTo.selector = b'\x01~~X'
Factory.createPair.selector = b'\xc9\xc6S\x96'
