
from __future__ import annotations

import dataclasses
from typing import List, Dict, Optional, overload, Union, Callable, Tuple
from typing_extensions import Literal

from woke.development.core import Contract, Library, Address, Account, Chain, RequestType
from woke.development.primitive_types import *
from woke.development.transactions import TransactionAbc, TransactionRevertedError

from enum import IntEnum



class Factory(Contract):
    """
    [Source code](file:///Users/dteiml/p/hacker-dom/woke-uniswap-v2/woke_tests/mocks/Factory.sol#5)
    """
    _abi = {b'\xc9\xc6S\x96': {'inputs': [{'internalType': 'address', 'name': 'token0', 'type': 'address'}, {'internalType': 'address', 'name': 'token1', 'type': 'address'}], 'name': 'createPair', 'outputs': [], 'stateMutability': 'nonpayable', 'type': 'function'}, b'\x01~~X': {'inputs': [], 'name': 'feeTo', 'outputs': [{'internalType': 'address', 'name': '', 'type': 'address'}], 'stateMutability': 'view', 'type': 'function'}}
    _creation_code = "60806040525f80546001600160a01b031916905534801561001e575f80fd5b506129448061002c5f395ff3fe608060405234801561000f575f80fd5b5060043610610034575f3560e01c8063017e7e5814610038578063c9c6539614610066575b5f80fd5b5f5461004a906001600160a01b031681565b6040516001600160a01b03909116815260200160405180910390f35b61007961007436600461017d565b61007b565b005b5f60405161008890610155565b604051809103905ff0801580156100a1573d5f803e3d5ffd5b5060405163485cc95560e01b81526001600160a01b03858116600483015284811660248301529192509082169063485cc955906044015f604051808303815f87803b1580156100ee575f80fd5b505af1158015610100573d5f803e3d5ffd5b5050604080516001600160a01b038781168252868116602083015285168183015290517fa92a2b95c8d8436f6ac4c673c61487364f877efb9534d4296fad8ef904546c949350908190036060019150a1505050565b612760806101af83390190565b80356001600160a01b0381168114610178575f80fd5b919050565b5f806040838503121561018e575f80fd5b61019783610162565b91506101a560208401610162565b9050925092905056fe60806040526001600c55348015610014575f80fd5b50604080518082018252600a8152692ab734b9bbb0b8102b1960b11b6020918201528151808301835260018152603160f81b9082015281517f8b73c3c69bb8fe3d512ecc4cf759cc79239f7b179b0ffacaa9a75d522b39400f818301527fbfcc8ef98ffbf7b6c3fec7bf5185b566b9863e35a9d83acd49ad6824b5969738818401527fc89efdaa54c0f20c7adf612882df0950f5a951637e0307cdcb4c672f298b8bc660608201524660808201523060a0808301919091528351808303909101815260c09091019092528151910120600355600580546001600160a01b0319163317905561265b806101055f395ff3fe608060405234801561000f575f80fd5b50600436106101a1575f3560e01c80636a627842116100f3578063ba9a7a5611610093578063d21220a71161006e578063d21220a7146103fc578063d505accf1461040f578063dd62ed3e14610422578063fff6cae91461044c575f80fd5b8063ba9a7a56146103cd578063bc25cf77146103d6578063c45a0155146103e9575f80fd5b80637ecebe00116100ce5780637ecebe001461034e57806389afcb441461036d57806395d89b4114610395578063a9059cbb146103ba575f80fd5b80636a6278421461031357806370a08231146103265780637464fc3d14610345575f80fd5b806323b872dd1161015e5780633644e515116101395780633644e515146102e5578063485cc955146102ee5780635909c0d5146103015780635a3d54931461030a575f80fd5b806323b872dd1461029157806330adf81f146102a4578063313ce567146102cb575f80fd5b8063022c0d9f146101a557806306fdde03146101ba5780630902f1ac146101f9578063095ea7b31461022d5780630dfe16811461025057806318160ddd1461027b575b5f80fd5b6101b86101b336600461214f565b610454565b005b6101e36040518060400160405280600a8152602001692ab734b9bbb0b8102b1960b11b81525081565b6040516101f0919061222a565b60405180910390f35b610201610945565b604080516001600160701b03948516815293909216602084015263ffffffff16908201526060016101f0565b61024061023b36600461223c565b6109f4565b60405190151581526020016101f0565b600654610263906001600160a01b031681565b6040516001600160a01b0390911681526020016101f0565b6102835f5481565b6040519081526020016101f0565b61024061029f366004612266565b610a0a565b6102837f6e71edae12b1b97f4d1f60370fef10105fa2faae0126114a169c64845d6126c981565b6102d3601281565b60405160ff90911681526020016101f0565b61028360035481565b6101b86102fc3660046122a4565b610a9a565b61028360095481565b610283600a5481565b6102836103213660046122db565b610b19565b6102836103343660046122db565b60016020525f908152604090205481565b610283600b5481565b61028361035c3660046122db565b60046020525f908152604090205481565b61038061037b3660046122db565b610fd3565b604080519283526020830191909152016101f0565b6101e3604051806040016040528060068152602001652aa72496ab1960d11b81525081565b6102406103c836600461223c565b611329565b6102836103e881565b6101b86103e43660046122db565b611335565b600554610263906001600160a01b031681565b600754610263906001600160a01b031681565b6101b861041d3660046122f6565b611446565b6102836104303660046122a4565b600260209081525f928352604080842090915290825290205481565b6101b8611656565b600c5460011461047f5760405162461bcd60e51b815260040161047690612367565b60405180910390fd5b5f600c558415158061049057505f84115b6104ea5760405162461bcd60e51b815260206004820152602560248201527f556e697377617056323a20494e53554646494349454e545f4f55545055545f416044820152641353d5539560da1b6064820152608401610476565b5f806104f4610945565b5091509150816001600160701b0316871080156105195750806001600160701b031686105b61056f5760405162461bcd60e51b815260206004820152602160248201527f556e697377617056323a20494e53554646494349454e545f4c495155494449546044820152605960f81b6064820152608401610476565b6006546007545f9182916001600160a01b039182169190811690891682148015906105ac5750806001600160a01b0316896001600160a01b031614155b6105f05760405162461bcd60e51b8152602060048201526015602482015274556e697377617056323a20494e56414c49445f544f60581b6044820152606401610476565b8a1561060157610601828a8d611775565b891561061257610612818a8c611775565b861561067a576040516304347a1760e21b81526001600160a01b038a16906310d1e85c9061064c9033908f908f908e908e90600401612392565b5f604051808303815f87803b158015610663575f80fd5b505af1158015610675573d5f803e3d5ffd5b505050505b6040516370a0823160e01b81523060048201526001600160a01b038316906370a0823190602401602060405180830381865afa1580156106bc573d5f803e3d5ffd5b505050506040513d601f19601f820116820180604052508101906106e091906123dd565b6040516370a0823160e01b81523060048201529094506001600160a01b038216906370a0823190602401602060405180830381865afa158015610725573d5f803e3d5ffd5b505050506040513d601f19601f8201168201806040525081019061074991906123dd565b925050505f89856001600160701b03166107639190612408565b831161076f575f61078c565b6107828a6001600160701b038716612408565b61078c9084612408565b90505f6107a28a6001600160701b038716612408565b83116107ae575f6107cb565b6107c18a6001600160701b038716612408565b6107cb9084612408565b90505f8211806107da57505f81115b6108325760405162461bcd60e51b8152602060048201526024808201527f556e697377617056323a20494e53554646494349454e545f494e5055545f414d60448201526313d5539560e21b6064820152608401610476565b5f6108536108418460036118bb565b61084d876103e86118bb565b90611921565b90505f6108646108418460036118bb565b9050610889620f42406108836001600160701b038b8116908b166118bb565b906118bb565b61089383836118bb565b10156108d05760405162461bcd60e51b815260206004820152600c60248201526b556e697377617056323a204b60a01b6044820152606401610476565b50506108de84848888611976565b60408051838152602081018390529081018c9052606081018b90526001600160a01b038a169033907fd78ad95fa46c994b6551d0da85fc275fe613ce37657fb8d5e3d130840159d8229060800160405180910390a350506001600c55505050505050505050565b5f805f6109866040518060400160405280601b81526020017f506169723a20676574526573657276657320626567696e6e696e670000000000815250611b5d565b505060085460408051808201909152601b81527f506169723a2067657452657365727665732072657475726e696e67000000000060208201526001600160701b038083169350600160701b83041691600160e01b900463ffffffff16906109ef90848484611ba3565b909192565b5f610a00338484611bf2565b5060015b92915050565b6001600160a01b0383165f9081526002602090815260408083203384529091528120545f1914610a85576001600160a01b0384165f908152600260209081526040808320338452909152902054610a619083611921565b6001600160a01b0385165f9081526002602090815260408083203384529091529020555b610a90848484611c53565b5060019392505050565b6005546001600160a01b03163314610aeb5760405162461bcd60e51b81526020600482015260146024820152732ab734b9bbb0b82b191d102327a92124a22222a760611b6044820152606401610476565b600680546001600160a01b039384166001600160a01b03199182161790915560078054929093169116179055565b5f600c54600114610b3c5760405162461bcd60e51b815260040161047690612367565b5f600c81905580610b4b610945565b506006546040516370a0823160e01b81523060048201529294509092505f916001600160a01b03909116906370a0823190602401602060405180830381865afa158015610b9a573d5f803e3d5ffd5b505050506040513d601f19601f82011682018060405250810190610bbe91906123dd565b6007546040516370a0823160e01b81523060048201529192505f916001600160a01b03909116906370a0823190602401602060405180830381865afa158015610c09573d5f803e3d5ffd5b505050506040513d601f19601f82011682018060405250810190610c2d91906123dd565b90505f610c43836001600160701b038716611921565b90505f610c59836001600160701b038716611921565b90505f610c668787611cf6565b90505f80549050610cb7604051806040016040528060078152602001660616d6f756e74360cc1b8152508560405180604001604052806007815260200166616d6f756e743160c81b81525086611e28565b610d0360405180604001604052806008815260200167062616c616e6365360c41b815250876040518060400160405280600881526020016762616c616e63653160c01b81525088611e28565b805f03610d6057610d226103e861084d610d1d87876118bb565b611e71565b9850610d4f604051806040016040528060098152602001686c697175696469747960b81b8152508a611edf565b610d5b5f6103e8611f28565b610dd1565b610da46001600160701b038916610d7786846118bb565b610d81919061242f565b6001600160701b038916610d9586856118bb565b610d9f919061242f565b611fb4565b9850610dd1604051806040016040528060098152602001686c697175696469747960b81b8152508a611edf565b5f8911610e315760405162461bcd60e51b815260206004820152602860248201527f556e697377617056323a20494e53554646494349454e545f4c495155494449546044820152671657d3525395115160c21b6064820152608401610476565b610e7860405180604001604052806002815260200161746f60f01b8152508b604051806040016040528060098152602001686c697175696469747960b81b8152508c611fcb565b610e828a8a611f28565b610ece60405180604001604052806008815260200167062616c616e6365360c41b815250876040518060400160405280600881526020016762616c616e63653160c01b81525088611e28565b604080518082018252600880825267072657365727665360c41b6020808401919091528154845180860190955291845267726573657276653160c01b90840152610f2b926001600160701b0380831692600160701b900416611e28565b610f3786868a8a611976565b8115610f6157600854610f5d906001600160701b0380821691600160701b9004166118bb565b600b555b610f8560405180604001604052806003815260200162115b9960ea1b815250611b5d565b604080518581526020810185905233917f4c209b5fc8ad50758f13e2e1088ba56a560dff690a1c6fef26394f4c03821c4f910160405180910390a250506001600c5550949695505050505050565b5f80600c54600114610ff75760405162461bcd60e51b815260040161047690612367565b5f600c81905580611006610945565b506006546007546040516370a0823160e01b81523060048201529395509193506001600160a01b03908116929116905f9083906370a0823190602401602060405180830381865afa15801561105d573d5f803e3d5ffd5b505050506040513d601f19601f8201168201806040525081019061108191906123dd565b6040516370a0823160e01b81523060048201529091505f906001600160a01b038416906370a0823190602401602060405180830381865afa1580156110c8573d5f803e3d5ffd5b505050506040513d601f19601f820116820180604052508101906110ec91906123dd565b305f908152600160205260408120549192506111088888611cf6565b5f549091508061111884876118bb565b611122919061242f565b9a508061112f84866118bb565b611139919061242f565b99505f8b11801561114957505f8a115b6111a65760405162461bcd60e51b815260206004820152602860248201527f556e697377617056323a20494e53554646494349454e545f4c495155494449546044820152671657d0955493915160c21b6064820152608401610476565b6111b03084612014565b6111bb878d8d611775565b6111c6868d8c611775565b6040516370a0823160e01b81523060048201526001600160a01b038816906370a0823190602401602060405180830381865afa158015611208573d5f803e3d5ffd5b505050506040513d601f19601f8201168201806040525081019061122c91906123dd565b6040516370a0823160e01b81523060048201529095506001600160a01b038716906370a0823190602401602060405180830381865afa158015611271573d5f803e3d5ffd5b505050506040513d601f19601f8201168201806040525081019061129591906123dd565b93506112a385858b8b611976565b81156112cd576008546112c9906001600160701b0380821691600160701b9004166118bb565b600b555b604080518c8152602081018c90526001600160a01b038e169133917fdccd412f0b1252819cb1fd330b93224ca42612892bb3f4f789976e6d81936496910160405180910390a35050505050505050506001600c81905550915091565b5f610a00338484611c53565b600c546001146113575760405162461bcd60e51b815260040161047690612367565b5f600c556006546007546008546040516370a0823160e01b81523060048201526001600160a01b0393841693909216916113ef91849186916113ea916001600160701b039091169084906370a08231906024015b602060405180830381865afa1580156113c6573d5f803e3d5ffd5b505050506040513d601f19601f8201168201806040525081019061084d91906123dd565b611775565b6008546040516370a0823160e01b815230600482015261143c91839186916113ea91600160701b9091046001600160701b0316906001600160a01b038516906370a08231906024016113ab565b50506001600c5550565b4284101561148b5760405162461bcd60e51b8152602060048201526012602482015271155b9a5cddd85c158c8e881156141254915160721b6044820152606401610476565b6003546001600160a01b0388165f90815260046020526040812080549192917f6e71edae12b1b97f4d1f60370fef10105fa2faae0126114a169c64845d6126c9918b918b918b9190876114dd83612442565b909155506040805160208101969096526001600160a01b0394851690860152929091166060840152608083015260a082015260c0810187905260e0016040516020818303038152906040528051906020012060405160200161155692919061190160f01b81526002810192909252602282015260420190565b60408051601f1981840301815282825280516020918201205f80855291840180845281905260ff88169284019290925260608301869052608083018590529092509060019060a0016020604051602081039080840390855afa1580156115be573d5f803e3d5ffd5b5050604051601f1901519150506001600160a01b038116158015906115f45750886001600160a01b0316816001600160a01b0316145b6116405760405162461bcd60e51b815260206004820152601c60248201527f556e697377617056323a20494e56414c49445f5349474e4154555245000000006044820152606401610476565b61164b898989611bf2565b505050505050505050565b600c546001146116785760405162461bcd60e51b815260040161047690612367565b5f600c556006546040516370a0823160e01b815230600482015261176e916001600160a01b0316906370a0823190602401602060405180830381865afa1580156116c4573d5f803e3d5ffd5b505050506040513d601f19601f820116820180604052508101906116e891906123dd565b6007546040516370a0823160e01b81523060048201526001600160a01b03909116906370a0823190602401602060405180830381865afa15801561172e573d5f803e3d5ffd5b505050506040513d601f19601f8201168201806040525081019061175291906123dd565b6008546001600160701b0380821691600160701b900416611976565b6001600c55565b604080518082018252601981527f7472616e7366657228616464726573732c75696e74323536290000000000000060209182015281516001600160a01b0385811660248301526044808301869052845180840390910181526064909201845291810180516001600160e01b031663a9059cbb60e01b17905291515f928392871691611800919061245a565b5f604051808303815f865af19150503d805f8114611839576040519150601f19603f3d011682016040523d82523d5f602084013e61183e565b606091505b50915091508180156118685750805115806118685750808060200190518101906118689190612475565b6118b45760405162461bcd60e51b815260206004820152601a60248201527f556e697377617056323a205452414e534645525f4641494c45440000000000006044820152606401610476565b5050505050565b5f8115806118de575082826118d08183612494565b92506118dc908361242f565b145b610a045760405162461bcd60e51b815260206004820152601460248201527364732d6d6174682d6d756c2d6f766572666c6f7760601b6044820152606401610476565b5f8261192d8382612408565b9150811115610a045760405162461bcd60e51b815260206004820152601560248201527464732d6d6174682d7375622d756e646572666c6f7760581b6044820152606401610476565b6001600160701b03841180159061199457506001600160701b038311155b6119d65760405162461bcd60e51b8152602060048201526013602482015272556e697377617056323a204f564552464c4f5760681b6044820152606401610476565b5f6119e6640100000000426124ab565b6008549091505f90611a0590600160e01b900463ffffffff16836124be565b90505f8163ffffffff16118015611a2457506001600160701b03841615155b8015611a3857506001600160701b03831615155b15611ac5578063ffffffff16611a6085611a518661209b565b6001600160e01b0316906120b3565b6001600160e01b0316611a739190612494565b60095f828254611a8391906124e2565b909155505063ffffffff8116611a9c84611a518761209b565b6001600160e01b0316611aaf9190612494565b600a5f828254611abf91906124e2565b90915550505b6008805463ffffffff8416600160e01b026001600160e01b036001600160701b03898116600160701b9081026001600160e01b03199095168c83161794909417918216831794859055604080519382169282169290921783529290930490911660208201527f1c411e9a96e071241c2f21f7726b17ae89e3cab4c78be50e062b03a9fffbbad1910160405180910390a1505050505050565b611ba081604051602401611b71919061222a565b60408051601f198184030181529190526020810180516001600160e01b031663104c13eb60e21b1790526120c7565b50565b611bec84848484604051602401611bbd94939291906124f5565b60408051601f198184030181529190526020810180516001600160e01b031663a7a8785360e01b1790526120c7565b50505050565b6001600160a01b038381165f8181526002602090815260408083209487168084529482529182902085905590518481527f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92591015b60405180910390a3505050565b6001600160a01b0383165f90815260016020526040902054611c759082611921565b6001600160a01b038085165f908152600160205260408082209390935590841681522054611ca390826120e7565b6001600160a01b038084165f8181526001602052604090819020939093559151908516907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef90611c469085815260200190565b5f8060055f9054906101000a90046001600160a01b03166001600160a01b031663017e7e586040518163ffffffff1660e01b8152600401602060405180830381865afa158015611d48573d5f803e3d5ffd5b505050506040513d601f19601f82011682018060405250810190611d6c9190612523565b600b546001600160a01b038216158015945091925090611e15578015611e10575f611da6610d1d6001600160701b038881169088166118bb565b90505f611db283611e71565b905080821115611e0d575f611dd2611dca8484611921565b5f54906118bb565b90505f611dea83611de48660056118bb565b906120e7565b90505f611df7828461242f565b90508015611e0957611e098782611f28565b5050505b50505b611e20565b8015611e20575f600b555b505092915050565b611bec84848484604051602401611e42949392919061253e565b60408051601f198184030181529190526020810180516001600160e01b031663c67ea9d160e01b1790526120c7565b5f6003821115611ed05750805f611e8960028361242f565b611e949060016124e2565b90505b81811015611eca57905080600281611eaf818661242f565b611eb991906124e2565b611ec3919061242f565b9050611e97565b50919050565b8115611eda575060015b919050565b611f248282604051602401611ef592919061257a565b60408051601f198184030181529190526020810180516001600160e01b0316632d839cb360e21b1790526120c7565b5050565b5f54611f3490826120e7565b5f9081556001600160a01b038316815260016020526040902054611f5890826120e7565b6001600160a01b0383165f818152600160205260408082209390935591519091907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef90611fa89085815260200190565b60405180910390a35050565b5f818310611fc25781611fc4565b825b9392505050565b611bec84848484604051602401611fe5949392919061259b565b60408051601f198184030181529190526020810180516001600160e01b03166348e8889760e11b1790526120c7565b6001600160a01b0382165f908152600160205260409020546120369082611921565b6001600160a01b0383165f908152600160205260408120919091555461205c9082611921565b5f9081556040518281526001600160a01b038416907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef90602001611fa8565b5f610a04600160701b6001600160701b0384166125ce565b5f611fc46001600160701b03831684612600565b80516a636f6e736f6c652e6c6f67602083015f808483855afa5050505050565b5f826120f383826124e2565b9150811015610a045760405162461bcd60e51b815260206004820152601460248201527364732d6d6174682d6164642d6f766572666c6f7760601b6044820152606401610476565b6001600160a01b0381168114611ba0575f80fd5b5f805f805f60808688031215612163575f80fd5b8535945060208601359350604086013561217c8161213b565b9250606086013567ffffffffffffffff80821115612198575f80fd5b818801915088601f8301126121ab575f80fd5b8135818111156121b9575f80fd5b8960208285010111156121ca575f80fd5b9699959850939650602001949392505050565b5f5b838110156121f75781810151838201526020016121df565b50505f910152565b5f81518084526122168160208601602086016121dd565b601f01601f19169290920160200192915050565b602081525f611fc460208301846121ff565b5f806040838503121561224d575f80fd5b82356122588161213b565b946020939093013593505050565b5f805f60608486031215612278575f80fd5b83356122838161213b565b925060208401356122938161213b565b929592945050506040919091013590565b5f80604083850312156122b5575f80fd5b82356122c08161213b565b915060208301356122d08161213b565b809150509250929050565b5f602082840312156122eb575f80fd5b8135611fc48161213b565b5f805f805f805f60e0888a03121561230c575f80fd5b87356123178161213b565b965060208801356123278161213b565b95506040880135945060608801359350608088013560ff8116811461234a575f80fd5b9699959850939692959460a0840135945060c09093013592915050565b602080825260119082015270155b9a5cddd85c158c8e881313d0d2d151607a1b604082015260600190565b60018060a01b038616815284602082015283604082015260806060820152816080820152818360a08301375f81830160a090810191909152601f909201601f19160101949350505050565b5f602082840312156123ed575f80fd5b5051919050565b634e487b7160e01b5f52601160045260245ffd5b81810381811115610a0457610a046123f4565b634e487b7160e01b5f52601260045260245ffd5b5f8261243d5761243d61241b565b500490565b5f60018201612453576124536123f4565b5060010190565b5f825161246b8184602087016121dd565b9190910192915050565b5f60208284031215612485575f80fd5b81518015158114611fc4575f80fd5b8082028115828204841417610a0457610a046123f4565b5f826124b9576124b961241b565b500690565b63ffffffff8281168282160390808211156124db576124db6123f4565b5092915050565b80820180821115610a0457610a046123f4565b608081525f61250760808301876121ff565b6020830195909552506040810192909252606090910152919050565b5f60208284031215612533575f80fd5b8151611fc48161213b565b608081525f61255060808301876121ff565b856020840152828103604084015261256881866121ff565b91505082606083015295945050505050565b604081525f61258c60408301856121ff565b90508260208301529392505050565b608081525f6125ad60808301876121ff565b6001600160a01b0386166020840152828103604084015261256881866121ff565b6001600160e01b038281168282168181028316929181158285048214176125f7576125f76123f4565b50505092915050565b5f6001600160e01b03838116806126195761261961241b565b9216919091049291505056fea2646970667358221220c92970046b1505aabd67851c1c6588d1878bda93fd518ffdc850075e649640c764736f6c63430008140033a264697066735822122030334b80e68f8f762b4552ee87c5727fd691707a09c910254b4f5f1033d056b264736f6c63430008140033"

    @overload
    @classmethod
    def deploy(cls, *, from_: Optional[Union[Account, Address, str]] = None, value: Union[int, str] = 0, gas_limit: Optional[Union[int, Literal["max"], Literal["auto"]]] = None, return_tx: Literal[False] = False, request_type: Literal["call"], chain: Optional[Chain] = None, gas_price: Optional[Union[int, str]] = None, max_fee_per_gas: Optional[Union[int, str]] = None, max_priority_fee_per_gas: Optional[Union[int, str]] = None, access_list: Optional[Union[Dict[Union[Account, Address, str], List[int]], Literal["auto"]]] = None, type: Optional[int] = None, block: Optional[Union[int, Literal["latest"], Literal["pending"], Literal["earliest"], Literal["safe"], Literal["finalized"]]] = None, confirmations: Optional[int] = None) -> bytearray:
        ...

    @overload
    @classmethod
    def deploy(cls, *, from_: Optional[Union[Account, Address, str]] = None, value: Union[int, str] = 0, gas_limit: Optional[Union[int, Literal["max"], Literal["auto"]]] = None, return_tx: Literal[False] = False, request_type: Literal["tx"] = "tx", chain: Optional[Chain] = None, gas_price: Optional[Union[int, str]] = None, max_fee_per_gas: Optional[Union[int, str]] = None, max_priority_fee_per_gas: Optional[Union[int, str]] = None, access_list: Optional[Union[Dict[Union[Account, Address, str], List[int]], Literal["auto"]]] = None, type: Optional[int] = None, block: Optional[Union[int, Literal["latest"], Literal["pending"], Literal["earliest"], Literal["safe"], Literal["finalized"]]] = None, confirmations: Optional[int] = None) -> Factory:
        ...

    @overload
    @classmethod
    def deploy(cls, *, from_: Optional[Union[Account, Address, str]] = None, value: Union[int, str] = 0, gas_limit: Optional[Union[int, Literal["max"], Literal["auto"]]] = None, return_tx: Literal[False] = False, request_type: Literal["estimate"], chain: Optional[Chain] = None, gas_price: Optional[Union[int, str]] = None, max_fee_per_gas: Optional[Union[int, str]] = None, max_priority_fee_per_gas: Optional[Union[int, str]] = None, access_list: Optional[Union[Dict[Union[Account, Address, str], List[int]], Literal["auto"]]] = None, type: Optional[int] = None, block: Optional[Union[int, Literal["latest"], Literal["pending"], Literal["earliest"], Literal["safe"], Literal["finalized"]]] = None, confirmations: Optional[int] = None) -> int:
        ...

    @overload
    @classmethod
    def deploy(cls, *, from_: Optional[Union[Account, Address, str]] = None, value: Union[int, str] = 0, gas_limit: Optional[Union[int, Literal["max"], Literal["auto"]]] = None, return_tx: Literal[False] = False, request_type: Literal["access_list"], chain: Optional[Chain] = None, gas_price: Optional[Union[int, str]] = None, max_fee_per_gas: Optional[Union[int, str]] = None, max_priority_fee_per_gas: Optional[Union[int, str]] = None, access_list: Optional[Union[Dict[Union[Account, Address, str], List[int]], Literal["auto"]]] = None, type: Optional[int] = None, block: Optional[Union[int, Literal["latest"], Literal["pending"], Literal["earliest"], Literal["safe"], Literal["finalized"]]] = None, confirmations: Optional[int] = None) -> Tuple[Dict[Address, List[int]], int]:
        ...

    @overload
    @classmethod
    def deploy(cls, *, from_: Optional[Union[Account, Address, str]] = None, value: Union[int, str] = 0, gas_limit: Optional[Union[int, Literal["max"], Literal["auto"]]] = None, return_tx: Literal[True], request_type: Literal["tx"] = "tx", chain: Optional[Chain] = None, gas_price: Optional[Union[int, str]] = None, max_fee_per_gas: Optional[Union[int, str]] = None, max_priority_fee_per_gas: Optional[Union[int, str]] = None, access_list: Optional[Union[Dict[Union[Account, Address, str], List[int]], Literal["auto"]]] = None, type: Optional[int] = None, block: Optional[Union[int, Literal["latest"], Literal["pending"], Literal["earliest"], Literal["safe"], Literal["finalized"]]] = None, confirmations: Optional[int] = None) -> TransactionAbc[Factory]:
        ...

    @classmethod
    def deploy(cls, *, from_: Optional[Union[Account, Address, str]] = None, value: Union[int, str] = 0, gas_limit: Optional[Union[int, Literal["max"], Literal["auto"]]] = None, return_tx: bool = False, request_type: RequestType = "tx", chain: Optional[Chain] = None, gas_price: Optional[Union[int, str]] = None, max_fee_per_gas: Optional[Union[int, str]] = None, max_priority_fee_per_gas: Optional[Union[int, str]] = None, access_list: Optional[Union[Dict[Union[Account, Address, str], List[int]], Literal["auto"]]] = None, type: Optional[int] = None, block: Optional[Union[int, Literal["latest"], Literal["pending"], Literal["earliest"], Literal["safe"], Literal["finalized"]]] = None, confirmations: Optional[int] = None) -> Union[bytearray, Factory, int, Tuple[Dict[Address, List[int]], int], TransactionAbc[Factory]]:
        return cls._deploy(request_type, [], return_tx, Factory, from_, value, gas_limit, {}, chain, gas_price, max_fee_per_gas, max_priority_fee_per_gas, access_list, type, block, confirmations)

    @classmethod
    def get_creation_code(cls) -> bytes:
        return cls._get_creation_code({})

    @dataclasses.dataclass
    class PairCreated:
        """
        [Source code](file:///Users/dteiml/p/hacker-dom/woke-uniswap-v2/woke_tests/mocks/Factory.sol#8)

        Attributes:
            token0 (Address): address
            token1 (Address): address
            pair (Address): address
        """
        _abi = {'anonymous': False, 'inputs': [{'indexed': False, 'internalType': 'address', 'name': 'token0', 'type': 'address'}, {'indexed': False, 'internalType': 'address', 'name': 'token1', 'type': 'address'}, {'indexed': False, 'internalType': 'address', 'name': 'pair', 'type': 'address'}], 'name': 'PairCreated', 'type': 'event'}
        original_name = 'PairCreated'
        selector = b'\xa9*+\x95\xc8\xd8Coj\xc4\xc6s\xc6\x14\x876O\x87~\xfb\x954\xd4)o\xad\x8e\xf9\x04Tl\x94'

        token0: Address
        token1: Address
        pair: Address


    @overload
    def feeTo(self, *, from_: Optional[Union[Account, Address, str]] = None, to: Optional[Union[Account, Address, str]] = None, value: Union[int, str] = 0, gas_limit: Optional[Union[int, Literal["max"], Literal["auto"]]] = None, request_type: Literal["call"] = "call", gas_price: Optional[Union[int, str]] = None, max_fee_per_gas: Optional[Union[int, str]] = None, max_priority_fee_per_gas: Optional[Union[int, str]] = None, access_list: Optional[Union[Dict[Union[Account, Address, str], List[int]], Literal["auto"]]] = None, type: Optional[int] = None, block: Optional[Union[int, Literal["latest"], Literal["pending"], Literal["earliest"], Literal["safe"], Literal["finalized"]]] = None, confirmations: Optional[int] = None) -> Address:
        """
        [Source code](file:///Users/dteiml/p/hacker-dom/woke-uniswap-v2/woke_tests/mocks/Factory.sol#6)

        Returns:
            address
        """
        ...

    @overload
    def feeTo(self, *, from_: Optional[Union[Account, Address, str]] = None, to: Optional[Union[Account, Address, str]] = None, value: Union[int, str] = 0, gas_limit: Optional[Union[int, Literal["max"], Literal["auto"]]] = None, request_type: Literal["estimate"], gas_price: Optional[Union[int, str]] = None, max_fee_per_gas: Optional[Union[int, str]] = None, max_priority_fee_per_gas: Optional[Union[int, str]] = None, access_list: Optional[Union[Dict[Union[Account, Address, str], List[int]], Literal["auto"]]] = None, type: Optional[int] = None, block: Optional[Union[int, Literal["latest"], Literal["pending"], Literal["earliest"], Literal["safe"], Literal["finalized"]]] = None, confirmations: Optional[int] = None) -> int:
        """
        [Source code](file:///Users/dteiml/p/hacker-dom/woke-uniswap-v2/woke_tests/mocks/Factory.sol#6)

        Returns:
            address
        """
        ...

    @overload
    def feeTo(self, *, from_: Optional[Union[Account, Address, str]] = None, to: Optional[Union[Account, Address, str]] = None, value: Union[int, str] = 0, gas_limit: Optional[Union[int, Literal["max"], Literal["auto"]]] = None, request_type: Literal["access_list"], gas_price: Optional[Union[int, str]] = None, max_fee_per_gas: Optional[Union[int, str]] = None, max_priority_fee_per_gas: Optional[Union[int, str]] = None, access_list: Optional[Union[Dict[Union[Account, Address, str], List[int]], Literal["auto"]]] = None, type: Optional[int] = None, block: Optional[Union[int, Literal["latest"], Literal["pending"], Literal["earliest"], Literal["safe"], Literal["finalized"]]] = None, confirmations: Optional[int] = None) -> Tuple[Dict[Address, List[int]], int]:
        """
        [Source code](file:///Users/dteiml/p/hacker-dom/woke-uniswap-v2/woke_tests/mocks/Factory.sol#6)

        Returns:
            address
        """
        ...

    @overload
    def feeTo(self, *, from_: Optional[Union[Account, Address, str]] = None, to: Optional[Union[Account, Address, str]] = None, value: Union[int, str] = 0, gas_limit: Optional[Union[int, Literal["max"], Literal["auto"]]] = None, request_type: Literal["tx"], gas_price: Optional[Union[int, str]] = None, max_fee_per_gas: Optional[Union[int, str]] = None, max_priority_fee_per_gas: Optional[Union[int, str]] = None, access_list: Optional[Union[Dict[Union[Account, Address, str], List[int]], Literal["auto"]]] = None, type: Optional[int] = None, block: Optional[Union[int, Literal["latest"], Literal["pending"], Literal["earliest"], Literal["safe"], Literal["finalized"]]] = None, confirmations: Optional[int] = None) -> TransactionAbc[Address]:
        """
        [Source code](file:///Users/dteiml/p/hacker-dom/woke-uniswap-v2/woke_tests/mocks/Factory.sol#6)

        Returns:
            address
        """
        ...

    def feeTo(self, *, from_: Optional[Union[Account, Address, str]] = None, to: Optional[Union[Account, Address, str]] = None, value: Union[int, str] = 0, gas_limit: Optional[Union[int, Literal["max"], Literal["auto"]]] = None, request_type: RequestType = 'call', gas_price: Optional[Union[int, str]] = None, max_fee_per_gas: Optional[Union[int, str]] = None, max_priority_fee_per_gas: Optional[Union[int, str]] = None, access_list: Optional[Union[Dict[Union[Account, Address, str], List[int]], Literal["auto"]]] = None, type: Optional[int] = None, block: Optional[Union[int, Literal["latest"], Literal["pending"], Literal["earliest"], Literal["safe"], Literal["finalized"]]] = None, confirmations: Optional[int] = None) -> Union[Address, TransactionAbc[Address], int, Tuple[Dict[Address, List[int]], int]]:
        """
        [Source code](file:///Users/dteiml/p/hacker-dom/woke-uniswap-v2/woke_tests/mocks/Factory.sol#6)

        Returns:
            address
        """
        return self._execute(self.chain, request_type, "017e7e58", [], True if request_type == "tx" else False, Address, from_, to if to is not None else str(self.address), value, gas_limit, gas_price, max_fee_per_gas, max_priority_fee_per_gas, access_list, type, block, confirmations)

    @overload
    def createPair(self, token0: Union[Account, Address], token1: Union[Account, Address], *, from_: Optional[Union[Account, Address, str]] = None, to: Optional[Union[Account, Address, str]] = None, value: Union[int, str] = 0, gas_limit: Optional[Union[int, Literal["max"], Literal["auto"]]] = None, request_type: Literal["call"], gas_price: Optional[Union[int, str]] = None, max_fee_per_gas: Optional[Union[int, str]] = None, max_priority_fee_per_gas: Optional[Union[int, str]] = None, access_list: Optional[Union[Dict[Union[Account, Address, str], List[int]], Literal["auto"]]] = None, type: Optional[int] = None, block: Optional[Union[int, Literal["latest"], Literal["pending"], Literal["earliest"], Literal["safe"], Literal["finalized"]]] = None, confirmations: Optional[int] = None) -> None:
        """
        [Source code](file:///Users/dteiml/p/hacker-dom/woke-uniswap-v2/woke_tests/mocks/Factory.sol#13)

        Args:
            token0: address
            token1: address
        """
        ...

    @overload
    def createPair(self, token0: Union[Account, Address], token1: Union[Account, Address], *, from_: Optional[Union[Account, Address, str]] = None, to: Optional[Union[Account, Address, str]] = None, value: Union[int, str] = 0, gas_limit: Optional[Union[int, Literal["max"], Literal["auto"]]] = None, request_type: Literal["estimate"], gas_price: Optional[Union[int, str]] = None, max_fee_per_gas: Optional[Union[int, str]] = None, max_priority_fee_per_gas: Optional[Union[int, str]] = None, access_list: Optional[Union[Dict[Union[Account, Address, str], List[int]], Literal["auto"]]] = None, type: Optional[int] = None, block: Optional[Union[int, Literal["latest"], Literal["pending"], Literal["earliest"], Literal["safe"], Literal["finalized"]]] = None, confirmations: Optional[int] = None) -> int:
        """
        [Source code](file:///Users/dteiml/p/hacker-dom/woke-uniswap-v2/woke_tests/mocks/Factory.sol#13)

        Args:
            token0: address
            token1: address
        """
        ...

    @overload
    def createPair(self, token0: Union[Account, Address], token1: Union[Account, Address], *, from_: Optional[Union[Account, Address, str]] = None, to: Optional[Union[Account, Address, str]] = None, value: Union[int, str] = 0, gas_limit: Optional[Union[int, Literal["max"], Literal["auto"]]] = None, request_type: Literal["access_list"], gas_price: Optional[Union[int, str]] = None, max_fee_per_gas: Optional[Union[int, str]] = None, max_priority_fee_per_gas: Optional[Union[int, str]] = None, access_list: Optional[Union[Dict[Union[Account, Address, str], List[int]], Literal["auto"]]] = None, type: Optional[int] = None, block: Optional[Union[int, Literal["latest"], Literal["pending"], Literal["earliest"], Literal["safe"], Literal["finalized"]]] = None, confirmations: Optional[int] = None) -> Tuple[Dict[Address, List[int]], int]:
        """
        [Source code](file:///Users/dteiml/p/hacker-dom/woke-uniswap-v2/woke_tests/mocks/Factory.sol#13)

        Args:
            token0: address
            token1: address
        """
        ...

    @overload
    def createPair(self, token0: Union[Account, Address], token1: Union[Account, Address], *, from_: Optional[Union[Account, Address, str]] = None, to: Optional[Union[Account, Address, str]] = None, value: Union[int, str] = 0, gas_limit: Optional[Union[int, Literal["max"], Literal["auto"]]] = None, request_type: Literal["tx"] = "tx", gas_price: Optional[Union[int, str]] = None, max_fee_per_gas: Optional[Union[int, str]] = None, max_priority_fee_per_gas: Optional[Union[int, str]] = None, access_list: Optional[Union[Dict[Union[Account, Address, str], List[int]], Literal["auto"]]] = None, type: Optional[int] = None, block: Optional[Union[int, Literal["latest"], Literal["pending"], Literal["earliest"], Literal["safe"], Literal["finalized"]]] = None, confirmations: Optional[int] = None) -> TransactionAbc[None]:
        """
        [Source code](file:///Users/dteiml/p/hacker-dom/woke-uniswap-v2/woke_tests/mocks/Factory.sol#13)

        Args:
            token0: address
            token1: address
        """
        ...

    def createPair(self, token0: Union[Account, Address], token1: Union[Account, Address], *, from_: Optional[Union[Account, Address, str]] = None, to: Optional[Union[Account, Address, str]] = None, value: Union[int, str] = 0, gas_limit: Optional[Union[int, Literal["max"], Literal["auto"]]] = None, request_type: RequestType = 'tx', gas_price: Optional[Union[int, str]] = None, max_fee_per_gas: Optional[Union[int, str]] = None, max_priority_fee_per_gas: Optional[Union[int, str]] = None, access_list: Optional[Union[Dict[Union[Account, Address, str], List[int]], Literal["auto"]]] = None, type: Optional[int] = None, block: Optional[Union[int, Literal["latest"], Literal["pending"], Literal["earliest"], Literal["safe"], Literal["finalized"]]] = None, confirmations: Optional[int] = None) -> Union[None, TransactionAbc[None], int, Tuple[Dict[Address, List[int]], int]]:
        """
        [Source code](file:///Users/dteiml/p/hacker-dom/woke-uniswap-v2/woke_tests/mocks/Factory.sol#13)

        Args:
            token0: address
            token1: address
        """
        return self._execute(self.chain, request_type, "c9c65396", [token0, token1], True if request_type == "tx" else False, NoneType, from_, to if to is not None else str(self.address), value, gas_limit, gas_price, max_fee_per_gas, max_priority_fee_per_gas, access_list, type, block, confirmations)

Factory.feeTo.selector = b'\x01~~X'
Factory.createPair.selector = b'\xc9\xc6S\x96'
